/* A Bison parser, made by GNU Bison 1.875c.  */

/* Skeleton parser for Yacc-like parsing with Bison,
   Copyright (C) 1984, 1989, 1990, 2000, 2001, 2002, 2003 Free Software Foundation, Inc.

   This program is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation; either version 2, or (at your option)
   any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program; if not, write to the Free Software
   Foundation, Inc., 59 Temple Place - Suite 330,
   Boston, MA 02111-1307, USA.  */

/* As a special exception, when this file is copied by Bison into a
   Bison output file, you may use that output file without restriction.
   This special exception was added by the Free Software Foundation
   in version 1.24 of Bison.  */

/* Written by Richard Stallman by simplifying the original so called
   ``semantic'' parser.  */

/* All symbols defined below should begin with yy or YY, to avoid
   infringing on user name space.  This should be done even for local
   variables, as they might otherwise be expanded by user macros.
   There are some unavoidable exceptions within include files to
   define necessary library symbols; they are noted "INFRINGES ON
   USER NAME SPACE" below.  */

/* Identify Bison output.  */
#define YYBISON 1

/* Skeleton name.  */
#define YYSKELETON_NAME "yacc.c"

/* Pure parsers.  */
#define YYPURE 1

/* Using locations.  */
#define YYLSP_NEEDED 0

/* Tokens.  */
#ifndef YYTOKENTYPE
#define YYTOKENTYPE
/* Put the tokens into the symbol table, so that GDB and other debuggers
   know about them.  */
enum yytokentype
{
  END_OF_INPUT = 258,
  ABORT_SYM = 259,
  ACTION = 260,
  ADD = 261,
  ADDDATE_SYM = 262,
  AFTER_SYM = 263,
  AGAINST = 264,
  AGGREGATE_SYM = 265,
  ALGORITHM_SYM = 266,
  ALL = 267,
  ALTER = 268,
  ANALYZE_SYM = 269,
  AND_AND_SYM = 270,
  AND_SYM = 271,
  ANY_SYM = 272,
  AS = 273,
  ASC = 274,
  ASCII_SYM = 275,
  ASENSITIVE_SYM = 276,
  ATAN = 277,
  AUTO_INC = 278,
  AVG_ROW_LENGTH = 279,
  AVG_SYM = 280,
  BACKUP_SYM = 281,
  BEFORE_SYM = 282,
  BEGIN_SYM = 283,
  BENCHMARK_SYM = 284,
  BERKELEY_DB_SYM = 285,
  BIGINT = 286,
  BINARY = 287,
  BINLOG_SYM = 288,
  BIN_NUM = 289,
  BIT_AND = 290,
  BIT_OR = 291,
  BIT_SYM = 292,
  BIT_XOR = 293,
  BLOB_SYM = 294,
  BOOLEAN_SYM = 295,
  BOOL_SYM = 296,
  BOTH = 297,
  BTREE_SYM = 298,
  BY = 299,
  BYTE_SYM = 300,
  CACHE_SYM = 301,
  CALL_SYM = 302,
  CASCADE = 303,
  CASCADED = 304,
  CAST_SYM = 305,
  CHAIN_SYM = 306,
  CHANGE = 307,
  CHANGED = 308,
  CHARSET = 309,
  CHAR_SYM = 310,
  CHECKSUM_SYM = 311,
  CHECK_SYM = 312,
  CIPHER_SYM = 313,
  CLIENT_SYM = 314,
  CLOSE_SYM = 315,
  COALESCE = 316,
  COLLATE_SYM = 317,
  COLLATION_SYM = 318,
  COLUMNS = 319,
  COLUMN_SYM = 320,
  COMMENT_SYM = 321,
  COMMITTED_SYM = 322,
  COMMIT_SYM = 323,
  COMPACT_SYM = 324,
  COMPRESSED_SYM = 325,
  CONCAT = 326,
  CONCAT_WS = 327,
  CONCURRENT = 328,
  CONDITION_SYM = 329,
  CONNECTION_SYM = 330,
  CONSISTENT_SYM = 331,
  CONSTRAINT = 332,
  CONTAINS_SYM = 333,
  CONTINUE_SYM = 334,
  CONVERT_SYM = 335,
  CONVERT_TZ_SYM = 336,
  COUNT_SYM = 337,
  CREATE = 338,
  CROSS = 339,
  CUBE_SYM = 340,
  CURDATE = 341,
  CURRENT_USER = 342,
  CURSOR_SYM = 343,
  CURTIME = 344,
  DATABASE = 345,
  DATABASES = 346,
  DATA_SYM = 347,
  DATETIME = 348,
  DATE_ADD_INTERVAL = 349,
  DATE_SUB_INTERVAL = 350,
  DATE_SYM = 351,
  DAY_HOUR_SYM = 352,
  DAY_MICROSECOND_SYM = 353,
  DAY_MINUTE_SYM = 354,
  DAY_SECOND_SYM = 355,
  DAY_SYM = 356,
  DEALLOCATE_SYM = 357,
  DECIMAL_NUM = 358,
  DECIMAL_SYM = 359,
  DECLARE_SYM = 360,
  DECODE_SYM = 361,
  DEFAULT = 362,
  DEFINER_SYM = 363,
  DELAYED_SYM = 364,
  DELAY_KEY_WRITE_SYM = 365,
  DELETE_SYM = 366,
  DESC = 367,
  DESCRIBE = 368,
  DES_DECRYPT_SYM = 369,
  DES_ENCRYPT_SYM = 370,
  DES_KEY_FILE = 371,
  DETERMINISTIC_SYM = 372,
  DIRECTORY_SYM = 373,
  DISABLE_SYM = 374,
  DISCARD = 375,
  DISTINCT = 376,
  DIV_SYM = 377,
  DOUBLE_SYM = 378,
  DO_SYM = 379,
  DROP = 380,
  DUAL_SYM = 381,
  DUMPFILE = 382,
  DUPLICATE_SYM = 383,
  DYNAMIC_SYM = 384,
  EACH_SYM = 385,
  ELSEIF_SYM = 386,
  ELT_FUNC = 387,
  ENABLE_SYM = 388,
  ENCLOSED = 389,
  ENCODE_SYM = 390,
  ENCRYPT = 391,
  END = 392,
  ENGINES_SYM = 393,
  ENGINE_SYM = 394,
  ENUM = 395,
  EQ = 396,
  EQUAL_SYM = 397,
  ERRORS = 398,
  ESCAPED = 399,
  ESCAPE_SYM = 400,
  EVENTS_SYM = 401,
  EXECUTE_SYM = 402,
  EXISTS = 403,
  EXIT_SYM = 404,
  EXPANSION_SYM = 405,
  EXPORT_SET = 406,
  EXTENDED_SYM = 407,
  EXTRACT_SYM = 408,
  FALSE_SYM = 409,
  FAST_SYM = 410,
  FETCH_SYM = 411,
  FIELD_FUNC = 412,
  FILE_SYM = 413,
  FIRST_SYM = 414,
  FIXED_SYM = 415,
  FLOAT_NUM = 416,
  FLOAT_SYM = 417,
  FLUSH_SYM = 418,
  FORCE_SYM = 419,
  FOREIGN = 420,
  FORMAT_SYM = 421,
  FOR_SYM = 422,
  FOUND_SYM = 423,
  FRAC_SECOND_SYM = 424,
  FROM = 425,
  FROM_UNIXTIME = 426,
  FULL = 427,
  FULLTEXT_SYM = 428,
  FUNCTION_SYM = 429,
  FUNC_ARG0 = 430,
  FUNC_ARG1 = 431,
  FUNC_ARG2 = 432,
  FUNC_ARG3 = 433,
  GE = 434,
  GEOMCOLLFROMTEXT = 435,
  GEOMETRYCOLLECTION = 436,
  GEOMETRY_SYM = 437,
  GEOMFROMTEXT = 438,
  GEOMFROMWKB = 439,
  GET_FORMAT = 440,
  GLOBAL_SYM = 441,
  GOTO_SYM = 442,
  GRANT = 443,
  GRANTS = 444,
  GREATEST_SYM = 445,
  GROUP = 446,
  GROUP_CONCAT_SYM = 447,
  GROUP_UNIQUE_USERS = 448,
  GT_SYM = 449,
  HANDLER_SYM = 450,
  HASH_SYM = 451,
  HAVING = 452,
  HELP_SYM = 453,
  HEX_NUM = 454,
  HIGH_PRIORITY = 455,
  HOSTS_SYM = 456,
  HOUR_MICROSECOND_SYM = 457,
  HOUR_MINUTE_SYM = 458,
  HOUR_SECOND_SYM = 459,
  HOUR_SYM = 460,
  IDENT = 461,
  IDENTIFIED_SYM = 462,
  IDENT_QUOTED = 463,
  IF = 464,
  IGNORE_SYM = 465,
  IMPORT = 466,
  INDEXES = 467,
  INDEX_SYM = 468,
  INFILE = 469,
  INNER_SYM = 470,
  INNOBASE_SYM = 471,
  INOUT_SYM = 472,
  INSENSITIVE_SYM = 473,
  INSERT = 474,
  INSERT_METHOD = 475,
  INTERVAL_SYM = 476,
  INTO = 477,
  INT_SYM = 478,
  INVOKER_SYM = 479,
  IN_SYM = 480,
  IS = 481,
  ISOLATION = 482,
  ISSUER_SYM = 483,
  ITERATE_SYM = 484,
  JOIN_SYM = 485,
  KEYS = 486,
  KEY_SYM = 487,
  KILL_SYM = 488,
  LABEL_SYM = 489,
  LANGUAGE_SYM = 490,
  LAST_INSERT_ID = 491,
  LAST_SYM = 492,
  LE = 493,
  LEADING = 494,
  LEAST_SYM = 495,
  LEAVES = 496,
  LEAVE_SYM = 497,
  LEFT = 498,
  LEVEL_SYM = 499,
  LEX_HOSTNAME = 500,
  LIKE = 501,
  LIMIT = 502,
  LINEFROMTEXT = 503,
  LINES = 504,
  LINESTRING = 505,
  LOAD = 506,
  LOCAL_SYM = 507,
  LOCATE = 508,
  LOCATOR_SYM = 509,
  LOCKS_SYM = 510,
  LOCK_SYM = 511,
  LOGS_SYM = 512,
  LOG_SYM = 513,
  LONGBLOB = 514,
  LONGTEXT = 515,
  LONG_NUM = 516,
  LONG_SYM = 517,
  LOOP_SYM = 518,
  LOW_PRIORITY = 519,
  LT = 520,
  MAKE_SET_SYM = 521,
  MASTER_CONNECT_RETRY_SYM = 522,
  MASTER_HOST_SYM = 523,
  MASTER_LOG_FILE_SYM = 524,
  MASTER_LOG_POS_SYM = 525,
  MASTER_PASSWORD_SYM = 526,
  MASTER_PORT_SYM = 527,
  MASTER_POS_WAIT = 528,
  MASTER_SERVER_ID_SYM = 529,
  MASTER_SSL_CAPATH_SYM = 530,
  MASTER_SSL_CA_SYM = 531,
  MASTER_SSL_CERT_SYM = 532,
  MASTER_SSL_CIPHER_SYM = 533,
  MASTER_SSL_KEY_SYM = 534,
  MASTER_SSL_SYM = 535,
  MASTER_SYM = 536,
  MASTER_USER_SYM = 537,
  MATCH = 538,
  MAX_CONNECTIONS_PER_HOUR = 539,
  MAX_QUERIES_PER_HOUR = 540,
  MAX_ROWS = 541,
  MAX_SYM = 542,
  MAX_UPDATES_PER_HOUR = 543,
  MAX_USER_CONNECTIONS_SYM = 544,
  MEDIUMBLOB = 545,
  MEDIUMINT = 546,
  MEDIUMTEXT = 547,
  MEDIUM_SYM = 548,
  MERGE_SYM = 549,
  MICROSECOND_SYM = 550,
  MIGRATE_SYM = 551,
  MINUTE_MICROSECOND_SYM = 552,
  MINUTE_SECOND_SYM = 553,
  MINUTE_SYM = 554,
  MIN_ROWS = 555,
  MIN_SYM = 556,
  MLINEFROMTEXT = 557,
  MODE_SYM = 558,
  MODIFIES_SYM = 559,
  MODIFY_SYM = 560,
  MOD_SYM = 561,
  MONTH_SYM = 562,
  MPOINTFROMTEXT = 563,
  MPOLYFROMTEXT = 564,
  MULTILINESTRING = 565,
  MULTIPOINT = 566,
  MULTIPOLYGON = 567,
  MUTEX_SYM = 568,
  NAMES_SYM = 569,
  NAME_SYM = 570,
  NATIONAL_SYM = 571,
  NATURAL = 572,
  NCHAR_STRING = 573,
  NCHAR_SYM = 574,
  NDBCLUSTER_SYM = 575,
  NE = 576,
  NEW_SYM = 577,
  NEXT_SYM = 578,
  NONE_SYM = 579,
  NOT2_SYM = 580,
  NOT_SYM = 581,
  NOW_SYM = 582,
  NO_SYM = 583,
  NO_WRITE_TO_BINLOG = 584,
  NULL_SYM = 585,
  NUM = 586,
  NUMERIC_SYM = 587,
  NVARCHAR_SYM = 588,
  OFFSET_SYM = 589,
  OLD_PASSWORD = 590,
  ON = 591,
  ONE_SHOT_SYM = 592,
  ONE_SYM = 593,
  OPEN_SYM = 594,
  OPTIMIZE = 595,
  OPTION = 596,
  OPTIONALLY = 597,
  OR2_SYM = 598,
  ORDER_SYM = 599,
  OR_OR_SYM = 600,
  OR_SYM = 601,
  OUTER = 602,
  OUTFILE = 603,
  OUT_SYM = 604,
  PACK_KEYS_SYM = 605,
  PARTIAL = 606,
  PASSWORD = 607,
  PARAM_MARKER = 608,
  PHASE_SYM = 609,
  POINTFROMTEXT = 610,
  POINT_SYM = 611,
  POLYFROMTEXT = 612,
  POLYGON = 613,
  POSITION_SYM = 614,
  PRECISION = 615,
  PREPARE_SYM = 616,
  PREV_SYM = 617,
  PRIMARY_SYM = 618,
  PRIVILEGES = 619,
  PROCEDURE = 620,
  PROCESS = 621,
  PROCESSLIST_SYM = 622,
  PURGE = 623,
  QUARTER_SYM = 624,
  QUERY_SYM = 625,
  QUICK = 626,
  RAID_0_SYM = 627,
  RAID_CHUNKS = 628,
  RAID_CHUNKSIZE = 629,
  RAID_STRIPED_SYM = 630,
  RAID_TYPE = 631,
  RAND = 632,
  READS_SYM = 633,
  READ_SYM = 634,
  REAL = 635,
  RECOVER_SYM = 636,
  REDUNDANT_SYM = 637,
  REFERENCES = 638,
  REGEXP = 639,
  RELAY_LOG_FILE_SYM = 640,
  RELAY_LOG_POS_SYM = 641,
  RELAY_THREAD = 642,
  RELEASE_SYM = 643,
  RELOAD = 644,
  RENAME = 645,
  REPAIR = 646,
  REPEATABLE_SYM = 647,
  REPEAT_SYM = 648,
  REPLACE = 649,
  REPLICATION = 650,
  REQUIRE_SYM = 651,
  RESET_SYM = 652,
  RESOURCES = 653,
  RESTORE_SYM = 654,
  RESTRICT = 655,
  RESUME_SYM = 656,
  RETURNS_SYM = 657,
  RETURN_SYM = 658,
  REVOKE = 659,
  RIGHT = 660,
  ROLLBACK_SYM = 661,
  ROLLUP_SYM = 662,
  ROUND = 663,
  ROUTINE_SYM = 664,
  ROWS_SYM = 665,
  ROW_COUNT_SYM = 666,
  ROW_FORMAT_SYM = 667,
  ROW_SYM = 668,
  RTREE_SYM = 669,
  SAVEPOINT_SYM = 670,
  SECOND_MICROSECOND_SYM = 671,
  SECOND_SYM = 672,
  SECURITY_SYM = 673,
  SELECT_SYM = 674,
  SENSITIVE_SYM = 675,
  SEPARATOR_SYM = 676,
  SERIALIZABLE_SYM = 677,
  SERIAL_SYM = 678,
  SESSION_SYM = 679,
  SET = 680,
  SET_VAR = 681,
  SHARE_SYM = 682,
  SHIFT_LEFT = 683,
  SHIFT_RIGHT = 684,
  SHOW = 685,
  SHUTDOWN = 686,
  SIGNED_SYM = 687,
  SIMPLE_SYM = 688,
  SLAVE = 689,
  SMALLINT = 690,
  SNAPSHOT_SYM = 691,
  SOUNDS_SYM = 692,
  SPATIAL_SYM = 693,
  SPECIFIC_SYM = 694,
  SQLEXCEPTION_SYM = 695,
  SQLSTATE_SYM = 696,
  SQLWARNING_SYM = 697,
  SQL_BIG_RESULT = 698,
  SQL_BUFFER_RESULT = 699,
  SQL_CACHE_SYM = 700,
  SQL_CALC_FOUND_ROWS = 701,
  SQL_NO_CACHE_SYM = 702,
  SQL_SMALL_RESULT = 703,
  SQL_SYM = 704,
  SQL_THREAD = 705,
  SSL_SYM = 706,
  STARTING = 707,
  START_SYM = 708,
  STATUS_SYM = 709,
  STD_SYM = 710,
  STDDEV_SAMP_SYM = 711,
  STOP_SYM = 712,
  STORAGE_SYM = 713,
  STRAIGHT_JOIN = 714,
  STRING_SYM = 715,
  SUBDATE_SYM = 716,
  SUBJECT_SYM = 717,
  SUBSTRING = 718,
  SUBSTRING_INDEX = 719,
  SUM_SYM = 720,
  SUPER_SYM = 721,
  SUSPEND_SYM = 722,
  SYSDATE = 723,
  TABLES = 724,
  TABLESPACE = 725,
  TABLE_SYM = 726,
  TEMPORARY = 727,
  TEMPTABLE_SYM = 728,
  TERMINATED = 729,
  TEXT_STRING = 730,
  TEXT_SYM = 731,
  TIMESTAMP = 732,
  TIMESTAMP_ADD = 733,
  TIMESTAMP_DIFF = 734,
  TIME_SYM = 735,
  TINYBLOB = 736,
  TINYINT = 737,
  TINYTEXT = 738,
  TO_SYM = 739,
  TRAILING = 740,
  TRANSACTION_SYM = 741,
  TRIGGER_SYM = 742,
  TRIGGERS_SYM = 743,
  TRIM = 744,
  TRUE_SYM = 745,
  TRUNCATE_SYM = 746,
  TYPES_SYM = 747,
  TYPE_SYM = 748,
  UDF_RETURNS_SYM = 749,
  UDF_SONAME_SYM = 750,
  ULONGLONG_NUM = 751,
  UNCOMMITTED_SYM = 752,
  UNDEFINED_SYM = 753,
  UNDERSCORE_CHARSET = 754,
  UNDO_SYM = 755,
  UNICODE_SYM = 756,
  UNION_SYM = 757,
  UNIQUE_SYM = 758,
  UNIQUE_USERS = 759,
  UNIX_TIMESTAMP = 760,
  UNKNOWN_SYM = 761,
  UNLOCK_SYM = 762,
  UNSIGNED = 763,
  UNTIL_SYM = 764,
  UPDATE_SYM = 765,
  USAGE = 766,
  USER = 767,
  USE_FRM = 768,
  USE_SYM = 769,
  USING = 770,
  UTC_DATE_SYM = 771,
  UTC_TIMESTAMP_SYM = 772,
  UTC_TIME_SYM = 773,
  VAR_SAMP_SYM = 774,
  VALUES = 775,
  VALUE_SYM = 776,
  VARBINARY = 777,
  VARCHAR = 778,
  VARIABLES = 779,
  VARIANCE_SYM = 780,
  VARYING = 781,
  VIEW_SYM = 782,
  WARNINGS = 783,
  WEEK_SYM = 784,
  WHEN_SYM = 785,
  WHERE = 786,
  WHILE_SYM = 787,
  WITH = 788,
  WORK_SYM = 789,
  WRITE_SYM = 790,
  X509_SYM = 791,
  XA_SYM = 792,
  XOR = 793,
  YEARWEEK = 794,
  YEAR_MONTH_SYM = 795,
  YEAR_SYM = 796,
  ZEROFILL = 797,
  TABLE_REF_PRIORITY = 798,
  ELSE = 799,
  THEN_SYM = 800,
  CASE_SYM = 801,
  BETWEEN_SYM = 802,
  NEG = 803
};
#endif
#define END_OF_INPUT 258
#define ABORT_SYM 259
#define ACTION 260
#define ADD 261
#define ADDDATE_SYM 262
#define AFTER_SYM 263
#define AGAINST 264
#define AGGREGATE_SYM 265
#define ALGORITHM_SYM 266
#define ALL 267
#define ALTER 268
#define ANALYZE_SYM 269
#define AND_AND_SYM 270
#define AND_SYM 271
#define ANY_SYM 272
#define AS 273
#define ASC 274
#define ASCII_SYM 275
#define ASENSITIVE_SYM 276
#define ATAN 277
#define AUTO_INC 278
#define AVG_ROW_LENGTH 279
#define AVG_SYM 280
#define BACKUP_SYM 281
#define BEFORE_SYM 282
#define BEGIN_SYM 283
#define BENCHMARK_SYM 284
#define BERKELEY_DB_SYM 285
#define BIGINT 286
#define BINARY 287
#define BINLOG_SYM 288
#define BIN_NUM 289
#define BIT_AND 290
#define BIT_OR 291
#define BIT_SYM 292
#define BIT_XOR 293
#define BLOB_SYM 294
#define BOOLEAN_SYM 295
#define BOOL_SYM 296
#define BOTH 297
#define BTREE_SYM 298
#define BY 299
#define BYTE_SYM 300
#define CACHE_SYM 301
#define CALL_SYM 302
#define CASCADE 303
#define CASCADED 304
#define CAST_SYM 305
#define CHAIN_SYM 306
#define CHANGE 307
#define CHANGED 308
#define CHARSET 309
#define CHAR_SYM 310
#define CHECKSUM_SYM 311
#define CHECK_SYM 312
#define CIPHER_SYM 313
#define CLIENT_SYM 314
#define CLOSE_SYM 315
#define COALESCE 316
#define COLLATE_SYM 317
#define COLLATION_SYM 318
#define COLUMNS 319
#define COLUMN_SYM 320
#define COMMENT_SYM 321
#define COMMITTED_SYM 322
#define COMMIT_SYM 323
#define COMPACT_SYM 324
#define COMPRESSED_SYM 325
#define CONCAT 326
#define CONCAT_WS 327
#define CONCURRENT 328
#define CONDITION_SYM 329
#define CONNECTION_SYM 330
#define CONSISTENT_SYM 331
#define CONSTRAINT 332
#define CONTAINS_SYM 333
#define CONTINUE_SYM 334
#define CONVERT_SYM 335
#define CONVERT_TZ_SYM 336
#define COUNT_SYM 337
#define CREATE 338
#define CROSS 339
#define CUBE_SYM 340
#define CURDATE 341
#define CURRENT_USER 342
#define CURSOR_SYM 343
#define CURTIME 344
#define DATABASE 345
#define DATABASES 346
#define DATA_SYM 347
#define DATETIME 348
#define DATE_ADD_INTERVAL 349
#define DATE_SUB_INTERVAL 350
#define DATE_SYM 351
#define DAY_HOUR_SYM 352
#define DAY_MICROSECOND_SYM 353
#define DAY_MINUTE_SYM 354
#define DAY_SECOND_SYM 355
#define DAY_SYM 356
#define DEALLOCATE_SYM 357
#define DECIMAL_NUM 358
#define DECIMAL_SYM 359
#define DECLARE_SYM 360
#define DECODE_SYM 361
#define DEFAULT 362
#define DEFINER_SYM 363
#define DELAYED_SYM 364
#define DELAY_KEY_WRITE_SYM 365
#define DELETE_SYM 366
#define DESC 367
#define DESCRIBE 368
#define DES_DECRYPT_SYM 369
#define DES_ENCRYPT_SYM 370
#define DES_KEY_FILE 371
#define DETERMINISTIC_SYM 372
#define DIRECTORY_SYM 373
#define DISABLE_SYM 374
#define DISCARD 375
#define DISTINCT 376
#define DIV_SYM 377
#define DOUBLE_SYM 378
#define DO_SYM 379
#define DROP 380
#define DUAL_SYM 381
#define DUMPFILE 382
#define DUPLICATE_SYM 383
#define DYNAMIC_SYM 384
#define EACH_SYM 385
#define ELSEIF_SYM 386
#define ELT_FUNC 387
#define ENABLE_SYM 388
#define ENCLOSED 389
#define ENCODE_SYM 390
#define ENCRYPT 391
#define END 392
#define ENGINES_SYM 393
#define ENGINE_SYM 394
#define ENUM 395
#define EQ 396
#define EQUAL_SYM 397
#define ERRORS 398
#define ESCAPED 399
#define ESCAPE_SYM 400
#define EVENTS_SYM 401
#define EXECUTE_SYM 402
#define EXISTS 403
#define EXIT_SYM 404
#define EXPANSION_SYM 405
#define EXPORT_SET 406
#define EXTENDED_SYM 407
#define EXTRACT_SYM 408
#define FALSE_SYM 409
#define FAST_SYM 410
#define FETCH_SYM 411
#define FIELD_FUNC 412
#define FILE_SYM 413
#define FIRST_SYM 414
#define FIXED_SYM 415
#define FLOAT_NUM 416
#define FLOAT_SYM 417
#define FLUSH_SYM 418
#define FORCE_SYM 419
#define FOREIGN 420
#define FORMAT_SYM 421
#define FOR_SYM 422
#define FOUND_SYM 423
#define FRAC_SECOND_SYM 424
#define FROM 425
#define FROM_UNIXTIME 426
#define FULL 427
#define FULLTEXT_SYM 428
#define FUNCTION_SYM 429
#define FUNC_ARG0 430
#define FUNC_ARG1 431
#define FUNC_ARG2 432
#define FUNC_ARG3 433
#define GE 434
#define GEOMCOLLFROMTEXT 435
#define GEOMETRYCOLLECTION 436
#define GEOMETRY_SYM 437
#define GEOMFROMTEXT 438
#define GEOMFROMWKB 439
#define GET_FORMAT 440
#define GLOBAL_SYM 441
#define GOTO_SYM 442
#define GRANT 443
#define GRANTS 444
#define GREATEST_SYM 445
#define GROUP 446
#define GROUP_CONCAT_SYM 447
#define GROUP_UNIQUE_USERS 448
#define GT_SYM 449
#define HANDLER_SYM 450
#define HASH_SYM 451
#define HAVING 452
#define HELP_SYM 453
#define HEX_NUM 454
#define HIGH_PRIORITY 455
#define HOSTS_SYM 456
#define HOUR_MICROSECOND_SYM 457
#define HOUR_MINUTE_SYM 458
#define HOUR_SECOND_SYM 459
#define HOUR_SYM 460
#define IDENT 461
#define IDENTIFIED_SYM 462
#define IDENT_QUOTED 463
#define IF 464
#define IGNORE_SYM 465
#define IMPORT 466
#define INDEXES 467
#define INDEX_SYM 468
#define INFILE 469
#define INNER_SYM 470
#define INNOBASE_SYM 471
#define INOUT_SYM 472
#define INSENSITIVE_SYM 473
#define INSERT 474
#define INSERT_METHOD 475
#define INTERVAL_SYM 476
#define INTO 477
#define INT_SYM 478
#define INVOKER_SYM 479
#define IN_SYM 480
#define IS 481
#define ISOLATION 482
#define ISSUER_SYM 483
#define ITERATE_SYM 484
#define JOIN_SYM 485
#define KEYS 486
#define KEY_SYM 487
#define KILL_SYM 488
#define LABEL_SYM 489
#define LANGUAGE_SYM 490
#define LAST_INSERT_ID 491
#define LAST_SYM 492
#define LE 493
#define LEADING 494
#define LEAST_SYM 495
#define LEAVES 496
#define LEAVE_SYM 497
#define LEFT 498
#define LEVEL_SYM 499
#define LEX_HOSTNAME 500
#define LIKE 501
#define LIMIT 502
#define LINEFROMTEXT 503
#define LINES 504
#define LINESTRING 505
#define LOAD 506
#define LOCAL_SYM 507
#define LOCATE 508
#define LOCATOR_SYM 509
#define LOCKS_SYM 510
#define LOCK_SYM 511
#define LOGS_SYM 512
#define LOG_SYM 513
#define LONGBLOB 514
#define LONGTEXT 515
#define LONG_NUM 516
#define LONG_SYM 517
#define LOOP_SYM 518
#define LOW_PRIORITY 519
#define LT 520
#define MAKE_SET_SYM 521
#define MASTER_CONNECT_RETRY_SYM 522
#define MASTER_HOST_SYM 523
#define MASTER_LOG_FILE_SYM 524
#define MASTER_LOG_POS_SYM 525
#define MASTER_PASSWORD_SYM 526
#define MASTER_PORT_SYM 527
#define MASTER_POS_WAIT 528
#define MASTER_SERVER_ID_SYM 529
#define MASTER_SSL_CAPATH_SYM 530
#define MASTER_SSL_CA_SYM 531
#define MASTER_SSL_CERT_SYM 532
#define MASTER_SSL_CIPHER_SYM 533
#define MASTER_SSL_KEY_SYM 534
#define MASTER_SSL_SYM 535
#define MASTER_SYM 536
#define MASTER_USER_SYM 537
#define MATCH 538
#define MAX_CONNECTIONS_PER_HOUR 539
#define MAX_QUERIES_PER_HOUR 540
#define MAX_ROWS 541
#define MAX_SYM 542
#define MAX_UPDATES_PER_HOUR 543
#define MAX_USER_CONNECTIONS_SYM 544
#define MEDIUMBLOB 545
#define MEDIUMINT 546
#define MEDIUMTEXT 547
#define MEDIUM_SYM 548
#define MERGE_SYM 549
#define MICROSECOND_SYM 550
#define MIGRATE_SYM 551
#define MINUTE_MICROSECOND_SYM 552
#define MINUTE_SECOND_SYM 553
#define MINUTE_SYM 554
#define MIN_ROWS 555
#define MIN_SYM 556
#define MLINEFROMTEXT 557
#define MODE_SYM 558
#define MODIFIES_SYM 559
#define MODIFY_SYM 560
#define MOD_SYM 561
#define MONTH_SYM 562
#define MPOINTFROMTEXT 563
#define MPOLYFROMTEXT 564
#define MULTILINESTRING 565
#define MULTIPOINT 566
#define MULTIPOLYGON 567
#define MUTEX_SYM 568
#define NAMES_SYM 569
#define NAME_SYM 570
#define NATIONAL_SYM 571
#define NATURAL 572
#define NCHAR_STRING 573
#define NCHAR_SYM 574
#define NDBCLUSTER_SYM 575
#define NE 576
#define NEW_SYM 577
#define NEXT_SYM 578
#define NONE_SYM 579
#define NOT2_SYM 580
#define NOT_SYM 581
#define NOW_SYM 582
#define NO_SYM 583
#define NO_WRITE_TO_BINLOG 584
#define NULL_SYM 585
#define NUM 586
#define NUMERIC_SYM 587
#define NVARCHAR_SYM 588
#define OFFSET_SYM 589
#define OLD_PASSWORD 590
#define ON 591
#define ONE_SHOT_SYM 592
#define ONE_SYM 593
#define OPEN_SYM 594
#define OPTIMIZE 595
#define OPTION 596
#define OPTIONALLY 597
#define OR2_SYM 598
#define ORDER_SYM 599
#define OR_OR_SYM 600
#define OR_SYM 601
#define OUTER 602
#define OUTFILE 603
#define OUT_SYM 604
#define PACK_KEYS_SYM 605
#define PARTIAL 606
#define PASSWORD 607
#define PARAM_MARKER 608
#define PHASE_SYM 609
#define POINTFROMTEXT 610
#define POINT_SYM 611
#define POLYFROMTEXT 612
#define POLYGON 613
#define POSITION_SYM 614
#define PRECISION 615
#define PREPARE_SYM 616
#define PREV_SYM 617
#define PRIMARY_SYM 618
#define PRIVILEGES 619
#define PROCEDURE 620
#define PROCESS 621
#define PROCESSLIST_SYM 622
#define PURGE 623
#define QUARTER_SYM 624
#define QUERY_SYM 625
#define QUICK 626
#define RAID_0_SYM 627
#define RAID_CHUNKS 628
#define RAID_CHUNKSIZE 629
#define RAID_STRIPED_SYM 630
#define RAID_TYPE 631
#define RAND 632
#define READS_SYM 633
#define READ_SYM 634
#define REAL 635
#define RECOVER_SYM 636
#define REDUNDANT_SYM 637
#define REFERENCES 638
#define REGEXP 639
#define RELAY_LOG_FILE_SYM 640
#define RELAY_LOG_POS_SYM 641
#define RELAY_THREAD 642
#define RELEASE_SYM 643
#define RELOAD 644
#define RENAME 645
#define REPAIR 646
#define REPEATABLE_SYM 647
#define REPEAT_SYM 648
#define REPLACE 649
#define REPLICATION 650
#define REQUIRE_SYM 651
#define RESET_SYM 652
#define RESOURCES 653
#define RESTORE_SYM 654
#define RESTRICT 655
#define RESUME_SYM 656
#define RETURNS_SYM 657
#define RETURN_SYM 658
#define REVOKE 659
#define RIGHT 660
#define ROLLBACK_SYM 661
#define ROLLUP_SYM 662
#define ROUND 663
#define ROUTINE_SYM 664
#define ROWS_SYM 665
#define ROW_COUNT_SYM 666
#define ROW_FORMAT_SYM 667
#define ROW_SYM 668
#define RTREE_SYM 669
#define SAVEPOINT_SYM 670
#define SECOND_MICROSECOND_SYM 671
#define SECOND_SYM 672
#define SECURITY_SYM 673
#define SELECT_SYM 674
#define SENSITIVE_SYM 675
#define SEPARATOR_SYM 676
#define SERIALIZABLE_SYM 677
#define SERIAL_SYM 678
#define SESSION_SYM 679
#define SET 680
#define SET_VAR 681
#define SHARE_SYM 682
#define SHIFT_LEFT 683
#define SHIFT_RIGHT 684
#define SHOW 685
#define SHUTDOWN 686
#define SIGNED_SYM 687
#define SIMPLE_SYM 688
#define SLAVE 689
#define SMALLINT 690
#define SNAPSHOT_SYM 691
#define SOUNDS_SYM 692
#define SPATIAL_SYM 693
#define SPECIFIC_SYM 694
#define SQLEXCEPTION_SYM 695
#define SQLSTATE_SYM 696
#define SQLWARNING_SYM 697
#define SQL_BIG_RESULT 698
#define SQL_BUFFER_RESULT 699
#define SQL_CACHE_SYM 700
#define SQL_CALC_FOUND_ROWS 701
#define SQL_NO_CACHE_SYM 702
#define SQL_SMALL_RESULT 703
#define SQL_SYM 704
#define SQL_THREAD 705
#define SSL_SYM 706
#define STARTING 707
#define START_SYM 708
#define STATUS_SYM 709
#define STD_SYM 710
#define STDDEV_SAMP_SYM 711
#define STOP_SYM 712
#define STORAGE_SYM 713
#define STRAIGHT_JOIN 714
#define STRING_SYM 715
#define SUBDATE_SYM 716
#define SUBJECT_SYM 717
#define SUBSTRING 718
#define SUBSTRING_INDEX 719
#define SUM_SYM 720
#define SUPER_SYM 721
#define SUSPEND_SYM 722
#define SYSDATE 723
#define TABLES 724
#define TABLESPACE 725
#define TABLE_SYM 726
#define TEMPORARY 727
#define TEMPTABLE_SYM 728
#define TERMINATED 729
#define TEXT_STRING 730
#define TEXT_SYM 731
#define TIMESTAMP 732
#define TIMESTAMP_ADD 733
#define TIMESTAMP_DIFF 734
#define TIME_SYM 735
#define TINYBLOB 736
#define TINYINT 737
#define TINYTEXT 738
#define TO_SYM 739
#define TRAILING 740
#define TRANSACTION_SYM 741
#define TRIGGER_SYM 742
#define TRIGGERS_SYM 743
#define TRIM 744
#define TRUE_SYM 745
#define TRUNCATE_SYM 746
#define TYPES_SYM 747
#define TYPE_SYM 748
#define UDF_RETURNS_SYM 749
#define UDF_SONAME_SYM 750
#define ULONGLONG_NUM 751
#define UNCOMMITTED_SYM 752
#define UNDEFINED_SYM 753
#define UNDERSCORE_CHARSET 754
#define UNDO_SYM 755
#define UNICODE_SYM 756
#define UNION_SYM 757
#define UNIQUE_SYM 758
#define UNIQUE_USERS 759
#define UNIX_TIMESTAMP 760
#define UNKNOWN_SYM 761
#define UNLOCK_SYM 762
#define UNSIGNED 763
#define UNTIL_SYM 764
#define UPDATE_SYM 765
#define USAGE 766
#define USER 767
#define USE_FRM 768
#define USE_SYM 769
#define USING 770
#define UTC_DATE_SYM 771
#define UTC_TIMESTAMP_SYM 772
#define UTC_TIME_SYM 773
#define VAR_SAMP_SYM 774
#define VALUES 775
#define VALUE_SYM 776
#define VARBINARY 777
#define VARCHAR 778
#define VARIABLES 779
#define VARIANCE_SYM 780
#define VARYING 781
#define VIEW_SYM 782
#define WARNINGS 783
#define WEEK_SYM 784
#define WHEN_SYM 785
#define WHERE 786
#define WHILE_SYM 787
#define WITH 788
#define WORK_SYM 789
#define WRITE_SYM 790
#define X509_SYM 791
#define XA_SYM 792
#define XOR 793
#define YEARWEEK 794
#define YEAR_MONTH_SYM 795
#define YEAR_SYM 796
#define ZEROFILL 797
#define TABLE_REF_PRIORITY 798
#define ELSE 799
#define THEN_SYM 800
#define CASE_SYM 801
#define BETWEEN_SYM 802
#define NEG 803

/* Copy the first part of user declarations.  */
#line 19 "sql_yacc.yy"

/* thd is passed as an arg to yyparse(), and subsequently to yylex().
** The type will be void*, so it must be  cast to (THD*) when used.
** Use the YYTHD macro for this.
*/
#define YYPARSE_PARAM yythd
#define YYLEX_PARAM yythd
#define YYTHD ((THD *)yythd)

#define MYSQL_YACC
#define YYINITDEPTH 100
#define YYMAXDEPTH 3200 /* Because of 64K stack */
#define Lex (YYTHD->lex)
#define Select Lex->current_select
#include "mysql_priv.h"
#include "slave.h"
#include "lex_symbol.h"
#include "item_create.h"
#include "sp_head.h"
#include "sp_pcontext.h"
#include "sp_rcontext.h"
#include "sp.h"
#include <myisam.h>
#include <myisammrg.h>

int yylex(void *yylval, void *yythd);

const LEX_STRING null_lex_str = {0, 0};

#define yyoverflow(A, B, C, D, E, F)   \
  {                                    \
    ulong val = *(F);                  \
    if (my_yyoverflow((B), (D), &val)) \
    {                                  \
      yyerror((char *)(A));            \
      return 2;                        \
    }                                  \
    else                               \
    {                                  \
      *(F) = (YYSIZE_T)val;            \
    }                                  \
  }

#define WARN_DEPRECATED(A, B)                                                                  \
  push_warning_printf(((THD *)yythd), MYSQL_ERROR::WARN_LEVEL_WARN, ER_WARN_DEPRECATED_SYNTAX, \
                      ER(ER_WARN_DEPRECATED_SYNTAX), (A), (B));

#define YYERROR_UNLESS(A)         \
  if (!(A))                       \
  {                               \
    yyerror(ER(ER_SYNTAX_ERROR)); \
    YYABORT;                      \
  }

/* Helper for parsing "IS [NOT] truth_value" */
inline Item *is_truth_value(Item *A, bool v1, bool v2)
{
  return new Item_func_if(create_func_ifnull(A, new Item_int((char *)(v2 ? "TRUE" : "FALSE"), v2, 1)),
                          new Item_int((char *)(v1 ? "TRUE" : "FALSE"), v1, 1),
                          new Item_int((char *)(v1 ? "FALSE" : "TRUE"), !v1, 1));
}

/* Enabling traces.  */
#ifndef YYDEBUG
#define YYDEBUG 1
#endif

/* Enabling verbose error messages.  */
#ifdef YYERROR_VERBOSE
#undef YYERROR_VERBOSE
#define YYERROR_VERBOSE 1
#else
#define YYERROR_VERBOSE 0
#endif

#if !defined(YYSTYPE) && !defined(YYSTYPE_IS_DECLARED)
#line 72 "sql_yacc.yy"
typedef union YYSTYPE
{
  int num;
  ulong ulong_num;
  ulonglong ulonglong_number;
  LEX_STRING lex_str;
  LEX_STRING *lex_str_ptr;
  LEX_SYMBOL symbol;
  Table_ident *table;
  char *simple_string;
  Item *item;
  Item_num *item_num;
  List<Item> *item_list;
  List<String> *string_list;
  String *string;
  key_part_spec *key_part;
  TABLE_LIST *table_list;
  udf_func *udf;
  LEX_USER *lex_user;
  struct sys_var_with_base variable;
  enum enum_var_type var_type;
  Key::Keytype key_type;
  enum ha_key_alg key_alg;
  enum db_type db_type;
  enum row_type row_type;
  enum ha_rkey_function ha_rkey_mode;
  enum enum_tx_isolation tx_isolation;
  enum Cast_target cast_type;
  enum Item_udftype udf_type;
  CHARSET_INFO *charset;
  thr_lock_type lock_type;
  interval_type interval, interval_time_st;
  timestamp_type date_time_type;
  st_select_lex *select_lex;
  chooser_compare_func_creator boolfunc2creator;
  struct sp_cond_type *spcondtype;
  struct
  {
    int vars, conds, hndlrs, curs;
  } spblock;
  sp_name *spname;
  struct st_lex *lex;
} YYSTYPE;
/* Line 191 of yacc.c.  */
#line 1266 "sql_yacc.cc"
#define yystype YYSTYPE /* obsolescent; will be withdrawn */
#define YYSTYPE_IS_DECLARED 1
#define YYSTYPE_IS_TRIVIAL 1
#endif

/* Copy the second part of user declarations.  */
#line 112 "sql_yacc.yy"

bool my_yyoverflow(short **a, YYSTYPE **b, ulong *yystacksize);

/* Line 214 of yacc.c.  */
#line 1281 "sql_yacc.cc"

#if !defined(yyoverflow) || YYERROR_VERBOSE

#ifndef YYFREE
#define YYFREE free
#endif
#ifndef YYMALLOC
#define YYMALLOC malloc
#endif

/* The parser invokes alloca or malloc; define the necessary symbols.  */

#ifdef YYSTACK_USE_ALLOCA
#if YYSTACK_USE_ALLOCA
#define YYSTACK_ALLOC alloca
#endif
#else
#if defined(alloca) || defined(_ALLOCA_H)
#define YYSTACK_ALLOC alloca
#else
#ifdef __GNUC__
#define YYSTACK_ALLOC __builtin_alloca
#endif
#endif
#endif

#ifdef YYSTACK_ALLOC
/* Pacify GCC's `empty if-body' warning. */
#define YYSTACK_FREE(Ptr) \
  do                      \
  { /* empty */           \
    ;                     \
  } while (0)
#else
#if defined(__STDC__) || defined(__cplusplus)
#include <stdlib.h> /* INFRINGES ON USER NAME SPACE */
#define YYSIZE_T size_t
#endif
#define YYSTACK_ALLOC YYMALLOC
#define YYSTACK_FREE YYFREE
#endif
#endif /* ! defined (yyoverflow) || YYERROR_VERBOSE */

#if (!defined(yyoverflow) && (!defined(__cplusplus) || (defined(YYSTYPE_IS_TRIVIAL) && YYSTYPE_IS_TRIVIAL)))

/* A type that is properly aligned for any stack member.  */
union yyalloc
{
  short yyss;
  YYSTYPE yyvs;
};

/* The size of the maximum gap between one aligned stack and the next.  */
#define YYSTACK_GAP_MAXIMUM (sizeof(union yyalloc) - 1)

/* The size of an array large to enough to hold all stacks, each with
   N elements.  */
#define YYSTACK_BYTES(N) ((N) * (sizeof(short) + sizeof(YYSTYPE)) + YYSTACK_GAP_MAXIMUM)

/* Copy COUNT objects from FROM to TO.  The source and destination do
   not overlap.  */
#ifndef YYCOPY
#if defined(__GNUC__) && 1 < __GNUC__
#define YYCOPY(To, From, Count) __builtin_memcpy(To, From, (Count) * sizeof(*(From)))
#else
#define YYCOPY(To, From, Count)                                  \
  do                                                             \
  {                                                              \
    register YYSIZE_T yyi;                                       \
    for (yyi = 0; yyi < (Count); yyi++) (To)[yyi] = (From)[yyi]; \
  } while (0)
#endif
#endif

/* Relocate STACK from its old location to the new one.  The
   local variables YYSIZE and YYSTACKSIZE give the old and new number of
   elements in the stack, and YYPTR gives the new location of the
   stack.  Advance YYPTR to a properly aligned location for the next
   stack.  */
#define YYSTACK_RELOCATE(Stack)                                      \
  do                                                                 \
  {                                                                  \
    YYSIZE_T yynewbytes;                                             \
    YYCOPY(&yyptr->Stack, Stack, yysize);                            \
    Stack = &yyptr->Stack;                                           \
    yynewbytes = yystacksize * sizeof(*Stack) + YYSTACK_GAP_MAXIMUM; \
    yyptr += yynewbytes / sizeof(*yyptr);                            \
  } while (0)

#endif

#if defined(__STDC__) || defined(__cplusplus)
typedef signed char yysigned_char;
#else
typedef short yysigned_char;
#endif

/* YYFINAL -- State number of the termination state. */
#define YYFINAL 462
/* YYLAST -- Last index in YYTABLE.  */
#define YYLAST 42534

/* YYNTOKENS -- Number of terminals. */
#define YYNTOKENS 568
/* YYNNTS -- Number of nonterminals. */
#define YYNNTS 645
/* YYNRULES -- Number of rules. */
#define YYNRULES 1983
/* YYNRULES -- Number of states. */
#define YYNSTATES 3606

/* YYTRANSLATE(YYLEX) -- Bison symbol number corresponding to YYLEX.  */
#define YYUNDEFTOK 2
#define YYMAXUTOK 803

#define YYTRANSLATE(YYX) ((unsigned int)(YYX) <= YYMAXUTOK ? yytranslate[YYX] : YYUNDEFTOK)

/* YYTRANSLATE[YYLEX] -- Bison symbol number corresponding to YYLEX.  */
static const unsigned short yytranslate[] = {
    0,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,
    2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   561, 2,   2,   2,   554, 549, 2,   558, 559, 552, 551, 560, 550,
    565, 553, 2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   567, 566, 2,   2,   2,   2,   564, 2,   2,   2,   2,
    2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,
    2,   2,   555, 2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,
    2,   2,   2,   2,   2,   2,   2,   2,   562, 548, 563, 556, 2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,
    2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,
    2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,
    2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,
    2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,
    2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,
    2,   2,   2,   1,   2,   3,   4,   5,   6,   7,   8,   9,   10,  11,  12,  13,  14,  15,  16,  17,  18,  19,  20,
    21,  22,  23,  24,  25,  26,  27,  28,  29,  30,  31,  32,  33,  34,  35,  36,  37,  38,  39,  40,  41,  42,  43,
    44,  45,  46,  47,  48,  49,  50,  51,  52,  53,  54,  55,  56,  57,  58,  59,  60,  61,  62,  63,  64,  65,  66,
    67,  68,  69,  70,  71,  72,  73,  74,  75,  76,  77,  78,  79,  80,  81,  82,  83,  84,  85,  86,  87,  88,  89,
    90,  91,  92,  93,  94,  95,  96,  97,  98,  99,  100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112,
    113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135,
    136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158,
    159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181,
    182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204,
    205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227,
    228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250,
    251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273,
    274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296,
    297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319,
    320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342,
    343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365,
    366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388,
    389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411,
    412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434,
    435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457,
    458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480,
    481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503,
    504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526,
    527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 557};

#if YYDEBUG
/* YYPRHS[YYN] -- Index of the first RHS symbol of rule number YYN in
   YYRHS.  */
static const unsigned short yyprhs[] = {
    0,    0,    3,    5,    8,    10,   12,   14,   16,   18,   20,   22,   24,   26,   28,   30,   32,   34,   36,
    38,   40,   42,   44,   46,   48,   50,   52,   54,   56,   58,   60,   62,   64,   66,   68,   70,   72,   74,
    76,   78,   80,   82,   84,   86,   88,   90,   92,   94,   96,   98,   100,  102,  104,  106,  110,  112,  114,
    119,  121,  124,  125,  130,  131,  134,  138,  140,  143,  144,  148,  149,  155,  157,  161,  165,  169,  173,
    177,  181,  185,  189,  193,  197,  201,  205,  207,  211,  215,  219,  223,  224,  232,  233,  245,  246,  253,
    254,  261,  262,  263,  264,  265,  278,  279,  292,  293,  306,  311,  312,  316,  318,  323,  324,  325,  326,
    327,  328,  341,  342,  345,  346,  349,  352,  355,  358,  361,  365,  369,  371,  373,  375,  378,  382,  386,
    387,  394,  395,  397,  401,  403,  404,  406,  410,  412,  415,  416,  418,  422,  424,  428,  429,  431,  433,
    435,  436,  440,  443,  447,  448,  452,  453,  459,  465,  466,  474,  480,  481,  484,  486,  488,  490,  494,
    496,  500,  501,  503,  505,  507,  509,  512,  514,  516,  520,  521,  524,  525,  528,  529,  533,  538,  539,
    546,  547,  548,  557,  559,  560,  563,  566,  569,  572,  575,  578,  579,  586,  589,  590,  593,  595,  597,
    601,  602,  603,  604,  612,  613,  616,  619,  620,  621,  622,  630,  631,  634,  637,  638,  644,  645,  647,
    648,  654,  659,  660,  661,  670,  671,  679,  681,  683,  685,  687,  689,  692,  695,  698,  703,  708,  709,
    714,  715,  716,  722,  723,  731,  732,  733,  740,  741,  743,  744,  746,  748,  751,  753,  755,  756,  758,
    760,  763,  765,  766,  770,  771,  773,  775,  778,  780,  783,  787,  791,  795,  799,  803,  807,  811,  815,
    819,  823,  827,  831,  835,  839,  843,  847,  851,  857,  859,  861,  865,  870,  875,  879,  884,  889,  891,
    893,  895,  897,  899,  901,  903,  905,  907,  909,  911,  913,  915,  917,  920,  921,  923,  925,  927,  929,
    931,  933,  937,  939,  941,  944,  947,  954,  962,  971,  974,  977,  978,  980,  983,  984,  986,  989,  990,
    995,  999,  1003, 1007, 1009, 1014, 1016, 1018, 1024, 1027, 1033, 1036, 1041, 1043, 1049, 1055, 1060, 1064, 1066,
    1068, 1071, 1073, 1075, 1078, 1080, 1082, 1084, 1087, 1091, 1094, 1098, 1101, 1104, 1108, 1112, 1116, 1117, 1124,
    1125, 1132, 1135, 1137, 1139, 1141, 1143, 1145, 1147, 1149, 1151, 1153, 1155, 1157, 1160, 1163, 1165, 1168, 1170,
    1173, 1177, 1180, 1182, 1184, 1186, 1188, 1190, 1192, 1194, 1197, 1198, 1202, 1204, 1210, 1211, 1213, 1216, 1218,
    1220, 1222, 1224, 1225, 1229, 1230, 1232, 1233, 1235, 1238, 1240, 1242, 1245, 1248, 1253, 1255, 1259, 1262, 1264,
    1267, 1270, 1273, 1276, 1278, 1281, 1283, 1285, 1287, 1289, 1291, 1293, 1295, 1297, 1299, 1301, 1302, 1305, 1307,
    1309, 1310, 1312, 1313, 1316, 1318, 1321, 1325, 1328, 1329, 1331, 1332, 1334, 1336, 1339, 1340, 1342, 1343, 1348,
    1350, 1355, 1359, 1361, 1362, 1364, 1367, 1369, 1373, 1377, 1380, 1383, 1386, 1388, 1390, 1393, 1396, 1399, 1401,
    1404, 1407, 1410, 1413, 1415, 1417, 1418, 1420, 1422, 1424, 1426, 1427, 1429, 1431, 1433, 1434, 1437, 1440, 1442,
    1444, 1446, 1451, 1454, 1456, 1461, 1462, 1464, 1465, 1468, 1470, 1474, 1475, 1482, 1483, 1489, 1490, 1496, 1497,
    1503, 1504, 1516, 1517, 1519, 1520, 1523, 1526, 1528, 1532, 1535, 1539, 1542, 1547, 1548, 1555, 1556, 1557, 1566,
    1571, 1576, 1580, 1584, 1587, 1590, 1597, 1603, 1607, 1613, 1615, 1617, 1619, 1620, 1622, 1623, 1625, 1626, 1628,
    1630, 1631, 1634, 1636, 1637, 1639, 1641, 1643, 1644, 1650, 1654, 1655, 1661, 1665, 1669, 1670, 1674, 1675, 1678,
    1680, 1684, 1685, 1687, 1689, 1690, 1693, 1695, 1699, 1700, 1707, 1708, 1715, 1716, 1722, 1723, 1725, 1727, 1728,
    1735, 1736, 1738, 1740, 1743, 1745, 1747, 1749, 1750, 1757, 1758, 1764, 1765, 1767, 1769, 1772, 1774, 1776, 1778,
    1780, 1782, 1783, 1790, 1791, 1793, 1795, 1796, 1801, 1806, 1810, 1816, 1818, 1822, 1826, 1832, 1834, 1838, 1841,
    1843, 1845, 1846, 1853, 1855, 1859, 1863, 1864, 1867, 1868, 1873, 1874, 1877, 1879, 1882, 1887, 1891, 1897, 1900,
    1904, 1905, 1909, 1910, 1911, 1918, 1921, 1923, 1925, 1928, 1931, 1940, 1945, 1946, 1948, 1951, 1953, 1955, 1957,
    1959, 1961, 1963, 1965, 1967, 1969, 1971, 1973, 1974, 1977, 1982, 1986, 1988, 1990, 1995, 1996, 1997, 1999, 2001,
    2002, 2005, 2008, 2010, 2012, 2013, 2016, 2017, 2021, 2022, 2026, 2030, 2031, 2035, 2036, 2040, 2043, 2045, 2049,
    2054, 2058, 2063, 2067, 2072, 2074, 2078, 2083, 2087, 2091, 2096, 2098, 2104, 2111, 2115, 2120, 2126, 2133, 2138,
    2143, 2149, 2153, 2158, 2160, 2164, 2166, 2170, 2172, 2176, 2180, 2182, 2186, 2190, 2195, 2200, 2202, 2206, 2210,
    2214, 2218, 2222, 2224, 2228, 2230, 2232, 2234, 2236, 2238, 2240, 2242, 2244, 2246, 2248, 2250, 2252, 2254, 2256,
    2258, 2260, 2262, 2265, 2267, 2271, 2273, 2275, 2280, 2283, 2289, 2291, 2295, 2298, 2301, 2304, 2307, 2311, 2317,
    2324, 2327, 2329, 2334, 2342, 2347, 2350, 2357, 2364, 2371, 2378, 2383, 2388, 2392, 2397, 2404, 2413, 2420, 2429,
    2436, 2441, 2448, 2453, 2460, 2465, 2470, 2475, 2480, 2487, 2496, 2499, 2502, 2507, 2510, 2518, 2526, 2530, 2535,
    2540, 2547, 2554, 2559, 2566, 2573, 2580, 2585, 2592, 2597, 2604, 2613, 2624, 2637, 2644, 2649, 2656, 2663, 2665,
    2672, 2677, 2686, 2697, 2702, 2704, 2708, 2713, 2720, 2727, 2736, 2743, 2750, 2755, 2762, 2769, 2778, 2783, 2788,
    2795, 2800, 2803, 2808, 2813, 2818, 2825, 2830, 2835, 2839, 2848, 2855, 2860, 2867, 2871, 2878, 2887, 2892, 2901,
    2908, 2917, 2924, 2933, 2936, 2941, 2946, 2951, 2958, 2967, 2976, 2981, 2989, 2997, 3005, 3012, 3019, 3026, 3033,
    3040, 3047, 3048, 3054, 3065, 3069, 3074, 3078, 3081, 3084, 3087, 3092, 3099, 3104, 3109, 3116, 3123, 3130, 3137,
    3142, 3149, 3154, 3161, 3166, 3171, 3176, 3181, 3188, 3193, 3200, 3205, 3212, 3217, 3222, 3229, 3234, 3241, 3246,
    3253, 3258, 3263, 3270, 3275, 3282, 3283, 3287, 3291, 3292, 3294, 3295, 3298, 3300, 3304, 3309, 3314, 3320, 3325,
    3330, 3335, 3341, 3346, 3347, 3348, 3356, 3367, 3372, 3378, 3383, 3389, 3394, 3399, 3404, 3409, 3414, 3420, 3421,
    3430, 3431, 3433, 3434, 3437, 3438, 3440, 3441, 3445, 3448, 3452, 3455, 3457, 3460, 3462, 3465, 3467, 3469, 3471,
    3474, 3475, 3478, 3480, 3484, 3486, 3490, 3491, 3494, 3496, 3500, 3501, 3503, 3504, 3507, 3508, 3511, 3515, 3521,
    3523, 3524, 3527, 3529, 3531, 3535, 3539, 3543, 3544, 3551, 3552, 3559, 3560, 3569, 3570, 3579, 3580, 3591, 3598,
    3599, 3608, 3609, 3620, 3627, 3632, 3634, 3637, 3640, 3641, 3646, 3647, 3659, 3663, 3670, 3671, 3675, 3676, 3677,
    3683, 3684, 3686, 3687, 3689, 3690, 3693, 3696, 3699, 3700, 3706, 3707, 3709, 3713, 3715, 3717, 3719, 3723, 3725,
    3727, 3729, 3731, 3733, 3735, 3737, 3739, 3741, 3743, 3745, 3747, 3749, 3751, 3753, 3755, 3757, 3759, 3761, 3763,
    3765, 3767, 3769, 3771, 3773, 3775, 3776, 3778, 3780, 3781, 3784, 3785, 3787, 3788, 3789, 3793, 3794, 3795, 3799,
    3802, 3803, 3804, 3809, 3814, 3817, 3818, 3821, 3824, 3825, 3827, 3828, 3833, 3838, 3841, 3842, 3844, 3846, 3847,
    3849, 3850, 3852, 3855, 3857, 3861, 3865, 3867, 3869, 3871, 3873, 3874, 3877, 3879, 3881, 3883, 3885, 3887, 3889,
    3891, 3893, 3895, 3897, 3899, 3900, 3901, 3908, 3909, 3911, 3915, 3917, 3920, 3921, 3924, 3928, 3930, 3933, 3935,
    3936, 3943, 3947, 3950, 3951, 3955, 3962, 3963, 3970, 3975, 3980, 3985, 3990, 3996, 4000, 4002, 4006, 4008, 4009,
    4012, 4013, 4015, 4016, 4017, 4026, 4027, 4028, 4035, 4036, 4038, 4040, 4042, 4044, 4046, 4049, 4051, 4053, 4055,
    4059, 4064, 4065, 4069, 4073, 4075, 4078, 4081, 4082, 4086, 4087, 4093, 4097, 4099, 4103, 4105, 4109, 4111, 4113,
    4114, 4116, 4117, 4122, 4123, 4125, 4129, 4131, 4133, 4135, 4136, 4137, 4144, 4145, 4146, 4158, 4162, 4164, 4168,
    4172, 4174, 4178, 4179, 4181, 4182, 4187, 4188, 4195, 4196, 4202, 4203, 4210, 4212, 4216, 4220, 4226, 4227, 4230,
    4231, 4234, 4236, 4238, 4240, 4244, 4245, 4247, 4248, 4252, 4255, 4260, 4265, 4270, 4275, 4276, 4281, 4288, 4305,
    4308, 4311, 4312, 4319, 4325, 4328, 4331, 4334, 4336, 4342, 4348, 4351, 4354, 4358, 4361, 4364, 4367, 4371, 4374,
    4377, 4380, 4382, 4384, 4388, 4393, 4397, 4401, 4404, 4407, 4411, 4415, 4419, 4423, 4425, 4427, 4429, 4431, 4432,
    4434, 4435, 4438, 4439, 4441, 4443, 4445, 4446, 4449, 4450, 4453, 4454, 4457, 4460, 4461, 4466, 4467, 4472, 4474,
    4476, 4477, 4479, 4480, 4482, 4484, 4485, 4490, 4494, 4496, 4497, 4501, 4506, 4509, 4511, 4513, 4515, 4517, 4519,
    4521, 4523, 4525, 4526, 4528, 4529, 4533, 4537, 4539, 4541, 4543, 4546, 4547, 4551, 4555, 4558, 4561, 4565, 4566,
    4568, 4570, 4573, 4574, 4579, 4585, 4586, 4587, 4588, 4605, 4608, 4609, 4611, 4612, 4614, 4616, 4617, 4619, 4621,
    4622, 4625, 4628, 4630, 4634, 4639, 4643, 4647, 4648, 4651, 4654, 4656, 4660, 4664, 4665, 4669, 4670, 4674, 4677,
    4681, 4683, 4685, 4688, 4689, 4692, 4694, 4696, 4699, 4702, 4704, 4706, 4708, 4710, 4712, 4715, 4718, 4720, 4722,
    4724, 4726, 4728, 4730, 4732, 4735, 4738, 4741, 4744, 4747, 4749, 4751, 4753, 4755, 4757, 4759, 4761, 4765, 4771,
    4773, 4775, 4777, 4779, 4781, 4785, 4790, 4796, 4798, 4804, 4808, 4811, 4813, 4817, 4820, 4822, 4824, 4826, 4828,
    4830, 4832, 4834, 4836, 4838, 4840, 4842, 4844, 4846, 4850, 4853, 4855, 4857, 4859, 4861, 4863, 4865, 4867, 4869,
    4871, 4873, 4875, 4877, 4879, 4881, 4883, 4885, 4887, 4889, 4891, 4893, 4895, 4897, 4899, 4901, 4903, 4905, 4907,
    4909, 4911, 4913, 4915, 4917, 4919, 4921, 4923, 4925, 4927, 4929, 4931, 4933, 4935, 4937, 4939, 4941, 4943, 4945,
    4947, 4949, 4951, 4953, 4955, 4957, 4959, 4961, 4963, 4965, 4967, 4969, 4971, 4973, 4975, 4977, 4979, 4981, 4983,
    4985, 4987, 4989, 4991, 4993, 4995, 4997, 4999, 5001, 5003, 5005, 5007, 5009, 5011, 5013, 5015, 5017, 5019, 5021,
    5023, 5025, 5027, 5029, 5031, 5033, 5035, 5037, 5039, 5041, 5043, 5045, 5047, 5049, 5051, 5053, 5055, 5057, 5059,
    5061, 5063, 5065, 5067, 5069, 5071, 5073, 5075, 5077, 5079, 5081, 5083, 5085, 5087, 5089, 5091, 5093, 5095, 5097,
    5099, 5101, 5103, 5105, 5107, 5109, 5111, 5113, 5115, 5117, 5119, 5121, 5123, 5125, 5127, 5129, 5131, 5133, 5135,
    5137, 5139, 5141, 5143, 5145, 5147, 5149, 5151, 5153, 5155, 5157, 5159, 5161, 5163, 5165, 5167, 5169, 5171, 5173,
    5175, 5177, 5179, 5181, 5183, 5185, 5187, 5189, 5191, 5193, 5195, 5197, 5199, 5201, 5203, 5205, 5207, 5209, 5211,
    5213, 5215, 5217, 5219, 5221, 5223, 5225, 5227, 5229, 5231, 5233, 5235, 5237, 5239, 5241, 5243, 5245, 5247, 5249,
    5251, 5253, 5255, 5257, 5259, 5261, 5263, 5265, 5267, 5269, 5271, 5273, 5275, 5277, 5279, 5281, 5283, 5285, 5287,
    5289, 5291, 5293, 5295, 5297, 5299, 5301, 5303, 5305, 5307, 5309, 5311, 5313, 5315, 5317, 5319, 5321, 5323, 5325,
    5327, 5329, 5331, 5333, 5335, 5337, 5339, 5341, 5343, 5345, 5347, 5348, 5353, 5354, 5356, 5358, 5362, 5363, 5366,
    5368, 5370, 5372, 5374, 5375, 5377, 5378, 5380, 5382, 5384, 5385, 5388, 5391, 5394, 5396, 5399, 5404, 5410, 5415,
    5422, 5425, 5429, 5433, 5437, 5443, 5445, 5449, 5453, 5456, 5459, 5462, 5464, 5466, 5471, 5476, 5478, 5480, 5482,
    5484, 5486, 5487, 5492, 5494, 5496, 5498, 5502, 5506, 5508, 5510, 5513, 5516, 5517, 5521, 5526, 5530, 5531, 5539,
    5541, 5544, 5546, 5548, 5550, 5552, 5554, 5556, 5557, 5563, 5565, 5567, 5569, 5571, 5573, 5577, 5584, 5591, 5598,
    5606, 5610, 5619, 5628, 5637, 5638, 5640, 5642, 5645, 5646, 5648, 5650, 5654, 5655, 5659, 5660, 5664, 5665, 5669,
    5670, 5674, 5676, 5678, 5680, 5682, 5684, 5686, 5688, 5690, 5692, 5694, 5696, 5699, 5702, 5704, 5708, 5711, 5714,
    5717, 5720, 5723, 5726, 5729, 5732, 5733, 5735, 5739, 5741, 5744, 5747, 5750, 5752, 5756, 5760, 5762, 5764, 5768,
    5770, 5774, 5779, 5785, 5787, 5788, 5792, 5796, 5798, 5800, 5801, 5804, 5807, 5810, 5813, 5814, 5817, 5820, 5822,
    5825, 5828, 5831, 5834, 5837, 5838, 5842, 5843, 5845, 5846, 5850, 5853, 5854, 5856, 5859, 5860, 5862, 5867, 5872,
    5878, 5881, 5885, 5886, 5888, 5889, 5894, 5895, 5897, 5899, 5900, 5903, 5906, 5908, 5909, 5911, 5913, 5917, 5919,
    5923, 5925, 5929, 5931, 5934, 5936, 5937, 5941, 5943, 5947, 5948, 5951, 5952, 5956, 5960, 5964, 5965, 5968, 5974,
    5975, 5979, 5983, 5984, 5988, 5993, 5998, 6003, 6008, 6012, 6017, 6021, 6024, 6026, 6030, 6036, 6038, 6040, 6041,
    6043, 6045, 6046, 6049, 6050, 6051, 6055, 6056};

/* YYRHS -- A `-1'-separated list of the rules' RHS. */
static const short yyrhs[] = {
    569,  0,    -1,   3,    -1,   570,  3,    -1,   571,  -1,   1172, -1,   763,  -1,   804,  -1,   794,  -1,   612,
    -1,   583,  -1,   806,  -1,   796,  -1,   1178, -1,   588,  -1,   572,  -1,   1019, -1,   1046, -1,   975,  -1,
    977,  -1,   576,  -1,   1052, -1,   1147, -1,   1138, -1,   581,  -1,   983,  -1,   1066, -1,   1069, -1,   1130,
    -1,   811,  -1,   819,  -1,   823,  -1,   574,  -1,   1062, -1,   1181, -1,   814,  -1,   799,  -1,   986,  -1,
    1058, -1,   792,  -1,   1145, -1,   1179, -1,   1180, -1,   831,  -1,   1113, -1,   1032, -1,   781,  -1,   784,
    -1,   1030, -1,   1136, -1,   1011, -1,   1068, -1,   1205, -1,   573,  361,  1107, -1,   102,  -1,   125,  -1,
    361,  1107, 170,  575,  -1,   1105, -1,   564,  1109, -1,   -1,   147,  1107, 577,  578,  -1,   -1,   515,  579,
    -1,   579,  560,  580,  -1,   580,  -1,   564,  1109, -1,   -1,   198,  582,  1109, -1,   -1,   52,   281,  484,
    584,  585,  -1,   586,  -1,   585,  560,  586,  -1,   268,  141,  1105, -1,   282,  141,  1105, -1,   271,  141,
    1105, -1,   272,  141,  962,  -1,   267,  141,  962,  -1,   280,  141,  962,  -1,   276,  141,  1105, -1,   275,
    141,  1105, -1,   277,  141,  1105, -1,   278,  141,  1105, -1,   279,  141,  1105, -1,   587,  -1,   269,  141,
    1105, -1,   270,  141,  963,  -1,   385,  141,  1105, -1,   386,  141,  962,  -1,   -1,   83,   681,  471,  684,
    1102, 589,  668,  -1,   -1,   83,   755,  213,  1107, 756,  336,  1102, 590,  558,  758,  559,  -1,   -1,   83,
    90,   684,  1107, 591,  678,  -1,   -1,   83,   696,  174,  600,  592,  601,  -1,   -1,   -1,   -1,   -1,   83,
    365,  600,  593,  558,  594,  619,  559,  595,  608,  596,  638,  -1,   -1,   83,   1200, 1201, 1202, 1203, 527,
    1102, 597,  1198, 18,   833,  1204, -1,   -1,   83,   487,  600,  666,  667,  336,  1102, 167,  130,  413,  598,
    638,  -1,   83,   512,  599,  1163, -1,   -1,   1107, 565,  1107, -1,   1107, -1,   402,  697,  495,  1105, -1,
    -1,   -1,   -1,   -1,   -1,   558,  602,  616,  559,  603,  402,  604,  708,  605,  608,  606,  638,  -1,   -1,
    607,  609,  -1,   -1,   608,  610,  -1,   66,   1105, -1,   235,  449,  -1,   328,  449,  -1,   78,   449,  -1,
    378,  449,  92,   -1,   304,  449,  92,   -1,   611,  -1,   609,  -1,   117,  -1,   871,  117,  -1,   449,  418,
    108,  -1,   449,  418,  224,  -1,   -1,   47,   600,  613,  558,  614,  559,  -1,   -1,   615,  -1,   615,  560,
    853,  -1,   853,  -1,   -1,   617,  -1,   617,  560,  618,  -1,   618,  -1,   1107, 708,  -1,   -1,   620,  -1,
    620,  560,  621,  -1,   621,  -1,   622,  1107, 708,  -1,   -1,   225,  -1,   349,  -1,   217,  -1,   -1,   623,
    638,  566,  -1,   638,  566,  -1,   624,  638,  566,  -1,   -1,   625,  626,  566,  -1,   -1,   105,  636,  708,
    627,  637,  -1,   105,  1107, 74,   167,  633,  -1,   -1,   105,  631,  195,  167,  628,  632,  638,  -1,   105,
    1107, 88,   167,  629,  -1,   -1,   630,  571,  -1,   149,  -1,   79,   -1,   635,  -1,   632,  560,  635,  -1,
    962,  -1,   441,  634,  1106, -1,   -1,   521,  -1,   633,  -1,   1107, -1,   442,  -1,   871,  168,  -1,   440,
    -1,   1107, -1,   636,  560,  1107, -1,   -1,   107,  853,  -1,   -1,   639,  571,  -1,   -1,   403,  640,  853,
    -1,   209,  648,  137,  209,  -1,   -1,   546,  530,  641,  653,  137,  546,  -1,   -1,   -1,   546,  642,  853,
    530,  643,  653,  137,  546,  -1,   658,  -1,   -1,   644,  661,  -1,   242,  1108, -1,   229,  1108, -1,   234,
    206,  -1,   187,  206,  -1,   339,  1107, -1,   -1,   156,  646,  1107, 222,  645,  647,  -1,   60,   1107, -1,
    -1,   323,  170,  -1,   170,  -1,   1107, -1,   647,  560,  1107, -1,   -1,   -1,   -1,   649,  853,  545,  650,
    624,  651,  652,  -1,   -1,   131,  648,  -1,   544,  624,  -1,   -1,   -1,   -1,   654,  853,  545,  655,  624,
    656,  657,  -1,   -1,   544,  624,  -1,   530,  653,  -1,   -1,   1108, 567,  659,  661,  660,  -1,   -1,   1108,
    -1,   -1,   28,   662,  625,  623,  137,  -1,   263,  624,  137,  263,  -1,   -1,   -1,   532,  663,  853,  124,
    664,  624,  137,  532,  -1,   -1,   393,  624,  509,  665,  853,  137,  393,  -1,   27,   -1,   8,    -1,   219,
    -1,   510,  -1,   111,  -1,   558,  669,  -1,   685,  671,  -1,   246,  1102, -1,   558,  246,  1102, 559,  -1,
    698,  559,  685,  671,  -1,   -1,   674,  559,  670,  1185, -1,   -1,   -1,   1077, 677,  674,  672,  1182, -1,
    -1,   1077, 677,  558,  674,  559,  673,  1185, -1,   -1,   -1,   419,  675,  842,  846,  676,  695,  -1,   -1,
    18,   -1,   -1,   679,  -1,   680,  -1,   679,  680,  -1,   690,  -1,   689,  -1,   -1,   682,  -1,   683,  -1,
    683,  682,  -1,   472,  -1,   -1,   209,  871,  148,  -1,   -1,   687,  -1,   688,  -1,   688,  686,  -1,   688,
    -1,   688,  687,  -1,   688,  560,  687,  -1,   139,  1003, 691,  -1,   493,  1003, 691,  -1,   286,  1003, 963,
    -1,   300,  1003, 963,  -1,   24,   1003, 962,  -1,   352,  1003, 1105, -1,   66,   1003, 1105, -1,   23,   1003,
    963,  -1,   350,  1003, 962,  -1,   350,  1003, 107,  -1,   56,   1003, 962,  -1,   110,  1003, 962,  -1,   412,
    1003, 692,  -1,   376,  1003, 693,  -1,   373,  1003, 962,  -1,   374,  1003, 962,  -1,   502,  1003, 558,  979,
    559,  -1,   689,  -1,   690,  -1,   220,  1003, 694,  -1,   92,   118,  1003, 1105, -1,   213,  118,  1003, 1105,
    -1,   75,   1003, 1105, -1,   737,  729,  1003, 731,  -1,   737,  62,   1003, 736,  -1,   1109, -1,   107,  -1,
    160,  -1,   129,  -1,   70,   -1,   382,  -1,   69,   -1,   375,  -1,   372,  -1,   962,  -1,   328,  -1,   159,
    -1,   237,  -1,   957,  -1,   841,  845,  -1,   -1,   10,   -1,   460,  -1,   380,  -1,   104,  -1,   223,  -1,
    699,  -1,   698,  560,  699,  -1,   700,  -1,   701,  -1,   706,  702,  -1,   706,  742,  -1,   750,  760,  756,
    558,  758,  559,  -1,   704,  751,  760,  756,  558,  758,  559,  -1,   704,  165,  232,  760,  558,  758,  559,
    742,  -1,   705,  702,  -1,   704,  703,  -1,   -1,   703,  -1,   57,   853,  -1,   -1,   705,  -1,   77,   760,
    -1,   -1,   1101, 707,  708,  725,  -1,   716,  723,  720,  -1,   717,  724,  720,  -1,   162,  718,  720,  -1,
    37,   -1,   37,   558,  331,  559,  -1,   41,   -1,   40,   -1,   712,  558,  331,  559,  738,  -1,   712,  738,
    -1,   713,  558,  331,  559,  739,  -1,   713,  739,  -1,   32,   558,  331,  559,  -1,   32,   -1,   714,  558,
    331,  559,  738,  -1,   715,  558,  331,  559,  739,  -1,   522,  558,  331,  559,  -1,   541,  723,  720,  -1,
    96,   -1,   480,  -1,   477,  723,  -1,   93,   -1,   481,  -1,   39,   723,  -1,   711,  -1,   290,  -1,   259,
    -1,   262,  522,  -1,   262,  714,  738,  -1,   483,  738,  -1,   476,  723,  738,  -1,   292,  738,  -1,   260,
    738,  -1,   104,  718,  720,  -1,   332,  718,  720,  -1,   160,  718,  720,  -1,   -1,   140,  709,  558,  762,
    559,  738,  -1,   -1,   425,  710,  558,  762,  559,  738,  -1,   262,  738,  -1,   423,  -1,   182,  -1,   181,
    -1,   356,  -1,   311,  -1,   250,  -1,   310,  -1,   358,  -1,   312,  -1,   55,   -1,   319,  -1,   316,  55,
    -1,   712,  526,  -1,   523,  -1,   316,  523,  -1,   333,  -1,   319,  523,  -1,   316,  55,   526,  -1,   319,
    526,  -1,   223,  -1,   482,  -1,   435,  -1,   291,  -1,   31,   -1,   380,  -1,   123,  -1,   123,  360,  -1,
    -1,   558,  331,  559,  -1,   719,  -1,   558,  331,  560,  331,  559,  -1,   -1,   721,  -1,   721,  722,  -1,
    722,  -1,   432,  -1,   508,  -1,   542,  -1,   -1,   558,  331,  559,  -1,   -1,   719,  -1,   -1,   726,  -1,
    726,  727,  -1,   727,  -1,   330,  -1,   871,  330,  -1,   107,  728,  -1,   336,  510,  327,  852,  -1,   23,
    -1,   423,  107,  521,  -1,   741,  232,  -1,   503,  -1,   503,  232,  -1,   66,   1105, -1,   62,   734,  -1,
    327,  852,  -1,   1092, -1,   55,   425,  -1,   54,   -1,   1109, -1,   32,   -1,   730,  -1,   107,  -1,   1109,
    -1,   32,   -1,   732,  -1,   107,  -1,   1109, -1,   -1,   62,   736,  -1,   734,  -1,   107,  -1,   -1,   107,
    -1,   -1,   20,   739,  -1,   45,   -1,   501,  739,  -1,   729,  730,  739,  -1,   32,   740,  -1,   -1,   32,
    -1,   -1,   20,   -1,   501,  -1,   729,  730,  -1,   -1,   363,  -1,   -1,   383,  1102, 743,  744,  -1,   746,
    -1,   558,  745,  559,  746,  -1,   745,  560,  1107, -1,   1107, -1,   -1,   747,  -1,   747,  748,  -1,   748,
    -1,   336,  111,  749,  -1,   336,  510,  749,  -1,   283,  172,  -1,   283,  351,  -1,   283,  433,  -1,   400,
    -1,   48,   -1,   425,  330,  -1,   328,  5,    -1,   425,  107,  -1,   752,  -1,   173,  753,  -1,   438,  753,
    -1,   363,  232,  -1,   503,  753,  -1,   232,  -1,   213,  -1,   -1,   752,  -1,   231,  -1,   213,  -1,   212,
    -1,   -1,   503,  -1,   173,  -1,   438,  -1,   -1,   515,  757,  -1,   493,  757,  -1,   43,   -1,   414,  -1,
    196,  -1,   758,  560,  759,  955,  -1,   759,  955,  -1,   1107, -1,   1107, 558,  331,  559,  -1,   -1,   1101,
    -1,   -1,   565,  1107, -1,   1090, -1,   762,  560,  1090, -1,   -1,   13,   777,  471,  1102, 764,  770,  -1,
    -1,   13,   90,   769,  765,  678,  -1,   -1,   13,   365,  600,  766,  607,  -1,   -1,   13,   174,  600,  767,
    607,  -1,   -1,   13,   1201, 1202, 1203, 527,  1102, 768,  1198, 18,   833,  1204, -1,   -1,   1107, -1,   -1,
    120,  470,  -1,   211,  470,  -1,   772,  -1,   770,  560,  772,  -1,   6,    776,  -1,   771,  700,  779,  -1,
    6,    701,  -1,   771,  558,  698,  559,  -1,   -1,   52,   776,  1101, 773,  706,  779,  -1,   -1,   -1,   305,
    776,  1101, 774,  708,  725,  775,  779,  -1,   125,  776,  1101, 778,  -1,   125,  165,  232,  760,  -1,   125,
    363,  232,  -1,   125,  752,  1101, -1,   119,  231,  -1,   133,  231,  -1,   13,   776,  1101, 425,  107,  1092,
    -1,   13,   776,  1101, 125,  107,  -1,   390,  780,  1102, -1,   80,   484,  729,  731,  735,  -1,   686,  -1,
    164,  -1,   952,  -1,   -1,   65,   -1,   -1,   210,  -1,   -1,   400,  -1,   48,   -1,   -1,   8,    1107, -1,
    159,  -1,   -1,   484,  -1,   141,  -1,   18,   -1,   -1,   453,  434,  786,  782,  790,  -1,   457,  434,  786,
    -1,   -1,   434,  453,  786,  783,  790,  -1,   434,  457,  786,  -1,   453,  486,  785,  -1,   -1,   533,  76,
    436,  -1,   -1,   787,  788,  -1,   789,  -1,   788,  560,  789,  -1,   -1,   450,  -1,   387,  -1,   -1,   509,
    791,  -1,   587,  -1,   791,  560,  587,  -1,   -1,   399,  1132, 793,  979,  170,  1105, -1,   -1,   26,   1132,
    795,  979,  484,  1105, -1,   -1,   56,   1132, 797,  979,  798,  -1,   -1,   371,  -1,   152,  -1,   -1,   391,
    813,  1132, 800,  979,  801,  -1,   -1,   802,  -1,   803,  -1,   803,  802,  -1,   371,  -1,   152,  -1,   513,
    -1,   -1,   14,   813,  1132, 805,  979,  808,  -1,   -1,   57,   1132, 807,  979,  808,  -1,   -1,   809,  -1,
    810,  -1,   810,  809,  -1,   371,  -1,   155,  -1,   293,  -1,   152,  -1,   53,   -1,   -1,   340,  813,  1132,
    812,  979,  808,  -1,   -1,   329,  -1,   252,  -1,   -1,   390,  1132, 815,  817,  -1,   390,  512,  599,  816,
    -1,   1110, 484,  1110, -1,   816,  560,  1110, 484,  1110, -1,   818,  -1,   817,  560,  818,  -1,   1102, 484,
    1102, -1,   46,   213,  820,  225,  822,  -1,   821,  -1,   820,  560,  821,  -1,   1102, 827,  -1,   1107, -1,
    107,  -1,   -1,   251,  213,  222,  46,   824,  825,  -1,   826,  -1,   825,  560,  826,  -1,   1102, 827,  830,
    -1,   -1,   828,  829,  -1,   -1,   753,  558,  935,  559,  -1,   -1,   210,  241,  -1,   832,  -1,   419,  835,
    -1,   558,  834,  559,  1185, -1,   419,  848,  835,  -1,   558,  848,  834,  559,  1185, -1,   419,  837,  -1,
    558,  834,  559,  -1,   -1,   837,  836,  1182, -1,   -1,   -1,   838,  842,  846,  839,  840,  845,  -1,   951,
    957,  -1,   973,  -1,   841,  -1,   973,  841,  -1,   841,  973,  -1,   170,  909,  943,  948,  945,  951,  957,
    964,  -1,   170,  126,  943,  957,  -1,   -1,   843,  -1,   843,  844,  -1,   844,  -1,   459,  -1,   200,  -1,
    121,  -1,   448,  -1,   443,  -1,   444,  -1,   446,  -1,   447,  -1,   445,  -1,   12,   -1,   -1,   167,  510,
    -1,   256,  225,  427,  303,  -1,   846,  560,  847,  -1,   847,  -1,   552,  -1,   848,  850,  849,  851,  -1,
    -1,   -1,   1096, -1,   853,  -1,   -1,   18,   1107, -1,   18,   1105, -1,   1107, -1,   1105, -1,   -1,   558,
    559,  -1,   -1,   856,  854,  855,  -1,   -1,   855,  869,  856,  -1,   856,  538,  856,  -1,   -1,   859,  857,
    858,  -1,   -1,   858,  870,  859,  -1,   326,  859,  -1,   860,  -1,   861,  226,  490,  -1,   861,  226,  871,
    490,  -1,   861,  226,  154,  -1,   861,  226,  871,  154,  -1,   861,  226,  506,  -1,   861,  226,  871,  506,
    -1,   861,  -1,   861,  226,  330,  -1,   861,  226,  871,  330,  -1,   861,  142,  862,  -1,   861,  873,  862,
    -1,   861,  873,  874,  1194, -1,   862,  -1,   863,  225,  558,  895,  559,  -1,   863,  871,  225,  558,  895,
    559,  -1,   863,  225,  1194, -1,   863,  871,  225,  1194, -1,   863,  547,  863,  16,   862,  -1,   863,  871,
    547,  863,  16,   862,  -1,   863,  437,  246,  863,  -1,   863,  246,  876,  947,  -1,   863,  871,  246,  876,
    947,  -1,   863,  384,  863,  -1,   863,  871,  384,  863,  -1,   863,  -1,   863,  548,  864,  -1,   864,  -1,
    864,  549,  865,  -1,   865,  -1,   865,  428,  866,  -1,   865,  429,  866,  -1,   866,  -1,   866,  551,  867,
    -1,   866,  550,  867,  -1,   866,  551,  875,  937,  -1,   866,  550,  875,  937,  -1,   867,  -1,   867,  552,
    868,  -1,   867,  553,  868,  -1,   867,  554,  868,  -1,   867,  122,  868,  -1,   867,  306,  868,  -1,   868,
    -1,   868,  555,  876,  -1,   876,  -1,   346,  -1,   343,  -1,   16,   -1,   15,   -1,   326,  -1,   325,  -1,
    561,  -1,   325,  -1,   141,  -1,   179,  -1,   194,  -1,   238,  -1,   265,  -1,   321,  -1,   12,   -1,   17,
    -1,   221,  853,  -1,   1098, -1,   876,  62,   1109, -1,   1093, -1,   1091, -1,   564,  1109, 426,  853,  -1,
    564,  1109, -1,   564,  564,  1122, 1109, 761,  -1,   885,  -1,   876,  345,  876,  -1,   551,  876,  -1,   550,
    876,  -1,   556,  876,  -1,   872,  876,  -1,   558,  853,  559,  -1,   558,  853,  560,  895,  559,  -1,   413,
    558,  853,  560,  895,  559,  -1,   148,  1192, -1,   1190, -1,   562,  1107, 853,  563,  -1,   283,  898,  9,
    558,  863,  879,  559,  -1,   20,   558,  853,  559,  -1,   32,   876,  -1,   50,   558,  853,  18,   894,  559,
    -1,   546,  902,  530,  904,  903,  137,  -1,   80,   558,  853,  560,  894,  559,  -1,   80,   558,  853,  515,
    730,  559,  -1,   107,  558,  1098, 559,  -1,   520,  558,  1098, 559,  -1,   175,  558,  559,  -1,   176,  558,
    853,  559,  -1,   177,  558,  853,  560,  853,  559,  -1,   178,  558,  853,  560,  853,  560,  853,  559,  -1,
    7,    558,  853,  560,  853,  559,  -1,   7,    558,  853,  560,  221,  853,  937,  559,  -1,   393,  558,  853,
    560,  853,  559,  -1,   22,   558,  853,  559,  -1,   22,   558,  853,  560,  853,  559,  -1,   55,   558,  895,
    559,  -1,   55,   558,  895,  515,  730,  559,  -1,   54,   558,  853,  559,  -1,   61,   558,  895,  559,  -1,
    63,   558,  853,  559,  -1,   71,   558,  895,  559,  -1,   72,   558,  853,  560,  895,  559,  -1,   81,   558,
    853,  560,  853,  560,  853,  559,  -1,   86,   852,  -1,   89,   852,  -1,   89,   558,  853,  559,  -1,   87,
    852,  -1,   94,   558,  853,  560,  875,  937,  559,  -1,   95,   558,  853,  560,  875,  937,  559,  -1,   90,
    558,  559,  -1,   96,   558,  853,  559,  -1,   101,  558,  853,  559,  -1,   132,  558,  853,  560,  895,  559,
    -1,   266,  558,  853,  560,  895,  559,  -1,   136,  558,  853,  559,  -1,   136,  558,  853,  560,  853,  559,
    -1,   106,  558,  853,  560,  1106, 559,  -1,   135,  558,  853,  560,  1106, 559,  -1,   114,  558,  853,  559,
    -1,   114,  558,  853,  560,  853,  559,  -1,   115,  558,  853,  559,  -1,   115,  558,  853,  560,  853,  559,
    -1,   151,  558,  853,  560,  853,  560,  853,  559,  -1,   151,  558,  853,  560,  853,  560,  853,  560,  853,
    559,  -1,   151,  558,  853,  560,  853,  560,  853,  560,  853,  560,  853,  559,  -1,   166,  558,  853,  560,
    331,  559,  -1,   171,  558,  853,  559,  -1,   171,  558,  853,  560,  853,  559,  -1,   157,  558,  853,  560,
    895,  559,  -1,   878,  -1,   185,  558,  939,  560,  853,  559,  -1,   205,  558,  853,  559,  -1,   209,  558,
    853,  560,  853,  560,  853,  559,  -1,   219,  558,  853,  560,  853,  560,  853,  560,  853,  559,  -1,   875,
    937,  551,  853,  -1,   875,  -1,   236,  558,  559,  -1,   236,  558,  853,  559,  -1,   243,  558,  853,  560,
    853,  559,  -1,   253,  558,  853,  560,  853,  559,  -1,   253,  558,  853,  560,  853,  560,  853,  559,  -1,
    190,  558,  853,  560,  895,  559,  -1,   240,  558,  853,  560,  895,  559,  -1,   258,  558,  853,  559,  -1,
    258,  558,  853,  560,  853,  559,  -1,   273,  558,  853,  560,  853,  559,  -1,   273,  558,  853,  560,  853,
    560,  853,  559,  -1,   295,  558,  853,  559,  -1,   299,  558,  853,  559,  -1,   306,  558,  853,  560,  853,
    559,  -1,   307,  558,  853,  559,  -1,   327,  852,  -1,   327,  558,  853,  559,  -1,   352,  558,  853,  559,
    -1,   335,  558,  853,  559,  -1,   359,  558,  863,  225,  853,  559,  -1,   369,  558,  853,  559,  -1,   377,
    558,  853,  559,  -1,   377,  558,  559,  -1,   394,  558,  853,  560,  853,  560,  853,  559,  -1,   405,  558,
    853,  560,  853,  559,  -1,   408,  558,  853,  559,  -1,   408,  558,  853,  560,  853,  559,  -1,   411,  558,
    559,  -1,   461,  558,  853,  560,  853,  559,  -1,   461,  558,  853,  560,  221,  853,  937,  559,  -1,   417,
    558,  853,  559,  -1,   463,  558,  853,  560,  853,  560,  853,  559,  -1,   463,  558,  853,  560,  853,  559,
    -1,   463,  558,  853,  170,  853,  167,  853,  559,  -1,   463,  558,  853,  170,  853,  559,  -1,   464,  558,
    853,  560,  853,  560,  853,  559,  -1,   468,  852,  -1,   468,  558,  853,  559,  -1,   480,  558,  853,  559,
    -1,   477,  558,  853,  559,  -1,   477,  558,  853,  560,  853,  559,  -1,   478,  558,  938,  560,  853,  560,
    853,  559,  -1,   479,  558,  938,  560,  853,  560,  853,  559,  -1,   489,  558,  853,  559,  -1,   489,  558,
    239,  853,  170,  853,  559,  -1,   489,  558,  485,  853,  170,  853,  559,  -1,   489,  558,  42,   853,  170,
    853,  559,  -1,   489,  558,  239,  170,  853,  559,  -1,   489,  558,  485,  170,  853,  559,  -1,   489,  558,
    42,   170,  853,  559,  -1,   489,  558,  853,  170,  853,  559,  -1,   491,  558,  853,  560,  853,  559,  -1,
    1107, 565,  1107, 558,  880,  559,  -1,   -1,   1104, 558,  877,  880,  559,  -1,   504,  558,  1089, 560,  331,
    560,  331,  560,  895,  559,  -1,   505,  558,  559,  -1,   505,  558,  853,  559,  -1,   512,  558,  559,  -1,
    516,  852,  -1,   518,  852,  -1,   517,  852,  -1,   529,  558,  853,  559,  -1,   529,  558,  853,  560,  853,
    559,  -1,   541,  558,  853,  559,  -1,   539,  558,  853,  559,  -1,   539,  558,  853,  560,  853,  559,  -1,
    29,   558,  962,  560,  853,  559,  -1,   153,  558,  937,  170,  853,  559,  -1,   78,   558,  853,  560,  853,
    559,  -1,   183,  558,  853,  559,  -1,   183,  558,  853,  560,  853,  559,  -1,   184,  558,  853,  559,  -1,
    184,  558,  853,  560,  853,  559,  -1,   181,  558,  895,  559,  -1,   250,  558,  895,  559,  -1,   310,  558,
    895,  559,  -1,   302,  558,  853,  559,  -1,   302,  558,  853,  560,  853,  559,  -1,   308,  558,  853,  559,
    -1,   308,  558,  853,  560,  853,  559,  -1,   309,  558,  853,  559,  -1,   309,  558,  853,  560,  853,  559,
    -1,   311,  558,  895,  559,  -1,   312,  558,  895,  559,  -1,   356,  558,  853,  560,  853,  559,  -1,   355,
    558,  853,  559,  -1,   355,  558,  853,  560,  853,  559,  -1,   357,  558,  853,  559,  -1,   357,  558,  853,
    560,  853,  559,  -1,   358,  558,  895,  559,  -1,   180,  558,  853,  559,  -1,   180,  558,  853,  560,  853,
    559,  -1,   248,  558,  853,  559,  -1,   248,  558,  853,  560,  853,  559,  -1,   -1,   533,  370,  150,  -1,
    225,  40,   303,  -1,   -1,   881,  -1,   -1,   882,  883,  -1,   884,  -1,   883,  560,  884,  -1,   848,  853,
    849,  851,  -1,   25,   558,  892,  559,  -1,   25,   558,  121,  892,  559,  -1,   35,   558,  892,  559,  -1,
    36,   558,  892,  559,  -1,   38,   558,  892,  559,  -1,   82,   558,  942,  552,  559,  -1,   82,   558,  892,
    559,  -1,   -1,   -1,   82,   558,  121,  886,  895,  887,  559,  -1,   193,  558,  1089, 560,  331,  560,  331,
    560,  892,  559,  -1,   301,  558,  892,  559,  -1,   301,  558,  121,  892,  559,  -1,   287,  558,  892,  559,
    -1,   287,  558,  121,  892,  559,  -1,   455,  558,  892,  559,  -1,   525,  558,  892,  559,  -1,   456,  558,
    892,  559,  -1,   519,  558,  892,  559,  -1,   465,  558,  892,  559,  -1,   465,  558,  121,  892,  559,  -1,
    -1,   192,  558,  889,  888,  895,  891,  890,  559,  -1,   -1,   121,  -1,   -1,   421,  1090, -1,   -1,   952,
    -1,   -1,   942,  893,  853,  -1,   32,   723,  -1,   55,   723,  738,  -1,   319,  723,  -1,   432,  -1,   432,
    223,  -1,   508,  -1,   508,  223,  -1,   96,   -1,   480,  -1,   93,   -1,   104,  718,  -1,   -1,   896,  897,
    -1,   853,  -1,   897,  560,  853,  -1,   899,  -1,   558,  899,  559,  -1,   -1,   900,  901,  -1,   1098, -1,
    901,  560,  1098, -1,   -1,   853,  -1,   -1,   544,  853,  -1,   -1,   905,  906,  -1,   853,  545,  853,  -1,
    906,  530,  853,  545,  853,  -1,   920,  -1,   -1,   911,  908,  -1,   910,  -1,   907,  -1,   910,  560,  907,
    -1,   907,  919,  907,  -1,   907,  459,  920,  -1,   -1,   907,  919,  907,  336,  912,  853,  -1,   -1,   907,
    459,  920,  336,  913,  853,  -1,   -1,   907,  919,  907,  515,  914,  558,  936,  559,  -1,   -1,   907,  243,
    930,  230,  907,  336,  915,  853,  -1,   -1,   907,  243,  930,  230,  920,  916,  515,  558,  936,  559,  -1,
    907,  317,  243,  930,  230,  920,  -1,   -1,   907,  405,  930,  230,  907,  336,  917,  853,  -1,   -1,   907,
    405,  930,  230,  920,  918,  515,  558,  936,  559,  -1,   907,  317,  405,  930,  230,  920,  -1,   907,  317,
    230,  920,  -1,   230,  -1,   215,  230,  -1,   84,   230,  -1,   -1,   921,  1102, 941,  931,  -1,   -1,   562,
    1107, 907,  243,  347,  230,  907,  336,  922,  853,  563,  -1,   929,  928,  925,  -1,   558,  928,  923,  1185,
    559,  941,  -1,   -1,   928,  924,  910,  -1,   -1,   -1,   926,  842,  846,  927,  695,  -1,   -1,   419,  -1,
    -1,   347,  -1,   -1,   514,  932,  -1,   164,  932,  -1,   210,  932,  -1,   -1,   752,  933,  558,  934,  559,
    -1,   -1,   935,  -1,   935,  560,  1107, -1,   1107, -1,   363,  -1,   1107, -1,   936,  560,  1107, -1,   938,
    -1,   97,   -1,   98,   -1,   99,   -1,   100,  -1,   202,  -1,   203,  -1,   204,  -1,   295,  -1,   297,  -1,
    298,  -1,   416,  -1,   540,  -1,   101,  -1,   529,  -1,   205,  -1,   169,  -1,   299,  -1,   307,  -1,   369,
    -1,   417,  -1,   541,  -1,   96,   -1,   480,  -1,   93,   -1,   477,  -1,   -1,   18,   -1,   141,  -1,   -1,
    940,  1107, -1,   -1,   12,   -1,   -1,   -1,   531,  944,  853,  -1,   -1,   -1,   197,  946,  853,  -1,   145,
    876,  -1,   -1,   -1,   191,  44,   949,  950,  -1,   949,  560,  1097, 955,  -1,   1097, 955,  -1,   -1,   533,
    85,   -1,   533,  407,  -1,   -1,   952,  -1,   -1,   344,  44,   953,  954,  -1,   954,  560,  1097, 955,  -1,
    1097, 955,  -1,   -1,   19,   -1,   112,  -1,   -1,   958,  -1,   -1,   958,  -1,   247,  959,  -1,   960,  -1,
    960,  560,  960,  -1,   960,  334,  960,  -1,   1091, -1,   496,  -1,   261,  -1,   331,  -1,   -1,   247,  960,
    -1,   331,  -1,   199,  -1,   261,  -1,   496,  -1,   103,  -1,   161,  -1,   331,  -1,   496,  -1,   261,  -1,
    103,  -1,   161,  -1,   -1,   -1,   365,  1107, 965,  558,  966,  559,  -1,   -1,   967,  -1,   967,  560,  968,
    -1,   968,  -1,   848,  853,  -1,   -1,   970,  971,  -1,   971,  560,  972,  -1,   972,  -1,   564,  1109, -1,
    1109, -1,   -1,   222,  348,  1105, 974,  1078, 1081, -1,   222,  127,  1105, -1,   222,  969,  -1,   -1,   124,
    976,  895,  -1,   125,  982,  1132, 981,  979,  778,  -1,   -1,   125,  213,  1107, 336,  1102, 978,  -1,   125,
    90,   981,  1107, -1,   125,  174,  981,  600,  -1,   125,  365,  981,  600,  -1,   125,  512,  599,  1162, -1,
    125,  527,  981,  979,  778,  -1,   125,  487,  600,  -1,   980,  -1,   979,  560,  980,  -1,   1102, -1,   -1,
    209,  148,  -1,   -1,   472,  -1,   -1,   -1,   219,  984,  989,  777,  991,  985,  993,  1009, -1,   -1,   -1,
    394,  987,  990,  991,  988,  993,  -1,   -1,   264,  -1,   109,  -1,   200,  -1,   1018, -1,   109,  -1,   222,
    992,  -1,   992,  -1,   980,  -1,   996,  -1,   558,  559,  996,  -1,   558,  995,  559,  996,  -1,   -1,   425,
    994,  1000, -1,   995,  560,  1095, -1,   1095, -1,   520,  999,  -1,   521,  999,  -1,   -1,   674,  997,  1182,
    -1,   -1,   558,  674,  559,  998,  1185, -1,   999,  560,  1004, -1,   1004, -1,   1000, 560,  1001, -1,   1001,
    -1,   1099, 1002, 1008, -1,   141,  -1,   426,  -1,   -1,   1002, -1,   -1,   558,  1005, 1006, 559,  -1,   -1,
    1007, -1,   1007, 560,  1008, -1,   1008, -1,   853,  -1,   107,  -1,   -1,   -1,   336,  128,  1010, 232,  510,
    1016, -1,   -1,   -1,   510,  1012, 1018, 777,  909,  425,  1014, 1013, 943,  951,  961,  -1,   1014, 560,  1015,
    -1,   1015, -1,   1099, 1002, 1008, -1,   1016, 560,  1017, -1,   1017, -1,   1099, 1002, 1008, -1,   -1,   264,
    -1,   -1,   111,  1020, 1028, 1021, -1,   -1,   170,  1102, 1022, 943,  951,  961,  -1,   -1,   1025, 1023, 170,
    909,  943,  -1,   -1,   170,  1025, 1024, 515,  909,  943,  -1,   1026, -1,   1025, 560,  1026, -1,   1107, 1027,
    941,  -1,   1107, 565,  1107, 1027, 941,  -1,   -1,   565,  552,  -1,   -1,   1029, 1028, -1,   371,  -1,   264,
    -1,   210,  -1,   491,  1031, 980,  -1,   -1,   471,  -1,   -1,   430,  1033, 1034, -1,   91,   1045, -1,   1041,
    469,  1040, 1045, -1,   1041, 488,  1040, 1045, -1,   471,  454,  1040, 1045, -1,   339,  469,  1040, 1045, -1,
    -1,   139,  691,  1035, 1037, -1,   1041, 64,   1042, 1102, 1040, 1045, -1,   322,  281,  167,  434,  533,  269,
    141,  1105, 16,   270,  141,  963,  16,   274,  141,  962,  -1,   1038, 257,  -1,   434,  201,  -1,   -1,   33,
    146,  1043, 1044, 1036, 956,  -1,   754,  1042, 1102, 1040, 943,  -1,   65,   492,  -1,   471,  492,  -1,   1039,
    138,  -1,   364,  -1,   82,   558,  552,  559,  528,  -1,   82,   558,  552,  559,  143,  -1,   528,  956,  -1,
    143,  956,  -1,   1121, 454,  1045, -1,   216,  454,  -1,   313,  454,  -1,   1041, 367,  -1,   1121, 524,  1045,
    -1,   729,  1045, -1,   63,   1045, -1,   30,   257,  -1,   257,  -1,   189,  -1,   189,  167,  1110, -1,   83,
    90,   684,  1107, -1,   83,   471,  1102, -1,   83,   527,  1102, -1,   281,  454,  -1,   434,  454,  -1,   83,
    365,  600,  -1,   83,   174,  600,  -1,   365,  454,  1045, -1,   174,  454,  1045, -1,   454,  -1,   257,  -1,
    281,  -1,   32,   -1,   -1,   458,  -1,   -1,   1042, 1107, -1,   -1,   172,  -1,   170,  -1,   225,  -1,   -1,
    225,  1105, -1,   -1,   170,  963,  -1,   -1,   246,  1105, -1,   531,  853,  -1,   -1,   1049, 1102, 1047, 1051,
    -1,   -1,   1049, 1050, 1048, 831,  -1,   112,  -1,   113,  -1,   -1,   152,  -1,   -1,   1090, -1,   1107, -1,
    -1,   163,  813,  1053, 1054, -1,   1054, 560,  1055, -1,   1055, -1,   -1,   1132, 1056, 1057, -1,   469,  533,
    379,  256,  -1,   370,  46,   -1,   201,  -1,   364,  -1,   257,  -1,   454,  -1,   434,  -1,   281,  -1,   116,
    -1,   398,  -1,   -1,   979,  -1,   -1,   397,  1059, 1060, -1,   1060, 560,  1061, -1,   1061, -1,   434,  -1,
    281,  -1,   370,  46,   -1,   -1,   368,  1063, 1064, -1,   1038, 257,  1065, -1,   484,  1105, -1,   27,   853,
    -1,   233,  1067, 853,  -1,   -1,   75,   -1,   370,  -1,   514,  1107, -1,   -1,   251,  92,   1070, 1071, -1,
    251,  471,  1102, 170,  281,  -1,   -1,   -1,   -1,   1076, 1075, 214,  1105, 1072, 1077, 222,  1073, 471,  1102,
    1074, 1078, 1081, 1084, 1085, 1088, -1,   170,  281,  -1,   -1,   252,  -1,   -1,   73,   -1,   264,  -1,   -1,
    394,  -1,   210,  -1,   -1,   64,   1079, -1,   1079, 1080, -1,   1080, -1,   474,  44,   1090, -1,   342,  134,
    44,   1090, -1,   134,  44,   1090, -1,   144,  44,   1090, -1,   -1,   249,  1082, -1,   1082, 1083, -1,   1083,
    -1,   474,  44,   1090, -1,   452,  44,   1090, -1,   -1,   210,  331,  249,  -1,   -1,   558,  1086, 559,  -1,
    558,  559,  -1,   1086, 560,  1087, -1,   1087, -1,   1099, -1,   564,  1109, -1,   -1,   425,  1016, -1,   1106,
    -1,   318,  -1,   499,  475,  -1,   1089, 1106, -1,   1106, -1,   199,  -1,   34,   -1,   353,  -1,   1093, -1,
    551,  1094, -1,   550,  1094, -1,   1089, -1,   1094, -1,   330,  -1,   154,  -1,   490,  -1,   199,  -1,   34,
    -1,   499,  199,  -1,   499,  34,   -1,   96,   1089, -1,   480,  1089, -1,   477,  1089, -1,   331,  -1,   261,
    -1,   496,  -1,   103,  -1,   161,  -1,   1099, -1,   1096, -1,   1107, 565,  552,  -1,   1107, 565,  1107, 565,
    552,  -1,   853,  -1,   1107, -1,   1100, -1,   1107, -1,   1100, -1,   1107, 565,  1107, -1,   565,  1107, 565,
    1107, -1,   1107, 565,  1107, 565,  1107, -1,   1107, -1,   1107, 565,  1107, 565,  1107, -1,   1107, 565,  1107,
    -1,   565,  1107, -1,   1107, -1,   1107, 565,  1107, -1,   565,  1107, -1,   1107, -1,   206,  -1,   208,  -1,
    475,  -1,   475,  -1,   1104, -1,   1111, -1,   1104, -1,   1112, -1,   1107, -1,   1105, -1,   245,  -1,   1109,
    -1,   1109, 564,  1109, -1,   87,   852,  -1,   1112, -1,   20,   -1,   26,   -1,   28,   -1,   45,   -1,   46,
    -1,   54,   -1,   56,   -1,   60,   -1,   66,   -1,   68,   -1,   78,   -1,   102,  -1,   124,  -1,   137,  -1,
    147,  -1,   163,  -1,   195,  -1,   198,  -1,   235,  -1,   328,  -1,   339,  -1,   361,  -1,   391,  -1,   397,
    -1,   399,  -1,   406,  -1,   415,  -1,   418,  -1,   432,  -1,   434,  -1,   453,  -1,   457,  -1,   491,  -1,
    501,  -1,   537,  -1,   5,    -1,   7,    -1,   8,    -1,   9,    -1,   10,   -1,   11,   -1,   17,   -1,   23,
    -1,   24,   -1,   25,   -1,   30,   -1,   33,   -1,   37,   -1,   41,   -1,   40,   -1,   43,   -1,   49,   -1,
    51,   -1,   53,   -1,   58,   -1,   59,   -1,   63,   -1,   64,   -1,   67,   -1,   69,   -1,   70,   -1,   73,
    -1,   76,   -1,   85,   -1,   92,   -1,   93,   -1,   96,   -1,   101,  -1,   108,  -1,   110,  -1,   116,  -1,
    118,  -1,   120,  -1,   127,  -1,   128,  -1,   129,  -1,   140,  -1,   139,  -1,   138,  -1,   143,  -1,   145,
    -1,   146,  -1,   150,  -1,   152,  -1,   155,  -1,   168,  -1,   119,  -1,   133,  -1,   172,  -1,   158,  -1,
    159,  -1,   160,  -1,   169,  -1,   182,  -1,   181,  -1,   185,  -1,   189,  -1,   186,  -1,   196,  -1,   201,
    -1,   205,  -1,   207,  -1,   224,  -1,   211,  -1,   212,  -1,   227,  -1,   228,  -1,   216,  -1,   220,  -1,
    387,  -1,   237,  -1,   241,  -1,   244,  -1,   250,  -1,   252,  -1,   255,  -1,   257,  -1,   286,  -1,   281,
    -1,   268,  -1,   272,  -1,   269,  -1,   270,  -1,   282,  -1,   271,  -1,   274,  -1,   267,  -1,   280,  -1,
    276,  -1,   275,  -1,   277,  -1,   278,  -1,   279,  -1,   284,  -1,   285,  -1,   288,  -1,   289,  -1,   293,
    -1,   294,  -1,   295,  -1,   296,  -1,   299,  -1,   300,  -1,   305,  -1,   303,  -1,   307,  -1,   310,  -1,
    311,  -1,   312,  -1,   313,  -1,   315,  -1,   314,  -1,   316,  -1,   319,  -1,   320,  -1,   323,  -1,   322,
    -1,   324,  -1,   333,  -1,   334,  -1,   335,  -1,   337,  -1,   338,  -1,   350,  -1,   351,  -1,   352,  -1,
    354,  -1,   356,  -1,   358,  -1,   362,  -1,   364,  -1,   366,  -1,   367,  -1,   369,  -1,   370,  -1,   371,
    -1,   372,  -1,   373,  -1,   374,  -1,   375,  -1,   376,  -1,   381,  -1,   382,  -1,   385,  -1,   386,  -1,
    389,  -1,   392,  -1,   395,  -1,   398,  -1,   401,  -1,   402,  -1,   407,  -1,   409,  -1,   410,  -1,   412,
    -1,   413,  -1,   414,  -1,   417,  -1,   423,  -1,   422,  -1,   424,  -1,   433,  -1,   427,  -1,   431,  -1,
    436,  -1,   437,  -1,   445,  -1,   444,  -1,   447,  -1,   450,  -1,   454,  -1,   458,  -1,   460,  -1,   461,
    -1,   462,  -1,   466,  -1,   467,  -1,   469,  -1,   470,  -1,   472,  -1,   473,  -1,   476,  -1,   486,  -1,
    488,  -1,   477,  -1,   478,  -1,   479,  -1,   480,  -1,   492,  -1,   493,  -1,   494,  -1,   174,  -1,   497,
    -1,   498,  -1,   506,  -1,   509,  -1,   512,  -1,   513,  -1,   524,  -1,   527,  -1,   521,  -1,   528,  -1,
    529,  -1,   534,  -1,   536,  -1,   541,  -1,   -1,   425,  1115, 1114, 1116, -1,   -1,   341,  -1,   1117, -1,
    1116, 560,  1117, -1,   -1,   1118, 1123, -1,   1120, -1,   186,  -1,   252,  -1,   424,  -1,   -1,   337,  -1,
    -1,   186,  -1,   252,  -1,   424,  -1,   -1,   186,  565,  -1,   252,  565,  -1,   424,  565,  -1,   1124, -1,
    1120, 1125, -1,   1119, 1126, 1002, 1129, -1,   1119, 486,  227,  244,  1127, -1,   564,  1109, 1002, 853,  -1,
    564,  564,  1122, 1126, 1002, 1129, -1,   729,  733,  -1,   314,  1002, 853,  -1,   314,  731,  735,  -1,   352,
    1002, 1128, -1,   352,  167,  1110, 1002, 1128, -1,   1107, -1,   1107, 565,  1107, -1,   107,  565,  1107, -1,
    379,  497,  -1,   379,  67,   -1,   392,  379,  -1,   422,  -1,   475,  -1,   352,  558,  475,  559,  -1,   335,
    558,  475,  559,  -1,   853,  -1,   107,  -1,   336,  -1,   12,   -1,   32,   -1,   -1,   256,  1132, 1131, 1133,
    -1,   471,  -1,   469,  -1,   1134, -1,   1133, 560,  1134, -1,   1102, 941,  1135, -1,   379,  -1,   535,  -1,
    264,  535,  -1,   379,  252,  -1,   -1,   507,  1137, 1132, -1,   195,  1102, 339,  941,  -1,   195,  1103, 60,
    -1,   -1,   195,  1103, 379,  1139, 1140, 943,  957,  -1,   1141, -1,   1107, 1142, -1,   159,  -1,   323,  -1,
    159,  -1,   323,  -1,   362,  -1,   237,  -1,   -1,   1144, 1143, 558,  1007, 559,  -1,   141,  -1,   179,  -1,
    238,  -1,   194,  -1,   265,  -1,   404,  599,  1146, -1,   1150, 336,  1149, 1161, 170,  1163, -1,   1150, 336,
    174,  1161, 170,  1163, -1,   1150, 336,  365,  1161, 170,  1163, -1,   12,   1151, 560,  188,  341,  170,  1163,
    -1,   188,  599,  1148, -1,   1150, 336,  1149, 1161, 484,  1163, 1168, 1169, -1,   1150, 336,  174,  1161, 484,
    1163, 1168, 1169, -1,   1150, 336,  365,  1161, 484,  1163, 1168, 1169, -1,   -1,   471,  -1,   1152, -1,   12,
    1151, -1,   -1,   364,  -1,   1153, -1,   1152, 560,  1153, -1,   -1,   419,  1154, 1165, -1,   -1,   219,  1155,
    1165, -1,   -1,   510,  1156, 1165, -1,   -1,   383,  1157, 1165, -1,   111,  -1,   511,  -1,   213,  -1,   13,
    -1,   83,   -1,   125,  -1,   147,  -1,   389,  -1,   431,  -1,   366,  -1,   158,  -1,   188,  341,  -1,   430,
    91,   -1,   466,  -1,   83,   472,  469,  -1,   256,  469,  -1,   395,  434,  -1,   395,  59,   -1,   83,   527,
    -1,   430,  527,  -1,   83,   409,  -1,   13,   409,  -1,   83,   512,  -1,   -1,   16,   -1,   1160, 1158, 1159,
    -1,   1160, -1,   462,  475,  -1,   228,  475,  -1,   58,   475,  -1,   552,  -1,   1107, 565,  552,  -1,   552,
    565,  552,  -1,   1102, -1,   1110, -1,   1162, 560,  1110, -1,   1164, -1,   1163, 560,  1164, -1,   1110, 207,
    44,   475,  -1,   1110, 207,  44,   352,  475,  -1,   1110, -1,   -1,   558,  1166, 559,  -1,   1166, 560,  1167,
    -1,   1167, -1,   1107, -1,   -1,   396,  1159, -1,   396,  451,  -1,   396,  536,  -1,   396,  324,  -1,   -1,
    533,  1170, -1,   1170, 1171, -1,   1171, -1,   188,  341,  -1,   285,  962,  -1,   288,  962,  -1,   284,  962,
    -1,   289,  962,  -1,   -1,   28,   1173, 1174, -1,   -1,   534,  -1,   -1,   16,   328,  51,   -1,   16,   51,
    -1,   -1,   388,  -1,   328,  388,  -1,   -1,   415,  -1,   68,   1174, 1175, 1176, -1,   406,  1174, 1175, 1176,
    -1,   406,  1174, 484,  1177, 1107, -1,   415,  1107, -1,   388,  415,  1107, -1,   -1,   1183, -1,   -1,   502,
    1189, 1184, 832,  -1,   -1,   1183, -1,   1186, -1,   -1,   1187, 1188, -1,   952,  956,  -1,   958,  -1,   -1,
    121,  -1,   12,   -1,   1196, 1191, 1197, -1,   835,  -1,   1196, 1193, 1197, -1,   835,  -1,   1196, 1195, 1197,
    -1,   835,  -1,   558,  419,  -1,   559,  -1,   -1,   558,  1199, 559,  -1,   1107, -1,   1199, 560,  1107, -1,
    -1,   346,  394,  -1,   -1,   11,   141,  498,  -1,   11,   141,  294,  -1,   11,   141,  473,  -1,   -1,   87,
    852,  -1,   108,  141,  1109, 564,  1109, -1,   -1,   449,  418,  108,  -1,   449,  418,  224,  -1,   -1,   533,
    57,   341,  -1,   533,  49,   57,   341,  -1,   533,  252,  57,   341,  -1,   537,  1207, 1206, 1208, -1,   537,
    137,  1206, 1210, -1,   537,  361,  1206, -1,   537,  68,   1206, 1209, -1,   537,  406,  1206, -1,   537,  381,
    -1,   1090, -1,   1090, 560,  1090, -1,   1090, 560,  1090, 560,  962,  -1,   28,   -1,   453,  -1,   -1,   230,
    -1,   401,  -1,   -1,   338,  354,  -1,   -1,   -1,   467,  1211, 1212, -1,   -1,   167,  296,  -1};

/* YYRLINE[YYN] -- source line where rule number YYN was defined.  */
static const unsigned short yyrline[] = {
    0,    851,  851,  865,  868,  869,  874,  875,  876,  877,  878,  879,  880,  881,  882,  883,  884,  885,  886,
    887,  888,  889,  890,  891,  892,  893,  894,  895,  896,  897,  898,  899,  900,  901,  902,  903,  904,  905,
    906,  907,  908,  909,  910,  911,  912,  913,  914,  915,  916,  917,  918,  919,  920,  924,  938,  939,  944,
    958,  965,  975,  974,  990,  992,  996,  997,  1000, 1013, 1012, 1031, 1030, 1041, 1042, 1045, 1050, 1055, 1060,
    1065, 1069, 1074, 1078, 1082, 1086, 1090, 1095, 1099, 1103, 1119, 1123, 1135, 1134, 1158, 1157, 1182, 1181, 1194,
    1193, 1202, 1227, 1234, 1241, 1201, 1262, 1261, 1274, 1272, 1334, 1342, 1356, 1361, 1368, 1377, 1403, 1409, 1417,
    1459, 1376, 1485, 1486, 1490, 1491, 1496, 1498, 1500, 1502, 1504, 1506, 1508, 1514, 1515, 1516, 1520, 1524, 1532,
    1531, 1544, 1546, 1550, 1554, 1561, 1563, 1567, 1568, 1572, 1587, 1589, 1593, 1594, 1598, 1614, 1615, 1616, 1617,
    1621, 1622, 1626, 1627, 1632, 1635, 1662, 1661, 1696, 1711, 1710, 1750, 1773, 1773, 1804, 1805, 1810, 1831, 1855,
    1861, 1876, 1877, 1881, 1885, 1894, 1899, 1904, 1912, 1925, 1941, 1942, 1946, 1946, 1989, 1988, 2011, 2013, 2012,
    2018, 2020, 2017, 2041, 2043, 2043, 2054, 2084, 2112, 2137, 2197, 2213, 2212, 2229, 2246, 2248, 2249, 2253, 2274,
    2297, 2299, 2312, 2297, 2330, 2332, 2333, 2337, 2339, 2366, 2337, 2386, 2394, 2395, 2400, 2399, 2437, 2438, 2443,
    2442, 2469, 2480, 2482, 2479, 2504, 2503, 2519, 2521, 2526, 2528, 2530, 2535, 2536, 2537, 2543, 2552, 2553, 2553,
    2557, 2559, 2558, 2561, 2560, 2566, 2582, 2565, 2596, 2597, 2600, 2601, 2604, 2605, 2608, 2609, 2612, 2613, 2616,
    2617, 2620, 2623, 2624, 2626, 2628, 2631, 2632, 2635, 2636, 2637, 2640, 2641, 2642, 2643, 2644, 2645, 2646, 2647,
    2648, 2663, 2669, 2670, 2671, 2672, 2673, 2674, 2675, 2690, 2691, 2692, 2693, 2694, 2695, 2699, 2716, 2732, 2742,
    2743, 2744, 2745, 2746, 2747, 2750, 2751, 2752, 2755, 2756, 2757, 2760, 2761, 2764, 2765, 2768, 2769, 2770, 2771,
    2774, 2775, 2779, 2780, 2784, 2785, 2792, 2798, 2806, 2820, 2824, 2830, 2832, 2836, 2840, 2841, 2845, 2850, 2849,
    2871, 2872, 2873, 2874, 2876, 2878, 2880, 2882, 2884, 2886, 2889, 2892, 2895, 2898, 2900, 2903, 2906, 2907, 2908,
    2909, 2922, 2923, 2925, 2927, 2939, 2941, 2943, 2945, 2946, 2947, 2948, 2949, 2950, 2952, 2954, 2956, 2956, 2958,
    2958, 2960, 2961, 2970, 2971, 2972, 2973, 2974, 2975, 2976, 2977, 2981, 2985, 2986, 2990, 2991, 2995, 2996, 2997,
    2998, 2999, 3003, 3004, 3005, 3006, 3007, 3010, 3012, 3013, 3017, 3018, 3019, 3022, 3029, 3030, 3033, 3034, 3037,
    3038, 3039, 3042, 3043, 3046, 3047, 3050, 3051, 3054, 3055, 3058, 3059, 3060, 3061, 3063, 3064, 3070, 3076, 3082,
    3088, 3089, 3105, 3106, 3110, 3111, 3115, 3123, 3127, 3128, 3132, 3141, 3145, 3146, 3149, 3159, 3160, 3164, 3165,
    3168, 3169, 3172, 3173, 3174, 3175, 3184, 3185, 3188, 3189, 3192, 3193, 3194, 3203, 3205, 3207, 3212, 3211, 3223,
    3224, 3227, 3228, 3232, 3233, 3236, 3237, 3240, 3241, 3242, 3243, 3244, 3247, 3248, 3249, 3250, 3251, 3254, 3255,
    3256, 3268, 3269, 3272, 3273, 3276, 3277, 3281, 3282, 3283, 3286, 3287, 3288, 3289, 3302, 3303, 3304, 3307, 3308,
    3312, 3315, 3316, 3319, 3320, 3331, 3332, 3335, 3336, 3339, 3340, 3348, 3347, 3377, 3376, 3388, 3387, 3406, 3405,
    3424, 3423, 3437, 3438, 3440, 3441, 3442, 3443, 3444, 3447, 3455, 3456, 3460, 3465, 3464, 3472, 3481, 3471, 3493,
    3500, 3504, 3511, 3518, 3524, 3530, 3536, 3543, 3556, 3577, 3582, 3586, 3593, 3594, 3597, 3598, 3602, 3603, 3604,
    3608, 3609, 3610, 3613, 3614, 3615, 3616, 3624, 3623, 3634, 3642, 3641, 3651, 3661, 3675, 3676, 3683, 3683, 3689,
    3690, 3694, 3695, 3696, 3700, 3701, 3718, 3719, 3724, 3723, 3734, 3733, 3744, 3743, 3753, 3754, 3755, 3760, 3759,
    3771, 3772, 3775, 3776, 3779, 3780, 3781, 3785, 3784, 3797, 3796, 3813, 3814, 3817, 3818, 3821, 3822, 3823, 3824,
    3825, 3829, 3828, 3845, 3846, 3847, 3852, 3851, 3863, 3870, 3875, 3883, 3884, 3887, 3899, 3908, 3909, 3912, 3925,
    3926, 3931, 3930, 3940, 3941, 3944, 3957, 3957, 3967, 3968, 3977, 3978, 3987, 3996, 3998, 4001, 4006, 4013, 4033,
    4037, 4036, 4056, 4064, 4056, 4070, 4071, 4072, 4073, 4074, 4077, 4079, 4086, 4088, 4099, 4100, 4103, 4104, 4110,
    4111, 4112, 4113, 4119, 4125, 4126, 4130, 4133, 4135, 4141, 4151, 4152, 4153, 4166, 4184, 4187, 4190, 4191, 4194,
    4195, 4196, 4197, 4198, 4202, 4203, 4207, 4207, 4224, 4226, 4231, 4232, 4232, 4249, 4251, 4256, 4257, 4260, 4261,
    4262, 4263, 4264, 4265, 4266, 4269, 4270, 4271, 4272, 4274, 4276, 4279, 4289, 4301, 4303, 4305, 4307, 4313, 4316,
    4318, 4320, 4321, 4323, 4326, 4327, 4330, 4331, 4334, 4336, 4338, 4341, 4342, 4343, 4345, 4347, 4350, 4351, 4352,
    4353, 4354, 4355, 4358, 4359, 4361, 4361, 4362, 4362, 4363, 4363, 4364, 4364, 4366, 4367, 4368, 4369, 4370, 4371,
    4374, 4375, 4379, 4383, 4384, 4391, 4392, 4393, 4400, 4407, 4419, 4420, 4422, 4423, 4424, 4425, 4426, 4427, 4432,
    4437, 4438, 4439, 4440, 4444, 4445, 4449, 4457, 4459, 4466, 4468, 4481, 4483, 4494, 4505, 4516, 4527, 4529, 4531,
    4533, 4535, 4537, 4539, 4541, 4543, 4545, 4547, 4549, 4551, 4557, 4559, 4561, 4566, 4568, 4570, 4572, 4577, 4579,
    4581, 4583, 4585, 4590, 4591, 4593, 4595, 4597, 4599, 4601, 4603, 4605, 4607, 4609, 4611, 4613, 4617, 4619, 4629,
    4631, 4633, 4635, 4637, 4640, 4649, 4654, 4659, 4661, 4663, 4665, 4667, 4669, 4671, 4673, 4678, 4683, 4685, 4687,
    4689, 4691, 4693, 4695, 4701, 4703, 4705, 4707, 4709, 4711, 4713, 4715, 4717, 4718, 4723, 4725, 4727, 4729, 4731,
    4733, 4735, 4737, 4739, 4741, 4743, 4745, 4747, 4749, 4751, 4753, 4755, 4757, 4759, 4761, 4763, 4765, 4767, 4769,
    4771, 4785, 4784, 4896, 4900, 4905, 4907, 4909, 4911, 4913, 4915, 4920, 4922, 4924, 4926, 4928, 4933, 4937, 4939,
    4941, 4943, 4945, 4947, 4951, 4954, 4957, 4959, 4961, 4963, 4965, 4967, 4969, 4972, 4975, 4977, 4979, 4981, 4983,
    4985, 4988, 4990, 4992, 4994, 4999, 5000, 5001, 5005, 5006, 5010, 5010, 5016, 5020, 5027, 5041, 5043, 5045, 5047,
    5049, 5051, 5053, 5056, 5058, 5055, 5061, 5063, 5070, 5072, 5074, 5076, 5078, 5080, 5082, 5084, 5086, 5089, 5088,
    5102, 5103, 5106, 5107, 5112, 5115, 5127, 5126, 5142, 5143, 5144, 5145, 5146, 5147, 5148, 5149, 5150, 5151, 5152,
    5156, 5156, 5161, 5162, 5165, 5166, 5169, 5169, 5174, 5175, 5178, 5179, 5182, 5183, 5186, 5186, 5191, 5197, 5206,
    5207, 5207, 5216, 5221, 5222, 5234, 5236, 5240, 5238, 5255, 5253, 5271, 5269, 5279, 5277, 5295, 5294, 5301, 5310,
    5308, 5327, 5326, 5338, 5346, 5351, 5352, 5353, 5358, 5358, 5377, 5375, 5392, 5414, 5462, 5461, 5484, 5502, 5484,
    5509, 5513, 5532, 5533, 5536, 5537, 5543, 5550, 5558, 5558, 5564, 5565, 5569, 5573, 5577, 5583, 5591, 5600, 5601,
    5602, 5603, 5604, 5605, 5606, 5607, 5608, 5609, 5610, 5611, 5612, 5615, 5616, 5617, 5618, 5619, 5620, 5621, 5622,
    5623, 5627, 5628, 5629, 5630, 5633, 5635, 5636, 5639, 5640, 5643, 5645, 5649, 5651, 5650, 5664, 5667, 5666, 5681,
    5683, 5696, 5698, 5701, 5703, 5707, 5708, 5721, 5738, 5740, 5744, 5743, 5757, 5759, 5763, 5764, 5765, 5770, 5776,
    5780, 5781, 5785, 5789, 5796, 5803, 5812, 5813, 5814, 5815, 5820, 5824, 5832, 5833, 5834, 5835, 5836, 5837, 5841,
    5842, 5843, 5844, 5845, 5848, 5851, 5850, 5872, 5873, 5876, 5877, 5880, 5893, 5893, 5903, 5904, 5908, 5916, 5937,
    5936, 5945, 5957, 5968, 5967, 5984, 5997, 5997, 6013, 6020, 6032, 6044, 6048, 6060, 6069, 6070, 6073, 6081, 6082,
    6086, 6087, 6095, 6104, 6094, 6114, 6121, 6113, 6130, 6131, 6132, 6133, 6137, 6138, 6141, 6142, 6145, 6154, 6155,
    6156, 6158, 6157, 6167, 6168, 6171, 6172, 6173, 6173, 6174, 6174, 6178, 6179, 6182, 6184, 6187, 6195, 6196, 6200,
    6201, 6206, 6205, 6218, 6219, 6222, 6227, 6235, 6236, 6239, 6241, 6241, 6249, 6258, 6248, 6280, 6281, 6284, 6291,
    6292, 6295, 6304, 6305, 6311, 6310, 6324, 6323, 6332, 6331, 6339, 6338, 6348, 6349, 6352, 6358, 6369, 6370, 6374,
    6375, 6378, 6379, 6380, 6383, 6392, 6394, 6399, 6398, 6412, 6420, 6429, 6438, 6447, 6457, 6456, 6459, 6469, 6479,
    6483, 6488, 6487, 6492, 6502, 6507, 6513, 6518, 6523, 6525, 6527, 6529, 6531, 6540, 6542, 6544, 6546, 6555, 6563,
    6571, 6573, 6575, 6599, 6606, 6612, 6620, 6628, 6632, 6636, 6643, 6650, 6660, 6672, 6686, 6699, 6700, 6702, 6704,
    6707, 6708, 6711, 6712, 6715, 6716, 6719, 6720, 6723, 6724, 6726, 6728, 6731, 6743, 6742, 6757, 6756, 6766, 6767,
    6770, 6771, 6775, 6776, 6777, 6785, 6784, 6805, 6806, 6809, 6809, 6810, 6811, 6812, 6813, 6814, 6815, 6816, 6817,
    6818, 6819, 6822, 6823, 6827, 6826, 6835, 6836, 6839, 6840, 6841, 6845, 6844, 6853, 6857, 6862, 6874, 6883, 6884,
    6885, 6889, 6899, 6898, 6911, 6926, 6937, 6942, 6925, 6955, 6961, 6962, 6965, 6966, 6967, 6971, 6972, 6973, 6975,
    6977, 6980, 6981, 6984, 6989, 6996, 7001, 7007, 7009, 7012, 7013, 7016, 7021, 7027, 7029, 7036, 7037, 7038, 7041,
    7043, 7048, 7049, 7054, 7055, 7061, 7066, 7068, 7070, 7075, 7077, 7088, 7101, 7116, 7117, 7118, 7127, 7128, 7129,
    7131, 7132, 7133, 7134, 7135, 7149, 7163, 7164, 7165, 7168, 7169, 7170, 7171, 7179, 7194, 7195, 7198, 7204, 7215,
    7218, 7242, 7246, 7254, 7258, 7319, 7334, 7358, 7359, 7375, 7385, 7388, 7389, 7390, 7394, 7398, 7399, 7424, 7436,
    7449, 7450, 7459, 7460, 7469, 7470, 7471, 7474, 7483, 7490, 7512, 7513, 7514, 7515, 7516, 7517, 7518, 7519, 7520,
    7521, 7522, 7523, 7524, 7525, 7526, 7527, 7528, 7529, 7530, 7531, 7532, 7533, 7534, 7535, 7536, 7537, 7538, 7539,
    7540, 7541, 7542, 7543, 7544, 7545, 7546, 7547, 7557, 7558, 7559, 7560, 7561, 7562, 7563, 7564, 7565, 7566, 7567,
    7568, 7569, 7570, 7571, 7572, 7573, 7574, 7575, 7576, 7577, 7578, 7579, 7580, 7581, 7582, 7583, 7584, 7585, 7586,
    7587, 7588, 7589, 7590, 7591, 7592, 7593, 7594, 7595, 7596, 7597, 7598, 7599, 7600, 7601, 7602, 7603, 7604, 7605,
    7606, 7607, 7608, 7609, 7610, 7611, 7612, 7613, 7614, 7615, 7616, 7617, 7618, 7619, 7620, 7621, 7622, 7623, 7624,
    7625, 7626, 7627, 7628, 7629, 7630, 7631, 7632, 7633, 7634, 7635, 7636, 7637, 7638, 7639, 7640, 7641, 7642, 7643,
    7644, 7645, 7646, 7647, 7648, 7649, 7650, 7651, 7652, 7653, 7654, 7655, 7656, 7657, 7658, 7659, 7660, 7661, 7662,
    7663, 7664, 7665, 7666, 7667, 7668, 7669, 7670, 7671, 7672, 7673, 7674, 7675, 7676, 7677, 7678, 7679, 7680, 7681,
    7682, 7683, 7684, 7685, 7686, 7687, 7688, 7689, 7690, 7691, 7692, 7693, 7694, 7695, 7696, 7697, 7698, 7699, 7700,
    7701, 7702, 7703, 7704, 7705, 7706, 7707, 7708, 7709, 7710, 7711, 7712, 7713, 7714, 7715, 7716, 7717, 7718, 7719,
    7720, 7721, 7722, 7723, 7724, 7725, 7726, 7727, 7728, 7729, 7730, 7731, 7732, 7733, 7734, 7735, 7736, 7737, 7738,
    7739, 7740, 7741, 7742, 7743, 7744, 7745, 7746, 7747, 7748, 7749, 7750, 7751, 7752, 7753, 7754, 7755, 7756, 7757,
    7758, 7759, 7760, 7761, 7762, 7763, 7764, 7765, 7766, 7767, 7774, 7773, 7787, 7788, 7791, 7792, 7795, 7795, 7862,
    7863, 7864, 7865, 7869, 7870, 7874, 7875, 7876, 7877, 7881, 7882, 7883, 7884, 7888, 7889, 7892, 7968, 7981, 7985,
    7990, 7997, 8009, 8022, 8043, 8050, 8088, 8131, 8145, 8146, 8147, 8148, 8152, 8153, 8160, 8169, 8170, 8171, 8172,
    8173, 8181, 8180, 8196, 8197, 8200, 8201, 8204, 8212, 8213, 8214, 8215, 8220, 8219, 8240, 8252, 8265, 8264, 8283,
    8284, 8288, 8289, 8293, 8294, 8295, 8296, 8298, 8297, 8308, 8309, 8310, 8311, 8312, 8318, 8323, 8330, 8343, 8355,
    8362, 8367, 8375, 8388, 8402, 8404, 8407, 8408, 8415, 8417, 8421, 8422, 8425, 8425, 8426, 8426, 8427, 8427, 8428,
    8428, 8429, 8430, 8431, 8432, 8433, 8434, 8435, 8436, 8437, 8438, 8439, 8440, 8441, 8442, 8443, 8444, 8445, 8446,
    8447, 8448, 8449, 8450, 8451, 8456, 8457, 8461, 8462, 8466, 8476, 8486, 8499, 8512, 8525, 8538, 8550, 8551, 8560,
    8561, 8570, 8595, 8597, 8604, 8608, 8611, 8612, 8615, 8636, 8637, 8641, 8645, 8649, 8656, 8657, 8660, 8661, 8665,
    8666, 8672, 8678, 8684, 8694, 8693, 8708, 8709, 8713, 8714, 8715, 8719, 8720, 8721, 8725, 8726, 8730, 8745, 8757,
    8767, 8776, 8790, 8791, 8796, 8795, 8828, 8829, 8830, 8834, 8834, 8858, 8859, 8863, 8864, 8865, 8869, 8876, 8883,
    8890, 8897, 8904, 8910, 8925, 8933, 8934, 8938, 8943, 8951, 8952, 8957, 8958, 8960, 8962, 8968, 8977, 8987, 9006,
    9008, 9010, 9016, 9017, 9019, 9021, 9025, 9029, 9033, 9037, 9041, 9045, 9051, 9058, 9065, 9074, 9075, 9079, 9080,
    9081, 9085, 9086, 9090, 9091, 9091, 9096, 9097};
#endif

#if YYDEBUG || YYERROR_VERBOSE
/* YYTNME[SYMBOL-NUM] -- String name of the symbol SYMBOL-NUM.
   First, the terminals, then, starting at YYNTOKENS, nonterminals. */
static const char *const yytname[] = {"$end",
                                      "error",
                                      "$undefined",
                                      "END_OF_INPUT",
                                      "ABORT_SYM",
                                      "ACTION",
                                      "ADD",
                                      "ADDDATE_SYM",
                                      "AFTER_SYM",
                                      "AGAINST",
                                      "AGGREGATE_SYM",
                                      "ALGORITHM_SYM",
                                      "ALL",
                                      "ALTER",
                                      "ANALYZE_SYM",
                                      "AND_AND_SYM",
                                      "AND_SYM",
                                      "ANY_SYM",
                                      "AS",
                                      "ASC",
                                      "ASCII_SYM",
                                      "ASENSITIVE_SYM",
                                      "ATAN",
                                      "AUTO_INC",
                                      "AVG_ROW_LENGTH",
                                      "AVG_SYM",
                                      "BACKUP_SYM",
                                      "BEFORE_SYM",
                                      "BEGIN_SYM",
                                      "BENCHMARK_SYM",
                                      "BERKELEY_DB_SYM",
                                      "BIGINT",
                                      "BINARY",
                                      "BINLOG_SYM",
                                      "BIN_NUM",
                                      "BIT_AND",
                                      "BIT_OR",
                                      "BIT_SYM",
                                      "BIT_XOR",
                                      "BLOB_SYM",
                                      "BOOLEAN_SYM",
                                      "BOOL_SYM",
                                      "BOTH",
                                      "BTREE_SYM",
                                      "BY",
                                      "BYTE_SYM",
                                      "CACHE_SYM",
                                      "CALL_SYM",
                                      "CASCADE",
                                      "CASCADED",
                                      "CAST_SYM",
                                      "CHAIN_SYM",
                                      "CHANGE",
                                      "CHANGED",
                                      "CHARSET",
                                      "CHAR_SYM",
                                      "CHECKSUM_SYM",
                                      "CHECK_SYM",
                                      "CIPHER_SYM",
                                      "CLIENT_SYM",
                                      "CLOSE_SYM",
                                      "COALESCE",
                                      "COLLATE_SYM",
                                      "COLLATION_SYM",
                                      "COLUMNS",
                                      "COLUMN_SYM",
                                      "COMMENT_SYM",
                                      "COMMITTED_SYM",
                                      "COMMIT_SYM",
                                      "COMPACT_SYM",
                                      "COMPRESSED_SYM",
                                      "CONCAT",
                                      "CONCAT_WS",
                                      "CONCURRENT",
                                      "CONDITION_SYM",
                                      "CONNECTION_SYM",
                                      "CONSISTENT_SYM",
                                      "CONSTRAINT",
                                      "CONTAINS_SYM",
                                      "CONTINUE_SYM",
                                      "CONVERT_SYM",
                                      "CONVERT_TZ_SYM",
                                      "COUNT_SYM",
                                      "CREATE",
                                      "CROSS",
                                      "CUBE_SYM",
                                      "CURDATE",
                                      "CURRENT_USER",
                                      "CURSOR_SYM",
                                      "CURTIME",
                                      "DATABASE",
                                      "DATABASES",
                                      "DATA_SYM",
                                      "DATETIME",
                                      "DATE_ADD_INTERVAL",
                                      "DATE_SUB_INTERVAL",
                                      "DATE_SYM",
                                      "DAY_HOUR_SYM",
                                      "DAY_MICROSECOND_SYM",
                                      "DAY_MINUTE_SYM",
                                      "DAY_SECOND_SYM",
                                      "DAY_SYM",
                                      "DEALLOCATE_SYM",
                                      "DECIMAL_NUM",
                                      "DECIMAL_SYM",
                                      "DECLARE_SYM",
                                      "DECODE_SYM",
                                      "DEFAULT",
                                      "DEFINER_SYM",
                                      "DELAYED_SYM",
                                      "DELAY_KEY_WRITE_SYM",
                                      "DELETE_SYM",
                                      "DESC",
                                      "DESCRIBE",
                                      "DES_DECRYPT_SYM",
                                      "DES_ENCRYPT_SYM",
                                      "DES_KEY_FILE",
                                      "DETERMINISTIC_SYM",
                                      "DIRECTORY_SYM",
                                      "DISABLE_SYM",
                                      "DISCARD",
                                      "DISTINCT",
                                      "DIV_SYM",
                                      "DOUBLE_SYM",
                                      "DO_SYM",
                                      "DROP",
                                      "DUAL_SYM",
                                      "DUMPFILE",
                                      "DUPLICATE_SYM",
                                      "DYNAMIC_SYM",
                                      "EACH_SYM",
                                      "ELSEIF_SYM",
                                      "ELT_FUNC",
                                      "ENABLE_SYM",
                                      "ENCLOSED",
                                      "ENCODE_SYM",
                                      "ENCRYPT",
                                      "END",
                                      "ENGINES_SYM",
                                      "ENGINE_SYM",
                                      "ENUM",
                                      "EQ",
                                      "EQUAL_SYM",
                                      "ERRORS",
                                      "ESCAPED",
                                      "ESCAPE_SYM",
                                      "EVENTS_SYM",
                                      "EXECUTE_SYM",
                                      "EXISTS",
                                      "EXIT_SYM",
                                      "EXPANSION_SYM",
                                      "EXPORT_SET",
                                      "EXTENDED_SYM",
                                      "EXTRACT_SYM",
                                      "FALSE_SYM",
                                      "FAST_SYM",
                                      "FETCH_SYM",
                                      "FIELD_FUNC",
                                      "FILE_SYM",
                                      "FIRST_SYM",
                                      "FIXED_SYM",
                                      "FLOAT_NUM",
                                      "FLOAT_SYM",
                                      "FLUSH_SYM",
                                      "FORCE_SYM",
                                      "FOREIGN",
                                      "FORMAT_SYM",
                                      "FOR_SYM",
                                      "FOUND_SYM",
                                      "FRAC_SECOND_SYM",
                                      "FROM",
                                      "FROM_UNIXTIME",
                                      "FULL",
                                      "FULLTEXT_SYM",
                                      "FUNCTION_SYM",
                                      "FUNC_ARG0",
                                      "FUNC_ARG1",
                                      "FUNC_ARG2",
                                      "FUNC_ARG3",
                                      "GE",
                                      "GEOMCOLLFROMTEXT",
                                      "GEOMETRYCOLLECTION",
                                      "GEOMETRY_SYM",
                                      "GEOMFROMTEXT",
                                      "GEOMFROMWKB",
                                      "GET_FORMAT",
                                      "GLOBAL_SYM",
                                      "GOTO_SYM",
                                      "GRANT",
                                      "GRANTS",
                                      "GREATEST_SYM",
                                      "GROUP",
                                      "GROUP_CONCAT_SYM",
                                      "GROUP_UNIQUE_USERS",
                                      "GT_SYM",
                                      "HANDLER_SYM",
                                      "HASH_SYM",
                                      "HAVING",
                                      "HELP_SYM",
                                      "HEX_NUM",
                                      "HIGH_PRIORITY",
                                      "HOSTS_SYM",
                                      "HOUR_MICROSECOND_SYM",
                                      "HOUR_MINUTE_SYM",
                                      "HOUR_SECOND_SYM",
                                      "HOUR_SYM",
                                      "IDENT",
                                      "IDENTIFIED_SYM",
                                      "IDENT_QUOTED",
                                      "IF",
                                      "IGNORE_SYM",
                                      "IMPORT",
                                      "INDEXES",
                                      "INDEX_SYM",
                                      "INFILE",
                                      "INNER_SYM",
                                      "INNOBASE_SYM",
                                      "INOUT_SYM",
                                      "INSENSITIVE_SYM",
                                      "INSERT",
                                      "INSERT_METHOD",
                                      "INTERVAL_SYM",
                                      "INTO",
                                      "INT_SYM",
                                      "INVOKER_SYM",
                                      "IN_SYM",
                                      "IS",
                                      "ISOLATION",
                                      "ISSUER_SYM",
                                      "ITERATE_SYM",
                                      "JOIN_SYM",
                                      "KEYS",
                                      "KEY_SYM",
                                      "KILL_SYM",
                                      "LABEL_SYM",
                                      "LANGUAGE_SYM",
                                      "LAST_INSERT_ID",
                                      "LAST_SYM",
                                      "LE",
                                      "LEADING",
                                      "LEAST_SYM",
                                      "LEAVES",
                                      "LEAVE_SYM",
                                      "LEFT",
                                      "LEVEL_SYM",
                                      "LEX_HOSTNAME",
                                      "LIKE",
                                      "LIMIT",
                                      "LINEFROMTEXT",
                                      "LINES",
                                      "LINESTRING",
                                      "LOAD",
                                      "LOCAL_SYM",
                                      "LOCATE",
                                      "LOCATOR_SYM",
                                      "LOCKS_SYM",
                                      "LOCK_SYM",
                                      "LOGS_SYM",
                                      "LOG_SYM",
                                      "LONGBLOB",
                                      "LONGTEXT",
                                      "LONG_NUM",
                                      "LONG_SYM",
                                      "LOOP_SYM",
                                      "LOW_PRIORITY",
                                      "LT",
                                      "MAKE_SET_SYM",
                                      "MASTER_CONNECT_RETRY_SYM",
                                      "MASTER_HOST_SYM",
                                      "MASTER_LOG_FILE_SYM",
                                      "MASTER_LOG_POS_SYM",
                                      "MASTER_PASSWORD_SYM",
                                      "MASTER_PORT_SYM",
                                      "MASTER_POS_WAIT",
                                      "MASTER_SERVER_ID_SYM",
                                      "MASTER_SSL_CAPATH_SYM",
                                      "MASTER_SSL_CA_SYM",
                                      "MASTER_SSL_CERT_SYM",
                                      "MASTER_SSL_CIPHER_SYM",
                                      "MASTER_SSL_KEY_SYM",
                                      "MASTER_SSL_SYM",
                                      "MASTER_SYM",
                                      "MASTER_USER_SYM",
                                      "MATCH",
                                      "MAX_CONNECTIONS_PER_HOUR",
                                      "MAX_QUERIES_PER_HOUR",
                                      "MAX_ROWS",
                                      "MAX_SYM",
                                      "MAX_UPDATES_PER_HOUR",
                                      "MAX_USER_CONNECTIONS_SYM",
                                      "MEDIUMBLOB",
                                      "MEDIUMINT",
                                      "MEDIUMTEXT",
                                      "MEDIUM_SYM",
                                      "MERGE_SYM",
                                      "MICROSECOND_SYM",
                                      "MIGRATE_SYM",
                                      "MINUTE_MICROSECOND_SYM",
                                      "MINUTE_SECOND_SYM",
                                      "MINUTE_SYM",
                                      "MIN_ROWS",
                                      "MIN_SYM",
                                      "MLINEFROMTEXT",
                                      "MODE_SYM",
                                      "MODIFIES_SYM",
                                      "MODIFY_SYM",
                                      "MOD_SYM",
                                      "MONTH_SYM",
                                      "MPOINTFROMTEXT",
                                      "MPOLYFROMTEXT",
                                      "MULTILINESTRING",
                                      "MULTIPOINT",
                                      "MULTIPOLYGON",
                                      "MUTEX_SYM",
                                      "NAMES_SYM",
                                      "NAME_SYM",
                                      "NATIONAL_SYM",
                                      "NATURAL",
                                      "NCHAR_STRING",
                                      "NCHAR_SYM",
                                      "NDBCLUSTER_SYM",
                                      "NE",
                                      "NEW_SYM",
                                      "NEXT_SYM",
                                      "NONE_SYM",
                                      "NOT2_SYM",
                                      "NOT_SYM",
                                      "NOW_SYM",
                                      "NO_SYM",
                                      "NO_WRITE_TO_BINLOG",
                                      "NULL_SYM",
                                      "NUM",
                                      "NUMERIC_SYM",
                                      "NVARCHAR_SYM",
                                      "OFFSET_SYM",
                                      "OLD_PASSWORD",
                                      "ON",
                                      "ONE_SHOT_SYM",
                                      "ONE_SYM",
                                      "OPEN_SYM",
                                      "OPTIMIZE",
                                      "OPTION",
                                      "OPTIONALLY",
                                      "OR2_SYM",
                                      "ORDER_SYM",
                                      "OR_OR_SYM",
                                      "OR_SYM",
                                      "OUTER",
                                      "OUTFILE",
                                      "OUT_SYM",
                                      "PACK_KEYS_SYM",
                                      "PARTIAL",
                                      "PASSWORD",
                                      "PARAM_MARKER",
                                      "PHASE_SYM",
                                      "POINTFROMTEXT",
                                      "POINT_SYM",
                                      "POLYFROMTEXT",
                                      "POLYGON",
                                      "POSITION_SYM",
                                      "PRECISION",
                                      "PREPARE_SYM",
                                      "PREV_SYM",
                                      "PRIMARY_SYM",
                                      "PRIVILEGES",
                                      "PROCEDURE",
                                      "PROCESS",
                                      "PROCESSLIST_SYM",
                                      "PURGE",
                                      "QUARTER_SYM",
                                      "QUERY_SYM",
                                      "QUICK",
                                      "RAID_0_SYM",
                                      "RAID_CHUNKS",
                                      "RAID_CHUNKSIZE",
                                      "RAID_STRIPED_SYM",
                                      "RAID_TYPE",
                                      "RAND",
                                      "READS_SYM",
                                      "READ_SYM",
                                      "REAL",
                                      "RECOVER_SYM",
                                      "REDUNDANT_SYM",
                                      "REFERENCES",
                                      "REGEXP",
                                      "RELAY_LOG_FILE_SYM",
                                      "RELAY_LOG_POS_SYM",
                                      "RELAY_THREAD",
                                      "RELEASE_SYM",
                                      "RELOAD",
                                      "RENAME",
                                      "REPAIR",
                                      "REPEATABLE_SYM",
                                      "REPEAT_SYM",
                                      "REPLACE",
                                      "REPLICATION",
                                      "REQUIRE_SYM",
                                      "RESET_SYM",
                                      "RESOURCES",
                                      "RESTORE_SYM",
                                      "RESTRICT",
                                      "RESUME_SYM",
                                      "RETURNS_SYM",
                                      "RETURN_SYM",
                                      "REVOKE",
                                      "RIGHT",
                                      "ROLLBACK_SYM",
                                      "ROLLUP_SYM",
                                      "ROUND",
                                      "ROUTINE_SYM",
                                      "ROWS_SYM",
                                      "ROW_COUNT_SYM",
                                      "ROW_FORMAT_SYM",
                                      "ROW_SYM",
                                      "RTREE_SYM",
                                      "SAVEPOINT_SYM",
                                      "SECOND_MICROSECOND_SYM",
                                      "SECOND_SYM",
                                      "SECURITY_SYM",
                                      "SELECT_SYM",
                                      "SENSITIVE_SYM",
                                      "SEPARATOR_SYM",
                                      "SERIALIZABLE_SYM",
                                      "SERIAL_SYM",
                                      "SESSION_SYM",
                                      "SET",
                                      "SET_VAR",
                                      "SHARE_SYM",
                                      "SHIFT_LEFT",
                                      "SHIFT_RIGHT",
                                      "SHOW",
                                      "SHUTDOWN",
                                      "SIGNED_SYM",
                                      "SIMPLE_SYM",
                                      "SLAVE",
                                      "SMALLINT",
                                      "SNAPSHOT_SYM",
                                      "SOUNDS_SYM",
                                      "SPATIAL_SYM",
                                      "SPECIFIC_SYM",
                                      "SQLEXCEPTION_SYM",
                                      "SQLSTATE_SYM",
                                      "SQLWARNING_SYM",
                                      "SQL_BIG_RESULT",
                                      "SQL_BUFFER_RESULT",
                                      "SQL_CACHE_SYM",
                                      "SQL_CALC_FOUND_ROWS",
                                      "SQL_NO_CACHE_SYM",
                                      "SQL_SMALL_RESULT",
                                      "SQL_SYM",
                                      "SQL_THREAD",
                                      "SSL_SYM",
                                      "STARTING",
                                      "START_SYM",
                                      "STATUS_SYM",
                                      "STD_SYM",
                                      "STDDEV_SAMP_SYM",
                                      "STOP_SYM",
                                      "STORAGE_SYM",
                                      "STRAIGHT_JOIN",
                                      "STRING_SYM",
                                      "SUBDATE_SYM",
                                      "SUBJECT_SYM",
                                      "SUBSTRING",
                                      "SUBSTRING_INDEX",
                                      "SUM_SYM",
                                      "SUPER_SYM",
                                      "SUSPEND_SYM",
                                      "SYSDATE",
                                      "TABLES",
                                      "TABLESPACE",
                                      "TABLE_SYM",
                                      "TEMPORARY",
                                      "TEMPTABLE_SYM",
                                      "TERMINATED",
                                      "TEXT_STRING",
                                      "TEXT_SYM",
                                      "TIMESTAMP",
                                      "TIMESTAMP_ADD",
                                      "TIMESTAMP_DIFF",
                                      "TIME_SYM",
                                      "TINYBLOB",
                                      "TINYINT",
                                      "TINYTEXT",
                                      "TO_SYM",
                                      "TRAILING",
                                      "TRANSACTION_SYM",
                                      "TRIGGER_SYM",
                                      "TRIGGERS_SYM",
                                      "TRIM",
                                      "TRUE_SYM",
                                      "TRUNCATE_SYM",
                                      "TYPES_SYM",
                                      "TYPE_SYM",
                                      "UDF_RETURNS_SYM",
                                      "UDF_SONAME_SYM",
                                      "ULONGLONG_NUM",
                                      "UNCOMMITTED_SYM",
                                      "UNDEFINED_SYM",
                                      "UNDERSCORE_CHARSET",
                                      "UNDO_SYM",
                                      "UNICODE_SYM",
                                      "UNION_SYM",
                                      "UNIQUE_SYM",
                                      "UNIQUE_USERS",
                                      "UNIX_TIMESTAMP",
                                      "UNKNOWN_SYM",
                                      "UNLOCK_SYM",
                                      "UNSIGNED",
                                      "UNTIL_SYM",
                                      "UPDATE_SYM",
                                      "USAGE",
                                      "USER",
                                      "USE_FRM",
                                      "USE_SYM",
                                      "USING",
                                      "UTC_DATE_SYM",
                                      "UTC_TIMESTAMP_SYM",
                                      "UTC_TIME_SYM",
                                      "VAR_SAMP_SYM",
                                      "VALUES",
                                      "VALUE_SYM",
                                      "VARBINARY",
                                      "VARCHAR",
                                      "VARIABLES",
                                      "VARIANCE_SYM",
                                      "VARYING",
                                      "VIEW_SYM",
                                      "WARNINGS",
                                      "WEEK_SYM",
                                      "WHEN_SYM",
                                      "WHERE",
                                      "WHILE_SYM",
                                      "WITH",
                                      "WORK_SYM",
                                      "WRITE_SYM",
                                      "X509_SYM",
                                      "XA_SYM",
                                      "XOR",
                                      "YEARWEEK",
                                      "YEAR_MONTH_SYM",
                                      "YEAR_SYM",
                                      "ZEROFILL",
                                      "TABLE_REF_PRIORITY",
                                      "ELSE",
                                      "THEN_SYM",
                                      "CASE_SYM",
                                      "BETWEEN_SYM",
                                      "'|'",
                                      "'&'",
                                      "'-'",
                                      "'+'",
                                      "'*'",
                                      "'/'",
                                      "'%'",
                                      "'^'",
                                      "'~'",
                                      "NEG",
                                      "'('",
                                      "')'",
                                      "','",
                                      "'!'",
                                      "'{'",
                                      "'}'",
                                      "'@'",
                                      "'.'",
                                      "';'",
                                      "':'",
                                      "$accept",
                                      "query",
                                      "verb_clause",
                                      "statement",
                                      "deallocate",
                                      "deallocate_or_drop",
                                      "prepare",
                                      "prepare_src",
                                      "execute",
                                      "@1",
                                      "execute_using",
                                      "execute_var_list",
                                      "execute_var_ident",
                                      "help",
                                      "@2",
                                      "change",
                                      "@3",
                                      "master_defs",
                                      "master_def",
                                      "master_file_def",
                                      "create",
                                      "@4",
                                      "@5",
                                      "@6",
                                      "@7",
                                      "@8",
                                      "@9",
                                      "@10",
                                      "@11",
                                      "@12",
                                      "@13",
                                      "clear_privileges",
                                      "sp_name",
                                      "create_function_tail",
                                      "@14",
                                      "@15",
                                      "@16",
                                      "@17",
                                      "@18",
                                      "sp_a_chistics",
                                      "sp_c_chistics",
                                      "sp_chistic",
                                      "sp_c_chistic",
                                      "sp_suid",
                                      "call",
                                      "@19",
                                      "sp_cparam_list",
                                      "sp_cparams",
                                      "sp_fdparam_list",
                                      "sp_fdparams",
                                      "sp_fdparam",
                                      "sp_pdparam_list",
                                      "sp_pdparams",
                                      "sp_pdparam",
                                      "sp_opt_inout",
                                      "sp_proc_stmts",
                                      "sp_proc_stmts1",
                                      "sp_decls",
                                      "sp_decl",
                                      "@20",
                                      "@21",
                                      "sp_cursor_stmt",
                                      "@22",
                                      "sp_handler_type",
                                      "sp_hcond_list",
                                      "sp_cond",
                                      "opt_value",
                                      "sp_hcond",
                                      "sp_decl_idents",
                                      "sp_opt_default",
                                      "sp_proc_stmt",
                                      "@23",
                                      "@24",
                                      "@25",
                                      "@26",
                                      "@27",
                                      "@28",
                                      "@29",
                                      "sp_opt_fetch_noise",
                                      "sp_fetch_list",
                                      "sp_if",
                                      "@30",
                                      "@31",
                                      "@32",
                                      "sp_elseifs",
                                      "sp_case",
                                      "@33",
                                      "@34",
                                      "@35",
                                      "sp_whens",
                                      "sp_labeled_control",
                                      "@36",
                                      "sp_opt_label",
                                      "sp_unlabeled_control",
                                      "@37",
                                      "@38",
                                      "@39",
                                      "@40",
                                      "trg_action_time",
                                      "trg_event",
                                      "create2",
                                      "create2a",
                                      "@41",
                                      "create3",
                                      "@42",
                                      "@43",
                                      "create_select",
                                      "@44",
                                      "@45",
                                      "opt_as",
                                      "opt_create_database_options",
                                      "create_database_options",
                                      "create_database_option",
                                      "opt_table_options",
                                      "table_options",
                                      "table_option",
                                      "opt_if_not_exists",
                                      "opt_create_table_options",
                                      "create_table_options_space_separated",
                                      "create_table_options",
                                      "create_table_option",
                                      "default_charset",
                                      "default_collation",
                                      "storage_engines",
                                      "row_types",
                                      "raid_types",
                                      "merge_insert_types",
                                      "opt_select_from",
                                      "udf_func_type",
                                      "udf_type",
                                      "field_list",
                                      "field_list_item",
                                      "column_def",
                                      "key_def",
                                      "opt_check_constraint",
                                      "check_constraint",
                                      "opt_constraint",
                                      "constraint",
                                      "field_spec",
                                      "@46",
                                      "type",
                                      "@47",
                                      "@48",
                                      "spatial_type",
                                      "char",
                                      "nchar",
                                      "varchar",
                                      "nvarchar",
                                      "int_type",
                                      "real_type",
                                      "float_options",
                                      "precision",
                                      "field_options",
                                      "field_opt_list",
                                      "field_option",
                                      "opt_len",
                                      "opt_precision",
                                      "opt_attribute",
                                      "opt_attribute_list",
                                      "attribute",
                                      "now_or_signed_literal",
                                      "charset",
                                      "charset_name",
                                      "charset_name_or_default",
                                      "old_or_new_charset_name",
                                      "old_or_new_charset_name_or_default",
                                      "collation_name",
                                      "opt_collate",
                                      "collation_name_or_default",
                                      "opt_default",
                                      "opt_binary",
                                      "opt_bin_mod",
                                      "opt_bin_charset",
                                      "opt_primary",
                                      "references",
                                      "@49",
                                      "opt_ref_list",
                                      "ref_list",
                                      "opt_on_delete",
                                      "opt_on_delete_list",
                                      "opt_on_delete_item",
                                      "delete_option",
                                      "key_type",
                                      "constraint_key_type",
                                      "key_or_index",
                                      "opt_key_or_index",
                                      "keys_or_index",
                                      "opt_unique_or_fulltext",
                                      "key_alg",
                                      "opt_btree_or_rtree",
                                      "key_list",
                                      "key_part",
                                      "opt_ident",
                                      "opt_component",
                                      "string_list",
                                      "alter",
                                      "@50",
                                      "@51",
                                      "@52",
                                      "@53",
                                      "@54",
                                      "ident_or_empty",
                                      "alter_list",
                                      "add_column",
                                      "alter_list_item",
                                      "@55",
                                      "@56",
                                      "@57",
                                      "opt_column",
                                      "opt_ignore",
                                      "opt_restrict",
                                      "opt_place",
                                      "opt_to",
                                      "slave",
                                      "@58",
                                      "@59",
                                      "start",
                                      "start_transaction_opts",
                                      "slave_thread_opts",
                                      "@60",
                                      "slave_thread_opt_list",
                                      "slave_thread_opt",
                                      "slave_until",
                                      "slave_until_opts",
                                      "restore",
                                      "@61",
                                      "backup",
                                      "@62",
                                      "checksum",
                                      "@63",
                                      "opt_checksum_type",
                                      "repair",
                                      "@64",
                                      "opt_mi_repair_type",
                                      "mi_repair_types",
                                      "mi_repair_type",
                                      "analyze",
                                      "@65",
                                      "check",
                                      "@66",
                                      "opt_mi_check_type",
                                      "mi_check_types",
                                      "mi_check_type",
                                      "optimize",
                                      "@67",
                                      "opt_no_write_to_binlog",
                                      "rename",
                                      "@68",
                                      "rename_list",
                                      "table_to_table_list",
                                      "table_to_table",
                                      "keycache",
                                      "keycache_list",
                                      "assign_to_keycache",
                                      "key_cache_name",
                                      "preload",
                                      "@69",
                                      "preload_list",
                                      "preload_keys",
                                      "cache_keys_spec",
                                      "@70",
                                      "cache_key_list_or_empty",
                                      "opt_ignore_leaves",
                                      "select",
                                      "select_init",
                                      "select_view_init",
                                      "select_paren",
                                      "select_init2",
                                      "@71",
                                      "select_part2",
                                      "@72",
                                      "@73",
                                      "select_into",
                                      "select_from",
                                      "select_options",
                                      "select_option_list",
                                      "select_option",
                                      "select_lock_type",
                                      "select_item_list",
                                      "select_item",
                                      "remember_name",
                                      "remember_end",
                                      "select_item2",
                                      "select_alias",
                                      "optional_braces",
                                      "expr",
                                      "@74",
                                      "bool_or_expr",
                                      "bool_term",
                                      "@75",
                                      "bool_and_expr",
                                      "bool_factor",
                                      "bool_test",
                                      "bool_pri",
                                      "predicate",
                                      "bit_expr",
                                      "bit_term",
                                      "bit_factor",
                                      "value_expr",
                                      "term",
                                      "factor",
                                      "or",
                                      "and",
                                      "not",
                                      "not2",
                                      "comp_op",
                                      "all_or_any",
                                      "interval_expr",
                                      "simple_expr",
                                      "@76",
                                      "geometry_function",
                                      "fulltext_options",
                                      "udf_expr_list",
                                      "udf_expr_list2",
                                      "@77",
                                      "udf_expr_list3",
                                      "udf_expr",
                                      "sum_expr",
                                      "@78",
                                      "@79",
                                      "@80",
                                      "opt_distinct",
                                      "opt_gconcat_separator",
                                      "opt_gorder_clause",
                                      "in_sum_expr",
                                      "@81",
                                      "cast_type",
                                      "expr_list",
                                      "@82",
                                      "expr_list2",
                                      "ident_list_arg",
                                      "ident_list",
                                      "@83",
                                      "ident_list2",
                                      "opt_expr",
                                      "opt_else",
                                      "when_list",
                                      "@84",
                                      "when_list2",
                                      "table_ref",
                                      "@85",
                                      "join_table_list",
                                      "derived_table_list",
                                      "join_table",
                                      "@86",
                                      "@87",
                                      "@88",
                                      "@89",
                                      "@90",
                                      "@91",
                                      "@92",
                                      "normal_join",
                                      "table_factor",
                                      "@93",
                                      "@94",
                                      "select_derived",
                                      "@95",
                                      "select_derived2",
                                      "@96",
                                      "@97",
                                      "get_select_lex",
                                      "select_derived_init",
                                      "opt_outer",
                                      "opt_key_definition",
                                      "key_usage_list",
                                      "@98",
                                      "key_list_or_empty",
                                      "key_usage_list2",
                                      "using_list",
                                      "interval",
                                      "interval_time_st",
                                      "date_time_type",
                                      "table_alias",
                                      "opt_table_alias",
                                      "opt_all",
                                      "where_clause",
                                      "@99",
                                      "having_clause",
                                      "@100",
                                      "opt_escape",
                                      "group_clause",
                                      "group_list",
                                      "olap_opt",
                                      "opt_order_clause",
                                      "order_clause",
                                      "@101",
                                      "order_list",
                                      "order_dir",
                                      "opt_limit_clause_init",
                                      "opt_limit_clause",
                                      "limit_clause",
                                      "limit_options",
                                      "limit_option",
                                      "delete_limit_clause",
                                      "ulong_num",
                                      "ulonglong_num",
                                      "procedure_clause",
                                      "@102",
                                      "procedure_list",
                                      "procedure_list2",
                                      "procedure_item",
                                      "select_var_list_init",
                                      "@103",
                                      "select_var_list",
                                      "select_var_ident",
                                      "into",
                                      "@104",
                                      "do",
                                      "@105",
                                      "drop",
                                      "@106",
                                      "table_list",
                                      "table_name",
                                      "if_exists",
                                      "opt_temporary",
                                      "insert",
                                      "@107",
                                      "@108",
                                      "replace",
                                      "@109",
                                      "@110",
                                      "insert_lock_option",
                                      "replace_lock_option",
                                      "insert2",
                                      "insert_table",
                                      "insert_field_spec",
                                      "@111",
                                      "fields",
                                      "insert_values",
                                      "@112",
                                      "@113",
                                      "values_list",
                                      "ident_eq_list",
                                      "ident_eq_value",
                                      "equal",
                                      "opt_equal",
                                      "no_braces",
                                      "@114",
                                      "opt_values",
                                      "values",
                                      "expr_or_default",
                                      "opt_insert_update",
                                      "@115",
                                      "update",
                                      "@116",
                                      "@117",
                                      "update_list",
                                      "update_elem",
                                      "insert_update_list",
                                      "insert_update_elem",
                                      "opt_low_priority",
                                      "delete",
                                      "@118",
                                      "single_multi",
                                      "@119",
                                      "@120",
                                      "@121",
                                      "table_wild_list",
                                      "table_wild_one",
                                      "opt_wild",
                                      "opt_delete_options",
                                      "opt_delete_option",
                                      "truncate",
                                      "opt_table_sym",
                                      "show",
                                      "@122",
                                      "show_param",
                                      "@123",
                                      "@124",
                                      "show_engine_param",
                                      "master_or_binary",
                                      "opt_storage",
                                      "opt_db",
                                      "opt_full",
                                      "from_or_in",
                                      "binlog_in",
                                      "binlog_from",
                                      "wild_and_where",
                                      "describe",
                                      "@125",
                                      "@126",
                                      "describe_command",
                                      "opt_extended_describe",
                                      "opt_describe_column",
                                      "flush",
                                      "@127",
                                      "flush_options",
                                      "flush_option",
                                      "@128",
                                      "opt_table_list",
                                      "reset",
                                      "@129",
                                      "reset_options",
                                      "reset_option",
                                      "purge",
                                      "@130",
                                      "purge_options",
                                      "purge_option",
                                      "kill",
                                      "kill_option",
                                      "use",
                                      "load",
                                      "@131",
                                      "load_data",
                                      "@132",
                                      "@133",
                                      "@134",
                                      "opt_local",
                                      "load_data_lock",
                                      "opt_duplicate",
                                      "opt_field_term",
                                      "field_term_list",
                                      "field_term",
                                      "opt_line_term",
                                      "line_term_list",
                                      "line_term",
                                      "opt_ignore_lines",
                                      "opt_field_or_var_spec",
                                      "fields_or_vars",
                                      "field_or_var",
                                      "opt_load_data_set_spec",
                                      "text_literal",
                                      "text_string",
                                      "param_marker",
                                      "signed_literal",
                                      "literal",
                                      "NUM_literal",
                                      "insert_ident",
                                      "table_wild",
                                      "order_ident",
                                      "simple_ident",
                                      "simple_ident_nospvar",
                                      "simple_ident_q",
                                      "field_ident",
                                      "table_ident",
                                      "table_ident_nodb",
                                      "IDENT_sys",
                                      "TEXT_STRING_sys",
                                      "TEXT_STRING_literal",
                                      "ident",
                                      "label_ident",
                                      "ident_or_text",
                                      "user",
                                      "keyword",
                                      "keyword_sp",
                                      "set",
                                      "@135",
                                      "opt_option",
                                      "option_value_list",
                                      "option_type_value",
                                      "@136",
                                      "option_type",
                                      "option_type2",
                                      "opt_var_type",
                                      "opt_var_ident_type",
                                      "ext_option_value",
                                      "sys_option_value",
                                      "option_value",
                                      "internal_variable_name",
                                      "isolation_types",
                                      "text_or_password",
                                      "set_expr_or_default",
                                      "lock",
                                      "@137",
                                      "table_or_tables",
                                      "table_lock_list",
                                      "table_lock",
                                      "lock_option",
                                      "unlock",
                                      "@138",
                                      "handler",
                                      "@139",
                                      "handler_read_or_scan",
                                      "handler_scan_function",
                                      "handler_rkey_function",
                                      "@140",
                                      "handler_rkey_mode",
                                      "revoke",
                                      "revoke_command",
                                      "grant",
                                      "grant_command",
                                      "opt_table",
                                      "grant_privileges",
                                      "opt_privileges",
                                      "object_privilege_list",
                                      "object_privilege",
                                      "@141",
                                      "@142",
                                      "@143",
                                      "@144",
                                      "opt_and",
                                      "require_list",
                                      "require_list_element",
                                      "grant_ident",
                                      "user_list",
                                      "grant_list",
                                      "grant_user",
                                      "opt_column_list",
                                      "column_list",
                                      "column_list_id",
                                      "require_clause",
                                      "grant_options",
                                      "grant_option_list",
                                      "grant_option",
                                      "begin",
                                      "@145",
                                      "opt_work",
                                      "opt_chain",
                                      "opt_release",
                                      "opt_savepoint",
                                      "commit",
                                      "rollback",
                                      "savepoint",
                                      "release",
                                      "union_clause",
                                      "union_list",
                                      "@146",
                                      "union_opt",
                                      "union_order_or_limit",
                                      "@147",
                                      "order_or_limit",
                                      "union_option",
                                      "singlerow_subselect",
                                      "singlerow_subselect_init",
                                      "exists_subselect",
                                      "exists_subselect_init",
                                      "in_subselect",
                                      "in_subselect_init",
                                      "subselect_start",
                                      "subselect_end",
                                      "opt_view_list",
                                      "view_list",
                                      "or_replace",
                                      "algorithm",
                                      "view_user",
                                      "view_suid",
                                      "check_option",
                                      "xa",
                                      "xid",
                                      "begin_or_start",
                                      "opt_join_or_resume",
                                      "opt_one_phase",
                                      "opt_suspend",
                                      "@148",
                                      "opt_migrate",
                                      0};
#endif

#ifdef YYPRINT
/* YYTOKNUM[YYLEX-NUM] -- Internal token number corresponding to
   token YYLEX-NUM.  */
static const unsigned short yytoknum[] = {
    0,   256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277,
    278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300,
    301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323,
    324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346,
    347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369,
    370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392,
    393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415,
    416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438,
    439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461,
    462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484,
    485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507,
    508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530,
    531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553,
    554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576,
    577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599,
    600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622,
    623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645,
    646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668,
    669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691,
    692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714,
    715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737,
    738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760,
    761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783,
    784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 124, 38,  45,  43,
    42,  47,  37,  94,  126, 803, 40,  41,  44,  33,  123, 125, 64,  46,  59,  58};
#endif

/* YYR1[YYN] -- Symbol number of symbol that rule YYN derives.  */
static const unsigned short yyr1[] = {
    0,    568,  569,  569,  570,  570,  571,  571,  571,  571,  571,  571,  571,  571,  571,  571,  571,  571,  571,
    571,  571,  571,  571,  571,  571,  571,  571,  571,  571,  571,  571,  571,  571,  571,  571,  571,  571,  571,
    571,  571,  571,  571,  571,  571,  571,  571,  571,  571,  571,  571,  571,  571,  571,  572,  573,  573,  574,
    575,  575,  577,  576,  578,  578,  579,  579,  580,  582,  581,  584,  583,  585,  585,  586,  586,  586,  586,
    586,  586,  586,  586,  586,  586,  586,  586,  587,  587,  587,  587,  589,  588,  590,  588,  591,  588,  592,
    588,  593,  594,  595,  596,  588,  597,  588,  598,  588,  588,  599,  600,  600,  601,  602,  603,  604,  605,
    606,  601,  607,  607,  608,  608,  609,  609,  609,  609,  609,  609,  609,  610,  610,  610,  611,  611,  613,
    612,  614,  614,  615,  615,  616,  616,  617,  617,  618,  619,  619,  620,  620,  621,  622,  622,  622,  622,
    623,  623,  624,  624,  625,  625,  627,  626,  626,  628,  626,  626,  630,  629,  631,  631,  632,  632,  633,
    633,  634,  634,  635,  635,  635,  635,  635,  636,  636,  637,  637,  639,  638,  640,  638,  638,  641,  638,
    642,  643,  638,  638,  644,  638,  638,  638,  638,  638,  638,  645,  638,  638,  646,  646,  646,  647,  647,
    649,  650,  651,  648,  652,  652,  652,  654,  655,  656,  653,  657,  657,  657,  659,  658,  660,  660,  662,
    661,  661,  663,  664,  661,  665,  661,  666,  666,  667,  667,  667,  668,  668,  668,  668,  669,  670,  669,
    671,  672,  671,  673,  671,  675,  676,  674,  677,  677,  678,  678,  679,  679,  680,  680,  681,  681,  682,
    682,  683,  684,  684,  685,  685,  686,  686,  687,  687,  687,  688,  688,  688,  688,  688,  688,  688,  688,
    688,  688,  688,  688,  688,  688,  688,  688,  688,  688,  688,  688,  688,  688,  688,  689,  690,  691,  692,
    692,  692,  692,  692,  692,  693,  693,  693,  694,  694,  694,  695,  695,  696,  696,  697,  697,  697,  697,
    698,  698,  699,  699,  700,  700,  701,  701,  701,  701,  701,  702,  702,  703,  704,  704,  705,  707,  706,
    708,  708,  708,  708,  708,  708,  708,  708,  708,  708,  708,  708,  708,  708,  708,  708,  708,  708,  708,
    708,  708,  708,  708,  708,  708,  708,  708,  708,  708,  708,  708,  708,  708,  708,  708,  709,  708,  710,
    708,  708,  708,  711,  711,  711,  711,  711,  711,  711,  711,  712,  713,  713,  714,  714,  715,  715,  715,
    715,  715,  716,  716,  716,  716,  716,  717,  717,  717,  718,  718,  718,  719,  720,  720,  721,  721,  722,
    722,  722,  723,  723,  724,  724,  725,  725,  726,  726,  727,  727,  727,  727,  727,  727,  727,  727,  727,
    727,  727,  728,  728,  729,  729,  730,  730,  731,  731,  732,  732,  733,  733,  734,  735,  735,  736,  736,
    737,  737,  738,  738,  738,  738,  738,  738,  739,  739,  740,  740,  740,  740,  741,  741,  743,  742,  744,
    744,  745,  745,  746,  746,  747,  747,  748,  748,  748,  748,  748,  749,  749,  749,  749,  749,  750,  750,
    750,  751,  751,  752,  752,  753,  753,  754,  754,  754,  755,  755,  755,  755,  756,  756,  756,  757,  757,
    757,  758,  758,  759,  759,  760,  760,  761,  761,  762,  762,  764,  763,  765,  763,  766,  763,  767,  763,
    768,  763,  769,  769,  770,  770,  770,  770,  770,  771,  772,  772,  772,  773,  772,  774,  775,  772,  772,
    772,  772,  772,  772,  772,  772,  772,  772,  772,  772,  772,  772,  776,  776,  777,  777,  778,  778,  778,
    779,  779,  779,  780,  780,  780,  780,  782,  781,  781,  783,  781,  781,  784,  785,  785,  787,  786,  788,
    788,  789,  789,  789,  790,  790,  791,  791,  793,  792,  795,  794,  797,  796,  798,  798,  798,  800,  799,
    801,  801,  802,  802,  803,  803,  803,  805,  804,  807,  806,  808,  808,  809,  809,  810,  810,  810,  810,
    810,  812,  811,  813,  813,  813,  815,  814,  814,  816,  816,  817,  817,  818,  819,  820,  820,  821,  822,
    822,  824,  823,  825,  825,  826,  828,  827,  829,  829,  830,  830,  831,  832,  832,  833,  833,  834,  834,
    836,  835,  838,  839,  837,  840,  840,  840,  840,  840,  841,  841,  842,  842,  843,  843,  844,  844,  844,
    844,  844,  844,  844,  844,  844,  844,  845,  845,  845,  846,  846,  846,  847,  848,  849,  850,  850,  851,
    851,  851,  851,  851,  852,  852,  854,  853,  855,  855,  856,  857,  856,  858,  858,  859,  859,  860,  860,
    860,  860,  860,  860,  860,  861,  861,  861,  861,  861,  861,  862,  862,  862,  862,  862,  862,  862,  862,
    862,  862,  862,  862,  863,  863,  864,  864,  865,  865,  865,  866,  866,  866,  866,  866,  867,  867,  867,
    867,  867,  867,  868,  868,  869,  869,  870,  870,  871,  871,  872,  872,  873,  873,  873,  873,  873,  873,
    874,  874,  875,  876,  876,  876,  876,  876,  876,  876,  876,  876,  876,  876,  876,  876,  876,  876,  876,
    876,  876,  876,  876,  876,  876,  876,  876,  876,  876,  876,  876,  876,  876,  876,  876,  876,  876,  876,
    876,  876,  876,  876,  876,  876,  876,  876,  876,  876,  876,  876,  876,  876,  876,  876,  876,  876,  876,
    876,  876,  876,  876,  876,  876,  876,  876,  876,  876,  876,  876,  876,  876,  876,  876,  876,  876,  876,
    876,  876,  876,  876,  876,  876,  876,  876,  876,  876,  876,  876,  876,  876,  876,  876,  876,  876,  876,
    876,  876,  876,  876,  876,  876,  876,  876,  876,  876,  876,  876,  876,  876,  876,  876,  876,  876,  876,
    876,  876,  876,  876,  876,  876,  876,  876,  876,  876,  876,  876,  876,  876,  876,  876,  876,  876,  876,
    876,  877,  876,  876,  876,  876,  876,  876,  876,  876,  876,  876,  876,  876,  876,  876,  876,  878,  878,
    878,  878,  878,  878,  878,  878,  878,  878,  878,  878,  878,  878,  878,  878,  878,  878,  878,  878,  878,
    878,  878,  878,  878,  878,  879,  879,  879,  880,  880,  882,  881,  883,  883,  884,  885,  885,  885,  885,
    885,  885,  885,  886,  887,  885,  885,  885,  885,  885,  885,  885,  885,  885,  885,  885,  885,  888,  885,
    889,  889,  890,  890,  891,  891,  893,  892,  894,  894,  894,  894,  894,  894,  894,  894,  894,  894,  894,
    896,  895,  897,  897,  898,  898,  900,  899,  901,  901,  902,  902,  903,  903,  905,  904,  906,  906,  907,
    908,  907,  909,  910,  910,  911,  911,  912,  911,  913,  911,  914,  911,  915,  911,  916,  911,  911,  917,
    911,  918,  911,  911,  911,  919,  919,  919,  921,  920,  922,  920,  920,  920,  924,  923,  926,  927,  925,
    928,  929,  930,  930,  931,  931,  931,  931,  933,  932,  934,  934,  935,  935,  935,  936,  936,  937,  937,
    937,  937,  937,  937,  937,  937,  937,  937,  937,  937,  937,  938,  938,  938,  938,  938,  938,  938,  938,
    938,  939,  939,  939,  939,  940,  940,  940,  941,  941,  942,  942,  943,  944,  943,  945,  946,  945,  947,
    947,  948,  948,  949,  949,  950,  950,  950,  951,  951,  953,  952,  954,  954,  955,  955,  955,  956,  956,
    957,  957,  958,  959,  959,  959,  960,  960,  960,  960,  961,  961,  962,  962,  962,  962,  962,  962,  963,
    963,  963,  963,  963,  964,  965,  964,  966,  966,  967,  967,  968,  970,  969,  971,  971,  972,  972,  974,
    973,  973,  973,  976,  975,  977,  978,  977,  977,  977,  977,  977,  977,  977,  979,  979,  980,  981,  981,
    982,  982,  984,  985,  983,  987,  988,  986,  989,  989,  989,  989,  990,  990,  991,  991,  992,  993,  993,
    993,  994,  993,  995,  995,  996,  996,  997,  996,  998,  996,  999,  999,  1000, 1000, 1001, 1002, 1002, 1003,
    1003, 1005, 1004, 1006, 1006, 1007, 1007, 1008, 1008, 1009, 1010, 1009, 1012, 1013, 1011, 1014, 1014, 1015, 1016,
    1016, 1017, 1018, 1018, 1020, 1019, 1022, 1021, 1023, 1021, 1024, 1021, 1025, 1025, 1026, 1026, 1027, 1027, 1028,
    1028, 1029, 1029, 1029, 1030, 1031, 1031, 1033, 1032, 1034, 1034, 1034, 1034, 1034, 1035, 1034, 1034, 1034, 1034,
    1034, 1036, 1034, 1034, 1034, 1034, 1034, 1034, 1034, 1034, 1034, 1034, 1034, 1034, 1034, 1034, 1034, 1034, 1034,
    1034, 1034, 1034, 1034, 1034, 1034, 1034, 1034, 1034, 1034, 1034, 1034, 1034, 1037, 1037, 1038, 1038, 1039, 1039,
    1040, 1040, 1041, 1041, 1042, 1042, 1043, 1043, 1044, 1044, 1045, 1045, 1045, 1047, 1046, 1048, 1046, 1049, 1049,
    1050, 1050, 1051, 1051, 1051, 1053, 1052, 1054, 1054, 1056, 1055, 1055, 1055, 1055, 1055, 1055, 1055, 1055, 1055,
    1055, 1055, 1057, 1057, 1059, 1058, 1060, 1060, 1061, 1061, 1061, 1063, 1062, 1064, 1065, 1065, 1066, 1067, 1067,
    1067, 1068, 1070, 1069, 1069, 1072, 1073, 1074, 1071, 1071, 1075, 1075, 1076, 1076, 1076, 1077, 1077, 1077, 1078,
    1078, 1079, 1079, 1080, 1080, 1080, 1080, 1081, 1081, 1082, 1082, 1083, 1083, 1084, 1084, 1085, 1085, 1085, 1086,
    1086, 1087, 1087, 1088, 1088, 1089, 1089, 1089, 1089, 1090, 1090, 1090, 1091, 1092, 1092, 1092, 1093, 1093, 1093,
    1093, 1093, 1093, 1093, 1093, 1093, 1093, 1093, 1093, 1094, 1094, 1094, 1094, 1094, 1095, 1095, 1096, 1096, 1097,
    1098, 1098, 1099, 1099, 1100, 1100, 1100, 1101, 1101, 1101, 1101, 1102, 1102, 1102, 1103, 1104, 1104, 1105, 1106,
    1107, 1107, 1108, 1108, 1109, 1109, 1109, 1110, 1110, 1110, 1111, 1111, 1111, 1111, 1111, 1111, 1111, 1111, 1111,
    1111, 1111, 1111, 1111, 1111, 1111, 1111, 1111, 1111, 1111, 1111, 1111, 1111, 1111, 1111, 1111, 1111, 1111, 1111,
    1111, 1111, 1111, 1111, 1111, 1111, 1111, 1111, 1112, 1112, 1112, 1112, 1112, 1112, 1112, 1112, 1112, 1112, 1112,
    1112, 1112, 1112, 1112, 1112, 1112, 1112, 1112, 1112, 1112, 1112, 1112, 1112, 1112, 1112, 1112, 1112, 1112, 1112,
    1112, 1112, 1112, 1112, 1112, 1112, 1112, 1112, 1112, 1112, 1112, 1112, 1112, 1112, 1112, 1112, 1112, 1112, 1112,
    1112, 1112, 1112, 1112, 1112, 1112, 1112, 1112, 1112, 1112, 1112, 1112, 1112, 1112, 1112, 1112, 1112, 1112, 1112,
    1112, 1112, 1112, 1112, 1112, 1112, 1112, 1112, 1112, 1112, 1112, 1112, 1112, 1112, 1112, 1112, 1112, 1112, 1112,
    1112, 1112, 1112, 1112, 1112, 1112, 1112, 1112, 1112, 1112, 1112, 1112, 1112, 1112, 1112, 1112, 1112, 1112, 1112,
    1112, 1112, 1112, 1112, 1112, 1112, 1112, 1112, 1112, 1112, 1112, 1112, 1112, 1112, 1112, 1112, 1112, 1112, 1112,
    1112, 1112, 1112, 1112, 1112, 1112, 1112, 1112, 1112, 1112, 1112, 1112, 1112, 1112, 1112, 1112, 1112, 1112, 1112,
    1112, 1112, 1112, 1112, 1112, 1112, 1112, 1112, 1112, 1112, 1112, 1112, 1112, 1112, 1112, 1112, 1112, 1112, 1112,
    1112, 1112, 1112, 1112, 1112, 1112, 1112, 1112, 1112, 1112, 1112, 1112, 1112, 1112, 1112, 1112, 1112, 1112, 1112,
    1112, 1112, 1112, 1112, 1112, 1112, 1112, 1112, 1112, 1112, 1112, 1112, 1112, 1112, 1112, 1112, 1112, 1112, 1112,
    1112, 1112, 1112, 1112, 1112, 1112, 1112, 1112, 1112, 1112, 1114, 1113, 1115, 1115, 1116, 1116, 1118, 1117, 1119,
    1119, 1119, 1119, 1120, 1120, 1121, 1121, 1121, 1121, 1122, 1122, 1122, 1122, 1123, 1123, 1124, 1124, 1125, 1125,
    1125, 1125, 1125, 1125, 1125, 1126, 1126, 1126, 1127, 1127, 1127, 1127, 1128, 1128, 1128, 1129, 1129, 1129, 1129,
    1129, 1131, 1130, 1132, 1132, 1133, 1133, 1134, 1135, 1135, 1135, 1135, 1137, 1136, 1138, 1138, 1139, 1138, 1140,
    1140, 1141, 1141, 1142, 1142, 1142, 1142, 1143, 1142, 1144, 1144, 1144, 1144, 1144, 1145, 1146, 1146, 1146, 1146,
    1147, 1148, 1148, 1148, 1149, 1149, 1150, 1150, 1151, 1151, 1152, 1152, 1154, 1153, 1155, 1153, 1156, 1153, 1157,
    1153, 1153, 1153, 1153, 1153, 1153, 1153, 1153, 1153, 1153, 1153, 1153, 1153, 1153, 1153, 1153, 1153, 1153, 1153,
    1153, 1153, 1153, 1153, 1153, 1158, 1158, 1159, 1159, 1160, 1160, 1160, 1161, 1161, 1161, 1161, 1162, 1162, 1163,
    1163, 1164, 1164, 1164, 1165, 1165, 1166, 1166, 1167, 1168, 1168, 1168, 1168, 1168, 1169, 1169, 1170, 1170, 1171,
    1171, 1171, 1171, 1171, 1173, 1172, 1174, 1174, 1175, 1175, 1175, 1176, 1176, 1176, 1177, 1177, 1178, 1179, 1179,
    1180, 1181, 1182, 1182, 1184, 1183, 1185, 1185, 1185, 1187, 1186, 1188, 1188, 1189, 1189, 1189, 1190, 1191, 1192,
    1193, 1194, 1195, 1196, 1197, 1198, 1198, 1199, 1199, 1200, 1200, 1201, 1201, 1201, 1201, 1202, 1202, 1202, 1203,
    1203, 1203, 1204, 1204, 1204, 1204, 1205, 1205, 1205, 1205, 1205, 1205, 1206, 1206, 1206, 1207, 1207, 1208, 1208,
    1208, 1209, 1209, 1210, 1211, 1210, 1212, 1212};

/* YYR2[YYN] -- Number of symbols composing right hand side of rule YYN.  */
static const unsigned char yyr2[] = {
    0, 2, 1, 2, 1, 1,  1,  1,  1,  1, 1,  1, 1, 1, 1, 1, 1, 1,  1, 1, 1, 1,  1, 1, 1,  1, 1, 1,  1, 1, 1,  1, 1,  1, 1,
    1, 1, 1, 1, 1, 1,  1,  1,  1,  1, 1,  1, 1, 1, 1, 1, 1, 1,  3, 1, 1, 4,  1, 2, 0,  4, 0, 2,  3, 1, 2,  0, 3,  0, 5,
    1, 3, 3, 3, 3, 3,  3,  3,  3,  3, 3,  3, 3, 1, 3, 3, 3, 3,  0, 7, 0, 11, 0, 6, 0,  6, 0, 0,  0, 0, 12, 0, 12, 0, 12,
    4, 0, 3, 1, 4, 0,  0,  0,  0,  0, 12, 0, 2, 0, 2, 2, 2, 2,  2, 3, 3, 1,  1, 1, 2,  3, 3, 0,  6, 0, 1,  3, 1,  0, 1,
    3, 1, 2, 0, 1, 3,  1,  3,  0,  1, 1,  1, 0, 3, 2, 3, 0, 3,  0, 5, 5, 0,  7, 5, 0,  2, 1, 1,  1, 3, 1,  3, 0,  1, 1,
    1, 1, 2, 1, 1, 3,  0,  2,  0,  2, 0,  3, 4, 0, 6, 0, 0, 8,  1, 0, 2, 2,  2, 2, 2,  2, 0, 6,  2, 0, 2,  1, 1,  3, 0,
    0, 0, 7, 0, 2, 2,  0,  0,  0,  7, 0,  2, 2, 0, 5, 0, 1, 0,  5, 4, 0, 0,  8, 0, 7,  1, 1, 1,  1, 1, 2,  2, 2,  4, 4,
    0, 4, 0, 0, 5, 0,  7,  0,  0,  6, 0,  1, 0, 1, 1, 2, 1, 1,  0, 1, 1, 2,  1, 0, 3,  0, 1, 1,  2, 1, 2,  3, 3,  3, 3,
    3, 3, 3, 3, 3, 3,  3,  3,  3,  3, 3,  3, 3, 5, 1, 1, 3, 4,  4, 3, 4, 4,  1, 1, 1,  1, 1, 1,  1, 1, 1,  1, 1,  1, 1,
    1, 2, 0, 1, 1, 1,  1,  1,  1,  3, 1,  1, 2, 2, 6, 7, 8, 2,  2, 0, 1, 2,  0, 1, 2,  0, 4, 3,  3, 3, 1,  4, 1,  1, 5,
    2, 5, 2, 4, 1, 5,  5,  4,  3,  1, 1,  2, 1, 1, 2, 1, 1, 1,  2, 3, 2, 3,  2, 2, 3,  3, 3, 0,  6, 0, 6,  2, 1,  1, 1,
    1, 1, 1, 1, 1, 1,  1,  1,  2,  2, 1,  2, 1, 2, 3, 2, 1, 1,  1, 1, 1, 1,  1, 2, 0,  3, 1, 5,  0, 1, 2,  1, 1,  1, 1,
    0, 3, 0, 1, 0, 1,  2,  1,  1,  2, 2,  4, 1, 3, 2, 1, 2, 2,  2, 2, 1, 2,  1, 1, 1,  1, 1, 1,  1, 1, 1,  1, 0,  2, 1,
    1, 0, 1, 0, 2, 1,  2,  3,  2,  0, 1,  0, 1, 1, 2, 0, 1, 0,  4, 1, 4, 3,  1, 0, 1,  2, 1, 3,  3, 2, 2,  2, 1,  1, 2,
    2, 2, 1, 2, 2, 2,  2,  1,  1,  0, 1,  1, 1, 1, 0, 1, 1, 1,  0, 2, 2, 1,  1, 1, 4,  2, 1, 4,  0, 1, 0,  2, 1,  3, 0,
    6, 0, 5, 0, 5, 0,  5,  0,  11, 0, 1,  0, 2, 2, 1, 3, 2, 3,  2, 4, 0, 6,  0, 0, 8,  4, 4, 3,  3, 2, 2,  6, 5,  3, 5,
    1, 1, 1, 0, 1, 0,  1,  0,  1,  1, 0,  2, 1, 0, 1, 1, 1, 0,  5, 3, 0, 5,  3, 3, 0,  3, 0, 2,  1, 3, 0,  1, 1,  0, 2,
    1, 3, 0, 6, 0, 6,  0,  5,  0,  1, 1,  0, 6, 0, 1, 1, 2, 1,  1, 1, 0, 6,  0, 5, 0,  1, 1, 2,  1, 1, 1,  1, 1,  0, 6,
    0, 1, 1, 0, 4, 4,  3,  5,  1,  3, 3,  5, 1, 3, 2, 1, 1, 0,  6, 1, 3, 3,  0, 2, 0,  4, 0, 2,  1, 2, 4,  3, 5,  2, 3,
    0, 3, 0, 0, 6, 2,  1,  1,  2,  2, 8,  4, 0, 1, 2, 1, 1, 1,  1, 1, 1, 1,  1, 1, 1,  1, 0, 2,  4, 3, 1,  1, 4,  0, 0,
    1, 1, 0, 2, 2, 1,  1,  0,  2,  0, 3,  0, 3, 3, 0, 3, 0, 3,  2, 1, 3, 4,  3, 4, 3,  4, 1, 3,  4, 3, 3,  4, 1,  5, 6,
    3, 4, 5, 6, 4, 4,  5,  3,  4,  1, 3,  1, 3, 1, 3, 3, 1, 3,  3, 4, 4, 1,  3, 3, 3,  3, 3, 1,  3, 1, 1,  1, 1,  1, 1,
    1, 1, 1, 1, 1, 1,  1,  1,  1,  1, 1,  2, 1, 3, 1, 1, 4, 2,  5, 1, 3, 2,  2, 2, 2,  3, 5, 6,  2, 1, 4,  7, 4,  2, 6,
    6, 6, 6, 4, 4, 3,  4,  6,  8,  6, 8,  6, 4, 6, 4, 6, 4, 4,  4, 4, 6, 8,  2, 2, 4,  2, 7, 7,  3, 4, 4,  6, 6,  4, 6,
    6, 6, 4, 6, 4, 6,  8,  10, 12, 6, 4,  6, 6, 1, 6, 4, 8, 10, 4, 1, 3, 4,  6, 6, 8,  6, 6, 4,  6, 6, 8,  4, 4,  6, 4,
    2, 4, 4, 4, 6, 4,  4,  3,  8,  6, 4,  6, 3, 6, 8, 4, 8, 6,  8, 6, 8, 2,  4, 4, 4,  6, 8, 8,  4, 7, 7,  7, 6,  6, 6,
    6, 6, 6, 0, 5, 10, 3,  4,  3,  2, 2,  2, 4, 6, 4, 4, 6, 6,  6, 6, 4, 6,  4, 6, 4,  4, 4, 4,  6, 4, 6,  4, 6,  4, 4,
    6, 4, 6, 4, 6, 4,  4,  6,  4,  6, 0,  3, 3, 0, 1, 0, 2, 1,  3, 4, 4, 5,  4, 4, 4,  5, 4, 0,  0, 7, 10, 4, 5,  4, 5,
    4, 4, 4, 4, 4, 5,  0,  8,  0,  1, 0,  2, 0, 1, 0, 3, 2, 3,  2, 1, 2, 1,  2, 1, 1,  1, 2, 0,  2, 1, 3,  1, 3,  0, 2,
    1, 3, 0, 1, 0, 2,  0,  2,  3,  5, 1,  0, 2, 1, 1, 3, 3, 3,  0, 6, 0, 6,  0, 8, 0,  8, 0, 10, 6, 0, 8,  0, 10, 6, 4,
    1, 2, 2, 0, 4, 0,  11, 3,  6,  0, 3,  0, 0, 5, 0, 1, 0, 1,  0, 2, 2, 2,  0, 5, 0,  1, 3, 1,  1, 1, 3,  1, 1,  1, 1,
    1, 1, 1, 1, 1, 1,  1,  1,  1,  1, 1,  1, 1, 1, 1, 1, 1, 1,  1, 1, 1, 1,  0, 1, 1,  0, 2, 0,  1, 0, 0,  3, 0,  0, 3,
    2, 0, 0, 4, 4, 2,  0,  2,  2,  0, 1,  0, 4, 4, 2, 0, 1, 1,  0, 1, 0, 1,  2, 1, 3,  3, 1, 1,  1, 1, 0,  2, 1,  1, 1,
    1, 1, 1, 1, 1, 1,  1,  1,  0,  0, 6,  0, 1, 3, 1, 2, 0, 2,  3, 1, 2, 1,  0, 6, 3,  2, 0, 3,  6, 0, 6,  4, 4,  4, 4,
    5, 3, 1, 3, 1, 0,  2,  0,  1,  0, 0,  8, 0, 0, 6, 0, 1, 1,  1, 1, 1, 2,  1, 1, 1,  3, 4, 0,  3, 3, 1,  2, 2,  0, 3,
    0, 5, 3, 1, 3, 1,  3,  1,  1,  0, 1,  0, 4, 0, 1, 3, 1, 1,  1, 0, 0, 6,  0, 0, 11, 3, 1, 3,  3, 1, 3,  0, 1,  0, 4,
    0, 6, 0, 5, 0, 6,  1,  3,  3,  5, 0,  2, 0, 2, 1, 1, 1, 3,  0, 1, 0, 3,  2, 4, 4,  4, 4, 0,  4, 6, 16, 2, 2,  0, 6,
    5, 2, 2, 2, 1, 5,  5,  2,  2,  3, 2,  2, 2, 3, 2, 2, 2, 1,  1, 3, 4, 3,  3, 2, 2,  3, 3, 3,  3, 1, 1,  1, 1,  0, 1,
    0, 2, 0, 1, 1, 1,  0,  2,  0,  2, 0,  2, 2, 0, 4, 0, 4, 1,  1, 0, 1, 0,  1, 1, 0,  4, 3, 1,  0, 3, 4,  2, 1,  1, 1,
    1, 1, 1, 1, 1, 0,  1,  0,  3,  3, 1,  1, 1, 2, 0, 3, 3, 2,  2, 3, 0, 1,  1, 2, 0,  4, 5, 0,  0, 0, 16, 2, 0,  1, 0,
    1, 1, 0, 1, 1, 0,  2,  2,  1,  3, 4,  3, 3, 0, 2, 2, 1, 3,  3, 0, 3, 0,  3, 2, 3,  1, 1, 2,  0, 2, 1,  1, 2,  2, 1,
    1, 1, 1, 1, 2, 2,  1,  1,  1,  1, 1,  1, 1, 2, 2, 2, 2, 2,  1, 1, 1, 1,  1, 1, 1,  3, 5, 1,  1, 1, 1,  1, 3,  4, 5,
    1, 5, 3, 2, 1, 3,  2,  1,  1,  1, 1,  1, 1, 1, 1, 1, 1, 1,  1, 1, 3, 2,  1, 1, 1,  1, 1, 1,  1, 1, 1,  1, 1,  1, 1,
    1, 1, 1, 1, 1, 1,  1,  1,  1,  1, 1,  1, 1, 1, 1, 1, 1, 1,  1, 1, 1, 1,  1, 1, 1,  1, 1, 1,  1, 1, 1,  1, 1,  1, 1,
    1, 1, 1, 1, 1, 1,  1,  1,  1,  1, 1,  1, 1, 1, 1, 1, 1, 1,  1, 1, 1, 1,  1, 1, 1,  1, 1, 1,  1, 1, 1,  1, 1,  1, 1,
    1, 1, 1, 1, 1, 1,  1,  1,  1,  1, 1,  1, 1, 1, 1, 1, 1, 1,  1, 1, 1, 1,  1, 1, 1,  1, 1, 1,  1, 1, 1,  1, 1,  1, 1,
    1, 1, 1, 1, 1, 1,  1,  1,  1,  1, 1,  1, 1, 1, 1, 1, 1, 1,  1, 1, 1, 1,  1, 1, 1,  1, 1, 1,  1, 1, 1,  1, 1,  1, 1,
    1, 1, 1, 1, 1, 1,  1,  1,  1,  1, 1,  1, 1, 1, 1, 1, 1, 1,  1, 1, 1, 1,  1, 1, 1,  1, 1, 1,  1, 1, 1,  1, 1,  1, 1,
    1, 1, 1, 1, 1, 1,  1,  1,  1,  1, 1,  1, 1, 1, 1, 1, 1, 1,  1, 1, 1, 1,  1, 1, 1,  1, 1, 1,  1, 1, 1,  1, 1,  1, 1,
    1, 1, 1, 1, 1, 1,  1,  1,  1,  1, 1,  1, 1, 1, 1, 1, 1, 1,  1, 1, 1, 1,  1, 1, 0,  4, 0, 1,  1, 3, 0,  2, 1,  1, 1,
    1, 0, 1, 0, 1, 1,  1,  0,  2,  2, 2,  1, 2, 4, 5, 4, 6, 2,  3, 3, 3, 5,  1, 3, 3,  2, 2, 2,  1, 1, 4,  4, 1,  1, 1,
    1, 1, 0, 4, 1, 1,  1,  3,  3,  1, 1,  2, 2, 0, 3, 4, 3, 0,  7, 1, 2, 1,  1, 1, 1,  1, 1, 0,  5, 1, 1,  1, 1,  1, 3,
    6, 6, 6, 7, 3, 8,  8,  8,  0,  1, 1,  2, 0, 1, 1, 3, 0, 3,  0, 3, 0, 3,  0, 3, 1,  1, 1, 1,  1, 1, 1,  1, 1,  1, 1,
    2, 2, 1, 3, 2, 2,  2,  2,  2,  2, 2,  2, 0, 1, 3, 1, 2, 2,  2, 1, 3, 3,  1, 1, 3,  1, 3, 4,  5, 1, 0,  3, 3,  1, 1,
    0, 2, 2, 2, 2, 0,  2,  2,  1,  2, 2,  2, 2, 2, 0, 3, 0, 1,  0, 3, 2, 0,  1, 2, 0,  1, 4, 4,  5, 2, 3,  0, 1,  0, 4,
    0, 1, 1, 0, 2, 2,  1,  0,  1,  1, 3,  1, 3, 1, 3, 1, 2, 1,  0, 3, 1, 3,  0, 2, 0,  3, 3, 3,  0, 2, 5,  0, 3,  3, 0,
    3, 4, 4, 4, 4, 3,  4,  3,  2,  1, 3,  5, 1, 1, 0, 1, 1, 0,  2, 0, 0, 3,  0, 2};

/* YYDEFACT[STATE-NAME] -- Default rule to reduce with in state
   STATE-NUM when YYTABLE doesn't specify something else to do.  Zero
   means the default is an error.  */
static const unsigned short yydefact[] = {
    0,    2,    1949, 630,  0,    1904, 0,    0,    0,    0,    0,    1906, 1947, 54,   1258, 1347, 1348, 1181, 1197,
    0,    630,  106,  0,    66,   1199, 1385, 0,    0,    630,  0,    1379, 0,    0,    630,  1202, 1372, 0,    106,
    1906, 0,    667,  1741, 1280, 0,    0,    0,    1278, 1798, 1247, 0,    0,    0,    0,    0,    4,    15,   0,
    32,   20,   24,   10,   14,   9,    6,    46,   47,   39,   8,    12,   36,   7,    11,   29,   35,   30,   31,
    43,   658,  18,   19,   25,   37,   50,   16,   48,   45,   17,   1349, 21,   38,   33,   26,   51,   27,   44,
    28,   49,   23,   40,   22,   5,    13,   41,   42,   34,   52,   0,    534,  0,    566,  0,    0,    1953, 632,
    631,  0,    1790, 1789, 599,  1906, 0,    1528, 1529, 1530, 1531, 1532, 1533, 1534, 1493, 1535, 1536, 1537, 1494,
    1495, 1538, 1539, 1540, 1542, 1541, 1543, 1496, 1497, 1544, 1545, 1546, 1498, 1499, 1547, 1548, 1500, 1549, 1550,
    1501, 1551, 1502, 1552, 1553, 1554, 1555, 1503, 1556, 1557, 1558, 1559, 1560, 1504, 1561, 1562, 1563, 1564, 1579,
    1565, 1505, 1566, 1567, 1568, 1580, 1506, 1571, 1570, 1569, 1572, 1573, 1574, 1507, 1575, 1576, 1577, 1582, 1583,
    1584, 1508, 1578, 1585, 1581, 1724, 1587, 1586, 1588, 1590, 1589, 1509, 1591, 1510, 1592, 1593, 1478, 1594, 1479,
    1596, 1597, 1600, 1601, 1595, 1598, 1599, 1511, 1603, 1604, 1605, 1606, 1607, 1608, 1609, 1619, 1612, 1614, 1615,
    1617, 1613, 1618, 1622, 1621, 1623, 1624, 1625, 1620, 1611, 1616, 1626, 1627, 1610, 1628, 1629, 1630, 1631, 1632,
    1633, 1634, 1635, 1637, 1636, 1638, 1639, 1640, 1641, 1642, 1644, 1643, 1645, 1646, 1647, 1649, 1648, 1650, 1512,
    1651, 1652, 1653, 1654, 1655, 1513, 1656, 1657, 1658, 1659, 1660, 1661, 1514, 1662, 1663, 1664, 1665, 1666, 1667,
    1668, 1669, 1670, 1671, 1672, 1673, 1674, 1675, 1676, 1677, 1602, 1678, 1515, 1679, 1680, 1516, 1681, 1517, 1682,
    1683, 1518, 1684, 1685, 1686, 1687, 1688, 1689, 1519, 1690, 1520, 1692, 1691, 1693, 1695, 1696, 1521, 1694, 1522,
    1697, 1698, 1700, 1699, 1701, 1702, 1523, 1703, 1524, 1704, 1705, 1706, 1707, 1708, 1709, 1710, 1711, 1712, 1713,
    1714, 1717, 1718, 1719, 1720, 1715, 1716, 1525, 1721, 1722, 1723, 1725, 1726, 1526, 1727, 1728, 1729, 1730, 1733,
    1731, 1732, 1734, 1735, 1736, 1737, 1527, 1738, 132,  1482, 108,  1483, 1492, 0,    601,  617,  1907, 1908, 318,
    268,  506,  0,    0,    507,  267,  0,    505,  106,  0,    264,  265,  0,    0,    1949, 1272, 1007, 1195, 1195,
    0,    1195, 1198, 0,    106,  1195, 0,    59,   1354, 0,    0,    0,    0,    1477, 0,    1205, 1386, 1387, 0,
    1389, 0,    0,    1787, 0,    0,    0,    0,    106,  633,  0,    1256, 0,    597,  0,    1908, 1919, 659,  665,
    677,  1742, 1739, 1332, 586,  586,  586,  584,  586,  1279, 0,    0,    1256, 1388, 1972, 0,    0,    0,    1968,
    0,    1973, 0,    667,  0,    0,    1,    3,    0,    1576, 1345, 1343, 1474, 0,    526,  535,  530,  528,  0,
    707,  0,    1956, 615,  0,    1905, 0,    642,  652,  0,    0,    68,   0,    0,    0,    1911, 0,    0,    1948,
    96,   0,    0,    268,  266,  0,    0,    1953, 1276, 1275, 1274, 0,    1272, 1182, 0,    0,    0,    0,    0,
    0,    1191, 0,    0,    1195, 61,   0,    1832, 1847, 1848, 1844, 1849, 1850, 1854, 0,    1846, 1838, 0,    1853,
    1842, 1851, 0,    1836, 0,    1852, 1857, 1840, 1845, 1824, 0,    1830, 1834, 1476, 1107, 1801, 1802, 0,    1488,
    1480, 1487, 1486, 67,   1207, 1208, 1206, 565,  1529, 1493, 0,    1537, 0,    0,    1447, 0,    0,    0,    0,
    1498, 0,    0,    1549, 0,    0,    1503, 0,    0,    0,    707,  707,  707,  0,    0,    0,    1559, 1560, 1456,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    1444, 0,    1457, 0,    0,    0,    0,    0,    0,
    0,    1587, 0,    0,    1588, 0,    0,    0,    1446, 1593, 0,    0,    0,    0,    0,    0,    0,    1606, 0,
    0,    1454, 0,    0,    1013, 0,    1632, 1634, 0,    0,    0,    1638, 0,    0,    1639, 1640, 1641, 1431, 772,
    0,    707,  1443, 1453, 1653, 1658, 1437, 0,    1660, 0,    1661, 0,    1666, 0,    0,    0,    0,    0,    0,
    1688, 1690, 0,    0,    1706, 0,    0,    0,    707,  1481, 1717, 1718, 1719, 1720, 0,    1445, 1525, 1455, 0,
    0,    0,    1729, 707,  707,  707,  0,    0,    0,    1735, 0,    1738, 1017, 0,    0,    0,    0,    771,  0,
    0,    0,    1384, 709,  714,  719,  726,  732,  744,  746,  748,  751,  756,  762,  0,    859,  764,  853,  789,
    1441, 785,  784,  1442, 782,  1464, 1482, 1430, 1463, 799,  667,  1399, 0,    0,    0,    628,  0,    1327, 1326,
    0,    1380, 1920, 0,    0,    606,  1210, 1257, 0,    1209, 1377, 0,    1376, 1373, 1375, 0,    1832, 1819, 0,
    1914, 1911, 1921, 690,  683,  682,  685,  686,  689,  687,  688,  684,  681,  698,  678,  680,  1745, 0,    0,
    442,  0,    1340, 0,    0,    0,    1340, 0,    1138, 1333, 0,    1754, 1313, 503,  502,  0,    501,  1755, 1312,
    1326, 0,    0,    0,    1299, 0,    1756, 0,    1329, 0,    1138, 1340, 0,    1281, 0,    0,    0,    0,    580,
    590,  582,  577,  0,    583,  579,  1277, 1194, 1799, 565,  1436, 1435, 1969, 1434, 1977, 1979, 1965, 1967, 1974,
    663,  0,    1925, 53,   0,    1351, 1951, 1952, 1950, 456,  116,  116,  524,  0,    1954, 0,    0,    0,    0,
    0,    1192, 0,    0,    644,  654,  134,  107,  0,    603,  619,  1910, 0,    0,    1912, 1916, 770,  769,  0,
    92,   0,    236,  235,  0,    707,  1489, 1884, 105,  1880, 0,    94,   508,  1956, 0,    1259, 1262, 1266, 1270,
    1273, 1009, 1008, 1196, 1186, 1187, 0,    1188, 1878, 1189, 567,  0,    0,    60,   1368, 1362, 1364, 1367, 1363,
    0,    1369, 1366, 1365, 1790, 1355, 1357, 1358, 1833, 1831, 1865, 1864, 0,    1866, 1862, 1855, 1885, 1859, 1885,
    1861, 1860, 1885, 1856, 1863, 1885, 1828, 0,    1108, 1109, 0,    1800, 0,    1475, 0,    0,    0,    0,    1112,
    0,    803,  1112, 1112, 1112, 0,    0,    1007, 1007, 0,    1007, 0,    0,    0,    0,    1112, 827,  830,  0,
    828,  0,    0,    0,    0,    0,    1450, 0,    0,    0,    0,    0,    0,    0,    0,    0,    798,  667,  0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    1007, 0,    0,    0,    0,    988,  0,    0,    0,    0,
    781,  0,    0,    0,    0,    1007, 0,    0,    0,    0,    1013, 0,    1011, 0,    1112, 0,    0,    1112, 0,
    0,    0,    0,    0,    1007, 1007, 1007, 718,  0,    875,  0,    0,    0,    0,    0,    1007, 0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    1112, 1112, 0,    0,    0,    1112, 0,    896,  0,    1452, 0,    0,
    0,    1451, 0,    0,    1449, 1448, 1432, 0,    0,    0,    919,  921,  920,  1112, 0,    1112, 0,    0,    0,
    1018, 0,    792,  791,  793,  1941, 0,    0,    1757, 787,  0,    0,    711,  716,  773,  0,    774,  775,  0,
    776,  777,  778,  0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    794,  1082, 1083, 1084, 1085, 1094, 1097, 1086, 1087, 1088, 1096, 1089, 1090, 1091, 1098, 1099,
    1100, 1092, 1101, 1095, 1093, 1102, 0,    1081, 0,    0,    1433, 913,  0,    1936, 0,    1400, 0,    1401, 1390,
    1397, 647,  0,    1107, 1788, 1791, 0,    0,    56,   57,   0,    635,  0,    634,  638,  0,    0,    0,    1213,
    1203, 1212, 1378, 0,    0,    1831, 1828, 1915, 0,    1917, 1932, 666,  1922, 696,  668,  695,  0,    679,  1740,
    1743, 1751, 1311, 1336, 441,  0,    0,    1310, 1296, 0,    268,  0,    0,    0,    0,    1282, 1287, 302,  0,
    1303, 1139, 1340, 0,    1305, 1318, 1306, 0,    1330, 1340, 1292, 1319, 1330, 1297, 1302, 1309, 1334, 1335, 0,
    1291, 1298, 0,    1307, 1330, 1330, 1340, 1340, 593,  592,  591,  587,  588,  593,  0,    1053, 0,    0,    1966,
    1980, 1964, 1975, 1976, 1963, 664,  1926, 660,  1927, 0,    1346, 1344, 1352, 1353, 457,  527,  456,  259,  262,
    261,  0,    531,  529,  456,  708,  0,    0,    0,    619,  0,    0,    646,  641,  645,  643,  498,  497,  500,
    0,    653,  0,    135,  137,  0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    69,   70,   83,   605,  604,  602,  627,  626,  624,  625,  623,  618,  620,  621,  1909, 1913, 269,  456,
    97,   239,  237,  238,  0,    1491, 0,    0,    0,    88,   0,    0,    0,    0,    0,    1264, 1260, 1270, 0,
    0,    0,    1107, 0,    1184, 0,    569,  568,  1190, 567,  0,    62,   64,   1361, 0,    0,    1370, 1858, 0,
    1839, 1843, 1837, 1841, 0,    0,    1829, 0,    1835, 1111, 1583, 1648, 0,    1114, 1804, 1200, 0,    0,    0,
    1113, 1112, 0,    994,  1156, 1157, 1153, 1154, 1152, 1155, 0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    972,  0,    994,  0,    833,  0,    0,    0,    0,    0,    0,    1463, 0,    0,
    0,    0,    0,    1938, 0,    0,    0,    0,    0,    0,    810,  0,    0,    0,    0,    0,    0,    0,    1105,
    1103, 1106, 1104, 0,    0,    989,  986,  0,    0,    0,    0,    860,  0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    1014, 1015, 1112, 0,    0,    0,    1112, 0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    882,  0,    0,    0,    0,    0,    887,  0,    0,
    0,    0,    0,    0,    0,    1112, 0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    916,
    0,    918,  0,    0,    0,    0,    0,    0,    1021, 795,  1007, 0,    0,    0,    0,    0,    0,    0,    713,
    710,  715,  729,  722,  727,  720,  724,  0,    779,  1534, 730,  0,    1007, 735,  667,  1121, 742,  0,    0,
    745,  0,    0,    0,    0,    747,  749,  750,  753,  859,  752,  859,  760,  761,  757,  758,  759,  763,  0,
    783,  790,  960,  1467, 1942, 1935, 1396, 1398, 0,    0,    1391, 0,    0,    619,  58,   0,    0,    1381, 0,
    0,    0,    0,    608,  1211, 0,    1374, 0,    0,    0,    0,    0,    1918, 1934, 1933, 1923, 698,  1129, 699,
    701,  700,  1463, 1745, 1748, 1749, 1752, 1750, 0,    1747, 1746, 1761, 0,    1338, 1341, 1342, 0,    0,    1321,
    1320, 1316, 1317, 0,    1148, 1149, 1147, 1142, 1143, 1146, 1323, 1314, 0,    1340, 0,    1322, 1340, 1330, 0,
    1340, 1340, 1304, 1308, 0,    581,  590,  578,  585,  1065, 1064, 0,    1029, 0,    1028, 1026, 1025, 0,    1064,
    1970, 1978, 1982, 0,    1138, 1931, 1929, 260,  1234, 1234, 0,    0,    0,    0,    0,    0,    0,    117,  126,
    563,  563,  1234, 1234, 563,  1234, 1234, 1234, 0,    0,    1234, 0,    0,    563,  0,    1234, 561,  0,    0,
    1234, 1234, 1234, 563,  1234, 1234, 1234, 1234, 1234, 573,  1234, 1234, 1234, 560,  272,  294,  295,  525,  0,
    539,  562,  0,    1957, 1958, 532,  616,  600,  1193, 0,    133,  0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    622,  93,   148,  0,    1490, 0,    1881, 270,  0,    110,
    95,   511,  513,  512,  510,  509,  0,    0,    0,    1114, 0,    1267, 1053, 1271, 1270, 1268, 1010, 1185, 1879,
    1183, 65,   0,    0,    1356, 1371, 1359, 1889, 0,    1888, 1874, 1877, 1474, 0,    0,    0,    1814, 1808, 1815,
    1817, 1811, 1816, 1818, 1809, 1810, 1805, 1812, 1115, 1140, 0,    0,    802,  817,  0,    0,    965,  0,    0,
    967,  968,  969,  0,    821,  0,    819,  822,  823,  824,  1007, 0,    0,    0,    0,    1007, 971,  0,    829,
    0,    0,    834,  835,  0,    808,  0,    842,  0,    844,  0,    1007, 0,    838,  0,    1937, 0,    0,    1007,
    0,    850,  0,    811,  0,    0,    951,  0,    934,  930,  0,    932,  0,    0,    1007, 1007, 0,    855,  0,
    0,    861,  1007, 0,    953,  0,    935,  0,    867,  0,    1007, 0,    1012, 0,    0,    0,    978,  871,  872,
    0,    976,  937,  0,    0,    874,  939,  0,    941,  0,    936,  943,  944,  876,  878,  877,  946,  0,    0,
    948,  0,    950,  0,    880,  881,  0,    0,    0,    885,  0,    1007, 890,  980,  982,  0,    0,    0,    0,
    0,    984,  897,  899,  0,    0,    0,    898,  0,    0,    0,    0,    0,    0,    0,    903,  0,    0,    917,
    983,  809,  981,  922,  0,    925,  0,    924,  1019, 0,    0,    800,  1758, 1759, 1760, 520,  786,  1468, 766,
    765,  0,    768,  767,  0,    723,  728,  721,  725,  731,  0,    1940, 0,    0,    740,  739,  0,    1007, 736,
    1121, 743,  0,    755,  754,  858,  0,    959,  698,  960,  0,    0,    648,  649,  652,  0,    1794, 1795, 1793,
    1792, 629,  1383, 1382, 0,    636,  639,  640,  613,  612,  614,  607,  609,  610,  252,  1217, 0,    0,    0,
    1223, 1204, 1214, 598,  0,    0,    0,    0,    0,    694,  1053, 1171, 691,  672,  1140, 1130, 671,  702,  0,
    1744, 0,    1715, 1772, 0,    0,    0,    0,    0,    1762, 1337, 0,    1293, 0,    1315, 1325, 1324, 1288, 0,
    0,    0,    1286, 1331, 1285, 1114, 1330, 1283, 1284, 595,  594,  589,  1064, 1053, 0,    0,    1050, 1066, 0,
    1066, 1053, 1053, 0,    1053, 1027, 1107, 1061, 0,    0,    1981, 1131, 1930, 1232, 1233, 1235, 0,    0,    120,
    123,  121,  0,    122,  0,    0,    564,  518,  499,  499,  543,  0,    334,  518,  492,  541,  0,    0,    0,
    0,    0,    0,    0,    0,    1234, 0,    554,  537,  0,    0,    0,    0,    555,  0,    538,  1234, 0,    0,
    0,    0,    0,    0,    0,    0,    0,    576,  575,  574,  0,    0,    0,    0,    273,  456,  337,  0,    570,
    334,  340,  1470, 1955, 1943, 1078, 0,    1077, 136,  76,   72,   84,   1161, 1162, 1160, 1158, 1159, 85,   74,
    75,   79,   78,   80,   81,   82,   77,   73,   86,   87,   71,   151,  149,  150,  0,    144,  146,  0,    0,
    0,    1882, 0,    337,  89,   1402, 271,  274,  321,  322,  320,  319,  0,    138,  90,   101,  1053, 1129, 1270,
    1114, 0,    1107, 63,   1360, 1886, 0,    0,    0,    0,    0,    0,    0,    0,    1803, 1141, 1244, 0,    0,
    0,    966,  995,  0,    420,  420,  1005, 1003, 409,  420,  999,  1004, 1001, 0,    444,  0,    443,  0,    0,
    0,    0,    0,    973,  970,  0,    0,    0,    1467, 0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    992,  0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    955,
    1016, 979,  977,  0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    985,  0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    1022, 796,  0,    788,  712,  717,  733,  1939, 1120, 737,  0,    741,  0,    914,  0,    961,  962,  0,
    1469, 1392, 0,    656,  1796, 1797, 0,    611,  677,  0,    1236, 1221, 1228, 1222, 0,    0,    0,    1220, 1459,
    1458, 1466, 1465, 1921, 0,    0,    0,    0,    1924, 1114, 1114, 0,    0,    1180, 0,    0,    0,    669,  674,
    670,  673,  0,    697,  706,  705,  1460, 1467, 0,    0,    0,    0,    446,  445,  452,  0,    0,    0,    1757,
    0,    448,  450,  449,  1767, 447,  1339, 1138, 1301, 1300, 1145, 1144, 0,    1295, 1340, 0,    1928, 1059, 0,
    1052, 1051, 1067, 0,    1053, 1066, 1066, 0,    1032, 1031, 1248, 1251, 0,    1465, 1030, 1068, 1057, 677,  1971,
    1983, 0,    455,  454,  301,  451,  300,  125,  124,  130,  131,  339,  519,  493,  494,  0,    0,    0,    499,
    333,  518,  332,  335,  508,  0,    284,  281,  545,  287,  283,  299,  0,    0,    288,  518,  552,  553,  567,
    277,  0,    313,  314,  312,  296,  279,  280,  547,  286,  285,  282,  291,  292,  310,  309,  290,  311,  558,
    308,  306,  303,  305,  304,  307,  289,  278,  0,    540,  0,    323,  325,  326,  1473, 0,    572,  542,  0,
    327,  328,  0,    0,    0,    0,    655,  0,    98,   148,  0,    0,    1883, 242,  0,    240,  0,    0,    1404,
    1403, 241,  255,  456,  275,  0,    0,    139,  141,  0,    0,    1943, 1114, 1150, 1263, 1269, 1887, 1876, 1875,
    1890, 1890, 1890, 0,    1116, 0,    1201, 781,  814,  818,  927,  0,    996,  458,  0,    1006, 411,  998,  1000,
    1002, 804,  820,  825,  929,  807,  806,  0,    0,    0,    0,    840,  843,  845,  836,  841,  839,  0,    928,
    852,  849,  851,  812,  0,    952,  931,  933,  854,  865,  990,  993,  0,    0,    0,    866,  862,  954,  863,
    0,    868,  837,  869,  0,    0,    0,    0,    938,  873,  940,  942,  947,  945,  949,  879,  816,  0,    884,
    886,  797,  781,  888,  0,    894,  892,  0,    0,    900,  0,    0,    909,  0,    907,  0,    908,  0,    910,
    911,  0,    923,  926,  1020, 805,  0,    0,    521,  734,  738,  699,  698,  912,  1402, 650,  0,    651,  637,
    698,  1218, 1230, 0,    1238, 0,    0,    1215, 1225, 0,    0,    0,    1224, 0,    1821, 1822, 1820, 1140, 1122,
    1179, 1177, 0,    1172, 1174, 1176, 692,  0,    704,  703,  0,    1774, 0,    1773, 1785, 1786, 1783, 1784, 1782,
    1763, 0,    1769, 1768, 0,    0,    0,    1779, 1770, 0,    0,    1294, 0,    1289, 596,  0,    1053, 1066, 1053,
    1049, 0,    0,    1053, 1035, 1033, 1037, 0,    1114, 0,    0,    0,    0,    1054, 698,  1462, 1132, 1135, 336,
    518,  495,  496,  508,  0,    0,    0,    0,    452,  297,  551,  550,  298,  0,    0,    544,  337,  571,  472,
    405,  354,  345,  420,  348,  347,  391,  362,  359,  409,  407,  377,  409,  409,  384,  383,  401,  387,  367,
    458,  458,  366,  404,  458,  388,  386,  390,  0,    392,  409,  397,  385,  389,  406,  382,  379,  403,  420,
    420,  360,  363,  402,  458,  0,    395,  420,  424,  365,  458,  464,  0,    0,    420,  422,  1472, 1945, 0,
    0,    1076, 118,  145,  147,  0,    0,    245,  270,  256,  0,    276,  109,  111,  0,    142,  0,    0,    1265,
    0,    1261, 0,    1895, 1895, 1895, 1243, 1242, 0,    1241, 1245, 0,    0,    464,  466,  460,  464,  0,    997,
    0,    0,    974,  831,  832,  0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    801,  0,    0,
    0,    0,    0,    0,    0,    906,  904,  905,  0,    1023, 0,    702,  963,  0,    657,  253,  0,    0,    0,
    1239, 1227, 1925, 1216, 1219, 1467, 1823, 676,  0,    1117, 1405, 1175, 0,    0,    1461, 0,    0,    1778, 1764,
    453,  0,    0,    0,    0,    1765, 0,    1107, 1060, 0,    0,    1025, 1053, 1053, 0,    1025, 0,    0,    0,
    1250, 1129, 1252, 1072, 1070, 1071, 1069, 1062, 0,    1136, 1137, 1134, 0,    0,    0,    557,  0,    570,  559,
    424,  293,  324,  478,  0,    0,    364,  413,  408,  0,    413,  413,  373,  391,  368,  0,    458,  381,  372,
    393,  396,  398,  400,  413,  0,    458,  361,  370,  0,    413,  432,  0,    0,    0,    428,  0,    471,  0,
    435,  341,  425,  427,  0,    0,    394,  0,    350,  465,  0,    352,  0,    0,    413,  0,    423,  413,  0,
    1944, 0,    698,  698,  1959, 99,   103,  243,  1925, 1402, 0,    248,  0,    140,  0,    1135, 516,  0,    1151,
    0,    0,    1894, 1892, 0,    1893, 1891, 1867, 0,    1826, 1827, 1825, 1813, 0,    0,    815,  421,  459,  467,
    468,  0,    463,  461,  464,  410,  0,    826,  846,  0,    813,  991,  987,  1112, 856,  0,    864,  870,  957,
    956,  883,  889,  893,  891,  895,  901,  902,  1007, 0,    964,  1393, 1140, 1229, 1231, 1237, 1226, 0,    1118,
    1129, 0,    1413, 1173, 693,  1776, 1775, 1777, 1771, 0,    0,    0,    0,    1058, 1053, 1039, 0,    1043, 1048,
    1044, 0,    1036, 1034, 0,    1150, 0,    1140, 1135, 0,    0,    0,    0,    0,    0,    0,    0,    556,  1438,
    546,  548,  0,    0,    0,    473,  474,  479,  481,  0,    0,    417,  418,  419,  374,  414,  416,  0,    376,
    344,  369,  399,  375,  0,    371,  0,    358,  438,  437,  707,  430,  440,  0,    0,    436,  426,  434,  429,
    0,    0,    0,    0,    342,  0,    343,  1471, 1946, 667,  0,    0,    533,  128,  183,  127,  119,  0,    183,
    246,  244,  0,    1921, 112,  91,   0,    515,  0,    1959, 1873, 1872, 1871, 1868, 0,    0,    0,    0,    0,
    0,    1896, 1898, 1240, 0,    469,  462,  0,    0,    0,    0,    0,    1024, 0,    254,  691,  315,  1126, 1135,
    0,    1140, 0,    0,    0,    0,    1406, 1408, 0,    1178, 1781, 1780, 1766, 0,    0,    0,    0,    0,    0,
    0,    1079, 1249, 1074, 1063, 1133, 0,    0,    329,  1440, 1439, 570,  484,  485,  486,  0,    0,    0,    477,
    480,  353,  346,  415,  0,    522,  0,    357,  439,  707,  433,  458,  464,  458,  464,  661,  0,    0,    0,
    0,    0,    204,  0,    209,  0,    0,    0,    0,    185,  190,  100,  0,    0,    193,  1484, 0,    1485, 129,
    104,  250,  249,  0,    1135, 0,    102,  1869, 1899, 1902, 1900, 1901, 1903, 1897, 0,    412,  847,  0,    975,
    857,  915,  0,    316,  0,    0,    1123, 1125, 1119, 1163, 0,    0,    0,    0,    1407, 0,    0,    1414, 1416,
    0,    1055, 1040, 0,    1045, 0,    1038, 0,    0,    1075, 0,    330,  549,  488,  0,    487,  0,    482,  483,
    478,  0,    458,  0,    458,  431,  349,  351,  355,  356,  1925, 0,    1960, 0,    203,  206,  0,    0,    199,
    0,    0,    197,  198,  196,  200,  0,    188,  0,    184,  227,  183,  183,  230,  195,  223,  1925, 113,  514,
    517,  1246, 1254, 0,    0,    1394, 1127, 1128, 1135, 0,    675,  1411, 1412, 0,    1409, 0,    0,    1415, 0,
    0,    0,    0,    1080, 1073, 331,  490,  491,  489,  475,  476,  378,  523,  380,  662,  1961, 1962, 205,  0,
    0,    0,    186,  216,  0,    156,  183,  0,    183,  0,    0,    251,  118,  0,    0,    848,  1405, 1124, 1164,
    1410, 1418, 1417, 0,    0,    1042, 1047, 201,  187,  210,  0,    0,    191,  152,  0,    0,    154,  233,  0,
    225,  114,  1253, 1255, 1413, 0,    0,    1056, 0,    183,  0,    0,    216,  0,    183,  0,    229,  155,  0,
    231,  224,  226,  183,  1419, 698,  0,    202,  207,  183,  189,  217,  0,    167,  166,  0,    0,    179,  228,
    0,    157,  0,    183,  115,  0,    1421, 0,    0,    1167, 1169, 0,    0,    213,  183,  0,    0,    0,    158,
    0,    0,    153,  0,    183,  0,    0,    1428, 1170, 1165, 698,  1290, 208,  209,  183,  212,  183,  192,  161,
    180,  181,  0,    164,  234,  0,    1420, 1423, 0,    0,    1425, 1426, 0,    1395, 1168, 214,  183,  220,  0,
    0,    159,  172,  160,  170,  163,  0,    232,  1427, 1422, 0,    1429, 216,  183,  219,  178,  176,  183,  174,
    168,  0,    175,  182,  173,  0,    165,  1424, 222,  183,  0,    162,  177,  171,  169};

/* YYDEFGOTO[NTERM-NUM]. */
static const short yydefgoto[] = {
    -1,   52,   53,   54,   55,   56,   57,   1167, 58,   518,  906,  1360, 1361, 59,   413,  60,   863,  1312, 1313,
    1314, 61,   1764, 2556, 1329, 1340, 875,  1759, 2833, 3187, 2557, 3191, 408,  369,  1767, 2217, 3033, 3309, 3451,
    3499, 1275, 3026, 1689, 3189, 1690, 62,   484,  1294, 1295, 2552, 2553, 2554, 2199, 2200, 2201, 2202, 3491, 3445,
    3471, 3492, 3554, 3571, 3577, 3578, 3511, 3589, 3590, 3596, 3591, 3512, 3573, 3446, 3299, 3388, 3442, 3390, 3489,
    3300, 3485, 3380, 3503, 3382, 3383, 3486, 3528, 3549, 3468, 3469, 3529, 3570, 3586, 3301, 3449, 3497, 3396, 3444,
    3448, 3518, 3495, 878,  1334, 2208, 2542, 3029, 2547, 3195, 3398, 2033, 2364, 3090, 2841, 1269, 1270, 1271, 389,
    390,  391,  492,  2209, 1723, 2210, 2211, 1725, 1726, 1213, 2514, 2505, 2494, 3225, 392,  2216, 2518, 2519, 2520,
    2521, 2472, 2473, 2120, 2121, 2166, 2529, 2820, 2973, 2988, 2821, 2822, 2823, 2824, 2825, 2826, 2827, 2580, 2581,
    3149, 3150, 3151, 2577, 3019, 3003, 3004, 3005, 3165, 2867, 2407, 2408, 2416, 2417, 2454, 2719, 2455, 1274, 2868,
    3013, 3061, 3006, 2528, 2967, 3140, 3266, 3141, 3142, 3143, 3361, 2122, 2471, 1291, 1292, 810,  393,  1343, 1771,
    3035, 3036, 2462, 2341, 3272, 63,   1277, 845,  847,  846,  2170, 470,  1727, 1728, 1729, 2762, 2768, 3260, 2124,
    111,  1357, 2525, 2157, 64,   1248, 1243, 65,   821,  816,  817,  1246, 1247, 1658, 2081, 66,   756,  67,   479,
    68,   487,  1317, 69,   1175, 2025, 2026, 2027, 70,   854,  71,   488,  1323, 1324, 1325, 72,   1165, 115,  73,
    745,  1170, 1172, 1173, 74,   481,  482,  1286, 75,   1586, 2007, 2008, 859,  860,  1293, 2677, 76,   77,   3025,
    461,  435,  762,  436,  437,  1613, 2045, 3226, 773,  774,  775,  2392, 1192, 1193, 1194, 2050, 1614, 2397, 850,
    2857, 1095, 1539, 706,  1096, 1540, 707,  708,  709,  710,  711,  712,  713,  714,  715,  716,  1977, 1980, 3007,
    717,  1105, 1550, 718,  719,  1579, 720,  2629, 2001, 2002, 2003, 2353, 2354, 721,  1839, 2592, 1877, 1450, 2877,
    2613, 1389, 1822, 2255, 507,  508,  895,  1018, 1019, 1020, 1467, 1084, 2336, 1965, 1966, 2338, 1665, 2095, 1666,
    1667, 1668, 2943, 2942, 2944, 3245, 3113, 3247, 3117, 2092, 1669, 1670, 3420, 2429, 2733, 2448, 2449, 3123, 2083,
    1671, 2435, 2749, 2949, 3122, 3352, 2172, 3249, 1146, 1147, 1447, 941,  942,  1390, 1814, 2236, 3097, 3230, 1990,
    2916, 3228, 3331, 2047, 2048, 2452, 2752, 2956, 1216, 3227, 2238, 1641, 1642, 2851, 3576, 2183, 3411, 3482, 3523,
    3524, 3525, 2388, 2389, 2701, 2702, 2049, 2917, 78,   396,  79,   1784, 855,  856,  510,  405,  80,   414,  1815,
    81,   429,  1601, 558,  749,  1178, 1179, 2034, 2365, 2372, 2035, 2378, 2909, 2367, 2680, 2681, 2105, 2106, 2368,
    2683, 2906, 2858, 2859, 2571, 3054, 82,   449,  2744, 2442, 2443, 3402, 3403, 750,  83,   395,  889,  1776, 1349,
    1775, 890,  891,  1351, 505,  506,  84,   447,  85,   440,  811,  1637, 2420, 2069, 741,  813,  1647, 814,  1648,
    1628, 2064, 1204, 86,   841,  840,  87,   466,  1265, 88,   519,  917,  918,  1365, 1792, 89,   430,  754,  755,
    90,   424,  742,  1594, 91,   417,  92,   93,   733,  1158, 2674, 3224, 3455, 1585, 1159, 2548, 3099, 3236, 3237,
    3239, 3342, 3343, 3521, 3541, 3562, 3563, 3566, 722,  829,  723,  3133, 724,  725,  2373, 2374, 2753, 726,  3404,
    727,  2167, 824,  411,  728,  552,  729,  730,  3303, 880,  881,  372,  373,  94,   776,  439,  1196, 1197, 1198,
    1623, 1624, 815,  1535, 1625, 1626, 2061, 2056, 2925, 2725, 2717, 95,   736,  919,  1163, 1164, 2013, 96,   448,
    97,   943,  1381, 1382, 1811, 2235, 1812, 98,   758,  99,   541,  1375, 542,  921,  543,  544,  933,  928,  936,
    930,  3206, 3046, 3047, 1799, 902,  882,  883,  1368, 1794, 1795, 2853, 3049, 3212, 3213, 100,  119,  378,  490,
    870,  1186, 101,  102,  103,  104,  1189, 1260, 2041, 1261, 1262, 1263, 1678, 1611, 731,  1154, 985,  1429, 1552,
    1988, 732,  1582, 2532, 2830, 394,  112,  477,  853,  3185, 105,  831,  458,  1258, 1253, 1255, 1674, 2100};

/* YYPACT[STATE-NUM] -- Index in YYTABLE of the portion describing
   STATE-NUM.  */
#define YYPACT_NINF -3164
static const int yypact[] = {
    3352,  -3164, 201,   65,    822,   -3164, 129,   41458, 514,   822,   822,   296,   640,   -3164, -3164, -3164,
    -3164, -3164, 346,   41458, 65,    -3164, 21056, -3164, -3164, 200,   184,   822,   65,    41458, -3164, 430,
    677,   65,    -3164, -3164, 822,   -3164, 296,   41458, -3164, 608,   -3164, 330,   649,   429,   511,   -3164,
    -3164, 41458, 522,   -67,   1030,  1067,  -3164, -3164, 627,   -3164, -3164, -3164, -3164, -3164, -3164, -3164,
    -3164, -3164, -3164, -3164, -3164, -3164, -3164, -3164, -3164, -3164, -3164, -3164, -3164, -3164, -3164, -3164,
    -3164, -3164, -3164, -3164, -3164, -3164, -3164, 21594, -3164, -3164, -3164, -3164, -3164, -3164, -3164, -3164,
    -3164, -3164, -3164, -3164, -3164, -3164, -3164, -3164, -3164, -3164, 878,   41458, 41458, -3164, 41458, 619,
    1006,  -3164, -3164, 822,   -3164, -3164, -3164, 296,   21056, -3164, -3164, -3164, -3164, -3164, -3164, -3164,
    -3164, -3164, -3164, -3164, -3164, -3164, -3164, -3164, -3164, -3164, -3164, -3164, -3164, -3164, -3164, -3164,
    -3164, -3164, -3164, -3164, -3164, -3164, -3164, -3164, -3164, -3164, -3164, -3164, -3164, -3164, -3164, -3164,
    -3164, -3164, -3164, -3164, -3164, -3164, -3164, -3164, -3164, -3164, -3164, -3164, -3164, -3164, -3164, -3164,
    -3164, -3164, -3164, -3164, -3164, -3164, -3164, -3164, -3164, -3164, -3164, -3164, -3164, -3164, -3164, -3164,
    -3164, -3164, -3164, -3164, -3164, -3164, -3164, -3164, -3164, -3164, -3164, -3164, -3164, -3164, -3164, -3164,
    -3164, -3164, -3164, -3164, -3164, -3164, -3164, -3164, -3164, -3164, -3164, -3164, -3164, -3164, -3164, -3164,
    -3164, -3164, -3164, -3164, -3164, -3164, -3164, -3164, -3164, -3164, -3164, -3164, -3164, -3164, -3164, -3164,
    -3164, -3164, -3164, -3164, -3164, -3164, -3164, -3164, -3164, -3164, -3164, -3164, -3164, -3164, -3164, -3164,
    -3164, -3164, -3164, -3164, -3164, -3164, -3164, -3164, -3164, -3164, -3164, -3164, -3164, -3164, -3164, -3164,
    -3164, -3164, -3164, -3164, -3164, -3164, -3164, -3164, -3164, -3164, -3164, -3164, -3164, -3164, -3164, -3164,
    -3164, -3164, -3164, -3164, -3164, -3164, -3164, -3164, -3164, -3164, -3164, -3164, -3164, -3164, -3164, -3164,
    -3164, -3164, -3164, -3164, -3164, -3164, -3164, -3164, -3164, -3164, -3164, -3164, -3164, -3164, -3164, -3164,
    -3164, -3164, -3164, -3164, -3164, -3164, -3164, -3164, -3164, -3164, -3164, -3164, -3164, -3164, -3164, -3164,
    -3164, -3164, -3164, -3164, -3164, -3164, -3164, -3164, -3164, -3164, -3164, -3164, -3164, -3164, -3164, -3164,
    -3164, -3164, -3164, -3164, -3164, -3164, -3164, -3164, -3164, -3164, -3164, -3164, -3164, -3164, -3164, -3164,
    -3164, -3164, -3164, 535,   -3164, -3164, 645,   -3164, -3164, -3164, 1116,  -3164, 1015,  -3164, 750,   41458,
    -3164, -3164, 41458, -3164, -3164, 772,   -3164, 767,   1075,  1045,  1257,  108,   -3164, 1064,  1064,  41458,
    1064,  -3164, 41458, -3164, 1064,  822,   -3164, -3164, 1449,  41458, 939,   188,   -71,   36643, 668,   -3164,
    -3164, 13371, -3164, 1068,  21056, -3164, 822,   1132,  260,   41458, -3164, -3164, 822,   196,   508,   -3164,
    2164,  128,   -3164, -3164, -3164, 327,   -3164, -3164, 2606,  -3164, -3164, -3164, 774,   -3164, -3164, 21056,
    822,   1049,  -3164, -3164, 146,   146,   146,   -3164, 146,   -3164, 146,   -3164, -67,   760,   -3164, -3164,
    41458, 386,   -3164, -3164, 757,   -39,   -3164, -3164, -3164, -3164, 21056, 766,   1197,  883,   -3164, 21056,
    -3164, 17,    -3164, -3164, 782,   41458, -3164, 21056, 21056, 208,   -14,   870,   41458, -3164, -3164, 799,
    34503, 1015,  -3164, 41458, 41458, 1006,  -3164, -3164, -3164, 38248, 108,   -3164, 13371, 1196,  41458, 41458,
    1023,  41458, -3164, 34503, 21056, 1064,  836,   1455,  1010,  967,   592,   -3164, -3164, -3164, -3164, 1038,
    -3164, -3164, 914,   -3164, -3164, -3164, 194,   -3164, 106,   -3164, -3164, -3164, -3164, -3164, 1051,  846,
    -3164, -3164, 94,    -3164, -3164, 41458, -3164, -3164, -3164, -3164, -3164, -3164, -3164, -3164, 1186,  857,
    860,   863,   871,   884,   16176, -3164, 886,   894,   902,   912,   916,   922,   937,   940,   942,   954,
    956,   963,   971,   977,   766,   766,   982,   999,   1001,  1005,  552,   1008,  -3164, 1014,  1036,  1039,
    1046,  1056,  1059,  1066,  1086,  1093,  1095,  -3164, 1103,  -3164, 1106,  1117,  1123,  1125,  1136,  1148,
    1149,  1150,  1151,  1152,  1153,  1156,  1157,  1159,  -3164, 1160,  1161,  1162,  13371, 1165,  1167,  1168,
    1169,  1170,  1171,  1172,  -3164, 1174,  1175,  1176,  1177,  1180,  1181,  1182,  1183,  1184,  1187,  1188,
    1189,  1192,  1193,  1194,  -3164, -3164, 13371, 1199,  -3164, -3164, 1200,  1201,  -3164, 1202,  1203,  1204,
    1205,  1207,  1213,  1215,  1217,  1219,  1222,  1225,  1226,  1227,  1228,  1229,  1231,  1233,  1235,  1236,
    1239,  1244,  -3164, 573,   1245,  1246,  609,   1247,  -3164, 1248,  -3164, 147,   1250,  1251,  1252,  766,
    766,   766,   1253,  1254,  1255,  1256,  1258,  1259,  13371, 16176, 16176, 16176, 8883,  -3164, 41458, 23208,
    41458, -3164, 917,   -3164, -3164, 1154,  -3164, 1276,  944,   858,   765,   57,    911,   16176, 2751,  407,
    -3164, -3164, 1269,  -3164, -3164, -3164, -3164, -3164, 1260,  -3164, 986,   -3164, -3164, 792,   1522,  1411,
    21056, -3164, -156,  -3164, -3164, 1369,  -3164, -3164, 34503, 21056, -3164, -3164, -3164, 18894, -3164, -3164,
    1670,  -3164, 1208,  -3164, 21056, 1010,  -3164, 1412,  1307,  -14,   1318,  -3164, -3164, -3164, -3164, -3164,
    -3164, -3164, -3164, -3164, -3164, 1274,  327,   -3164, -3164, 1564,  1682,  -3164, 1405,  24,    1341,  1277,
    159,   24,    36643, 1587,  -3164, 1382,  -3164, 1672,  -3164, -3164, 1389,  -3164, -3164, -3164, 1392,  1393,
    1559,  1379,  -3164, 1395,  -3164, 76,    -3164, -103,  1587,  24,    606,   -3164, 1594,  1714,  240,   -138,
    -3164, -30,   -3164, -3164, 1780,  -3164, -3164, -3164, -3164, -3164, 1186,  -3164, -3164, 1297,  -3164, 1520,
    1396,  -3164, -3164, 536,   -3164, 1300,  497,   -3164, 419,   35038, -3164, -3164, -3164, 95,    -3164, -3164,
    -3164, 1301,  -3164, 36643, 1444,  1337,  21056, -198,  -3164, 38783, 21056, -3164, 109,   13371, -3164, 2166,
    91,    175,   -3164, 1815,  1481,  -3164, -3164, -3164, -3164, 1722,  -3164, 1313,  -3164, -3164, 93,    766,
    1308,  1666,  1314,  -3164, 21056, -3164, -162,  883,   21056, -3164, 1315,  -3164, 1311,  -3164, -3164, 1317,
    -3164, -3164, -3164, 21056, -3164, -3164, 1321,  84,    21056, 1319,  -3164, -3164, -3164, -3164, -3164, -3164,
    1832,  -3164, -3164, -3164, 1351,  1326,  -3164, -3164, -3164, -3164, -3164, -3164, 1418,  -3164, -3164, -3164,
    1332,  -3164, 1332,  -3164, -3164, 1332,  -3164, -3164, 1332,  206,   1948,  -3164, -3164, 41458, -3164, 41993,
    -3164, 18894, 13371, 13371, 13371, 820,   685,   1829,  1880,  1880,  1880,  13371, 13371, -3164, -3164, 13371,
    -3164, 13371, 13371, 13371, 13371, 842,   -3164, -3164, 9444,  -3164, 1334,  13371, 13371, 1421,  13371, 1269,
    13371, 13371, 22132, 13371, 13371, 13371, 13371, 13371, 1478,  -3164, -3164, 13371, 2751,  13371, 13371, 13371,
    1339,  13371, 13371, 13371, 13371, -3164, 13371, 13371, 339,   13371, 1778,  444,   13371, 13371, 13371, -3164,
    10005, 13371, 13371, 13371, -3164, 13371, 13371, 13371, 13371, -3164, 1892,  -3164, 22132, 859,   13371, 13371,
    875,   13371, 13371, 13371, 13371, 13371, -3164, -3164, -3164, -3164, 9444,  -3164, 13371, 13371, 13371, 13371,
    13371, -3164, 16176, 13371, 10566, 13371, 13371, 13371, 13371, 1344,  13371, 13371, 1880,  1880,  13371, 13371,
    13371, 897,   9444,  -3164, 13371, 1269,  747,   747,   13371, 1269,  7761,  13371, -3164, -3164, -3164, 444,
    11127, 1345,  -3164, -3164, -3164, 1880,  22132, 1880,  13371, 13371, 13371, -3164, 1375,  1829,  1829,  1829,
    -3164, 758,   13371, 107,   1480,  1342,  13371, -3164, -3164, -3164, 16176, -3164, -3164, 867,   -3164, -3164,
    -3164, 13932, 1352,  16176, 16176, 1665,  16176, 16176, 90,    16176, 16176, 16176, 16176, 16176, 16176, 16176,
    16176, 16176, 16176, 16176, 1829,  -3164, -3164, -3164, -3164, -3164, -3164, -3164, -3164, -3164, -3164, -3164,
    -3164, -3164, -3164, -3164, -3164, -3164, -3164, -3164, -3164, -3164, 1365,  -3164, 36643, 16176, -3164, -3164,
    41458, -3164, 1358,  -3164, 1637,  -3164, -3164, 1668,  -3164, 1640,  123,   1362,  -3164, 21056, 36643, -3164,
    -3164, 136,   1363,  1441,  1367,  -3164, 1445,  21056, 21056, -3164, -3164, -3164, -3164, 508,   33,    1370,
    391,   -3164, 41458, -3164, 988,   -3164, -3164, -3164, 1371,  -3164, 13371, -3164, 1372,  -3164, 704,   -3164,
    1708,  -3164, 1459,  13371, -3164, -3164, 1383,  1015,  41458, 41458, 21056, 21056, -3164, -3164, -3164, 529,
    -3164, -3164, 24,    34503, -3164, -3164, -3164, 1769,  606,   24,    -3164, -3164, 606,   -3164, -3164, -3164,
    -3164, -3164, 21056, -3164, -3164, 606,   -3164, 606,   606,   24,    24,    1428,  -3164, -3164, 1378,  -3164,
    1428,  1504,  -136,  146,   1588,  -3164, -3164, -3164, -3164, -3164, -3164, -3164, -3164, -3164, -3164, 549,
    -3164, -3164, -3164, -3164, -3164, -3164, 102,   -3164, -3164, -3164, 293,   936,   936,   1775,  -3164, 1377,
    672,   21056, 175,   1459,  21056, -3164, -3164, -3164, -3164, -3164, -3164, -3164, 1385,  -3164, 1387,  1384,
    -3164, 1804,  1806,  1807,  1808,  1809,  1810,  1812,  1813,  1814,  1821,  1822,  1823,  1824,  1825,  1826,
    1408,  -3164, -3164, -3164, -3164, -3164, -3164, -3164, -3164, -3164, -3164, -3164, -3164, 762,   -3164, -3164,
    -3164, 95,    -3164, -3164, -3164, -3164, 1620,  -3164, 36643, 1925,  34503, -3164, -115,  170,   170,   1634,
    1446,  1315,  -3164, 117,   41458, 1801,  25355, 141,   13371, -3164, 34503, -3164, -3164, -3164, 84,    36643,
    1414,  -3164, -3164, 1593,  1455,  21056, -3164, 41458, -3164, -3164, -3164, -3164, 19432, 19432, -3164, 19432,
    -3164, -3164, 96,    118,   983,   1447,  -3164, -3164, 1415,  1420,  768,   -3164, 1880,  1422,  -3164, -3164,
    -3164, -3164, -3164, -3164, -3164, 1417,  1423,  1426,  1430,  1962,  1431,  -142,  1433,  1434,  1435,  1427,
    1436,  306,   1437,  -3164, 1440,  1448,  1442,  -3164, 1443,  1450,  1452,  1453,  1454,  1456,  1451,  775,
    794,   1458,  1460,  796,   -3164, 1358,  1461,  1835,  1462,  1463,  802,   -3164, 1465,  1466,  1467,  804,
    1469,  810,   850,   -3164, -3164, -3164, -3164, 1470,  1472,  -3164, -3164, 342,   1474,  1475,  1476,  -3164,
    1479,  1477,  1482,  853,   1487,  1489,  874,   1491,  1494,  1488,  1483,  1495,  -3164, 1880,  1497,  1498,
    1499,  1880,  1501,  887,   1502,  1505,  889,   898,   1506,  1507,  1508,  1509,  1510,  1511,  913,   1503,
    919,   1512,  -4,    1513,  -3164, 1515,  1519,  1521,  1523,  948,   -3164, 1524,  1526,  1528,  1531,  1532,
    46,    1533,  1880,  1535,  1537,  951,   1538,  1541,  1543,  11688, 12249, 12810, 70,    1544,  492,   -3164,
    1548,  -3164, 1549,  1551,  1552,  957,   960,   1553,  -3164, -3164, -3164, 1439,  1464,  1517,  1555,  36643,
    13371, 41458, -3164, 929,   1386,  -3164, -3164, -3164, -3164, -3164, 275,   -3164, 1545,  -3164, 1086,  1478,
    -3164, -3164, 309,   1486,  16176, 152,   944,   1556,  16176, 16176, 16176, 858,   765,   765,   57,    2751,
    57,    2751,  911,   911,   911,   911,   911,   1829,  13371, -3164, 1829,  1554,  648,   -3164, -3164, -3164,
    -3164, 1792,  21056, -3164, 477,   21056, 175,   -3164, 13371, 1459,  -3164, 34503, 34503, 21056, 21056, 59,
    -3164, 565,   -3164, 1459,  1819,  19432, 19432, 19432, -3164, -3164, -3164, -3164, -3164, 621,   -3164, -3164,
    -3164, 1557,  -3164, -3164, -3164, -3164, -3164, 39318, 138,   -3164, -3164, 1459,  1839,  -3164, -3164, 1558,
    41458, -3164, -3164, -3164, -3164, 16,    -3164, -3164, -3164, -3164, -65,   -3164, -3164, -3164, 1579,  24,
    41458, -3164, 24,    606,   21056, 24,    24,    -3164, -3164, 992,   -3164, -30,   -3164, -3164, -3164, -3164,
    41458, 995,   1614,  1563,  -3164, -3164, 21056, -3164, 1568,  -3164, 1873,  2047,  1587,  -3164, -3164, -3164,
    300,   300,   1459,  1667,  1675,  1680,  1681,  1685,  1713,  -3164, -3164, 904,   2072,  300,   300,   2072,
    300,   300,   300,   1654,  2021,  300,   1909,  1673,  734,   1911,  300,   -3164, 1674,  2027,  300,   300,
    300,   2072,  300,   300,   300,   300,   300,   156,   300,   300,   300,   -3164, 2588,  -3164, -3164, 1586,
    19970, -3164, -3164, 36643, -3164, -3164, -3164, -3164, -3164, -3164, 39853, -3164, 13371, 685,   1459,  1459,
    197,   1459,  685,   1459,  1459,  1459,  1459,  1459,  685,   1459,  1459,  685,   2166,  -3164, -3164, 19,
    21056, -3164, 432,   -3164, 1191,  340,   -3164, -3164, -3164, -3164, -3164, -3164, -3164, 21056, 21056, 1632,
    1447,  25355, -3164, -136,  -3164, 1589,  -3164, -3164, -3164, -3164, -3164, -3164, 1319,  1897,  -3164, 1598,
    -3164, -3164, 964,   -3164, 1595,  -3164, 1597,  1684,  1686,  1687,  -3164, -3164, -3164, -3164, -3164, -3164,
    -3164, -3164, -3164, -3164, -3164, -3164, 1587,  565,   14493, -3164, -3164, 13371, 1600,  -3164, 13371, 13371,
    -3164, -3164, -3164, 490,   -3164, 35573, -3164, -3164, -3164, -3164, -3164, 13371, 35573, 490,   13371, -3164,
    -3164, 1605,  -3164, 1951,  1951,  -3164, -3164, 1269,  -3164, 41458, -3164, 13371, -3164, 13371, -3164, 1269,
    -3164, 13371, -3164, 13371, 13371, -3164, 1838,  -3164, 13371, -3164, 13371, 13371, -3164, 13371, -3164, -3164,
    13371, -3164, 13371, 13371, -3164, -3164, 1842,  -3164, 13371, 13371, -3164, -3164, 13371, -3164, 13371, -3164,
    13371, -3164, 13371, -3164, 13371, -3164, 16176, 22132, 1615,  -3164, -3164, -3164, 1616,  -3164, -3164, 13371,
    13371, -3164, -3164, 13371, -3164, 13371, -3164, -3164, -3164, -3164, -3164, -3164, -3164, 13371, 13371, -3164,
    13371, -3164, 13371, -3164, -3164, 13371, 13371, 13371, -3164, 13371, -3164, -3164, -3164, -3164, 15054, 13371,
    13371, 13371, 1619,  -3164, -3164, -3164, 13371, 13371, 13371, -3164, 13371, 2010,  13371, 2011,  13371, 2013,
    13371, -3164, 13371, 1853,  -3164, -3164, -3164, -3164, -3164, 13371, -3164, 13371, -3164, 1644,  13371, 1630,
    -3164, -3164, -3164, -3164, 1625,  -3164, -3164, -3164, -3164, 13371, -3164, -3164, 13371, -3164, -3164, -3164,
    -3164, -3164, 1633,  -3164, 1358,  16176, -3164, 1486,  16176, 1478,  -3164, 309,   1486,  157,   -3164, -3164,
    -3164, 1635,  -3164, -3164, 1554,  41458, 1459,  1631,  -3164, -3164, 1658,  1944,  -3164, -3164, -3164, -3164,
    -3164, -3164, 1717,  -3164, -3164, -3164, -3164, -3164, -3164, -3164, -3164, 176,   -3164, -3164, 1639,  1639,
    17813, -3164, -3164, -3164, -3164, 1857,  2032,  2033,  2035,  419,   -3164, 30,    626,   818,   1984,  1587,
    -3164, 2037,  37178, 25892, -3164, 1643,  1982,  1646,  300,   32898, 113,   23743, 33433, -3164, -3164, 197,
    -3164, 114,   -3164, -3164, -3164, -3164, 529,   529,   1679,  -3164, -3164, -3164, 1447,  606,   -3164, -3164,
    -3164, 1653,  -3164, -3164, -136,  1985,  1986,  -3164, 1867,  77,    1867,  -136,  -136,  22132, -136,  -3164,
    1241,  -3164, 685,   1921,  -3164, -3164, -3164, -3164, -3164, -3164, 36108, 33968, -3164, -3164, -3164, 2127,
    -3164, 2129,  721,   -3164, 22670, 908,   908,   -3164, 160,   172,   22670, -3164, -3164, 22670, 197,   685,
    22670, 685,   1459,  1459,  1471,  300,   685,   -3164, -3164, 1991,  1997,  22670, 22670, -3164, 36643, -3164,
    300,   605,   197,   197,   22670, 973,   1459,  685,   685,   888,   -3164, -3164, -3164, 21056, 699,   36643,
    1676,  -3164, 3708,  17275, 41458, 286,   181,   -3164, 1671,  -3164, 1683,  -3164, 974,   -3164, -3164, -3164,
    -3164, -3164, -3164, -3164, -3164, -3164, -3164, -3164, -3164, -3164, -3164, -3164, -3164, -3164, -3164, -3164,
    -3164, -3164, -3164, -3164, -3164, -3164, -3164, 1678,  1689,  -3164, 41458, 2063,  1756,  -3164, 21056, 16737,
    -3164, 103,   -3164, 164,   -3164, -3164, -3164, -3164, 1737,  41458, -3164, -3164, -136,  1895,  122,   1447,
    1688,  141,   -3164, -3164, -3164, 41458, 1690,  26429, 34503, 34503, 34503, 1692,  13371, -3164, -3164, 1907,
    13371, 1693,  1694,  -3164, -3164, 1696,  1698,  1698,  -3164, -3164, 1700,  1698,  2022,  -3164, 2023,  1701,
    -3164, 1702,  -3164, 1703,  1710,  1711,  1712,  1691,  -3164, -3164, 2751,  2751,  1715,  1707,  1719,  1720,
    1721,  1724,  1725,  1699,  1726,  1727,  1728,  1729,  1731,  1733,  1732,  1738,  1739,  1740,  1741,  1895,
    1736,  1742,  1743,  1745,  1746,  1747,  979,   1748,  1751,  985,   185,   -3164, -3164, -3164, 1753,  1757,
    1759,  1760,  1764,  1766,  1767,  1770,  1773,  1755,  1777,  1779,  1781,  13371, 1783,  28,    990,   1768,
    -3164, 1785,  1774,  1786,  1788,  13371, 1789,  13371, 1790,  13371, 1791,  1794,  1796,  1795,  1798,  13371,
    2107,  1772,  1771,  -3164, 41458, -3164, 917,   -3164, -3164, -3164, 407,   -3164, 1800,  -3164, 16176, -3164,
    13371, 1802,  -3164, 1805,  -3164, -3164, 21056, 2071,  -3164, -3164, 34503, -3164, 327,   22132, -3164, 1803,
    -3164, 1803,  -130,  1811,  993,   -3164, -3164, -3164, -3164, 1816,  1318,  2103,  34503, 34503, 34503, -3164,
    1447,  1447,  1459,  1459,  -3164, 24278, 1850,  2114,  -3164, -3164, -3164, -3164, 40388, -3164, -3164, -3164,
    -3164, 658,   41458, 2101,  41458, 8322,  -3164, -3164, 2299,  13371, 34503, -51,   107,   300,   -3164, -3164,
    -3164, -3164, -3164, -3164, 1587,  -3164, -3164, -3164, -3164, 2096,  -3164, 24,    992,   -181,  -3164, 1022,
    -3164, -3164, -3164, 2136,  -136,  1867,  1867,  2138,  2036,  661,   1828,  -3164, 300,   1451,  995,   68,
    -3164, 327,   -3164, -3164, 13371, -3164, -3164, -3164, -3164, -3164, -3164, -3164, -3164, -3164, -3164, -3164,
    -3164, -3164, 13371, 2137,  2139,  908,   -3164, 22670, -3164, -3164, -162,  135,   -3164, -3164, -3164, -3164,
    -3164, -3164, 33968, 1459,  -3164, 22670, -3164, -3164, 174,   -3164, 1459,  -3164, -3164, -3164, -3164, -3164,
    -3164, -3164, -3164, -3164, -3164, -3164, -3164, -3164, -3164, -3164, -3164, -3164, -3164, -3164, -3164, -3164,
    -3164, -3164, -3164, -3164, 21056, -3164, 1002,  -3164, -3164, -3164, -3164, 41458, -3164, -3164, 21056, -3164,
    -3164, 4682,  41458, 41458, 2358,  -3164, 41458, -3164, 798,   4682,  2254,  -3164, -3164, 21056, -3164, 1827,
    1016,  -3164, -3164, -3164, 2367,  2681,  -3164, 1459,  1831,  1833,  -3164, 4682,  1834,  1683,  1447,  2144,
    -3164, -3164, -3164, -3164, -3164, -129,  -129,  -129,  15615, -3164, 2266,  -3164, 2751,  -3164, -3164, -3164,
    2065,  -3164, 151,   2067,  -3164, -3164, -3164, -3164, -3164, -3164, -3164, -3164, -3164, -3164, -3164, 13371,
    1841,  1845,  1846,  -3164, -3164, -3164, -3164, -3164, -3164, 13371, -3164, -3164, -3164, -3164, -3164, 13371,
    -3164, -3164, -3164, -3164, -3164, 1980,  -3164, 2075,  13371, 13371, -3164, -3164, -3164, -3164, 13371, -3164,
    -3164, -3164, 13371, 2368,  2040,  1848,  -3164, -3164, -3164, -3164, -3164, -3164, -3164, -3164, -3164, 13371,
    -3164, -3164, -3164, 2751,  -3164, 13371, -3164, -3164, 13371, 13371, -3164, 13371, 13371, -3164, 1852,  -3164,
    1854,  -3164, 1856,  -3164, -3164, 2081,  -3164, -3164, -3164, -3164, 13371, 13371, -3164, -3164, -3164, -3164,
    -3164, -3164, 62,    -3164, 2175,  -3164, -3164, 1274,  1858,  -3164, 300,   15615, 1639,  1998,  -3164, -3164,
    -130,  22132, 25892, -3164, 34503, 1314,  1314,  1314,  1587,  2230,  -3164, -3164, 36643, 1862,  -3164, -3164,
    -3164, 1996,  -3164, -3164, 26966, -3164, 819,   -3164, -3164, 16176, 1036,  -3164, -3164, -3164, 36108, -3164,
    -3164, 300,   1866,  1868,  -3164, -3164, 40923, 13371, -3164, 2284,  -3164, -3164, 1869,  -136,  2083,  -136,
    -3164, 2201,  2202,  -136,  -3164, -3164, -3164, 22132, 1447,  15615, 908,   908,   908,   -3164, 1274,  -3164,
    1879,  315,   -3164, 22670, -3164, -3164, -162,  1889,  2343,  2344,  22670, 2299,  -3164, -3164, -3164, -3164,
    4682,  1024,  -3164, 17275, -3164, -3164, -3164, 1894,  1898,  1698,  -3164, -3164, -3164, -3164, -3164, 1700,
    2093,  -3164, 1700,  1700,  -3164, -3164, -3164, -3164, -3164, 151,   169,   -3164, -3164, 151,   -3164, -3164,
    -3164, 78,    524,   1700,  -3164, -3164, -3164, -3164, -3164, -3164, -3164, 1698,  1698,  -3164, -3164, -3164,
    151,   1899,  -3164, 1698,  732,   -3164, 145,   87,    1902,  1903,  1698,  1905,  1890,  -3164, 1027,  445,
    -3164, -3164, -3164, -3164, 2052,  1910,  -3164, 2588,  -3164, 453,   -3164, -3164, -3164, 41458, -3164, 41458,
    2448,  -3164, 529,   -3164, 81,    1935,  1935,  1935,  1036,  -3164, 1033,  -3164, -3164, 1912,  1913,  2438,
    130,   -3164, 2438,  35573, -3164, 1050,  1914,  -3164, -3164, -3164, 1062,  1915,  146,   1917,  1919,  1918,
    1920,  1922,  1923,  2180,  2334,  -3164, 1926,  1927,  1930,  1932,  1933,  1934,  1936,  -3164, -3164, -3164,
    1937,  -3164, 1949,  37178, -3164, 2274,  -3164, 1371,  22132, 15615, 1939,  1941,  -3164, 497,   -3164, -3164,
    1938,  1314,  -3164, 2455,  2305,  2440,  -3164, 24278, 2203,  -3164, 127,   2126,  -3164, -3164, -3164, -51,
    2038,  2042,  300,   -3164, 1459,  1761,  1563,  2281,  777,   2000,  -136,  -136,  1054,  2003,  13371, 13371,
    1954,  -3164, 1895,  -3164, -3164, -3164, -3164, -3164, 1371,  13371, -3164, -3164, -3164, 1963,  1964,  41458,
    -3164, 1758,  286,   -3164, 732,   -3164, -3164, 474,   2189,  2194,  -3164, -126,  -3164, 1968,  -126,  -126,
    -3164, 1405,  -3164, 2002,  151,   -3164, -3164, 2005,  -3164, -3164, -3164, -126,  1971,  151,   -3164, -3164,
    2204,  -126,  -3164, 36643, 1459,  1019,  -3164, 2026,  -3164, 2425,  2301,  -3164, 732,   -3164, 2307,  2207,
    -3164, 2210,  -3164, -3164, 2211,  -3164, 2212,  2218,  -126,  2219,  -3164, -126,  41458, -3164, 41458, -3164,
    -3164, 2024,  1164,  -3164, -3164, 497,   103,   1998,  -3164, 2152,  -3164, 1071,  315,   2004,  445,   -3164,
    2080,  2085,  -3164, -3164, 2086,  -3164, -3164, 148,   1198,  -3164, -3164, -3164, -3164, 15615, 2324,  -3164,
    -3164, -3164, -3164, -3164, 35573, -3164, -3164, 2438,  -3164, 2227,  -3164, -3164, 13371, -3164, -3164, -3164,
    1880,  -3164, 13371, -3164, -3164, -3164, -3164, -3164, -3164, -3164, -3164, -3164, -3164, -3164, -3164, 13371,
    -3164, -3164, 589,   -3164, -3164, -3164, -3164, 13371, -3164, 1895,  216,   2315,  -3164, -3164, -3164, -3164,
    -3164, -3164, 2006,  2007,  8322,  2551,  -3164, -136,  -3164, 2053,  -3164, -3164, -3164, 2054,  -3164, -3164,
    41458, 2144,  2012,  589,   315,   41458, 41458, 1074,  444,   444,   444,   264,   264,   -3164, -3164, -3164,
    -3164, 575,   104,   41458, -3164, -3164, 499,   -3164, 2014,  2015,  -3164, -3164, -3164, -3164, -126,  -3164,
    146,   -3164, -3164, -3164, -3164, -3164, 146,   -3164, 2016,  -3164, -3164, -3164, 766,   -3164, -3164, 2244,
    2051,  -3164, -3164, -3164, -3164, 2017,  2018,  2019,  2020,  -3164, 2025,  -3164, -3164, -3164, -3164, -67,
    253,   -3164, -3164, 31283, -3164, -3164, 2463,  31283, -3164, -3164, 2028,  1318,  -3164, -3164, 41458, -3164,
    2250,  2024,  -3164, -3164, -3164, -3164, 173,   2251,  685,   685,   685,   685,   1198,  -3164, -3164, 2088,
    -3164, -3164, 2043,  1076,  2044,  2046,  2048,  -3164, 2120,  -3164, 818,   -3164, -145,  315,   13371, 1587,
    2562,  2564,  2476,  2572,  216,   -3164, 570,   -3164, -3164, -3164, -3164, 2352,  1210,  13371, 2068,  13371,
    2069,  1080,  -3164, -3164, 39853, -3164, -3164, 1083,  1088,  -3164, -3164, -3164, 286,   -3164, -3164, -3164,
    179,   179,   1090,  -3164, -3164, -3164, -3164, -3164, 1099,  -3164, 1111,  -3164, -3164, 766,   -3164, 151,
    2438,  151,   2438,  -3164, 2070,  2571,  2290,  2575,  41458, 154,   2427,  -3164, 6356,  2428,  6356,  41458,
    -3164, 2105,  -3164, 3877,  133,   -3164, -3164, 2073,  -3164, -3164, -3164, -3164, -3164, 4682,  315,   2078,
    -3164, -3164, -3164, -3164, -3164, -3164, -3164, -3164, 22132, -3164, -3164, 13371, -3164, -3164, -3164, 21056,
    -3164, 161,   13371, -3164, -3164, -3164, 2276,  146,   146,   2601,  146,   -3164, 2602,  2603,  570,   -3164,
    2507,  -3164, -3164, 41458, -3164, 41458, -3164, 41458, 2090,  2091,  2269,  -3164, -3164, -3164, 2648,  -3164,
    189,   -3164, -3164, 499,   41458, 151,   146,   151,   -3164, -3164, -3164, -3164, -3164, 497,   2316,  -3164,
    2317,  -3164, -3164, 2486,  41458, -3164, 2522,  13371, -3164, -3164, -3164, -3164, 13371, -3164, 13371, -3164,
    -3164, 31283, 31283, -3164, -3164, -3164, 497,   -3164, -3164, -3164, 2102,  -3164, 300,   2106,  -3164, -3164,
    -3164, 315,   41458, -3164, -3164, -3164, 146,   -3164, 146,   146,   -3164, 197,   13371, 1118,  1120,  -3164,
    -3164, -3164, -3164, -3164, -3164, -3164, -3164, -3164, -3164, -3164, -3164, -3164, -3164, -3164, 2442,  2457,
    2122,  -3164, -3164, 2140,  -3164, 28583, 2110,  31823, 13371, 133,   -3164, -3164, 22132, 15615, -3164, 2440,
    -3164, -3164, -3164, -3164, -3164, 2652,  2109,  -3164, -3164, -3164, -3164, -3164, 2536,  13371, -3164, 2573,
    2414,  2113,  -3164, 2117,  2557,  6356,  1164,  -3164, -3164, 2315,  2128,  2413,  -3164, 41458, 31283, 2145,
    2147,  -3164, 37713, 29123, 2124,  -3164, -3164, 13371, -3164, -3164, -3164, 31283, 2484,  2141,  2555,  2142,
    -3164, 27503, -3164, -3164, 2566,  -3164, -3164, 2504,  4165,  781,   -3164, 2143,  -3164, 2570,  31283, -3164,
    2377,  2154,  13371, 2151,  2153,  -3164, 685,   41458, 79,    31283, 2168,  2548,  41458, -3164, 2549,  2550,
    -3164, 2325,  29663, 2471,  18351, 2296,  -3164, -3164, -3164, -3164, -3164, -3164, 31283, -3164, 28043, -3164,
    -3164, -3164, 2615,  989,   -3164, -3164, 2191,  -3164, -3164, 36643, 1127,  -3164, -3164, 22132, -3164, -3164,
    -3164, 30203, 595,   32363, 13371, -3164, 2205,  -3164, -3164, -3164, 3877,  -3164, -3164, -3164, 20513, 2102,
    -3164, 31283, -3164, -3164, -3164, 24813, -3164, -3164, 2560,  -3164, -3164, -3164, 1269,  -3164, -3164, -3164,
    30743, 32363, -3164, -3164, -3164, -3164};

/* YYPGOTO[NTERM-NUM].  */
static const short yypgoto[] = {
    -3164, -3164, -3164, -2824, -3164, -3164, -3164, -3164, -3164, -3164, -3164, -3164, 941,   -3164, -3164, -3164,
    -3164, -3164, 976,   -1579, -3164, -3164, -3164, -3164, -3164, -3164, -3164, -3164, -3164, -3164, -3164, 375,
    -48,   -3164, -3164, -3164, -3164, -3164, -3164, 1883,  -718,  -2860, -3164, -3164, -3164, -3164, -3164, -3164,
    -3164, -3164, -111,  -3164, -3164, 199,   -3164, -3164, -2411, -3164, -3164, -3164, -3164, -3164, -3164, -3164,
    -3164, -817,  -3164, -862,  -3164, -3164, -2124, -3164, -3164, -3164, -3164, -3164, -3164, -3164, -3164, -3164,
    -807,  -3164, -3164, -3164, -3164, -3163, -3164, -3164, -3164, -3164, -3164, -3164, -3164, -708,  -3164, -3164,
    -3164, -3164, -3164, -3164, -3164, -3164, -3164, -288,  -3164, -3164, -1966, -3164, -3164, -3164, 1424,  -3164,
    1473,  -3164, 2355,  -3164, -415,  -89,   1028,  -1974, -1203, -721,  -716,  -1241, -3164, -3164, -3164, -372,
    -3164, -3164, 547,   -13,   1029,  1069,  593,   641,   -3164, -3164, 0,     -3164, -2469, -3164, -3164, -3164,
    -29,   -3164, -27,   -3164, -3164, -3164, -1532, -59,   -1552, -3164, -381,  -2113, -3164, -194,  -3164, -233,
    -3164, -437,  -1771, -1846, -3164, -3164, -223,  11,    58,    -3164, -2640, -2534, -3164, -3164, -579,  -3164,
    -3164, -3164, -586,  -3164, -361,  -482,  -3164, -3164, -1645, -1884, -3164, -3164, -2027, 1457,  -2132, -414,
    -2032, -3164, -373,  -3164, -3164, -3164, -3164, -3164, -3164, -3164, -3164, -3164, 624,   -3164, -3164, -3164,
    -529,  -293,  -1318, -2699, -3164, -3164, -3164, -3164, -3164, -3164, 786,   -3164, -3164, 1128,  1542,  -3164,
    -3164, -3164, -3164, -3164, -3164, -3164, -3164, -3164, -3164, -3164, 769,   -3164, -3164, -3164, -3164, -3164,
    -873,  1484,  -3164, -3164, -3164, 1158,  -3164, -3164, -3164, -3164, 1206,  -3164, -3164, 1940,  -3164, -3164,
    -3164, -3164, 436,   788,   -3164, -3164, -3164, 1966,  761,   -234,  -459,  -728,  -3164, 2348,  -3164, -3164,
    -3164, -1406, -1388, -3164, 2039,  -411,  -1876, 1209,  -1964, 140,   -3164, -87,   -571,  4287,  -3164, -3164,
    -1019, -3164, -3164, -608,  -3164, -3164, -1041, -965,  1705,  1704,  433,   438,   384,   -3164, -3164, -486,
    -3164, -3164, -3164, -1021, -550,  -3164, -3164, -3164, 821,   -3164, -3164, -3164, 158,   -3164, -3164, -3164,
    -3164, -3164, -3164, -3164, -917,  -3164, 987,   -904,  -3164, -3164, -3164, 1817,  -3164, -3164, -3164, -3164,
    -3164, -3164, -3164, -2023, -3164, -1588, 98,    -3164, -3164, -3164, -3164, -3164, -3164, -3164, -3164, -3164,
    -1999, -3164, -3164, -3164, -3164, -3164, -3164, -3164, -1485, -3164, -1687, -3164, -1059, -3164, -3164, -429,
    -2039, -967,  628,   -3164, -3164, -1143, 1861,  -1706, -3164, -3164, -3164, 833,   -3164, -3164, -3164, -2142,
    -1214, -3164, -3164, -2304, -788,  -1781, -753,  -3164, -1983, -292,  -944,  -2016, -3164, -3164, -3164, -3164,
    -712,  -3164, -3164, -3164, -86,   789,   -3164, -3164, -3164, -3164, -3164, -471,  -364,  753,   -3164, -3164,
    -3164, -3164, -3164, -3164, -3164, -3164, -3164, 1891,  1663,  1026,  -3164, -3164, -2108, -3164, -3164, 811,
    -3164, -61,   -2006, 903,   162,   -3164, -3164, 178,   -2660, -3164, -3164, -3164, -3164, -3164, -3164, 110,
    -720,  -605,  2406,  -3164, -3164, -3164, -3164, -3164, -3164, 1969,  1514,  -1606, 2350,  -3164, -3164, -3164,
    -3164, -3164, -3164, -3164, -3164, -3164, 2424,  -3164, -1117, -3164, -612,  -3164, -3164, -742,  -3164, -3164,
    -3164, -3164, -3164, -3164, -3164, -3164, -3164, 1518,  -3164, -3164, -3164, -3164, -3164, 1697,  -3164, -3164,
    -3164, -3164, -3164, -3164, -3164, -3164, -3164, -3164, -3164, -3164, -3164, -3164, -3164, 192,   -585,  -3164,
    -367,  -610,  -3164, -469,  -3164, -3164, -3164, -707,  -3164, -584,  -828,  -1185, -120,  -1952, -1435, 195,
    1695,  -2609, -906,  -2004, -2009, -1970, 22,    -3164, -7,    -714,  -427,  2380,  -3004, -405,  -497,  -3164,
    -377,  -3164, -3164, -3164, -3164, 1263,  -3164, -3164, -3164, -3164, 471,   -3164, -3164, -3164, 177,   -3164,
    -41,   -210,  -3164, -3164, 1190,  -3164, 1310,  -3164, -3164, -3164, -3164, -3164, -3164, -3164, -3164, -3164,
    -3164, -3164, -3164, -3164, -3164, 1716,  2470,  2148,  -3164, 1972,  -3164, -3164, -3164, -3164, -3164, -302,
    -3164, -1094, -3164, -1982, 1569,  349,   -3164, 684,   -868,  -1151, -3164, -306,  -3164, -3164, 285,   2481,
    2155,  -3164, -3164, -3164, -3164, -3164, -2297, -755,  -3164, -2356, -3164, -3164, -3164, -3164, -3164, -3164,
    -3164, -3164, -394,  -3164, -555,  -1314, 361,   -3164, -3164, 2527,  2421,  2045,  -278,  -3164, 935,   -3164,
    -3164, -3164, -3164, -3164, -3164};

/* YYTABLE[YYPACT[STATE-NUM]].  What to do in state STATE-NUM.  If
   positive, shift that token.  If negative, reduce the rule which
   number is the opposite.  If zero, do what YYDEFACT says.
   If YYTABLE_NINF, syntax error.  */
#define YYTABLE_NINF -1929
static const short yytable[] = {
    370,   837,   975,   809,   1153,  873,   1397,  1190,  554,   966,   967,   969,   370,   1266,  951,   370,
    864,   865,   901,   1588,  1230,  1431,  370,   2376,  1168,  830,   830,   830,   2375,  830,   1643,  830,
    370,   2237,  1217,  1398,  1399,  1400,  1033,  2352,  1786,  986,   370,   1212,  410,   903,   2123,  2419,
    1412,  1676,  2405,  2409,  2411,  1403,  1404,  1217,  1406,  1541,  2257,  2139,  472,   2431,  473,   1730,
    1549,  2261,  2371,  1231,  2835,  2441,  2221,  2446,  1421,  2732,  1724,  1538,  1035,  1490,  2080,  2559,
    370,   2691,  884,   823,   2376,  2947,  2846,  2423,  2424,  2444,  2474,  1061,  2440,  1440,  1065,  1567,
    1569,  -1110, -257,  -1806, 370,   370,   1059,  370,   1470,  -258,  -247,  1474,  1460,  467,   2476,  1650,
    939,   370,   1468,  1858,  1074,  1075,  1076,  3011,  -1474, -1807, 1653,  1654,  1272,  -1475, 1480,  1481,
    1482,  1273,  2495,  2496,  1355,  2983,  2578,  1501,  1502,  1489,  2582,  3040,  1507,  939,   483,   1555,
    489,   1557,  2463,  1085,  1086,  1087,  3058,  -1870, 2463,  2976,  2981,  2475,  2384,  2982,  2478,  939,
    1522,  3392,  1524,  1592,  3205,  2863,  3188,  1124,  1992,  2487,  2488,  2863,  1523,  2350,  2154,  2225,
    2991,  2864,  2497,  1118,  827,   1068,  3010,  2864,  779,   780,   2097,  1693,  1694,  2863,  2865,  2223,
    779,   780,   3102,  2645,  2865,  934,   1234,  779,   780,   2864,  1268,  1603,  1331,  779,   780,   2046,
    1782,  1268,  3547,  2022,  106,   1768,  2865,  3264,  1935,  2466,  -456,  -456,  1696,  1922,  1355,  779,
    2977,  1112,  -456,  3357,  1318,  2466,  1697,  3040,  2746,  2464,  2465,  940,   2196,  2550,  2466,  1698,
    1952,  2543,  857,   1315,  2197,  3092,  3407,  1171,  547,   1207,  2565,  2566,  2567,  931,   2103,  842,
    1700,  2421,  1428,  866,   2760,  2457,  2686,  3135,  940,   945,   2394,  2852,  -1474, 2070,  1202,  1268,
    2545,  2067,  1701,  415,   418,   1226,  2747,  1800,  2410,  1801,  940,   1662,  2722,  1182,  1283,  1765,
    3384,  2028,  3386,  107,   739,   1532,  2523,  1150,  3427,  2155,  1092,  2964,  2178,  2723,  3285,  1706,
    1237,  747,   3146,  2436,  1335,  3041,  3286,  -1110, 1332,  2545,  868,   1559,  1241,  113,   502,   551,
    2437,  1188,  1289,  433,   3378,  2467,  3508,  1319,  2022,  3057,  1320,  1341,  3062,  1208,  2954,  494,
    1560,  -338,  495,   763,   3155,  1290,  120,   -1806, 3124,  828,   1069,  779,   780,   3159,  3232,  1228,
    459,   1342,  514,   1680,  2376,  1244,  2179,  1533,  3233,  2682,  1284,  1119,  -1474, -1807, 1769,  588,
    2198,  -1475, 2426,  1148,  503,   1829,  869,   108,   370,   1709,  -1925, 370,   1372,  1214,  3147,  1282,
    1710,  1177,  1242,  -1110, 3329,  1229,  2030,  2031,  370,   3214,  114,   370,   3393,  419,   2693,  2694,
    2695,  3041,  370,   2439,  480,   3042,  370,   2727,  1166,  1735,  2627,  109,   432,   370,   830,   3330,
    3148,  1830,  370,   1451,  1245,  3599,  1663,  1672,  2724,  601,   1664,  2955,  2685,  1981,  2023,  1338,
    1443,  1358,  843,   1444,  397,   2736,  2745,  2758,  370,   2103,  735,   1766,  2212,  2524,  1279,  2759,
    764,   1662,  1711,  885,   2057,  2765,  1989,  2385,  2546,  370,   2180,  844,   748,   -1474, 1316,  898,
    1712,  900,   -1475, 370,   1321,  1148,  2068,  1820,  370,   3498,  1561,  3391,  1644,  3379,  370,   504,
    370,   370,   2438,  1649,  1356,  370,   3229,  1518,  1629,  370,   2058,  460,   370,   370,   549,   2071,
    848,   2546,  370,   1655,  1656,  2463,  -1110, 370,   370,   3287,  370,   3358,  370,   370,   1677,  2038,
    2039,  2040,  1714,  2463,  1715,  2560,  2123,  3428,  398,   1724,  2246,  2468,  1209,  628,   3394,  765,
    2181,  3217,  1227,  1534,  3043,  1250,  2076,  -338,  867,   1716,  1717,  2104,  1718,  740,   370,   3044,
    1111,  2247,  1322,  2023,  1150,  1272,  451,   1553,  1896,  3094,  1273,  1203,  1900,  1554,  3234,  399,
    2761,  3356,  2123,  2213,  2526,  1605,  110,   548,   3408,  1736,  416,   1373,  2024,  1575,  1356,  2842,
    1720,  858,   -143,  3359,  2910,  1177,  2748,  2248,  1770,  2757,  2249,  2646,  1663,  1938,  452,   1991,
    1664,  1284,  2250,  649,   1996,  1997,  2430,  1578,  1998,  2984,  1999,  1333,  3360,  1982,  1936,  1238,
    1272,  1120,  1121,  1122,  760,   1273,  3265,  1546,  2225,  3045,  3188,  1284,  1593,  674,   1070,  3548,
    3103,  1652,  1967,  -1806, 932,   1953,  1210,  3059,  2558,  935,   1150,  3044,  2763,  1562,  1150,  3369,
    2156,  3371,  2422,  2395,  1284,  3012,  2866,  1986,  -1474, -1807, 379,   1284,  2866,  -1475, 1149,  420,
    -1110, 1721,  -1110, 453,   -1110, -257,  -1806, 2469,  2970,  3395,  1722,  -499,  -258,  -247,  2866,  3008,
    -565,  3192,  2345,  -338,  2905,  1374,  2696,  2697,  2376,  -1870, 1777,  -1474, -1807, 2375,  1211,  2224,
    -1475, 2024,  3235,  2978,  2818,  2182,  1590,  370,   370,   370,   2989,  2990,  1111,  -1110, 2059,  3009,
    1599,  1111,  2993,  -55,   2352,  1239,  2913,  400,   2936,  3016,  -1870, 2927,  2940,  2015,  2628,  2371,
    2214,  3409,  1645,  2957,  2549,  3431,  2104,  3433,  1240,  370,   380,   2958,  3199,  1111,  2376,  1284,
    2937,  370,   370,   2444,  2941,  2010,  370,   1577,  -1928, 2085,  3370,  3261,  3372,  370,   2737,  2738,
    1149,  2386,  3597,  2994,  1606,  3137,  1162,  2043,  682,   1591,  644,   496,   2491,  1983,  1256,  1174,
    2508,  2509,  766,   767,   768,   769,   770,   771,   1232,  555,   515,   370,   1732,  1984,  3137,  441,
    2204,  2463,  772,   442,   1391,  751,   1638,  2043,  1632,  3480,  2995,  374,   1215,  2175,  2996,  2115,
    2215,  744,   2185,  2903,  3121,  -1350, 2510,  876,   2191,  2251,  3138,  2194,  1177,  381,   -317,  1318,
    1445,  674,   401,   1446,  3254,  1836,  2266,  2267,  830,   1987,  877,   3127,  2511,  2460,  377,   1233,
    1387,  402,   370,   3138,  1215,  1681,  40,    2997,  3399,  -1928, 2492,  2044,  370,   425,   1392,  370,
    1129,  2731,  370,   370,   2849,  -504,  1387,  3534,  2011,  1785,  403,   2512,  1639,  2085,  1374,  445,
    3023,  1155,  1837,  3039,  556,   3535,  644,   1387,  2028,  404,   2952,  3032,  2086,  370,   752,   2017,
    483,   370,   652,   454,   1393,  1643,  1643,  1387,  2102,  2036,  1619,  644,   370,   1675,  1791,  2376,
    1733,  370,   3308,  2137,  2682,  2489,  1878,  455,   2088,  2073,  1339,  2205,  2075,  1387,  1346,  2078,
    2079,  2062,  1319,  2914,  1130,  1320,  2515,  674,   1737,  1353,  2252,  1217,  3108,  3332,  3262,  644,
    456,   2298,  2259,  1761,  557,   2493,  370,   2264,  370,   1257,  370,   3114,  3115,  1388,  753,   973,
    -1350, 2461,  1394,  1289,  1730,  438,   2272,  2347,  1134,  2447,  1787,  3231,  1620,  2277,  2342,  1724,
    2427,  -337,  1156,  1411,  -470,  1675,  1290,  674,   2108,  2115,  2253,  370,   2286,  2287,  2387,  457,
    2679,  51,    2089,  2291,  1469,  2116,  446,   3447,  2028,  2390,  382,   2296,  464,   2299,  2029,  1391,
    2086,  3255,  3256,  1553,  1473,  2741,  2254,  1188,  1609,  923,   1682,  3024,  1553,  383,   3400,  2087,
    3263,  3134,  1995,  3031,  2012,  370,   1683,  2196,  1395,  3434,  1506,  469,   2088,  1542,  3340,  2197,
    1150,  1640,  2314,  674,   2176,  2177,  462,   2184,  3139,  2186,  2187,  2188,  2189,  2190,  2946,  2192,
    2193,  1621,  3450,  3533,  3341,  3134,  1138,  2985,  674,   1392,  2986,  973,   1955,  565,   1139,  1321,
    1157,  871,   872,   3182,  3183,  2750,  2998,  3298,  924,   3194,  2090,  3306,  2999,  -337,  463,   370,
    973,   2614,  2391,  3505,  1391,  2117,  384,   2085,  2498,  2513,  2561,  443,   674,   2030,  2031,  1393,
    3244,  2348,  474,   1150,  1391,  475,   2089,  3000,  3063,  2138,  2018,  2019,  485,   2948,  2948,  2948,
    925,   3456,  2085,  3538,  973,   1610,  974,   -263,  385,   3112,  476,   3128,  1140,  1289,  3550,  926,
    2091,  1289,  588,   2032,  1802,  3584,  2123,  386,   1622,  486,   1972,  1060,  489,   1322,  1392,  444,
    1290,  3569,  2085,  3585,  1290,  370,   1803,  387,   493,   370,   116,   2198,  117,   1394,  1392,  511,
    388,   513,   2450,  3001,  1985,  516,   370,   370,   1633,  1634,  1804,  2125,  1142,  1994,  2128,  1064,
    370,   370,   2766,  1684,  1393,  599,   3600,  2140,  2742,  1805,  407,   370,   601,   1396,  2090,  2477,
    2148,  2479,  422,   2060,  1393,  426,   2484,  428,   871,   872,   118,   871,   872,   1543,  2922,  375,
    376,   370,   370,   370,   370,   2499,  2004,  2501,  2502,  2506,  2086,  2923,  370,   2005,  1693,  1694,
    2004,  421,   616,   1395,  1806,  1807,  427,   2708,  491,   2087,  431,   370,   818,   819,   1682,  822,
    1635,  1636,  1394,  3002,  2091,  2086,  2088,  385,   1685,  2924,  1683,  497,   -1110, -456,  -456,  1696,
    1808,  499,   1394,  2971,  2087,  -456,  2974,  2975,  1651,  1697,  500,   939,   2503,  1299,  1300,  2504,
    1686,  2734,  1698,  -337,  106,   2086,  904,   2987,  1975,  509,   370,   1976,  1143,  370,   546,   1369,
    628,   3186,  1370,  1700,  2087,  1371,  1114,  1115,  1145,  3216,  734,   116,   2357,  117,   2085,  1097,
    1098,  2088,  1268,  2593,  2594,  1701,  738,   1734,  1395,  478,   1809,  820,   3421,  2670,  3422,  2376,
    2089,  748,   1687,  1116,  1117,  1529,  1530,  838,   1395,  3473,  549,   3473,  849,   -1110, 2169,  1818,
    1819,  370,   1706,  370,   852,   1099,  1850,  1851,  2398,  644,   851,   2089,  861,   370,   2118,  370,
    896,   1810,  3164,  370,   1100,  648,   649,   905,   370,   1852,  1853,  1856,  1857,  1544,  370,   899,
    370,   1863,  1864,  1868,  1869,  370,   370,   3515,  370,   1871,  1872,  2089,  2343,  1545,  920,   3519,
    922,   1310,  1311,  927,   1101,  3473,  940,   929,   1396,  1688,  3207,  937,   832,   833,   3116,  834,
    1102,  835,   1797,  1797,  109,   1797,  3453,  1684,  2090,  1978,  1979,  3461,  1709,  -1110, 938,   -337,
    -1110, 1873,  1874,  1710,  1885,  1886,  3473,  946,   2480,  2481,  947,   1103,  2268,  948,   3153,  3154,
    2258,  2086,  3473,  2090,  2273,  949,   3574,  2258,  -1110, 1889,  1890,  3157,  2500,  2206,  -1110, 2346,
    2087,  3161,  950,   2376,  952,   3473,  1902,  1903,  1906,  1907,  3334,  -1110, 953,   2088,  2091,  1094,
    -1110, 1908,  1909,  2090,  954,   520,   521,   -1110, 3177,  3602,  1123,  3179,  1685,  1396,  955,   -1110,
    1916,  1917,  956,   1104,  3473,  1711,  1919,  1920,  957,   2091,  3208,  3209,  -1110, 1396,  3210,  3211,
    -1110, 871,   872,   1712,  1686,  1113,  674,   958,   3129,  -1110, 959,   3130,  960,   1106,  1570,  1571,
    1572,  1573,  1574,  1928,  1929,  680,   1941,  1942,  961,   2091,  962,   682,   1960,  1961,  683,   1962,
    1963,  963,   1107,  2228,  2229,  779,   780,   2089,  370,   964,   370,   2376,  522,   2533,  2534,  965,
    3564,  3522,  2621,  2622,  968,   1714,  1687,  1715,  2625,  2626,  3345,  1564,  1565,  2647,  2648,  1152,
    2688,  2689,  1566,  1568,  2376,  970,   -1110, 971,   523,   2770,  2771,  972,   1716,  1717,  976,   1718,
    1160,  3131,  3132,  907,   977,   2376,  524,   2839,  2771,  -1110, 3564,  370,   3522,  1161,  370,   2965,
    1284,  -1110, 3021,  3022,  370,   370,   370,   370,   3052,  3053,  978,   517,   525,   979,   370,   370,
    370,   871,   872,   1720,  980,   2861,  -1110, 526,   2009,  3064,  3065,  1162,  737,   1688,  981,   2090,
    370,   982,   746,   1174,  2021,  3067,  3068,  1190,  983,   370,   1169,  1797,  1797,  1797,  3197,  3198,
    2728,  3257,  3198,  3322,  3323,  527,   825,   3350,  3351,  370,   3354,  3198,  984,   370,   -1110, 3355,
    3198,  3363,  3364,  987,   2258,  988,   2413,  2418,  908,   370,   3365,  3366,  1108,  989,   528,   370,
    990,   1643,  -1110, 1217,  529,   2091,  3367,  3366,  2698,  2699,  2077,  991,   2887,  3463,  3351,  3464,
    3351,  992,   2706,  993,   1721,  2730,  3581,  3582,  2950,  2951,  1510,  1511,  2096,  1722,  994,   2482,
    3258,  3259,  2854,  2855,  -1110, 2456,  2258,  3050,  3051,  530,   995,   996,   997,   998,   999,   1000,
    909,   1109,  1001,  1002,  1180,  1003,  1004,  1005,  1006,  370,   1185,  1008,  370,   1009,  1010,  1011,
    1012,  1013,  1014,  370,   1015,  1016,  1017,  1021,  910,   1214,  1022,  1023,  1024,  1025,  1026,  -1110,
    674,   1027,  1028,  1029,  1184,  2207,  1030,  1031,  1032,  370,   1214,  -1110, -1110, 1034,  1036,  1037,
    1038,  1039,  1040,  1041,  -1110, 1042,  370,   370,   1181,  2764,  370,   1043,  -1110, 1044,  -1110, 1045,
    2767,  1046,  -536,  939,   1047,  1691,  2203,  1048,  1049,  1050,  1051,  1052,  1692,  1053,  3110,  1054,
    565,   1055,  1056,  2218,  2219,  1057,  1693,  1694,  -1110, -1110, 1058,  1062,  1063,  1066,  1067,  -1110,
    1071,  1072,  1073,  1077,  1078,  1079,  1080,  531,   1081,  1082,  1151,  911,   1188,  1199,  370,   1110,
    1111,  912,   1191,  1695,  1200,  370,   1201,  1696,  532,   1205,  1215,  1206,  1218,  2843,  533,   1219,
    1223,  1697,  370,   1220,  534,   -1110, 1221,  1222,  1224,  1225,  1698,  1235,  1236,  913,   3128,  1699,
    1249,  1251,  1252,  1259,  1278,  588,   1280,  1254,  1281,  2678,  1326,  1700,  535,   1327,  1328,  1330,
    1336,  1337,  1338,  1348,  1350,  1352,  1362,  536,   537,   1354,  1268,  1359,  1363,  1701,  1364,  1366,
    370,   914,   1367,  1148,  1387,  1415,  1702,  1703,  1070,  1088,  1435,  1449,  1704,  1466,  940,   1498,
    1521,  1528,  1536,  1537,  1705,  915,   1551,  1556,  599,   2721,  1706,  538,   1576,  1581,  1583,  601,
    1584,  1587,  1589,  1595,  916,   1596,  117,   1597,  -1110, 1598,  1604,  1612,  1618,  1627,  551,   1631,
    1646,  1657,  1659,  1707,  1661,  1731,  1673,  1738,  1740,  1741,  1739,  1742,  1743,  1744,  1745,  1746,
    -1110, 1747,  1748,  1749,  1760,  616,   -1110, 539,   540,   521,   1750,  1751,  1752,  1753,  1754,  1755,
    1756,  1762,  1773,  1779,  1789,  1774,  1788,  1816,  -1110, 1823,  1813,  1817,  1827,  1821,  1824,  -1110,
    2703,  1825,  1708,  1834,  1709,  1826,  1828,  -1110, 1831,  1832,  1833,  1710,  1835,  1838,  370,   1840,
    1841,  1842,  1968,  1843,  -1110, 1860,  2006,  2037,  -1110, 2063,  1844,  1845,  1846,  2072,  1847,  1848,
    1849,  -1110, 1854,  628,   1855,  1859,  1861,  1862,  1865,  370,   1866,  1867,  1870,  1969,  1875,  522,
    1876,  1879,  1111,  1880,  1881,  1883,  1882,  2093,  2099,  1894,  1884,  370,   370,   2769,  1887,  1893,
    3070,  1888,  370,   1891,  370,   370,   1892,  1895,  1897,  1898,  1899,  523,   1901,  1711,  1904,  1918,
    1905,  1910,  1911,  1912,  1913,  1914,  1915,  1921,  1923,  524,   1924,  1712,  644,   2258,  -1110, 1925,
    1713,  1926,  1970,  1927,  1930,  1931,  370,   1932,  648,   649,   1933,  2101,  1934,  1937,  1939,  525,
    1940,  -1110, 1943,  370,   370,   1944,  1945,  -780,  1954,  -1110, 526,   1956,  1957,  370,   1958,  1959,
    1964,  -958,  1993,  370,   2109,  2065,  370,   1675,  1971,  370,   2051,  2094,  2110,  1714,  -1110, 1715,
    2098,  2111,  2112,  2114,  370,   370,   2113,  370,   527,   2115,  2132,  2133,  2135,  370,   2141,  2136,
    2143,  2144,  2162,  2220,  1716,  1717,  370,   1718,  370,   2227,  2224,  3220,  370,   370,   1284,  2243,
    2230,  528,   2231,  951,   2265,  1719,  -1110, 529,   2232,  2278,  2233,  2234,  620,   2288,  2300,  2301,
    757,   521,   2320,  2507,  2325,  2327,  3222,  2329,  2332,  2398,  -1110, 1720,  2335,  2339,  2340,  2358,
    2344,  2360,  2351,  370,   2361,  2366,  2379,  370,   370,   2362,  2380,  2381,  530,   2382,  2044,  2043,
    2402,  2403,  370,   2404,  2425,  2428,  2434,  2432,  2433,  2451,  3109,  2458,  -1110, 2459,  370,   2485,
    370,   370,   370,   370,   2540,  2486,  2538,  2539,  2551,  674,   2516,  3129,  2530,  2535,  3130,  1675,
    1780,  2531,  2563,  2570,  2665,  2583,  2584,  522,   680,   2536,  2568,  2591,  2573,  2574,  682,   2575,
    2576,  683,   2579,  2601,  2585,  2586,  2587,  -1110, 3315,  3316,  3317,  3318,  1721,  2588,  2589,  2590,
    2005,  2692,  2595,  523,   -1110, 1722,  2596,  2597,  2598,  2676,  3163,  2599,  2600,  2602,  2603,  2604,
    2605,  524,   2606,  2608,  -1110, 2607,  -1110, 2918,  2615,  2609,  2610,  2611,  2612,  2667,  2616,  2617,
    2618,  2619,  2620,  2623,  3131,  3132,  2624,  525,   2630,  2456,  531,   2639,  2631,  2666,  2632,  2633,
    -1110, -1110, 526,   2634,  3273,  2635,  2636,  -1110, 2649,  2637,  3273,  532,   2638,  370,   2651,  -536,
    2640,  533,   2641,  2705,  2642,  -536,  2644,  534,   2650,  2710,  2652,  2653,  2655,  2657,  2659,  370,
    527,   2660,  2662,  370,   2661,  2663,  370,   2669,  2704,  2718,  2672,  2684,  2673,  2729,  2735,  535,
    2739,  2755,  2687,  2756,  2740,  370,   370,   370,   2831,  528,   536,   537,   2009,  2690,  370,   529,
    2836,  2840,  2838,  371,   2743,  370,   2844,  2850,  2847,  2845,  2860,  370,   2862,  370,   2869,  406,
    2871,  2876,  412,   370,   2872,  2873,  2878,  2885,  2883,  423,   2884,  2893,  2896,  2894,  538,   2895,
    2902,  2028,  2904,  434,   530,   2915,  2919,  2920,  2928,  2932,  2929,  3060,  2933,  450,   2935,  2938,
    2939,  1297,  1298,  1299,  1300,  1301,  1302,  2953,  1190,  1303,  1304,  1305,  1306,  1307,  1308,  2959,
    1309,  830,   2960,  2961,  2968,  2972,  3283,  3020,  2969,  2992,  539,   540,   3014,  3015,  2258,  3017,
    370,   3027,  3038,  468,   3048,  3028,  3011,  3055,  3056,  3066,  3069,  370,   3071,  3073,  370,   3072,
    3074,  3075,  3076,  3077,  3078,  3079,  3080,  471,   371,   3081,  371,   3082,  3083,  3084,  3087,  3085,
    3089,  3086,  3093,  3095,  468,   3053,  3096,  2708,  3098,  3104,  3101,  3412,  3413,  370,   3415,  3111,
    3120,  3106,  2703,  -1041, 370,   3107,  -1046, 370,   3144,  3125,  3126,  370,   370,   3145,  3152,  370,
    3008,  3158,  531,   3156,  3168,  3169,  370,   3160,  3167,  3172,  3432,  3171,  3190,  3173,  3174,  3175,
    975,   1061,  1065,  532,   2773,  3176,  3178,  1310,  1311,  533,   3196,  3202,  3215,  3184,  3218,  534,
    3203,  3204,  3200,  2837,  3238,  3240,  3241,  3243,  3246,  3248,  3252,  3277,  3278,  3269,  3270,  3275,
    3279,  3280,  3281,  3282,  3305,  3311,  3545,  535,   2107,  3065,  3458,  3307,  3459,  3460,  2456,  3327,
    3314,  3276,  536,   537,   2126,  2127,  3320,  2129,  2130,  2131,  3321,  3324,  2134,  3325,  3335,  3326,
    3336,  2142,  3337,  1693,  1694,  2145,  2146,  2147,  3338,  2149,  2150,  2151,  2152,  2153,  3344,  2158,
    2159,  2160,  3347,  3349,  3374,  3373,  538,   3375,  3376,  3381,  3385,  3389,  777,   3401,  739,   778,
    3397,  3410,  -456,  -456,  1696,  3414,  3416,  3417,  3419,  3424,  -456,  2534,  2526,  3426,  1697,  2258,
    3437,  3435,  3436,  3439,  779,   780,   3452,  1698,  3465,  3454,  3466,  3467,  3483,  781,   3470,  782,
    3484,  3487,  539,   540,   3474,  3493,  3490,  3494,  1700,  3496,  370,   370,   -1728, 370,   3501,  3502,
    783,   784,   3516,  3506,  3507,  370,   3520,  1268,  3526,  785,   1701,  3531,  -1166, 370,   3527,  3530,
    1693,  1694,  3368,  3537,  3539,  3536,  3543,  370,   3540,  3544,  3551,  3552,  3555,  3556,  3557,  370,
    3559,  3565,  3572,  3579,  3284,  830,   3595,  1706,  3603,  2226,  1276,  830,   2195,  3478,  3034,  2834,
    370,   1696,  3575,  3605,  3568,  3477,  3193,  1679,  -1328, 786,   498,   1697,  370,   787,   3030,  3253,
    2161,  1758,  2544,  370,   1698,  2165,  2966,  2527,  2119,  2470,  2962,  371,   370,   2979,  371,   2980,
    3018,  3271,  3136,  3170,  3162,  1700,  2963,  3425,  2926,  3429,  788,   512,   789,   3268,  371,   3362,
    3310,  3274,  2517,  2082,  1268,  545,   1660,  1701,  790,   553,   2675,  791,   2363,  2359,  1288,  1772,
    468,   1709,  2383,  2020,  3201,  743,   1264,  836,   1710,  1757,  3304,  2899,  3088,  1195,  3304,  3328,
    1558,  1563,  792,   793,   1706,  2042,  794,   3353,  2262,  2355,  1413,  468,   2349,  3251,  2900,  2934,
    3567,  3100,  1465,  2393,  1383,  795,   370,   1600,  370,   2239,  2369,  3091,  839,   3583,  2908,  3479,
    1125,  1126,  1127,  1128,  1129,  2945,  468,   826,   893,   1345,  796,   468,   370,   2907,  1778,  797,
    812,   862,   2901,  468,   468,   3339,  3481,  3500,  874,   3418,  1711,  3598,  553,   3166,  1602,  371,
    886,   2052,  1790,  2726,  2911,  892,   3105,  798,   1712,  1616,  897,   371,   370,   371,   1709,  553,
    468,   370,   3242,  2014,  1607,  1710,  759,   2930,  3313,  1183,  3319,  1763,  830,   830,   1376,  830,
    370,   2562,  761,   3304,  1187,  3304,  2848,  799,   1130,  501,   887,   3312,  0,     0,     0,     0,
    800,   944,   0,     0,     1344,  0,     0,     0,     0,     0,     1714,  830,   1715,  0,     0,     0,
    0,     801,   0,     0,     0,     0,     0,     0,     370,   1131,  1132,  1133,  1134,  0,     0,     0,
    0,     1716,  1717,  0,     1718,  0,     0,     1711,  0,     0,     802,   803,   0,     0,     0,     0,
    0,     0,     0,     0,     0,     1712,  0,     0,     0,     0,     0,     830,   370,   830,   830,   0,
    3190,  0,     0,     0,     0,     0,     0,     0,     1720,  0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     0,     0,     370,   0,     370,   3304,  3304,  0,     0,     0,     0,     0,     0,
    0,     0,     0,     0,     0,     0,     804,   1714,  0,     1715,  0,     0,     2483,  0,     0,     0,
    805,   0,     0,     0,     0,     0,     1135,  2490,  1136,  1137,  1138,  0,     0,     370,   1716,  1717,
    0,     1718,  1139,  0,     -1753, 0,     0,     0,     806,   0,     0,     0,     3304,  0,     3304,  0,
    0,     0,     0,     0,     0,     807,   0,     0,     0,     1721,  1090,  553,   1093,  3592,  0,     0,
    0,     0,     1722,  0,     0,     1720,  0,     0,     0,     0,     0,     0,     3304,  0,     0,     0,
    0,     0,     0,     0,     0,     3304,  0,     0,     0,     370,   3304,  3592,  468,   0,     370,   370,
    1140,  0,     3304,  0,     553,   468,   0,     0,     3304,  468,   -1753, 0,     370,   0,     808,   0,
    468,   0,     0,     0,     0,     3304,  0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    3304,  0,     0,     0,     3580,  0,     0,     0,     0,     3304,  0,     0,     0,     0,     553,   1141,
    1142,  3604,  0,     3304,  0,     3304,  1721,  0,     0,     0,     0,     0,     3302,  0,     0,     1722,
    3302,  0,     0,     0,     0,     0,     0,     370,   3304,  0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     3304,  0,     0,     0,     3304,  0,     0,     0,
    0,     0,     0,     0,     0,     1267,  0,     3304,  0,     0,     0,     0,     0,     0,     0,     553,
    0,     0,     468,   0,     0,     1287,  468,   0,     0,     0,     0,     0,     0,     370,   0,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    468,   0,     0,     0,     1347,  0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     468,
    1143,  370,   0,     0,     468,   3302,  0,     3302,  370,   0,     0,     1144,  1145,  0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     370,   0,     0,     0,     0,     0,     0,     370,   1377,  0,     1380,  0,     468,   0,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     370,   0,     370,   0,
    370,   0,     0,     0,     0,     3406,  0,     0,     0,     0,     0,     1,     0,     370,   1422,  0,
    0,     0,     0,     0,     0,     2,     3,     0,     0,     0,     0,     0,     0,     370,   0,     0,
    0,     0,     4,     0,     5,     0,     0,     0,     0,     0,     3302,  3302,  0,     0,     0,     0,
    0,     0,     0,     0,     0,     0,     6,     7,     1422,  0,     0,     370,   8,     0,     0,     0,
    9,     10,    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     11,    0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     12,    0,     0,     3302,  0,
    3302,  0,     0,     0,     0,     370,   0,     0,     0,     0,     0,     0,     0,     0,     13,    0,
    0,     0,     1422,  0,     0,     0,     0,     14,    15,    16,    0,     0,     0,     0,     3302,  0,
    0,     0,     0,     0,     17,    18,    370,   3302,  0,     0,     0,     370,   3302,  0,     0,     0,
    0,     0,     0,     0,     3302,  0,     0,     0,     0,     0,     3302,  19,    0,     0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     3302,  0,     0,     0,     20,    0,     0,     0,     0,
    370,   0,     3302,  0,     0,     370,   0,     0,     553,   0,     0,     3302,  1580,  370,   0,     0,
    0,     0,     0,     0,     21,    3302,  0,     3302,  0,     468,   553,   22,    0,     0,     23,    0,
    0,     0,     370,   468,   468,   0,     370,   0,     0,     0,     3302,  0,     370,   0,     1608,  0,
    0,     0,     0,     24,    0,     0,     1617,  370,   0,     0,     3302,  0,     0,     0,     3302,  0,
    0,     25,    0,     0,     371,   371,   468,   468,   0,     3302,  370,   0,     0,     0,     0,     553,
    0,     0,     0,     26,    0,     0,     0,     0,     27,    0,     0,     0,     0,     0,     468,   0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     468,   0,     0,
    468,   0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     28,    0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     29,    1691,  0,     553,   0,     553,   0,     30,    1692,  0,     0,     0,     0,     0,     0,
    892,   0,     1781,  1693,  1694,  0,     553,   0,     0,     0,     0,     553,   31,    0,     32,    33,
    0,     468,   34,    1793,  0,     35,    0,     36,    1798,  1798,  0,     1798,  37,    0,     38,    0,
    1695,  0,     0,     0,     1696,  0,     0,     39,    0,     0,     0,     40,    0,     0,     1697,  0,
    0,     41,    0,     0,     0,     0,     42,    1698,  0,     0,     43,    0,     1699,  0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     1700,  0,     0,     0,     0,     44,    0,     0,
    0,     45,    0,     0,     0,     0,     0,     1268,  0,     0,     1701,  0,     0,     0,     0,     0,
    0,     0,     0,     1702,  0,     0,     0,     0,     0,     1704,  0,     0,     0,     0,     0,     0,
    0,     1705,  0,     46,    0,     0,     0,     1706,  0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     47,    0,     0,     48,    0,     0,     0,     49,    0,     0,     0,     0,     0,
    1707,  0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     50,    2,     3,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     4,
    0,     0,     0,     0,     0,     0,     51,    0,     0,     0,     0,     553,   0,     1974,  0,     0,
    0,     1709,  0,     6,     7,     0,     0,     0,     1710,  8,     0,     0,     0,     9,     10,    0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     11,    0,     0,     0,     0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     12,    0,     0,     0,     0,     0,     468,   0,
    0,     468,   0,     0,     0,     0,     0,     553,   553,   468,   468,   13,    0,     0,     0,     0,
    0,     1798,  1798,  1798,  14,    15,    16,    0,     0,     0,     1711,  0,     0,     0,     0,     0,
    0,     17,    18,    2055,  0,     0,     0,     0,     1712,  0,     0,     0,     2066,  1713,  0,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     19,    0,     0,     0,     2074,  0,     0,     0,
    468,   0,     0,     0,     0,     0,     0,     0,     20,    0,     0,     0,     2084,  0,     0,     0,
    0,     0,     468,   0,     1675,  0,     0,     0,     0,     0,     1714,  0,     1715,  0,     0,     0,
    0,     21,    0,     0,     0,     0,     0,     0,     22,    0,     0,     23,    0,     0,     0,     0,
    0,     1716,  1717,  0,     1718,  0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    24,    0,     1719,  0,     0,     0,     0,     0,     0,     0,     0,     0,     2168,  0,     25,    553,
    0,     0,     0,     0,     0,     0,     2173,  0,     1720,  0,     0,     0,     0,     0,     0,     0,
    26,    0,     0,     0,     0,     27,    0,     0,     0,     0,     0,     0,     468,   0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     468,   468,   0,     0,     2222,  0,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     0,     2774,  2775,  0,     0,     0,     1721,  2776,  0,     2777,  2778,  2779,  0,
    0,     553,   1722,  0,     0,     0,     0,     0,     553,   28,    0,     0,     2780,  0,     0,     0,
    0,     0,     0,     0,     0,     2269,  0,     0,     0,     0,     0,     0,     0,     0,     29,    0,
    0,     0,     0,     0,     0,     30,    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     2781,  0,     0,     2782,  0,     0,     0,     31,    0,     32,    33,    2783,  0,     34,
    0,     0,     35,    1422,  36,    0,     0,     0,     0,     37,    0,     38,    0,     0,     0,     0,
    2784,  0,     0,     0,     39,    0,     0,     0,     40,    0,     0,     0,     0,     0,     41,    0,
    0,     2785,  0,     42,    0,     0,     0,     43,    0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     0,     0,     2786,  0,     2787,  0,     0,     44,    0,     0,     0,     45,    0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     2788,  2789,  0,     0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    46,    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    47,    2356,  0,     48,    2790,  0,     0,     49,    0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     2377,  0,     50,    2791,
    0,     0,     0,     0,     0,     0,     0,     0,     2792,  2793,  0,     2794,  0,     0,     2399,  2401,
    0,     0,     0,     51,    0,     553,   0,     553,   553,   0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     2795,  2796,  2797,  0,     0,     0,     0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     2445,  0,     2798,  2799,  2800,  0,     0,
    0,     2801,  0,     0,     2802,  0,     553,   553,   0,     0,     0,     0,     0,     0,     0,     0,
    2168,  2803,  2804,  0,     0,     0,     2168,  0,     0,     2168,  0,     0,     2168,  0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     2168,  2168,  2805,  553,   2806,  0,     0,     0,     0,
    2168,  0,     0,     0,     0,     0,     0,     0,     0,     468,   0,     553,   0,     0,     0,     2168,
    2522,  2807,  0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     0,     0,     0,     2537,  0,     0,     0,     468,   2168,  2808,  0,     2809,  0,
    0,     0,     0,     0,     0,     2555,  0,     0,     2810,  0,     0,     0,     0,     0,     0,     0,
    0,     1793,  0,     944,   553,   553,   553,   0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     2811,  2812,  0,     0,     2813,  2814,  2815,  2816,  0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     2817,
    2818,  0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    705,   0,     2819,  0,     0,     0,     0,     0,     0,     2774,  2775,  0,     0,     0,     0,     2776,
    2668,  2777,  2778,  2779,  0,     3532,  0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     2780,  468,   0,     0,     0,     553,   0,     0,     2445,  0,     0,     0,     0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     553,   553,   553,   0,     0,     0,     0,     0,
    0,     553,   0,     0,     0,     0,     0,     2781,  2707,  0,     2782,  0,     0,     0,     2709,  0,
    2711,  0,     2783,  0,     0,     0,     553,   0,     0,     0,     0,     894,   0,     0,     0,     0,
    0,     0,     0,     0,     0,     2784,  0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     0,     0,     0,     2785,  0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     2786,  0,     2787,  0,     0,     0,
    0,     0,     0,     2168,  0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     553,   2788,
    2789,  2168,  0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    468,   0,     0,     0,     0,     0,     0,     2772,  0,     2790,  468,   1007,  0,     0,     2828,  2829,
    0,     0,     2832,  0,     0,     0,     0,     0,     0,     468,   0,     0,     0,     0,     0,     0,
    0,     0,     0,     0,     2791,  0,     0,     0,     0,     0,     0,     0,     0,     2792,  2793,  0,
    2794,  0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     2795,  2796,  2797,  0,
    0,     0,     0,     0,     0,     0,     0,     1083,  0,     0,     0,     1089,  0,     0,     0,     0,
    2798,  2799,  2800,  0,     0,     0,     2801,  0,     0,     2802,  0,     0,     0,     0,     0,     0,
    0,     0,     0,     0,     0,     0,     2803,  2804,  0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     2805,  0,
    2806,  0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     0,     0,     0,     2807,  0,     0,     0,     0,     0,     0,     2377,  2912,  0,
    553,   0,     0,     0,     0,     0,     0,     0,     553,   0,     0,     0,     0,     0,     0,     0,
    2356,  0,     0,     0,     0,     0,     0,     0,     0,     0,     553,   0,     0,     0,     0,     0,
    0,     2808,  2055,  2809,  0,     0,     0,     0,     0,     0,     0,     0,     0,     2810,  0,     0,
    0,     0,     0,     2445,  0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     2168,
    0,     0,     0,     0,     0,     0,     2168,  0,     0,     0,     0,     0,     1296,  0,     0,     2168,
    0,     0,     0,     0,     0,     0,     2811,  2812,  0,     0,     2813,  2814,  2815,  2816,  0,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     0,     2817,  2818,  0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     2819,  0,     2555,  0,     3037,  0,     0,     0,     0,
    0,     1384,  1385,  1386,  0,     0,     0,     0,     0,     0,     1401,  1402,  0,     0,     1405,  553,
    1407,  1408,  1409,  1410,  0,     0,     0,     1414,  0,     0,     1416,  1417,  0,     1418,  0,     1419,
    1420,  0,     1423,  1424,  1425,  1426,  1427,  0,     0,     0,     1430,  0,     1432,  1433,  1434,  2399,
    1436,  1437,  1438,  1439,  2445,  1441,  1442,  0,     1448,  0,     0,     1452,  1453,  1454,  0,     1456,
    1457,  1458,  1459,  553,   1461,  1462,  1463,  1464,  0,     0,     0,     0,     0,     1471,  1472,  0,
    1475,  1476,  1477,  1478,  1479,  0,     0,     0,     0,     1483,  0,     1484,  1485,  1486,  1487,  1488,
    0,     0,     1491,  1493,  1494,  1495,  1496,  1497,  0,     1499,  1500,  3037,  0,     1503,  1504,  1505,
    0,     1508,  0,     1509,  0,     0,     0,     1512,  0,     1516,  1517,  0,     0,     0,     0,     1520,
    0,     0,     0,     0,     0,     0,     0,     1525,  1526,  1527,  0,     0,     0,     0,     0,     553,
    0,     1531,  0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     3180,  0,     3181,  0,     0,     0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    553,   0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     1615,  0,     0,     0,     0,     0,     0,
    0,     0,     1630,  0,     0,     0,     0,     0,     0,     0,     0,     0,     3250,  0,     0,     0,
    0,     3037,  3037,  0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     3267,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     3037,  0,     0,     0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    2173,  0,     0,     0,     0,     0,     0,     1783,  0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     0,     3377,  0,     0,     0,     0,     0,     0,     3387,  0,     0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     0,     2445,  0,     0,     0,     0,     0,     0,     468,   0,     0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     3250,
    0,     3250,  0,     3423,  0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    3430,  0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    3438,  0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     3457,  0,
    0,     0,     0,     0,     0,     0,     0,     0,     1947,  1949,  1951,  0,     0,     0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     1973,
    0,     0,     0,     0,     0,     0,     0,     0,     2445,  0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     2000,  0,     3504,  0,     0,     0,     0,     3513,  0,
    0,     0,     0,     0,     0,     0,     0,     2016,  0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     3546,  0,     0,     0,     0,     3553,  0,     0,     0,     0,     0,     0,     0,
    2445,  0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     0,     0,     553,   0,     0,     0,     2445,  0,     0,     0,     0,     0,     3593,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     2445,  0,     0,     0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     3593,  0,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     2174,  0,     0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     2241,  0,     0,     2242,  0,     0,     2244,  2245,  0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     2260,  0,     0,     2263,  0,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     2270,  0,     2271,  0,     0,     0,
    2274,  0,     2275,  2276,  0,     0,     0,     2279,  0,     2280,  2281,  0,     2282,  0,     0,     2283,
    0,     2284,  2285,  0,     0,     0,     0,     2289,  2290,  0,     0,     2292,  0,     2293,  0,     2294,
    0,     2295,  0,     2297,  0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     2302,  2303,
    0,     0,     2304,  0,     2305,  0,     0,     0,     0,     0,     0,     0,     2306,  2307,  0,     2308,
    0,     2309,  0,     0,     2310,  2311,  2312,  0,     2313,  0,     0,     0,     0,     2316,  2317,  2318,
    2319,  0,     0,     0,     0,     2321,  2322,  2323,  0,     2324,  0,     2326,  0,     2328,  0,     2330,
    0,     2331,  0,     0,     0,     0,     0,     0,     2333,  0,     2334,  0,     0,     2337,  0,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     121,   0,     122,   123,   124,   125,   126,
    0,     0,     0,     0,     0,     127,   0,     0,     0,     0,     0,     129,   130,   131,   0,     0,
    0,     0,     134,   0,     0,     135,   0,     0,     0,     136,   0,     0,     137,   138,   0,     139,
    0,     0,     0,     0,     0,     142,   0,     143,   0,     144,   0,     0,     0,     0,     147,   148,
    0,     0,     0,     150,   151,   0,     0,     153,   0,     155,   156,   0,     0,     157,   0,     0,
    158,   0,     0,     0,     0,     0,     0,     0,     0,     160,   0,     0,     0,     0,     0,     0,
    161,   162,   0,     0,     163,   0,     0,     0,     0,     164,   0,     0,     0,     0,     0,     0,
    166,   0,     167,   0,     0,     0,     0,     0,     168,   0,     169,   170,   171,   0,     0,     0,
    0,     0,     0,     173,   174,   175,   0,     0,     0,     176,   0,     0,     0,     0,     178,   179,
    180,   0,     0,     181,   0,     182,   183,   0,     0,     0,     185,   0,     186,   0,     0,     187,
    0,     0,     188,   189,   190,   0,     0,     0,     0,     0,     0,     2569,  192,   193,   0,     2572,
    194,   0,     195,   0,     0,     0,     0,     0,     0,     196,   197,   0,     0,     198,   199,   0,
    0,     200,   0,     0,     0,     0,     0,     0,     202,   0,     0,     0,     0,     204,   0,     0,
    0,     205,   206,   207,   208,   0,     0,     209,   210,   0,     0,     0,     211,   0,     0,     0,
    212,   0,     0,     0,     213,   0,     0,     214,   215,   0,     0,     0,     0,     0,     0,     0,
    0,     217,   0,     0,     0,     218,   0,     0,     219,   0,     2643,  0,     0,     0,     220,   0,
    221,   0,     0,     222,   2654,  223,   2656,  0,     2658,  0,     0,     0,     0,     0,     2664,  224,
    225,   226,   227,   228,   229,   0,     230,   231,   232,   233,   234,   235,   236,   237,   238,   2671,
    239,   240,   241,   0,     242,   243,   0,     0,     0,     244,   245,   246,   247,   0,     0,     248,
    249,   0,     0,     250,   0,     251,   0,     252,   0,     0,     253,   254,   255,   256,   257,   258,
    259,   0,     0,     260,   261,   0,     262,   263,   264,   0,     0,     0,     0,     0,     0,     0,
    0,     266,   267,   268,   2716,  269,   270,   0,     2720,  0,     0,     0,     0,     0,     0,     0,
    0,     0,     272,   273,   274,   0,     275,   0,     276,   0,     277,   0,     0,     0,     279,   0,
    280,   0,     281,   282,   0,     283,   284,   285,   286,   287,   288,   289,   290,   0,     0,     0,
    0,     291,   292,   2751,  0,     293,   294,   295,   0,     296,   0,     0,     298,   0,     0,     299,
    0,     2754,  301,   0,     0,     303,   304,   0,     0,     0,     0,     306,   0,     307,   308,   0,
    309,   310,   311,   0,     0,     313,   0,     0,     0,     0,     315,   316,   317,   0,     0,     318,
    0,     0,     0,     319,   0,     321,   0,     0,     323,   324,   0,     0,     0,     0,     0,     0,
    325,   326,   0,     327,   0,     0,     328,   0,     0,     0,     330,   0,     0,     0,     332,   0,
    333,   334,   335,   0,     0,     0,     336,   337,   0,     338,   339,   0,     340,   341,   0,     0,
    342,   343,   344,   345,   346,   0,     0,     0,     0,     0,     347,   0,     348,   0,     0,     0,
    350,   351,   352,   0,     0,     353,   354,   0,     0,     0,     0,     0,     0,     0,     356,   0,
    0,     357,   0,     0,     358,   359,   0,     0,     0,     0,     0,     0,     0,     360,   2870,  0,
    361,   0,     0,     362,   363,   364,   0,     0,     2874,  0,     365,   0,     366,   0,     2875,  0,
    0,     368,   0,     0,     0,     0,     0,     2879,  2880,  0,     0,     0,     0,     2881,  0,     0,
    0,     2882,  0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     2886,  0,
    0,     0,     0,     0,     2888,  0,     0,     2889,  2890,  0,     2891,  2892,  0,     0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     2897,  2898,  0,     0,     0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     0,     0,     0,     2931,  0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     3118,  3119,  0,
    0,     0,     0,     0,     0,     0,     0,     0,     2751,  0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     3219,  0,     0,     0,     0,
    0,     3221,  0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     3223,  0,
    0,     0,     0,     0,     0,     0,     2751,  0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     2716,  0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     3333,  0,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     3346,  0,     3348,  0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     3405,  0,     0,     0,     0,     0,
    0,     2751,  0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     0,     0,     0,     3440,  0,     0,     0,     0,     3441,  0,     3443,  0,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     3462,  0,     0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     3476,  0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     3488,  0,     0,     0,
    0,     0,     0,     0,     0,     0,     121,   0,     559,   123,   124,   125,   126,   0,     0,     0,
    0,     0,     127,   0,     0,     560,   3517,  561,   129,   130,   562,   132,   0,     133,   563,   134,
    0,     564,   135,   565,   566,   567,   136,   568,   0,     137,   138,   1513,  139,   0,     140,   141,
    0,     3542,  142,   569,   143,   0,     144,   570,   571,   146,   0,     147,   148,   149,   572,   0,
    573,   151,   0,     152,   153,   154,   155,   156,   574,   575,   157,   0,     0,     158,   0,     576,
    0,     577,   578,   579,   0,     0,     160,   580,   581,   0,     582,   583,   0,     161,   162,   584,
    585,   586,   0,     3594,  0,     0,     587,   165,   588,   0,     0,     589,   590,   166,   0,     167,
    0,     0,     0,     591,   592,   168,   0,     169,   170,   171,   0,     0,     0,     172,   0,     0,
    173,   174,   175,   0,     0,     593,   176,   0,     594,   595,   177,   178,   179,   180,   0,     0,
    181,   0,     182,   183,   184,   596,   0,     185,   597,   186,   598,   599,   187,   0,     600,   188,
    189,   190,   601,   0,     191,   0,     0,     602,   0,     192,   193,   0,     603,   194,   0,     195,
    604,   605,   606,   607,   0,     608,   609,   197,   610,   611,   612,   199,   0,     0,     200,   613,
    0,     614,   615,   0,     201,   202,   0,     203,   616,   0,     204,   0,     0,     0,     617,   206,
    207,   208,   618,   0,     209,   210,   0,     0,     0,     211,   0,     0,     619,   212,   620,   0,
    0,     213,   0,     0,     214,   215,   0,     0,     0,     0,     0,     0,     216,   621,   217,   0,
    1514,  622,   218,   0,     623,   219,   0,     0,     0,     624,   0,     625,   0,     221,   626,   0,
    222,   0,     223,   627,   0,     0,     628,   0,     0,     0,     0,     629,   224,   225,   226,   227,
    228,   229,   630,   230,   231,   232,   233,   234,   235,   236,   237,   238,   631,   239,   240,   241,
    632,   242,   243,   0,     0,     0,     244,   245,   633,   247,   0,     0,     634,   249,   635,   636,
    250,   0,     251,   637,   638,   639,   640,   641,   642,   643,   256,   257,   258,   259,   0,     644,
    260,   261,   0,     262,   263,   264,   645,   646,   647,   265,   0,     648,   649,   0,     266,   267,
    650,   0,     269,   270,   271,   0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     272,
    273,   651,   652,   275,   653,   654,   655,   656,   657,   0,     278,   279,   0,     280,   0,     281,
    282,   0,     658,   284,   285,   286,   287,   288,   289,   290,   659,   0,     0,     0,     291,   292,
    0,     0,     293,   294,   295,   0,     296,   0,     297,   298,   660,   661,   299,   0,     300,   301,
    302,   0,     303,   304,   0,     0,     662,   305,   306,   663,   307,   308,   664,   309,   665,   311,
    312,   0,     666,   314,   0,     0,     0,     315,   316,   317,   0,     0,     318,   0,     0,     0,
    319,   320,   321,   322,   0,     323,   324,   0,     0,     0,     0,     0,     0,     325,   326,   0,
    327,   0,     0,     328,   0,     0,     329,   330,   667,   668,   331,   332,   0,     333,   669,   335,
    670,   671,   672,   336,   337,   673,   338,   339,   0,     340,   341,   0,     674,   342,   675,   676,
    677,   678,   0,     0,     0,     0,     1515,  347,   0,     348,   679,   680,   681,   350,   351,   352,
    0,     682,   353,   354,   683,   0,     355,   0,     0,     684,   685,   356,   0,     0,     357,   0,
    0,     686,   359,   0,     0,     687,   688,   689,   690,   691,   360,   0,     0,     361,   692,   0,
    362,   363,   693,   0,     0,     0,     0,     365,   0,     366,   367,   0,     694,   0,     695,   0,
    0,     0,     0,     696,   0,     0,     0,     697,   698,   0,     0,     0,     0,     699,   0,     700,
    0,     0,     701,   702,   0,     703,   704,   121,   0,     559,   123,   124,   125,   126,   2712,  0,
    0,     0,     0,     127,   0,     0,     560,   0,     561,   129,   130,   562,   132,   0,     133,   563,
    134,   0,     2713,  135,   565,   566,   567,   136,   568,   0,     137,   138,   0,     139,   0,     140,
    141,   0,     0,     142,   569,   143,   0,     144,   570,   571,   146,   0,     147,   148,   149,   572,
    0,     573,   151,   0,     152,   153,   154,   155,   156,   574,   575,   157,   0,     0,     158,   0,
    576,   0,     577,   578,   579,   0,     0,     160,   580,   581,   0,     582,   583,   0,     161,   162,
    584,   585,   586,   0,     0,     0,     0,     587,   165,   588,   0,     0,     589,   2714,  166,   0,
    167,   0,     0,     0,     591,   592,   168,   0,     169,   170,   171,   0,     0,     0,     172,   0,
    0,     173,   174,   175,   0,     0,     593,   176,   0,     594,   595,   177,   178,   179,   180,   0,
    0,     181,   0,     182,   183,   184,   596,   0,     185,   597,   186,   598,   599,   187,   0,     600,
    188,   189,   190,   601,   0,     191,   0,     0,     602,   0,     192,   193,   0,     603,   194,   0,
    195,   604,   605,   606,   607,   0,     608,   609,   197,   610,   611,   612,   199,   0,     0,     200,
    613,   0,     614,   615,   0,     201,   202,   0,     203,   616,   0,     204,   0,     0,     0,     617,
    206,   207,   208,   618,   0,     209,   210,   0,     0,     0,     211,   0,     0,     619,   212,   620,
    0,     0,     213,   0,     0,     214,   215,   0,     0,     0,     0,     0,     0,     216,   621,   217,
    0,     0,     622,   218,   0,     623,   219,   0,     0,     0,     624,   0,     625,   0,     221,   626,
    0,     222,   0,     223,   627,   0,     0,     628,   0,     0,     0,     0,     629,   224,   225,   226,
    227,   228,   229,   630,   230,   231,   232,   233,   234,   235,   236,   237,   238,   631,   239,   240,
    241,   632,   242,   243,   0,     0,     0,     244,   245,   633,   247,   0,     0,     634,   249,   635,
    636,   250,   0,     251,   637,   638,   639,   640,   641,   642,   643,   256,   257,   258,   259,   0,
    644,   260,   261,   0,     262,   263,   264,   645,   646,   647,   265,   0,     648,   649,   0,     266,
    267,   650,   2715,  269,   270,   271,   0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    272,   273,   651,   652,   275,   653,   654,   655,   656,   657,   0,     278,   279,   0,     280,   0,
    281,   282,   0,     658,   284,   285,   286,   287,   288,   289,   290,   659,   0,     0,     0,     291,
    292,   0,     0,     293,   294,   295,   0,     296,   0,     297,   298,   660,   661,   299,   0,     300,
    301,   302,   0,     303,   304,   0,     0,     662,   305,   306,   663,   307,   308,   664,   309,   665,
    311,   312,   0,     666,   314,   0,     0,     0,     315,   316,   317,   0,     0,     318,   0,     0,
    0,     319,   320,   321,   322,   0,     323,   324,   0,     0,     0,     0,     0,     0,     325,   326,
    0,     327,   0,     0,     328,   0,     0,     329,   330,   667,   668,   331,   332,   0,     333,   669,
    335,   670,   671,   672,   336,   337,   673,   338,   339,   0,     340,   341,   0,     674,   342,   675,
    676,   677,   678,   0,     0,     0,     0,     0,     347,   0,     348,   679,   680,   681,   350,   351,
    352,   0,     682,   353,   354,   683,   0,     355,   0,     0,     684,   685,   356,   0,     0,     357,
    0,     0,     686,   359,   0,     0,     687,   688,   689,   690,   691,   360,   0,     0,     361,   692,
    0,     362,   363,   693,   0,     0,     0,     0,     365,   0,     366,   367,   0,     694,   0,     695,
    0,     0,     0,     0,     696,   0,     0,     0,     697,   698,   0,     0,     0,     0,     699,   0,
    700,   0,     0,     701,   702,   0,     703,   704,   121,   0,     559,   123,   124,   125,   126,   0,
    0,     0,     0,     0,     127,   0,     0,     560,   0,     561,   129,   130,   562,   132,   0,     133,
    563,   134,   0,     564,   135,   565,   566,   567,   136,   568,   0,     137,   138,   0,     139,   0,
    140,   141,   0,     0,     142,   569,   143,   0,     144,   570,   571,   146,   0,     147,   148,   149,
    572,   0,     573,   151,   0,     152,   153,   154,   155,   156,   574,   575,   157,   0,     0,     158,
    0,     576,   0,     577,   578,   579,   0,     0,     160,   580,   581,   0,     582,   583,   0,     161,
    162,   584,   585,   586,   0,     0,     0,     0,     587,   165,   588,   0,     0,     589,   590,   166,
    0,     167,   0,     0,     0,     591,   592,   168,   0,     169,   170,   171,   0,     0,     0,     172,
    0,     0,     173,   174,   175,   0,     0,     593,   176,   0,     594,   595,   177,   178,   179,   180,
    0,     0,     181,   0,     182,   183,   184,   596,   0,     185,   597,   186,   598,   599,   187,   0,
    600,   188,   189,   190,   601,   0,     191,   0,     0,     602,   0,     192,   193,   0,     603,   194,
    0,     195,   604,   605,   606,   607,   0,     608,   609,   197,   610,   611,   612,   199,   0,     0,
    200,   613,   0,     614,   615,   0,     201,   202,   0,     203,   616,   0,     204,   0,     0,     0,
    617,   206,   207,   208,   618,   0,     209,   210,   0,     0,     0,     211,   0,     0,     619,   212,
    620,   0,     0,     213,   0,     0,     214,   215,   0,     0,     0,     0,     0,     0,     216,   621,
    217,   0,     0,     622,   218,   0,     623,   219,   0,     0,     0,     624,   0,     625,   0,     221,
    626,   0,     222,   0,     223,   627,   0,     0,     628,   0,     0,     0,     0,     629,   224,   225,
    226,   227,   228,   229,   630,   230,   231,   232,   233,   234,   235,   236,   237,   238,   631,   239,
    240,   241,   632,   242,   243,   0,     0,     0,     244,   245,   633,   247,   0,     0,     634,   249,
    635,   636,   250,   0,     251,   637,   638,   639,   640,   641,   642,   643,   256,   257,   258,   259,
    0,     644,   260,   261,   0,     262,   263,   264,   645,   646,   647,   265,   0,     648,   649,   0,
    266,   267,   650,   0,     269,   270,   271,   0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     272,   273,   651,   652,   275,   653,   654,   655,   656,   657,   0,     278,   279,   0,     280,
    0,     281,   282,   0,     658,   284,   285,   286,   287,   288,   289,   290,   659,   0,     0,     0,
    291,   292,   0,     0,     293,   294,   295,   0,     296,   0,     297,   298,   660,   661,   299,   0,
    300,   301,   302,   0,     303,   304,   0,     0,     662,   305,   306,   663,   307,   308,   664,   309,
    665,   311,   312,   0,     666,   314,   1088,  0,     0,     315,   316,   317,   0,     0,     318,   0,
    0,     0,     319,   320,   321,   322,   0,     323,   324,   0,     0,     0,     0,     0,     0,     325,
    326,   0,     327,   0,     0,     328,   0,     0,     329,   330,   667,   668,   331,   332,   0,     333,
    669,   335,   670,   671,   672,   336,   337,   673,   338,   339,   0,     340,   341,   0,     674,   342,
    675,   676,   677,   678,   0,     0,     0,     0,     0,     347,   0,     348,   679,   680,   681,   350,
    351,   352,   0,     682,   353,   354,   683,   0,     355,   0,     0,     684,   685,   356,   0,     0,
    357,   0,     0,     686,   359,   0,     0,     687,   688,   689,   690,   691,   360,   0,     0,     361,
    692,   0,     362,   363,   693,   0,     0,     0,     0,     365,   0,     366,   367,   0,     694,   0,
    695,   0,     0,     0,     0,     696,   0,     0,     0,     697,   698,   0,     0,     0,     0,     699,
    0,     700,   0,     0,     701,   702,   0,     703,   704,   121,   0,     559,   123,   124,   125,   126,
    0,     0,     0,     0,     0,     127,   0,     0,     560,   0,     561,   129,   130,   562,   132,   0,
    133,   563,   134,   0,     564,   135,   565,   566,   567,   136,   568,   0,     137,   138,   0,     139,
    0,     140,   141,   0,     0,     142,   569,   143,   0,     144,   570,   571,   146,   0,     147,   148,
    149,   572,   0,     573,   151,   0,     152,   153,   154,   155,   156,   574,   575,   157,   0,     0,
    158,   0,     576,   0,     577,   578,   579,   0,     0,     160,   580,   581,   0,     582,   583,   0,
    161,   162,   584,   585,   586,   0,     0,     0,     0,     587,   165,   588,   0,     0,     589,   590,
    166,   0,     167,   0,     0,     0,     591,   592,   168,   0,     169,   170,   171,   0,     0,     0,
    172,   0,     0,     173,   174,   175,   0,     0,     593,   176,   0,     594,   595,   177,   178,   179,
    180,   0,     0,     181,   0,     182,   183,   184,   596,   0,     185,   597,   186,   598,   599,   187,
    0,     600,   188,   189,   190,   601,   0,     191,   0,     0,     602,   0,     192,   193,   0,     603,
    194,   0,     195,   604,   605,   606,   607,   0,     608,   609,   197,   610,   611,   612,   199,   0,
    0,     200,   613,   0,     614,   615,   0,     201,   202,   0,     203,   616,   0,     204,   0,     0,
    0,     617,   206,   207,   208,   618,   0,     209,   210,   0,     0,     0,     211,   0,     0,     619,
    212,   620,   0,     0,     213,   0,     0,     214,   215,   0,     0,     0,     0,     0,     0,     216,
    621,   217,   0,     0,     622,   218,   0,     623,   219,   0,     0,     0,     624,   0,     625,   0,
    221,   626,   0,     222,   0,     223,   627,   0,     0,     628,   0,     0,     0,     0,     629,   224,
    225,   226,   227,   228,   229,   630,   230,   231,   232,   233,   234,   235,   236,   237,   238,   631,
    239,   240,   241,   632,   242,   243,   0,     0,     0,     244,   245,   633,   247,   0,     0,     634,
    249,   635,   636,   250,   0,     251,   637,   638,   639,   640,   641,   642,   643,   256,   257,   258,
    259,   0,     644,   260,   261,   0,     262,   263,   264,   645,   646,   647,   265,   0,     648,   649,
    0,     266,   267,   650,   0,     269,   270,   271,   0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     272,   273,   651,   652,   275,   653,   654,   655,   656,   657,   0,     278,   279,   0,
    280,   0,     281,   282,   0,     658,   284,   285,   286,   287,   288,   289,   290,   659,   0,     0,
    0,     291,   292,   0,     0,     293,   294,   295,   0,     296,   0,     297,   298,   660,   661,   299,
    0,     300,   301,   302,   0,     303,   304,   0,     0,     662,   305,   306,   663,   307,   308,   664,
    309,   665,   311,   312,   0,     666,   314,   0,     0,     0,     315,   316,   317,   0,     0,     318,
    0,     0,     0,     319,   320,   321,   322,   0,     323,   324,   0,     0,     0,     0,     0,     0,
    325,   326,   0,     327,   0,     0,     328,   0,     0,     329,   330,   667,   668,   331,   332,   0,
    333,   669,   335,   670,   671,   672,   336,   337,   673,   338,   339,   0,     340,   341,   0,     674,
    342,   675,   676,   677,   678,   0,     0,     0,     0,     0,     347,   0,     348,   679,   680,   681,
    350,   351,   352,   0,     682,   353,   354,   683,   0,     355,   0,     0,     684,   685,   356,   0,
    0,     357,   0,     0,     686,   359,   0,     0,     687,   688,   689,   690,   691,   360,   0,     0,
    361,   692,   0,     362,   363,   693,   0,     0,     0,     0,     365,   0,     366,   367,   0,     694,
    0,     695,   0,     0,     0,     0,     696,   0,     0,     0,     697,   698,   0,     0,     0,     0,
    699,   0,     700,   1278,  0,     701,   702,   0,     703,   704,   121,   0,     559,   123,   124,   125,
    126,   0,     0,     0,     0,     0,     127,   0,     0,     560,   0,     561,   129,   130,   562,   132,
    0,     133,   563,   134,   0,     564,   135,   565,   566,   567,   136,   568,   0,     137,   138,   0,
    139,   0,     140,   141,   0,     0,     142,   569,   143,   0,     144,   570,   571,   146,   0,     147,
    148,   149,   572,   0,     573,   151,   0,     152,   153,   154,   155,   156,   574,   575,   157,   0,
    0,     158,   0,     576,   0,     577,   578,   579,   0,     0,     160,   580,   581,   0,     582,   583,
    0,     161,   162,   584,   585,   586,   0,     0,     0,     0,     587,   165,   588,   0,     0,     589,
    590,   166,   0,     167,   0,     0,     0,     591,   592,   168,   0,     169,   170,   171,   0,     0,
    0,     172,   0,     0,     173,   174,   175,   0,     0,     593,   176,   0,     594,   595,   177,   178,
    179,   180,   0,     0,     181,   0,     182,   183,   184,   596,   0,     185,   597,   186,   598,   599,
    187,   0,     600,   188,   189,   190,   601,   0,     191,   0,     0,     602,   0,     192,   193,   0,
    603,   194,   0,     195,   604,   605,   606,   607,   0,     608,   609,   197,   610,   611,   612,   199,
    0,     0,     200,   613,   0,     614,   615,   0,     201,   202,   0,     203,   616,   0,     204,   0,
    0,     0,     617,   206,   207,   208,   618,   0,     209,   210,   0,     0,     0,     211,   0,     0,
    619,   212,   620,   0,     0,     213,   0,     0,     214,   215,   0,     0,     0,     0,     0,     0,
    216,   621,   217,   0,     0,     622,   218,   0,     623,   219,   0,     0,     0,     624,   0,     625,
    0,     221,   626,   0,     222,   0,     223,   627,   0,     0,     628,   0,     0,     0,     0,     629,
    224,   225,   226,   227,   228,   229,   630,   230,   231,   232,   233,   234,   235,   236,   237,   238,
    631,   239,   240,   241,   632,   242,   243,   0,     0,     0,     244,   245,   633,   247,   0,     0,
    634,   249,   635,   636,   250,   0,     251,   637,   638,   639,   640,   641,   642,   643,   256,   257,
    258,   259,   0,     644,   260,   261,   0,     262,   263,   264,   645,   646,   647,   265,   0,     648,
    649,   0,     266,   267,   650,   0,     269,   270,   271,   0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     272,   273,   651,   652,   275,   653,   654,   655,   656,   657,   0,     278,   279,
    0,     280,   0,     281,   282,   0,     658,   284,   285,   286,   287,   288,   289,   290,   659,   0,
    0,     0,     291,   292,   0,     0,     293,   294,   295,   0,     296,   0,     297,   298,   660,   661,
    299,   0,     300,   301,   302,   0,     303,   304,   0,     0,     662,   305,   306,   663,   307,   308,
    664,   309,   665,   311,   312,   0,     666,   314,   0,     0,     0,     315,   316,   317,   0,     0,
    318,   0,     0,     0,     319,   320,   321,   322,   0,     323,   324,   0,     0,     0,     0,     0,
    0,     325,   326,   0,     327,   0,     0,     328,   0,     0,     329,   330,   667,   668,   331,   332,
    0,     333,   669,   335,   670,   671,   672,   336,   337,   673,   338,   339,   0,     340,   341,   0,
    674,   342,   675,   676,   677,   678,   0,     0,     0,     0,     0,     347,   0,     348,   679,   680,
    681,   350,   351,   352,   0,     682,   353,   354,   683,   0,     355,   0,     0,     684,   685,   356,
    0,     0,     357,   0,     0,     686,   359,   0,     0,     687,   688,   689,   690,   691,   360,   0,
    0,     361,   692,   0,     362,   363,   693,   0,     0,     0,     0,     365,   0,     366,   367,   0,
    694,   0,     695,   0,     0,     0,     0,     696,   0,     0,     0,     697,   698,   0,     0,     0,
    0,     699,   0,     700,   1455,  0,     701,   702,   0,     703,   704,   121,   0,     559,   123,   124,
    125,   126,   0,     0,     0,     0,     0,     127,   0,     0,     560,   0,     561,   129,   130,   562,
    132,   0,     133,   563,   134,   0,     564,   135,   565,   566,   567,   136,   568,   0,     137,   138,
    0,     139,   0,     140,   141,   0,     0,     142,   569,   143,   0,     144,   570,   571,   146,   0,
    147,   148,   149,   572,   0,     573,   151,   0,     152,   153,   154,   155,   156,   574,   575,   157,
    0,     0,     158,   0,     576,   0,     577,   578,   579,   0,     0,     160,   580,   581,   0,     582,
    583,   0,     161,   162,   584,   585,   586,   0,     0,     0,     0,     587,   165,   588,   0,     0,
    589,   590,   166,   0,     167,   0,     0,     0,     591,   592,   168,   0,     169,   170,   171,   0,
    0,     0,     172,   0,     0,     173,   174,   175,   0,     0,     593,   176,   0,     594,   595,   177,
    178,   179,   180,   0,     0,     181,   0,     182,   183,   184,   596,   0,     185,   597,   186,   598,
    599,   187,   0,     600,   188,   189,   190,   601,   0,     191,   0,     0,     602,   0,     192,   193,
    0,     603,   194,   0,     195,   604,   605,   606,   607,   0,     608,   609,   197,   610,   611,   612,
    199,   0,     0,     200,   613,   0,     614,   615,   0,     201,   202,   0,     203,   616,   0,     204,
    0,     0,     0,     617,   206,   207,   208,   618,   0,     209,   210,   0,     0,     0,     211,   0,
    0,     619,   212,   620,   0,     0,     213,   0,     0,     214,   215,   0,     0,     0,     0,     0,
    0,     216,   621,   217,   0,     0,     622,   218,   0,     623,   219,   0,     0,     0,     624,   0,
    625,   0,     221,   626,   0,     222,   0,     223,   627,   0,     0,     628,   0,     0,     0,     0,
    629,   224,   225,   226,   227,   228,   229,   630,   230,   231,   232,   233,   234,   235,   236,   237,
    238,   631,   239,   240,   241,   632,   242,   243,   0,     0,     0,     244,   245,   633,   247,   0,
    0,     634,   249,   635,   636,   250,   0,     251,   637,   638,   639,   640,   641,   642,   643,   256,
    257,   258,   259,   0,     644,   260,   261,   0,     262,   263,   264,   645,   646,   647,   265,   0,
    648,   649,   0,     266,   267,   650,   0,     269,   270,   271,   0,     0,     0,     0,     0,     0,
    0,     0,     0,     0,     272,   273,   651,   652,   275,   653,   654,   655,   656,   657,   0,     278,
    279,   0,     280,   0,     281,   282,   0,     658,   284,   285,   286,   287,   288,   289,   290,   659,
    0,     0,     0,     291,   292,   0,     0,     293,   294,   295,   0,     296,   0,     297,   298,   660,
    661,   299,   0,     300,   301,   302,   0,     303,   304,   0,     0,     662,   305,   306,   663,   307,
    308,   664,   309,   665,   311,   312,   0,     666,   314,   0,     0,     0,     315,   316,   317,   0,
    0,     318,   0,     0,     0,     319,   320,   321,   322,   0,     323,   324,   0,     0,     0,     0,
    0,     0,     325,   326,   0,     327,   0,     0,     328,   0,     0,     329,   330,   667,   668,   331,
    332,   0,     333,   669,   335,   670,   671,   672,   336,   337,   673,   338,   339,   0,     340,   341,
    0,     674,   342,   675,   676,   677,   678,   0,     0,     0,     0,     0,     347,   0,     348,   679,
    680,   681,   350,   351,   352,   0,     682,   353,   354,   683,   0,     355,   0,     0,     684,   685,
    356,   0,     0,     357,   0,     0,     686,   359,   0,     0,     687,   688,   689,   690,   691,   360,
    0,     0,     361,   692,   0,     362,   363,   693,   0,     0,     0,     0,     365,   0,     366,   367,
    0,     694,   0,     695,   0,     0,     0,     0,     696,   0,     0,     0,     697,   698,   0,     0,
    0,     0,     699,   0,     700,   1492,  0,     701,   702,   0,     703,   704,   121,   0,     559,   123,
    124,   125,   126,   0,     0,     0,     0,     0,     127,   0,     0,     560,   0,     561,   129,   130,
    562,   132,   0,     133,   563,   134,   0,     564,   135,   565,   566,   567,   136,   568,   0,     137,
    138,   0,     139,   0,     140,   141,   0,     0,     142,   569,   143,   0,     144,   570,   571,   146,
    0,     147,   148,   149,   572,   0,     573,   151,   0,     152,   153,   154,   155,   156,   574,   575,
    157,   0,     0,     158,   0,     576,   0,     577,   578,   579,   0,     0,     160,   580,   581,   0,
    582,   583,   0,     161,   162,   584,   585,   586,   0,     0,     0,     0,     587,   165,   588,   0,
    0,     589,   590,   166,   0,     167,   0,     0,     0,     591,   592,   168,   0,     169,   170,   171,
    0,     0,     0,     172,   0,     0,     173,   174,   175,   0,     0,     593,   176,   0,     594,   595,
    177,   178,   179,   180,   0,     0,     181,   0,     182,   183,   184,   596,   0,     185,   597,   186,
    598,   599,   187,   0,     600,   188,   189,   190,   601,   0,     191,   0,     0,     602,   0,     192,
    193,   0,     603,   194,   0,     195,   604,   605,   606,   607,   0,     608,   609,   197,   610,   611,
    612,   199,   0,     0,     200,   613,   0,     614,   615,   0,     201,   202,   0,     203,   616,   0,
    204,   0,     0,     0,     617,   206,   207,   208,   618,   0,     209,   210,   0,     0,     0,     211,
    0,     0,     619,   212,   620,   0,     0,     213,   0,     0,     214,   215,   0,     0,     0,     0,
    0,     0,     216,   621,   217,   0,     0,     622,   218,   0,     623,   219,   0,     0,     0,     624,
    0,     625,   0,     221,   626,   0,     222,   0,     223,   627,   0,     0,     628,   0,     0,     0,
    0,     629,   224,   225,   226,   227,   228,   229,   630,   230,   231,   232,   233,   234,   235,   236,
    237,   238,   631,   239,   240,   241,   632,   242,   243,   0,     0,     0,     244,   245,   633,   247,
    0,     0,     634,   249,   635,   636,   250,   0,     251,   637,   638,   639,   640,   641,   642,   643,
    256,   257,   258,   259,   0,     644,   260,   261,   0,     262,   263,   264,   645,   646,   647,   265,
    0,     648,   649,   0,     266,   267,   650,   0,     269,   270,   271,   0,     0,     0,     0,     0,
    0,     0,     0,     0,     0,     272,   273,   651,   652,   275,   653,   654,   655,   656,   657,   0,
    278,   279,   0,     280,   0,     281,   282,   0,     658,   284,   285,   286,   287,   288,   289,   290,
    659,   0,     0,     0,     291,   292,   0,     0,     293,   294,   295,   0,     296,   0,     297,   298,
    660,   661,   299,   0,     300,   301,   302,   0,     303,   304,   0,     0,     662,   305,   306,   663,
    307,   308,   664,   309,   665,   311,   312,   0,     666,   314,   0,     0,     0,     315,   316,   317,
    0,     0,     318,   0,     0,     0,     319,   320,   321,   322,   0,     323,   324,   0,     0,     0,
    0,     0,     0,     325,   326,   0,     327,   0,     0,     328,   0,     0,     329,   330,   667,   668,
    331,   332,   0,     333,   669,   335,   670,   671,   672,   336,   337,   673,   338,   339,   0,     340,
    341,   0,     674,   342,   675,   676,   677,   678,   0,     0,     0,     0,     0,     347,   0,     348,
    679,   680,   681,   350,   351,   352,   0,     682,   353,   354,   683,   0,     355,   0,     0,     684,
    685,   356,   0,     0,     357,   0,     0,     686,   359,   0,     0,     687,   688,   689,   690,   691,
    360,   0,     0,     361,   692,   0,     362,   363,   693,   0,     0,     0,     0,     365,   0,     366,
    367,   0,     694,   0,     695,   0,     0,     0,     0,     696,   0,     0,     0,     697,   698,   0,
    0,     0,     0,     699,   0,     700,   1519,  0,     701,   702,   0,     703,   704,   121,   0,     559,
    123,   124,   125,   126,   0,     0,     0,     0,     0,     127,   0,     0,     560,   0,     561,   129,
    130,   562,   132,   0,     133,   563,   134,   0,     564,   135,   565,   566,   567,   136,   568,   0,
    137,   138,   0,     139,   0,     140,   141,   0,     0,     142,   569,   143,   0,     144,   570,   571,
    146,   0,     147,   148,   149,   572,   0,     573,   151,   0,     152,   153,   154,   155,   156,   574,
    575,   157,   0,     0,     158,   0,     576,   0,     577,   578,   579,   0,     0,     160,   580,   581,
    0,     582,   583,   0,     161,   162,   584,   585,   586,   0,     0,     0,     0,     587,   165,   588,
    0,     0,     589,   590,   166,   0,     167,   0,     0,     0,     591,   592,   168,   0,     169,   170,
    171,   0,     0,     0,     172,   0,     0,     173,   174,   175,   0,     0,     593,   176,   0,     594,
    595,   177,   178,   179,   180,   0,     0,     181,   0,     182,   183,   184,   596,   0,     185,   597,
    186,   598,   599,   187,   0,     600,   188,   189,   190,   601,   0,     191,   0,     0,     602,   0,
    192,   193,   1946,  603,   194,   0,     195,   604,   605,   606,   607,   0,     608,   609,   197,   610,
    611,   612,   199,   0,     0,     200,   613,   0,     614,   615,   0,     201,   202,   0,     203,   616,
    0,     204,   0,     0,     0,     617,   206,   207,   208,   618,   0,     209,   210,   0,     0,     0,
    211,   0,     0,     619,   212,   620,   0,     0,     213,   0,     0,     214,   215,   0,     0,     0,
    0,     0,     0,     216,   621,   217,   0,     0,     622,   218,   0,     623,   219,   0,     0,     0,
    624,   0,     625,   0,     221,   626,   0,     222,   0,     223,   627,   0,     0,     628,   0,     0,
    0,     0,     629,   224,   225,   226,   227,   228,   229,   630,   230,   231,   232,   233,   234,   235,
    236,   237,   238,   631,   239,   240,   241,   632,   242,   243,   0,     0,     0,     244,   245,   633,
    247,   0,     0,     634,   249,   635,   636,   250,   0,     251,   637,   638,   639,   640,   641,   642,
    643,   256,   257,   258,   259,   0,     644,   260,   261,   0,     262,   263,   264,   645,   646,   647,
    265,   0,     648,   649,   0,     266,   267,   650,   0,     269,   270,   271,   0,     0,     0,     0,
    0,     0,     0,     0,     0,     0,     272,   273,   651,   652,   275,   653,   654,   655,   656,   657,
    0,     278,   279,   0,     280,   0,     281,   282,   0,     658,   284,   285,   286,   287,   288,   289,
    290,   659,   0,     0,     0,     291,   292,   0,     0,     293,   294,   295,   0,     296,   0,     297,
    298,   660,   661,   299,   0,     300,   301,   302,   0,     303,   304,   0,     0,     662,   305,   306,
    663,   307,   308,   664,   309,   665,   311,   312,   0,     666,   314,   0,     0,     0,     315,   316,
    317,   0,     0,     318,   0,     0,     0,     319,   320,   321,   322,   0,     323,   324,   0,     0,
    0,     0,     0,     0,     325,   326,   0,     327,   0,     0,     328,   0,     0,     329,   330,   667,
    668,   331,   332,   0,     333,   669,   335,   670,   671,   672,   336,   337,   673,   338,   339,   0,
    340,   341,   0,     674,   342,   675,   676,   677,   678,   0,     0,     0,     0,     0,     347,   0,
    348,   679,   680,   681,   350,   351,   352,   0,     682,   353,   354,   683,   0,     355,   0,     0,
    684,   685,   356,   0,     0,     357,   0,     0,     686,   359,   0,     0,     687,   688,   689,   690,
    691,   360,   0,     0,     361,   692,   0,     362,   363,   693,   0,     0,     0,     0,     365,   0,
    366,   367,   0,     694,   0,     695,   0,     0,     0,     0,     696,   0,     0,     0,     697,   698,
    0,     0,     0,     0,     699,   0,     700,   0,     0,     701,   702,   0,     703,   704,   121,   0,
    559,   123,   124,   125,   126,   0,     0,     0,     0,     0,     127,   0,     0,     560,   0,     561,
    129,   130,   562,   132,   0,     133,   563,   134,   0,     564,   135,   565,   566,   567,   136,   568,
    0,     137,   138,   0,     139,   0,     140,   141,   0,     0,     142,   569,   143,   0,     144,   570,
    571,   146,   0,     147,   148,   149,   572,   0,     573,   151,   0,     152,   153,   154,   155,   156,
    574,   575,   157,   0,     0,     158,   0,     576,   0,     577,   578,   579,   0,     0,     160,   580,
    581,   0,     582,   583,   0,     161,   162,   584,   585,   586,   0,     0,     0,     0,     587,   165,
    588,   0,     0,     589,   590,   166,   0,     167,   0,     0,     0,     591,   592,   168,   0,     169,
    170,   171,   0,     0,     0,     172,   0,     0,     173,   174,   175,   0,     0,     593,   176,   0,
    594,   595,   177,   178,   179,   180,   0,     0,     181,   0,     182,   183,   184,   596,   0,     185,
    597,   186,   598,   599,   187,   0,     600,   188,   189,   190,   601,   0,     191,   0,     0,     602,
    0,     192,   193,   1948,  603,   194,   0,     195,   604,   605,   606,   607,   0,     608,   609,   197,
    610,   611,   612,   199,   0,     0,     200,   613,   0,     614,   615,   0,     201,   202,   0,     203,
    616,   0,     204,   0,     0,     0,     617,   206,   207,   208,   618,   0,     209,   210,   0,     0,
    0,     211,   0,     0,     619,   212,   620,   0,     0,     213,   0,     0,     214,   215,   0,     0,
    0,     0,     0,     0,     216,   621,   217,   0,     0,     622,   218,   0,     623,   219,   0,     0,
    0,     624,   0,     625,   0,     221,   626,   0,     222,   0,     223,   627,   0,     0,     628,   0,
    0,     0,     0,     629,   224,   225,   226,   227,   228,   229,   630,   230,   231,   232,   233,   234,
    235,   236,   237,   238,   631,   239,   240,   241,   632,   242,   243,   0,     0,     0,     244,   245,
    633,   247,   0,     0,     634,   249,   635,   636,   250,   0,     251,   637,   638,   639,   640,   641,
    642,   643,   256,   257,   258,   259,   0,     644,   260,   261,   0,     262,   263,   264,   645,   646,
    647,   265,   0,     648,   649,   0,     266,   267,   650,   0,     269,   270,   271,   0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     272,   273,   651,   652,   275,   653,   654,   655,   656,
    657,   0,     278,   279,   0,     280,   0,     281,   282,   0,     658,   284,   285,   286,   287,   288,
    289,   290,   659,   0,     0,     0,     291,   292,   0,     0,     293,   294,   295,   0,     296,   0,
    297,   298,   660,   661,   299,   0,     300,   301,   302,   0,     303,   304,   0,     0,     662,   305,
    306,   663,   307,   308,   664,   309,   665,   311,   312,   0,     666,   314,   0,     0,     0,     315,
    316,   317,   0,     0,     318,   0,     0,     0,     319,   320,   321,   322,   0,     323,   324,   0,
    0,     0,     0,     0,     0,     325,   326,   0,     327,   0,     0,     328,   0,     0,     329,   330,
    667,   668,   331,   332,   0,     333,   669,   335,   670,   671,   672,   336,   337,   673,   338,   339,
    0,     340,   341,   0,     674,   342,   675,   676,   677,   678,   0,     0,     0,     0,     0,     347,
    0,     348,   679,   680,   681,   350,   351,   352,   0,     682,   353,   354,   683,   0,     355,   0,
    0,     684,   685,   356,   0,     0,     357,   0,     0,     686,   359,   0,     0,     687,   688,   689,
    690,   691,   360,   0,     0,     361,   692,   0,     362,   363,   693,   0,     0,     0,     0,     365,
    0,     366,   367,   0,     694,   0,     695,   0,     0,     0,     0,     696,   0,     0,     0,     697,
    698,   0,     0,     0,     0,     699,   0,     700,   0,     0,     701,   702,   0,     703,   704,   121,
    0,     559,   123,   124,   125,   126,   0,     0,     0,     0,     0,     127,   0,     0,     560,   0,
    561,   129,   130,   562,   132,   0,     133,   563,   134,   0,     564,   135,   565,   566,   567,   136,
    568,   0,     137,   138,   0,     139,   0,     140,   141,   0,     0,     142,   569,   143,   0,     144,
    570,   571,   146,   0,     147,   148,   149,   572,   0,     573,   151,   0,     152,   153,   154,   155,
    156,   574,   575,   157,   0,     0,     158,   0,     576,   0,     577,   578,   579,   0,     0,     160,
    580,   581,   0,     582,   583,   0,     161,   162,   584,   585,   586,   0,     0,     0,     0,     587,
    165,   588,   0,     0,     589,   590,   166,   0,     167,   0,     0,     0,     591,   592,   168,   0,
    169,   170,   171,   0,     0,     0,     172,   0,     0,     173,   174,   175,   0,     0,     593,   176,
    0,     594,   595,   177,   178,   179,   180,   0,     0,     181,   0,     182,   183,   184,   596,   0,
    185,   597,   186,   598,   599,   187,   0,     600,   188,   189,   190,   601,   0,     191,   0,     0,
    602,   0,     192,   193,   1950,  603,   194,   0,     195,   604,   605,   606,   607,   0,     608,   609,
    197,   610,   611,   612,   199,   0,     0,     200,   613,   0,     614,   615,   0,     201,   202,   0,
    203,   616,   0,     204,   0,     0,     0,     617,   206,   207,   208,   618,   0,     209,   210,   0,
    0,     0,     211,   0,     0,     619,   212,   620,   0,     0,     213,   0,     0,     214,   215,   0,
    0,     0,     0,     0,     0,     216,   621,   217,   0,     0,     622,   218,   0,     623,   219,   0,
    0,     0,     624,   0,     625,   0,     221,   626,   0,     222,   0,     223,   627,   0,     0,     628,
    0,     0,     0,     0,     629,   224,   225,   226,   227,   228,   229,   630,   230,   231,   232,   233,
    234,   235,   236,   237,   238,   631,   239,   240,   241,   632,   242,   243,   0,     0,     0,     244,
    245,   633,   247,   0,     0,     634,   249,   635,   636,   250,   0,     251,   637,   638,   639,   640,
    641,   642,   643,   256,   257,   258,   259,   0,     644,   260,   261,   0,     262,   263,   264,   645,
    646,   647,   265,   0,     648,   649,   0,     266,   267,   650,   0,     269,   270,   271,   0,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     272,   273,   651,   652,   275,   653,   654,   655,
    656,   657,   0,     278,   279,   0,     280,   0,     281,   282,   0,     658,   284,   285,   286,   287,
    288,   289,   290,   659,   0,     0,     0,     291,   292,   0,     0,     293,   294,   295,   0,     296,
    0,     297,   298,   660,   661,   299,   0,     300,   301,   302,   0,     303,   304,   0,     0,     662,
    305,   306,   663,   307,   308,   664,   309,   665,   311,   312,   0,     666,   314,   0,     0,     0,
    315,   316,   317,   0,     0,     318,   0,     0,     0,     319,   320,   321,   322,   0,     323,   324,
    0,     0,     0,     0,     0,     0,     325,   326,   0,     327,   0,     0,     328,   0,     0,     329,
    330,   667,   668,   331,   332,   0,     333,   669,   335,   670,   671,   672,   336,   337,   673,   338,
    339,   0,     340,   341,   0,     674,   342,   675,   676,   677,   678,   0,     0,     0,     0,     0,
    347,   0,     348,   679,   680,   681,   350,   351,   352,   0,     682,   353,   354,   683,   0,     355,
    0,     0,     684,   685,   356,   0,     0,     357,   0,     0,     686,   359,   0,     0,     687,   688,
    689,   690,   691,   360,   0,     0,     361,   692,   0,     362,   363,   693,   0,     0,     0,     0,
    365,   0,     366,   367,   0,     694,   0,     695,   0,     0,     0,     0,     696,   0,     0,     0,
    697,   698,   0,     0,     0,     0,     699,   0,     700,   0,     0,     701,   702,   0,     703,   704,
    121,   0,     559,   123,   124,   125,   126,   0,     0,     0,     0,     0,     127,   0,     0,     560,
    0,     561,   129,   130,   562,   132,   0,     133,   563,   134,   0,     564,   135,   565,   566,   567,
    136,   568,   0,     137,   138,   0,     139,   0,     140,   141,   0,     0,     142,   569,   143,   0,
    144,   570,   571,   146,   0,     147,   148,   149,   572,   0,     573,   151,   0,     152,   153,   154,
    155,   156,   574,   575,   157,   0,     0,     158,   0,     576,   0,     577,   578,   579,   0,     0,
    160,   580,   581,   0,     582,   583,   0,     161,   162,   584,   585,   586,   0,     0,     0,     0,
    587,   165,   588,   0,     0,     589,   590,   166,   0,     167,   0,     0,     0,     591,   592,   168,
    0,     169,   170,   171,   0,     0,     0,     172,   0,     0,     173,   174,   175,   0,     0,     593,
    176,   0,     594,   595,   177,   178,   179,   180,   0,     0,     181,   0,     182,   183,   184,   596,
    0,     185,   597,   186,   598,   599,   187,   0,     600,   188,   189,   190,   601,   0,     191,   0,
    0,     602,   0,     192,   193,   0,     603,   194,   0,     195,   604,   605,   606,   607,   0,     608,
    609,   197,   610,   611,   612,   199,   0,     0,     200,   613,   0,     614,   615,   0,     201,   202,
    0,     203,   616,   0,     204,   0,     0,     0,     617,   206,   207,   208,   618,   0,     209,   210,
    0,     0,     0,     211,   0,     0,     619,   212,   620,   0,     0,     213,   0,     0,     214,   215,
    0,     0,     0,     0,     0,     0,     216,   621,   217,   0,     0,     622,   218,   0,     623,   219,
    0,     0,     0,     624,   0,     625,   0,     221,   626,   0,     222,   0,     223,   627,   0,     0,
    628,   0,     0,     0,     0,     629,   224,   225,   226,   227,   228,   229,   630,   230,   231,   232,
    233,   234,   235,   236,   237,   238,   631,   239,   240,   241,   632,   242,   243,   0,     0,     0,
    244,   245,   633,   247,   0,     0,     634,   249,   635,   636,   250,   0,     251,   637,   638,   639,
    640,   641,   642,   643,   256,   257,   258,   259,   0,     644,   260,   261,   0,     262,   263,   264,
    645,   646,   647,   265,   0,     648,   649,   0,     266,   267,   650,   0,     269,   270,   271,   0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     272,   273,   651,   652,   275,   653,   654,
    655,   656,   657,   0,     278,   279,   0,     280,   0,     281,   282,   0,     658,   284,   285,   286,
    287,   288,   289,   290,   659,   0,     0,     0,     291,   292,   0,     0,     293,   294,   295,   0,
    296,   0,     297,   298,   660,   661,   299,   0,     300,   301,   302,   0,     303,   304,   0,     0,
    662,   305,   306,   663,   307,   308,   664,   309,   665,   311,   312,   0,     666,   314,   0,     0,
    0,     315,   316,   317,   0,     0,     318,   0,     0,     0,     319,   320,   321,   322,   0,     323,
    324,   0,     0,     0,     0,     0,     0,     325,   326,   0,     327,   0,     0,     328,   0,     0,
    329,   330,   667,   668,   331,   332,   0,     333,   669,   335,   670,   671,   672,   336,   337,   673,
    338,   339,   0,     340,   341,   0,     674,   342,   675,   676,   677,   678,   0,     0,     0,     0,
    0,     347,   0,     348,   679,   680,   681,   350,   351,   352,   0,     682,   353,   354,   683,   0,
    355,   0,     0,     684,   685,   356,   0,     0,     357,   0,     0,     686,   359,   0,     0,     687,
    688,   689,   690,   691,   360,   0,     0,     361,   692,   0,     362,   363,   693,   0,     0,     0,
    0,     365,   0,     366,   367,   0,     694,   0,     695,   0,     0,     0,     0,     696,   0,     0,
    0,     697,   698,   0,     0,     0,     0,     699,   0,     700,   0,     0,     701,   702,   0,     703,
    704,   121,   0,     559,   123,   124,   125,   126,   1547,  0,     0,     0,     0,     1548,  0,     0,
    560,   0,     561,   129,   130,   562,   132,   0,     133,   563,   134,   0,     564,   135,   565,   566,
    567,   136,   568,   0,     137,   138,   0,     139,   0,     140,   141,   0,     0,     142,   569,   143,
    0,     144,   570,   571,   146,   0,     147,   148,   149,   572,   0,     573,   151,   0,     152,   153,
    154,   155,   156,   574,   575,   157,   0,     0,     158,   0,     576,   0,     577,   578,   579,   0,
    0,     160,   580,   581,   0,     582,   583,   0,     161,   162,   584,   585,   586,   0,     0,     0,
    0,     587,   165,   588,   0,     0,     589,   590,   166,   0,     167,   0,     0,     0,     591,   592,
    168,   0,     169,   170,   171,   0,     0,     0,     172,   0,     0,     173,   174,   175,   0,     0,
    593,   176,   0,     594,   595,   177,   178,   179,   180,   0,     0,     181,   0,     182,   183,   184,
    596,   0,     185,   597,   186,   598,   599,   187,   0,     600,   188,   189,   190,   601,   0,     191,
    0,     0,     602,   0,     192,   193,   0,     603,   194,   0,     195,   604,   605,   606,   607,   0,
    608,   609,   197,   610,   611,   612,   199,   0,     0,     200,   613,   0,     614,   615,   0,     201,
    202,   0,     203,   616,   0,     204,   0,     0,     0,     617,   206,   207,   208,   618,   0,     209,
    210,   0,     0,     0,     211,   0,     0,     619,   212,   620,   0,     0,     213,   0,     0,     214,
    215,   0,     0,     0,     0,     0,     0,     216,   621,   217,   0,     0,     622,   218,   0,     623,
    219,   0,     0,     0,     624,   0,     625,   0,     221,   626,   0,     222,   0,     223,   627,   0,
    0,     628,   0,     0,     0,     0,     629,   224,   225,   226,   227,   228,   229,   630,   230,   231,
    232,   233,   234,   235,   236,   237,   238,   631,   239,   240,   241,   632,   242,   243,   0,     0,
    0,     244,   245,   633,   247,   0,     0,     634,   249,   635,   636,   250,   0,     251,   637,   638,
    639,   640,   641,   642,   643,   256,   257,   258,   259,   0,     644,   260,   261,   0,     262,   263,
    264,   645,   0,     647,   265,   0,     648,   649,   0,     266,   267,   650,   0,     269,   270,   271,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     272,   273,   651,   652,   275,   653,
    654,   655,   656,   657,   0,     278,   279,   0,     280,   0,     281,   282,   0,     658,   284,   285,
    286,   287,   288,   289,   290,   659,   0,     0,     0,     291,   292,   0,     0,     293,   294,   295,
    0,     296,   0,     297,   298,   660,   661,   299,   0,     300,   301,   302,   0,     303,   304,   0,
    0,     662,   305,   306,   663,   307,   308,   664,   309,   665,   311,   312,   0,     666,   314,   0,
    0,     0,     315,   316,   317,   0,     0,     318,   0,     0,     0,     319,   320,   321,   322,   0,
    323,   324,   0,     0,     0,     0,     0,     0,     325,   326,   0,     327,   0,     0,     328,   0,
    0,     329,   330,   667,   668,   331,   332,   0,     333,   669,   335,   670,   671,   672,   336,   337,
    673,   338,   339,   0,     340,   341,   0,     674,   342,   675,   676,   677,   678,   0,     0,     0,
    0,     0,     347,   0,     348,   679,   680,   681,   350,   351,   352,   0,     682,   353,   354,   683,
    0,     355,   0,     0,     684,   685,   356,   0,     0,     357,   0,     0,     686,   359,   0,     0,
    687,   688,   689,   690,   691,   360,   0,     0,     361,   692,   0,     362,   363,   693,   0,     0,
    0,     0,     365,   0,     366,   367,   0,     694,   0,     695,   0,     0,     0,     0,     696,   0,
    0,     0,     697,   698,   0,     0,     0,     0,     699,   0,     700,   0,     0,     701,   702,   0,
    703,   704,   121,   0,     559,   123,   124,   125,   126,   0,     0,     0,     0,     0,     127,   0,
    0,     560,   0,     561,   129,   130,   562,   132,   0,     133,   563,   134,   0,     564,   135,   565,
    566,   567,   136,   568,   0,     137,   138,   0,     139,   0,     140,   141,   0,     0,     142,   569,
    143,   0,     144,   570,   571,   146,   0,     147,   148,   149,   572,   0,     573,   151,   0,     152,
    153,   154,   155,   156,   574,   575,   157,   0,     0,     158,   0,     576,   0,     577,   578,   579,
    0,     0,     160,   580,   581,   0,     582,   583,   0,     161,   162,   584,   585,   586,   0,     0,
    0,     0,     587,   165,   588,   0,     0,     589,   590,   166,   0,     167,   0,     0,     0,     591,
    592,   168,   0,     169,   170,   171,   0,     0,     0,     172,   0,     0,     173,   174,   175,   0,
    0,     593,   176,   0,     594,   595,   177,   178,   179,   180,   0,     0,     181,   0,     182,   183,
    184,   596,   0,     185,   597,   186,   598,   599,   187,   0,     600,   188,   189,   190,   601,   0,
    191,   0,     0,     602,   0,     192,   193,   0,     603,   194,   0,     195,   604,   605,   606,   607,
    0,     608,   609,   197,   610,   611,   612,   199,   0,     0,     200,   613,   0,     614,   615,   0,
    201,   202,   0,     203,   616,   0,     204,   0,     0,     0,     617,   206,   207,   208,   618,   0,
    209,   210,   0,     0,     0,     211,   0,     0,     619,   212,   2240,  0,     0,     213,   0,     0,
    214,   215,   0,     0,     0,     0,     0,     0,     216,   621,   217,   0,     0,     622,   218,   0,
    623,   219,   0,     0,     0,     624,   0,     625,   0,     221,   626,   0,     222,   0,     223,   627,
    0,     0,     628,   0,     0,     0,     0,     629,   224,   225,   226,   227,   228,   229,   630,   230,
    231,   232,   233,   234,   235,   236,   237,   238,   631,   239,   240,   241,   632,   242,   243,   0,
    0,     0,     244,   245,   633,   247,   0,     0,     634,   249,   635,   636,   250,   0,     251,   637,
    638,   639,   640,   641,   642,   643,   256,   257,   258,   259,   0,     644,   260,   261,   0,     262,
    263,   264,   645,   646,   647,   265,   0,     648,   649,   0,     266,   267,   650,   0,     269,   270,
    271,   0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     272,   273,   651,   652,   275,
    653,   654,   655,   656,   657,   0,     278,   279,   0,     280,   0,     281,   282,   0,     658,   284,
    285,   286,   287,   288,   289,   290,   659,   0,     0,     0,     291,   292,   0,     0,     293,   294,
    295,   0,     296,   0,     297,   298,   660,   661,   299,   0,     300,   301,   302,   0,     303,   304,
    0,     0,     662,   305,   306,   663,   307,   308,   664,   309,   665,   311,   312,   0,     666,   314,
    0,     0,     0,     315,   316,   317,   0,     0,     318,   0,     0,     0,     319,   320,   321,   322,
    0,     323,   324,   0,     0,     0,     0,     0,     0,     325,   326,   0,     327,   0,     0,     328,
    0,     0,     329,   330,   667,   668,   331,   332,   0,     333,   669,   335,   670,   671,   672,   336,
    337,   673,   338,   339,   0,     340,   341,   0,     674,   342,   675,   676,   677,   678,   0,     0,
    0,     0,     0,     347,   0,     348,   679,   680,   681,   350,   351,   352,   0,     682,   353,   354,
    683,   0,     355,   0,     0,     684,   685,   356,   0,     0,     357,   0,     0,     686,   359,   0,
    0,     687,   688,   689,   690,   691,   360,   0,     0,     361,   692,   0,     362,   363,   693,   0,
    0,     0,     0,     365,   0,     366,   367,   0,     694,   0,     695,   0,     0,     0,     0,     696,
    0,     0,     0,     697,   698,   0,     0,     0,     0,     699,   0,     700,   0,     0,     701,   702,
    0,     703,   704,   121,   0,     559,   123,   124,   125,   126,   0,     0,     0,     0,     0,     127,
    0,     0,     560,   0,     561,   129,   130,   562,   132,   0,     133,   563,   134,   0,     564,   135,
    565,   566,   567,   136,   568,   0,     137,   138,   0,     139,   0,     140,   141,   0,     0,     142,
    569,   143,   0,     144,   570,   571,   146,   0,     147,   148,   149,   572,   0,     573,   151,   0,
    152,   153,   154,   155,   156,   574,   575,   157,   0,     0,     158,   0,     576,   0,     577,   578,
    579,   0,     0,     160,   580,   581,   0,     582,   583,   0,     161,   162,   584,   585,   586,   0,
    0,     0,     0,     587,   165,   588,   0,     0,     589,   590,   166,   0,     167,   0,     0,     0,
    591,   592,   168,   0,     169,   170,   171,   0,     0,     0,     172,   0,     0,     173,   174,   175,
    0,     0,     593,   176,   0,     594,   595,   177,   178,   179,   180,   0,     0,     181,   0,     182,
    183,   184,   596,   0,     185,   597,   186,   598,   599,   187,   0,     600,   188,   189,   190,   601,
    0,     191,   0,     0,     602,   0,     192,   193,   0,     603,   194,   0,     195,   604,   605,   606,
    607,   0,     608,   609,   197,   610,   611,   612,   199,   0,     0,     200,   613,   0,     614,   615,
    0,     201,   202,   0,     203,   616,   0,     204,   0,     0,     0,     617,   206,   207,   208,   618,
    0,     209,   210,   0,     0,     0,     211,   0,     0,     619,   212,   2315,  0,     0,     213,   0,
    0,     214,   215,   0,     0,     0,     0,     0,     0,     216,   621,   217,   0,     0,     622,   218,
    0,     623,   219,   0,     0,     0,     624,   0,     625,   0,     221,   626,   0,     222,   0,     223,
    627,   0,     0,     628,   0,     0,     0,     0,     629,   224,   225,   226,   227,   228,   229,   630,
    230,   231,   232,   233,   234,   235,   236,   237,   238,   631,   239,   240,   241,   632,   242,   243,
    0,     0,     0,     244,   245,   633,   247,   0,     0,     634,   249,   635,   636,   250,   0,     251,
    637,   638,   639,   640,   641,   642,   643,   256,   257,   258,   259,   0,     644,   260,   261,   0,
    262,   263,   264,   645,   646,   647,   265,   0,     648,   649,   0,     266,   267,   650,   0,     269,
    270,   271,   0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     272,   273,   651,   652,
    275,   653,   654,   655,   656,   657,   0,     278,   279,   0,     280,   0,     281,   282,   0,     658,
    284,   285,   286,   287,   288,   289,   290,   659,   0,     0,     0,     291,   292,   0,     0,     293,
    294,   295,   0,     296,   0,     297,   298,   660,   661,   299,   0,     300,   301,   302,   0,     303,
    304,   0,     0,     662,   305,   306,   663,   307,   308,   664,   309,   665,   311,   312,   0,     666,
    314,   0,     0,     0,     315,   316,   317,   0,     0,     318,   0,     0,     0,     319,   320,   321,
    322,   0,     323,   324,   0,     0,     0,     0,     0,     0,     325,   326,   0,     327,   0,     0,
    328,   0,     0,     329,   330,   667,   668,   331,   332,   0,     333,   669,   335,   670,   671,   672,
    336,   337,   673,   338,   339,   0,     340,   341,   0,     674,   342,   675,   676,   677,   678,   0,
    0,     0,     0,     0,     347,   0,     348,   679,   680,   681,   350,   351,   352,   0,     682,   353,
    354,   683,   0,     355,   0,     0,     684,   685,   356,   0,     0,     357,   0,     0,     686,   359,
    0,     0,     687,   688,   689,   690,   691,   360,   0,     0,     361,   692,   0,     362,   363,   693,
    0,     0,     0,     0,     365,   0,     366,   367,   0,     694,   0,     695,   0,     0,     0,     0,
    696,   0,     0,     0,     697,   698,   0,     0,     0,     0,     699,   0,     700,   0,     0,     701,
    702,   0,     703,   704,   121,   0,     559,   123,   124,   125,   126,   0,     0,     0,     0,     0,
    127,   0,     0,     560,   0,     561,   129,   130,   562,   132,   0,     133,   563,   134,   0,     564,
    135,   565,   566,   567,   136,   568,   0,     137,   138,   0,     139,   0,     140,   141,   0,     0,
    142,   569,   143,   0,     144,   570,   571,   146,   0,     147,   148,   149,   572,   0,     573,   151,
    0,     152,   153,   154,   155,   156,   574,   575,   157,   0,     0,     158,   0,     576,   0,     577,
    578,   579,   0,     0,     160,   580,   581,   0,     582,   583,   0,     161,   162,   584,   585,   586,
    0,     0,     0,     0,     587,   165,   588,   0,     0,     589,   2856,  166,   0,     167,   0,     0,
    0,     591,   592,   168,   0,     169,   170,   171,   0,     0,     0,     172,   0,     0,     173,   174,
    175,   0,     0,     593,   176,   0,     594,   595,   177,   178,   179,   180,   0,     0,     181,   0,
    182,   183,   184,   596,   0,     185,   597,   186,   598,   599,   187,   0,     600,   188,   189,   190,
    601,   0,     191,   0,     0,     602,   0,     192,   193,   0,     603,   194,   0,     195,   604,   605,
    606,   607,   0,     608,   609,   197,   610,   611,   612,   199,   0,     0,     200,   613,   0,     614,
    615,   0,     201,   202,   0,     203,   616,   0,     204,   0,     0,     0,     617,   206,   207,   208,
    618,   0,     209,   210,   0,     0,     0,     211,   0,     0,     619,   212,   620,   0,     0,     213,
    0,     0,     214,   215,   0,     0,     0,     0,     0,     0,     216,   621,   217,   0,     0,     622,
    218,   0,     623,   219,   0,     0,     0,     624,   0,     625,   0,     221,   626,   0,     222,   0,
    223,   627,   0,     0,     628,   0,     0,     0,     0,     629,   224,   225,   226,   227,   228,   229,
    630,   230,   231,   232,   233,   234,   235,   236,   237,   238,   631,   239,   240,   241,   632,   242,
    243,   0,     0,     0,     244,   245,   633,   247,   0,     0,     634,   249,   635,   636,   250,   0,
    251,   637,   638,   639,   640,   641,   642,   643,   256,   257,   258,   259,   0,     644,   260,   261,
    0,     262,   263,   264,   645,   646,   647,   265,   0,     648,   649,   0,     266,   267,   650,   0,
    269,   270,   271,   0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     272,   273,   651,
    652,   275,   653,   654,   655,   656,   657,   0,     278,   279,   0,     280,   0,     281,   282,   0,
    658,   284,   285,   286,   287,   288,   289,   290,   659,   0,     0,     0,     291,   292,   0,     0,
    293,   294,   295,   0,     296,   0,     297,   298,   660,   661,   299,   0,     300,   301,   302,   0,
    303,   304,   0,     0,     662,   305,   306,   663,   307,   308,   664,   309,   665,   311,   312,   0,
    666,   314,   0,     0,     0,     315,   316,   317,   0,     0,     318,   0,     0,     0,     319,   320,
    321,   322,   0,     323,   324,   0,     0,     0,     0,     0,     0,     325,   326,   0,     327,   0,
    0,     328,   0,     0,     329,   330,   667,   668,   331,   332,   0,     333,   669,   335,   670,   671,
    672,   336,   337,   673,   338,   339,   0,     340,   341,   0,     674,   342,   675,   676,   677,   678,
    0,     0,     0,     0,     0,     347,   0,     348,   679,   680,   681,   350,   351,   352,   0,     682,
    353,   354,   683,   0,     355,   0,     0,     684,   685,   356,   0,     0,     357,   0,     0,     686,
    359,   0,     0,     687,   688,   689,   690,   691,   360,   0,     0,     361,   692,   0,     362,   363,
    693,   0,     0,     0,     0,     365,   0,     366,   367,   0,     694,   0,     695,   0,     0,     0,
    0,     696,   0,     0,     0,     697,   698,   0,     0,     0,     0,     699,   0,     700,   0,     0,
    701,   702,   0,     703,   704,   121,   0,     559,   123,   124,   125,   126,   0,     0,     0,     0,
    0,     127,   0,     0,     560,   0,     561,   129,   130,   562,   132,   0,     133,   563,   134,   0,
    564,   135,   565,   566,   567,   136,   568,   0,     137,   138,   0,     139,   0,     140,   141,   0,
    0,     142,   569,   143,   0,     144,   570,   571,   146,   0,     147,   148,   149,   572,   0,     573,
    151,   0,     152,   153,   154,   155,   156,   574,   575,   157,   0,     0,     158,   0,     576,   0,
    577,   578,   579,   0,     0,     160,   580,   581,   0,     582,   583,   0,     161,   162,   584,   585,
    586,   0,     0,     0,     0,     587,   165,   588,   0,     0,     589,   590,   166,   0,     167,   0,
    0,     0,     591,   592,   168,   0,     169,   170,   171,   0,     0,     0,     172,   0,     0,     173,
    174,   175,   0,     0,     593,   176,   0,     594,   595,   177,   178,   179,   180,   0,     0,     181,
    0,     182,   183,   184,   596,   0,     185,   597,   186,   598,   599,   187,   0,     600,   188,   189,
    190,   601,   0,     191,   0,     0,     602,   0,     192,   193,   0,     603,   194,   0,     195,   604,
    605,   606,   607,   0,     608,   609,   197,   610,   611,   612,   199,   0,     0,     200,   613,   0,
    614,   615,   0,     201,   202,   0,     203,   616,   0,     204,   0,     0,     0,     617,   206,   207,
    208,   618,   0,     209,   210,   0,     0,     0,     211,   0,     0,     619,   212,   620,   0,     0,
    213,   0,     0,     214,   215,   0,     0,     0,     0,     0,     0,     216,   621,   217,   0,     0,
    622,   218,   0,     623,   219,   0,     0,     0,     624,   0,     625,   0,     221,   626,   0,     222,
    0,     223,   627,   0,     0,     628,   0,     0,     0,     0,     629,   224,   225,   226,   227,   228,
    229,   630,   230,   231,   232,   233,   234,   235,   236,   237,   238,   631,   239,   240,   241,   632,
    242,   243,   0,     0,     0,     244,   245,   633,   247,   0,     0,     634,   249,   635,   636,   250,
    0,     251,   637,   638,   639,   640,   641,   642,   643,   256,   257,   258,   259,   0,     644,   260,
    261,   0,     262,   263,   264,   645,   0,     647,   265,   0,     648,   649,   0,     266,   267,   650,
    0,     269,   270,   271,   0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     272,   273,
    651,   652,   275,   653,   654,   655,   656,   657,   0,     278,   279,   0,     280,   0,     281,   282,
    0,     658,   284,   285,   286,   287,   288,   289,   290,   659,   0,     0,     0,     291,   292,   0,
    0,     293,   294,   295,   0,     296,   0,     297,   298,   660,   661,   299,   0,     300,   301,   302,
    0,     303,   304,   0,     0,     662,   305,   306,   663,   307,   308,   664,   309,   665,   311,   312,
    0,     666,   314,   0,     0,     0,     315,   316,   317,   0,     0,     318,   0,     0,     0,     319,
    320,   321,   322,   0,     323,   324,   0,     0,     0,     0,     0,     0,     325,   326,   0,     327,
    0,     0,     328,   0,     0,     329,   330,   667,   668,   331,   332,   0,     333,   669,   335,   670,
    671,   672,   336,   337,   673,   338,   339,   0,     340,   341,   0,     674,   342,   675,   676,   677,
    678,   0,     0,     0,     0,     0,     347,   0,     348,   679,   680,   681,   350,   351,   352,   0,
    682,   353,   354,   683,   0,     355,   0,     0,     684,   685,   356,   0,     0,     357,   0,     0,
    686,   359,   0,     0,     687,   688,   689,   690,   691,   360,   0,     0,     361,   692,   0,     362,
    363,   693,   0,     0,     0,     0,     365,   0,     366,   367,   0,     694,   0,     695,   0,     0,
    0,     0,     696,   0,     0,     0,     697,   698,   0,     0,     0,     0,     699,   0,     700,   0,
    0,     701,   702,   0,     703,   704,   121,   0,     122,   123,   124,   125,   126,   0,     0,     0,
    0,     0,     127,   0,     0,     128,   0,     0,     129,   130,   131,   132,   0,     133,   0,     134,
    0,     0,     135,   0,     0,     0,     136,   0,     0,     137,   138,   0,     139,   0,     140,   141,
    0,     0,     142,   0,     143,   0,     144,   145,   0,     146,   0,     147,   148,   149,   0,     0,
    150,   151,   0,     152,   153,   154,   155,   156,   0,     0,     157,   0,     0,     158,   2116,  159,
    0,     0,     0,     0,     0,     0,     160,   0,     0,     0,     0,     0,     0,     161,   162,   0,
    0,     163,   0,     0,     0,     0,     164,   165,   0,     0,     0,     0,     0,     166,   0,     167,
    0,     0,     0,     0,     0,     168,   0,     169,   170,   171,   0,     0,     0,     172,   0,     0,
    173,   174,   175,   0,     0,     0,     176,   0,     0,     0,     177,   178,   179,   180,   0,     0,
    181,   0,     182,   183,   184,   0,     0,     185,   0,     186,   0,     0,     187,   0,     0,     188,
    189,   190,   0,     0,     191,   0,     0,     0,     0,     192,   193,   0,     0,     194,   2117,  195,
    0,     0,     0,     0,     0,     0,     196,   197,   0,     0,     198,   199,   0,     0,     200,   0,
    0,     0,     0,     0,     201,   202,   0,     203,   0,     0,     204,   0,     0,     0,     205,   206,
    207,   208,   0,     0,     209,   210,   1289,  0,     0,     211,   0,     0,     0,     212,   0,     0,
    0,     213,   0,     0,     214,   215,   0,     0,     0,     1290,  0,     0,     216,   0,     217,   0,
    0,     0,     218,   0,     0,     219,   0,     2541,  0,     0,     0,     220,   0,     221,   0,     0,
    222,   0,     223,   0,     0,     0,     0,     0,     0,     0,     0,     0,     224,   225,   226,   227,
    228,   229,   0,     230,   231,   232,   233,   234,   235,   236,   237,   238,   0,     239,   240,   241,
    0,     242,   243,   0,     0,     0,     244,   245,   246,   247,   0,     0,     248,   249,   0,     0,
    250,   0,     251,   0,     252,   0,     0,     253,   254,   255,   256,   257,   258,   259,   0,     0,
    260,   261,   0,     262,   263,   264,   0,     0,     0,     265,   0,     0,     0,     0,     266,   267,
    268,   0,     269,   270,   271,   0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     272,
    273,   274,   0,     275,   0,     276,   0,     277,   0,     0,     278,   279,   0,     280,   0,     281,
    282,   0,     283,   284,   285,   286,   287,   288,   289,   290,   0,     0,     0,     0,     291,   292,
    0,     0,     293,   294,   295,   0,     296,   0,     297,   298,   0,     0,     299,   0,     300,   301,
    302,   0,     303,   304,   0,     0,     0,     305,   306,   0,     307,   308,   0,     309,   310,   311,
    312,   0,     313,   314,   2028,  0,     0,     315,   316,   317,   0,     0,     318,   0,     0,     0,
    319,   320,   321,   322,   0,     323,   324,   2118,  0,     0,     0,     0,     0,     325,   326,   0,
    327,   0,     0,     328,   0,     0,     329,   330,   0,     0,     331,   332,   0,     333,   334,   335,
    0,     0,     0,     336,   337,   0,     338,   339,   0,     340,   341,   0,     0,     342,   343,   344,
    345,   346,   0,     0,     0,     0,     0,     347,   0,     348,   0,     0,     349,   350,   351,   352,
    0,     0,     353,   354,   0,     0,     355,   0,     0,     0,     0,     356,   0,     0,     357,   0,
    0,     358,   359,   0,     0,     0,     0,     0,     0,     0,     360,   0,     0,     361,   0,     0,
    362,   363,   364,   0,     0,     0,     0,     365,   0,     366,   367,   0,     0,     0,     368,   0,
    121,   0,     122,   123,   124,   125,   126,   0,     0,     0,     0,     0,     127,   0,     0,     128,
    0,     0,     129,   130,   131,   132,   2164,  133,   0,     134,   0,     0,     135,   0,     0,     0,
    136,   0,     0,     137,   138,   0,     139,   0,     140,   141,   0,     0,     142,   0,     143,   0,
    144,   145,   0,     146,   0,     147,   148,   149,   0,     0,     150,   151,   0,     152,   153,   154,
    155,   156,   0,     0,     157,   0,     0,     158,   2116,  159,   0,     0,     0,     0,     0,     0,
    160,   0,     0,     0,     0,     0,     0,     161,   162,   0,     0,     163,   0,     0,     0,     0,
    164,   165,   0,     0,     0,     0,     0,     166,   0,     167,   0,     0,     0,     0,     0,     168,
    0,     169,   170,   171,   0,     0,     0,     172,   0,     0,     173,   174,   175,   0,     0,     0,
    176,   0,     0,     0,     177,   178,   179,   180,   0,     0,     181,   0,     182,   183,   184,   0,
    0,     185,   0,     186,   0,     0,     187,   0,     0,     188,   189,   190,   0,     0,     191,   0,
    0,     0,     0,     192,   193,   0,     0,     194,   2117,  195,   0,     0,     0,     0,     0,     0,
    196,   197,   0,     0,     198,   199,   0,     0,     200,   0,     0,     0,     0,     0,     201,   202,
    0,     203,   0,     0,     204,   0,     0,     0,     205,   206,   207,   208,   0,     0,     209,   210,
    1289,  0,     0,     211,   0,     0,     0,     212,   0,     0,     0,     213,   0,     0,     214,   215,
    0,     0,     0,     1290,  0,     0,     216,   0,     217,   0,     0,     0,     218,   0,     0,     219,
    0,     0,     0,     0,     0,     220,   0,     221,   0,     0,     222,   0,     223,   0,     0,     0,
    0,     0,     0,     0,     0,     0,     224,   225,   226,   227,   228,   229,   0,     230,   231,   232,
    233,   234,   235,   236,   237,   238,   0,     239,   240,   241,   0,     242,   243,   0,     0,     0,
    244,   245,   246,   247,   0,     0,     248,   249,   0,     0,     250,   0,     251,   0,     252,   0,
    0,     253,   254,   255,   256,   257,   258,   259,   0,     0,     260,   261,   0,     262,   263,   264,
    0,     0,     0,     265,   0,     0,     0,     0,     266,   267,   268,   0,     269,   270,   271,   0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     272,   273,   274,   0,     275,   0,     276,
    0,     277,   0,     0,     278,   279,   0,     280,   0,     281,   282,   0,     283,   284,   285,   286,
    287,   288,   289,   290,   0,     0,     0,     0,     291,   292,   0,     0,     293,   294,   295,   0,
    296,   0,     297,   298,   0,     0,     299,   0,     300,   301,   302,   0,     303,   304,   0,     0,
    0,     305,   306,   0,     307,   308,   0,     309,   310,   311,   312,   0,     313,   314,   0,     0,
    0,     315,   316,   317,   0,     0,     318,   0,     0,     0,     319,   320,   321,   322,   0,     323,
    324,   2118,  0,     0,     0,     0,     0,     325,   326,   0,     327,   0,     0,     328,   0,     0,
    329,   330,   0,     0,     331,   332,   0,     333,   334,   335,   0,     0,     0,     336,   337,   0,
    338,   339,   0,     340,   341,   0,     0,     342,   343,   344,   345,   346,   0,     0,     0,     0,
    0,     347,   0,     348,   0,     0,     349,   350,   351,   352,   0,     0,     353,   354,   0,     0,
    355,   0,     0,     0,     0,     356,   0,     0,     357,   0,     0,     358,   359,   0,     0,     0,
    0,     0,     0,     0,     360,   0,     0,     361,   0,     0,     362,   363,   364,   0,     0,     0,
    0,     365,   0,     366,   367,   0,     0,     0,     368,   0,     121,   0,     122,   123,   124,   125,
    126,   0,     0,     0,     0,     0,     127,   0,     0,     128,   0,     0,     129,   130,   131,   132,
    2164,  133,   0,     134,   0,     0,     135,   0,     0,     0,     136,   0,     0,     137,   138,   0,
    139,   0,     140,   141,   0,     0,     142,   0,     143,   0,     144,   145,   0,     146,   0,     147,
    148,   149,   0,     0,     150,   151,   0,     152,   153,   154,   155,   156,   0,     0,     157,   0,
    0,     158,   0,     159,   0,     0,     0,     0,     0,     0,     160,   0,     0,     0,     0,     0,
    0,     161,   162,   0,     0,     163,   0,     0,     0,     0,     164,   165,   0,     0,     0,     0,
    0,     166,   0,     167,   0,     0,     0,     0,     0,     168,   0,     169,   170,   171,   0,     0,
    0,     172,   0,     0,     173,   174,   175,   0,     0,     0,     176,   0,     0,     0,     177,   178,
    179,   180,   0,     0,     181,   0,     182,   183,   184,   0,     0,     185,   0,     186,   0,     0,
    187,   0,     0,     188,   189,   190,   0,     0,     191,   0,     0,     0,     0,     192,   193,   0,
    0,     194,   0,     195,   0,     0,     0,     0,     0,     0,     196,   197,   0,     0,     198,   199,
    0,     0,     200,   0,     0,     0,     0,     0,     201,   202,   0,     203,   0,     0,     204,   0,
    0,     0,     205,   206,   207,   208,   0,     0,     209,   210,   0,     0,     0,     211,   0,     0,
    0,     212,   0,     0,     0,     213,   0,     0,     214,   215,   0,     0,     0,     0,     0,     0,
    216,   0,     217,   0,     0,     0,     218,   0,     0,     219,   0,     0,     0,     0,     0,     220,
    0,     221,   0,     0,     222,   0,     223,   0,     0,     0,     0,     0,     0,     0,     0,     0,
    224,   225,   226,   227,   228,   229,   0,     230,   231,   232,   233,   234,   235,   236,   237,   238,
    0,     239,   240,   241,   0,     242,   243,   0,     0,     0,     244,   245,   246,   247,   0,     0,
    248,   249,   0,     0,     250,   0,     251,   0,     252,   0,     0,     253,   254,   255,   256,   257,
    258,   259,   0,     0,     260,   261,   0,     262,   263,   264,   0,     0,     0,     265,   0,     0,
    0,     0,     266,   267,   268,   0,     269,   270,   271,   0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     272,   273,   274,   0,     275,   0,     276,   0,     277,   0,     0,     278,   279,
    0,     280,   0,     281,   282,   0,     283,   284,   285,   286,   287,   288,   289,   290,   0,     0,
    0,     0,     291,   292,   0,     0,     293,   294,   295,   0,     296,   0,     297,   298,   0,     0,
    299,   0,     300,   301,   302,   0,     303,   304,   0,     0,     0,     305,   306,   0,     307,   308,
    0,     309,   310,   311,   312,   0,     313,   314,   2028,  0,     0,     315,   316,   317,   0,     0,
    318,   0,     0,     0,     319,   320,   321,   322,   0,     323,   324,   0,     0,     0,     0,     0,
    0,     325,   326,   0,     327,   0,     0,     328,   0,     0,     329,   330,   0,     0,     331,   332,
    0,     333,   334,   335,   0,     0,     0,     336,   337,   0,     338,   339,   0,     340,   341,   0,
    0,     342,   343,   344,   345,   346,   0,     0,     0,     0,     0,     347,   0,     348,   0,     0,
    349,   350,   351,   352,   0,     0,     353,   354,   0,     0,     355,   0,     0,     0,     0,     356,
    0,     0,     357,   0,     0,     358,   359,   0,     0,     0,     0,     0,     0,     0,     360,   0,
    0,     361,   0,     0,     362,   363,   364,   0,     0,     0,     0,     365,   0,     366,   367,   0,
    0,     0,     368,   0,     121,   0,     122,   123,   124,   125,   126,   0,     0,     0,     0,     0,
    127,   0,     0,     128,   2370,  0,     129,   130,   131,   132,   704,   133,   0,     134,   0,     0,
    135,   0,     0,     0,     136,   0,     0,     137,   138,   0,     139,   0,     140,   141,   0,     0,
    142,   0,     143,   0,     144,   145,   0,     146,   0,     147,   148,   149,   0,     0,     150,   151,
    0,     152,   153,   154,   155,   156,   0,     0,     157,   0,     0,     158,   0,     159,   0,     0,
    0,     0,     0,     0,     160,   0,     0,     0,     0,     0,     0,     161,   162,   0,     0,     163,
    0,     0,     0,     0,     164,   165,   0,     0,     0,     0,     0,     166,   0,     167,   0,     0,
    0,     0,     0,     168,   0,     169,   170,   171,   0,     0,     0,     172,   0,     0,     173,   174,
    175,   0,     0,     0,     176,   0,     0,     0,     177,   178,   179,   180,   0,     0,     181,   0,
    182,   183,   184,   0,     0,     185,   0,     186,   0,     0,     187,   0,     0,     188,   189,   190,
    0,     0,     191,   0,     0,     0,     0,     192,   193,   0,     0,     194,   0,     195,   0,     0,
    0,     0,     0,     0,     196,   197,   0,     0,     198,   199,   0,     0,     200,   0,     0,     0,
    0,     0,     201,   202,   0,     203,   0,     0,     204,   0,     0,     0,     205,   206,   207,   208,
    0,     0,     209,   210,   0,     0,     0,     211,   0,     0,     0,     212,   0,     0,     0,     213,
    0,     0,     214,   215,   0,     0,     0,     0,     0,     0,     216,   0,     217,   0,     0,     0,
    218,   0,     0,     219,   0,     0,     0,     0,     0,     220,   0,     221,   0,     0,     222,   0,
    223,   0,     0,     0,     0,     0,     0,     0,     0,     0,     224,   225,   226,   227,   228,   229,
    0,     230,   231,   232,   233,   234,   235,   236,   237,   238,   0,     239,   240,   241,   0,     242,
    243,   0,     0,     0,     244,   245,   246,   247,   0,     0,     248,   249,   0,     0,     250,   0,
    251,   0,     252,   0,     0,     253,   254,   255,   256,   257,   258,   259,   0,     0,     260,   261,
    0,     262,   263,   264,   0,     0,     0,     265,   0,     0,     0,     0,     266,   267,   268,   0,
    269,   270,   271,   0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     272,   273,   274,
    0,     275,   0,     276,   0,     277,   0,     0,     278,   279,   0,     280,   0,     281,   282,   0,
    283,   284,   285,   286,   287,   288,   289,   290,   0,     0,     0,     0,     291,   292,   0,     0,
    293,   294,   295,   0,     296,   0,     297,   298,   0,     0,     299,   0,     300,   301,   302,   0,
    303,   304,   0,     0,     0,     305,   306,   0,     307,   308,   0,     309,   310,   311,   312,   0,
    313,   314,   0,     0,     0,     315,   316,   317,   0,     0,     318,   0,     0,     0,     319,   320,
    321,   322,   0,     323,   324,   0,     0,     0,     0,     0,     0,     325,   326,   0,     327,   0,
    0,     328,   0,     0,     329,   330,   0,     0,     331,   332,   0,     333,   334,   335,   0,     0,
    0,     336,   337,   0,     338,   339,   0,     340,   341,   0,     0,     342,   343,   344,   345,   346,
    0,     0,     0,     0,     0,     347,   0,     348,   0,     0,     349,   350,   351,   352,   0,     0,
    353,   354,   0,     0,     355,   0,     0,     0,     0,     356,   0,     0,     357,   0,     0,     358,
    359,   0,     0,     0,     0,     0,     0,     0,     360,   0,     0,     361,   0,     0,     362,   363,
    364,   0,     0,     0,     0,     365,   0,     366,   367,   0,     0,     0,     368,   0,     0,     0,
    0,     0,     0,     121,   0,     122,   123,   124,   125,   126,   0,     0,     0,     0,     3560,  127,
    0,     0,     128,   3561,  704,   129,   130,   131,   132,   0,     133,   0,     134,   0,     0,     135,
    0,     0,     0,     136,   0,     0,     137,   138,   0,     139,   0,     140,   141,   0,     0,     142,
    0,     143,   0,     144,   145,   0,     146,   0,     147,   148,   149,   0,     0,     150,   151,   0,
    152,   153,   154,   155,   156,   0,     0,     157,   0,     0,     158,   0,     159,   0,     0,     0,
    0,     0,     0,     160,   0,     0,     0,     0,     0,     0,     161,   162,   0,     0,     163,   0,
    0,     0,     0,     164,   165,   0,     0,     0,     0,     0,     166,   0,     167,   0,     0,     0,
    0,     0,     168,   0,     169,   170,   171,   0,     0,     0,     172,   0,     0,     173,   174,   175,
    0,     0,     0,     176,   0,     0,     0,     177,   178,   179,   180,   0,     0,     181,   0,     182,
    183,   184,   0,     0,     185,   0,     186,   0,     0,     187,   0,     0,     188,   189,   190,   0,
    0,     191,   0,     0,     0,     0,     192,   193,   0,     0,     194,   0,     195,   0,     0,     0,
    0,     0,     0,     196,   197,   0,     0,     198,   199,   0,     0,     200,   0,     0,     0,     0,
    0,     201,   202,   0,     203,   0,     0,     204,   0,     0,     0,     205,   206,   207,   208,   0,
    0,     209,   210,   0,     0,     0,     211,   0,     0,     0,     212,   0,     1176,  0,     213,   0,
    0,     214,   215,   0,     0,     0,     0,     0,     0,     216,   0,     217,   0,     0,     0,     218,
    0,     0,     219,   0,     0,     0,     0,     0,     220,   0,     221,   0,     0,     222,   0,     223,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     224,   225,   226,   227,   228,   229,   0,
    230,   231,   232,   233,   234,   235,   236,   237,   238,   0,     239,   240,   241,   0,     242,   243,
    0,     0,     0,     244,   245,   246,   247,   0,     0,     248,   249,   0,     0,     250,   0,     251,
    0,     252,   0,     0,     253,   254,   255,   256,   257,   258,   259,   0,     0,     260,   261,   0,
    262,   263,   264,   0,     0,     0,     265,   0,     0,     0,     0,     266,   267,   268,   0,     269,
    270,   271,   0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     272,   273,   274,   0,
    275,   0,     276,   0,     277,   0,     0,     278,   279,   0,     280,   0,     281,   282,   0,     283,
    284,   285,   286,   287,   288,   289,   290,   0,     0,     0,     0,     291,   292,   0,     0,     293,
    294,   295,   0,     296,   0,     297,   298,   0,     0,     299,   0,     300,   301,   302,   0,     303,
    304,   0,     0,     0,     305,   306,   0,     307,   308,   0,     309,   310,   311,   312,   0,     313,
    314,   0,     0,     0,     315,   316,   317,   0,     0,     318,   0,     0,     0,     319,   320,   321,
    322,   0,     323,   324,   0,     0,     0,     0,     0,     0,     325,   326,   0,     327,   0,     0,
    328,   0,     0,     329,   330,   0,     0,     331,   332,   0,     333,   334,   335,   0,     0,     0,
    336,   337,   0,     338,   339,   0,     340,   341,   0,     0,     342,   343,   344,   345,   346,   0,
    0,     0,     0,     0,     347,   0,     348,   0,     0,     349,   350,   351,   352,   0,     0,     353,
    354,   0,     0,     355,   0,     0,     0,     0,     356,   0,     0,     357,   0,     0,     358,   359,
    0,     0,     0,     0,     0,     0,     0,     360,   0,     0,     361,   0,     0,     362,   363,   364,
    0,     0,     0,     0,     365,   0,     366,   367,   0,     0,     0,     368,   0,     121,   0,     122,
    123,   124,   125,   126,   0,     0,     0,     0,     0,     127,   0,     0,     128,   0,     0,     129,
    130,   131,   132,   409,   133,   0,     134,   0,     0,     135,   0,     0,     0,     136,   0,     0,
    137,   138,   0,     139,   0,     140,   141,   0,     0,     142,   0,     143,   0,     144,   145,   0,
    146,   0,     147,   148,   149,   0,     0,     150,   151,   0,     152,   153,   154,   155,   156,   0,
    0,     157,   0,     0,     158,   0,     159,   0,     0,     0,     0,     0,     0,     160,   0,     0,
    0,     0,     0,     0,     161,   162,   0,     0,     163,   0,     0,     0,     0,     164,   165,   0,
    0,     0,     0,     0,     166,   0,     167,   0,     0,     0,     0,     0,     168,   0,     169,   170,
    171,   0,     0,     0,     172,   0,     0,     173,   174,   175,   0,     0,     0,     176,   0,     0,
    0,     177,   178,   179,   180,   0,     0,     181,   0,     182,   183,   184,   0,     0,     185,   0,
    186,   0,     0,     187,   0,     0,     188,   189,   190,   0,     0,     191,   0,     0,     0,     0,
    192,   193,   0,     0,     194,   0,     195,   0,     0,     0,     0,     0,     0,     196,   197,   0,
    0,     198,   199,   0,     0,     200,   0,     0,     0,     0,     0,     201,   202,   0,     203,   0,
    0,     204,   0,     0,     0,     205,   206,   207,   208,   0,     0,     209,   210,   0,     0,     0,
    211,   0,     0,     0,     212,   0,     0,     0,     213,   0,     0,     214,   215,   0,     0,     0,
    0,     0,     0,     216,   0,     217,   0,     0,     0,     218,   0,     0,     219,   0,     0,     0,
    0,     0,     220,   0,     221,   0,     0,     222,   0,     223,   0,     0,     0,     0,     0,     0,
    0,     0,     0,     224,   225,   226,   227,   228,   229,   0,     230,   231,   232,   233,   234,   235,
    236,   237,   238,   0,     239,   240,   241,   0,     242,   243,   0,     0,     0,     244,   245,   246,
    247,   0,     0,     248,   249,   0,     0,     250,   0,     251,   0,     252,   0,     0,     253,   254,
    255,   256,   257,   258,   259,   0,     0,     260,   261,   0,     262,   263,   264,   0,     0,     0,
    265,   0,     0,     0,     0,     266,   267,   268,   0,     269,   270,   271,   0,     0,     0,     0,
    0,     0,     0,     0,     0,     0,     272,   273,   274,   0,     275,   0,     276,   0,     277,   0,
    0,     278,   279,   0,     280,   0,     281,   282,   0,     283,   284,   285,   286,   287,   288,   289,
    290,   0,     0,     0,     0,     291,   292,   0,     0,     293,   294,   295,   0,     296,   0,     297,
    298,   0,     0,     299,   0,     300,   301,   302,   0,     303,   304,   0,     0,     0,     305,   306,
    0,     307,   308,   0,     309,   310,   311,   312,   0,     313,   314,   0,     0,     0,     315,   316,
    317,   0,     0,     318,   0,     0,     0,     319,   320,   321,   322,   0,     323,   324,   0,     0,
    0,     0,     0,     0,     325,   326,   0,     327,   0,     0,     328,   0,     0,     329,   330,   0,
    0,     331,   332,   0,     333,   334,   335,   0,     0,     0,     336,   337,   0,     338,   339,   0,
    340,   341,   0,     0,     342,   343,   344,   345,   346,   0,     0,     0,     0,     0,     347,   0,
    348,   0,     0,     349,   350,   351,   352,   0,     0,     353,   354,   0,     0,     355,   0,     0,
    0,     0,     356,   0,     0,     357,   0,     0,     358,   359,   0,     0,     0,     0,     0,     0,
    0,     360,   0,     0,     361,   0,     0,     362,   363,   364,   0,     0,     0,     0,     365,   0,
    366,   367,   0,     0,     0,     368,   0,     121,   0,     122,   123,   124,   125,   126,   0,     0,
    1796,  0,     0,     127,   0,     0,     128,   0,     0,     129,   130,   131,   132,   409,   133,   0,
    134,   0,     0,     135,   0,     0,     0,     136,   0,     0,     137,   138,   0,     139,   0,     140,
    141,   0,     0,     142,   0,     143,   0,     144,   145,   0,     146,   0,     147,   148,   149,   0,
    0,     150,   151,   0,     152,   153,   154,   155,   156,   0,     0,     157,   0,     0,     158,   0,
    159,   0,     0,     0,     0,     0,     0,     160,   0,     0,     0,     0,     0,     0,     161,   162,
    0,     0,     163,   0,     0,     0,     0,     164,   165,   0,     0,     0,     0,     0,     166,   0,
    167,   0,     0,     0,     0,     0,     168,   0,     169,   170,   171,   0,     0,     0,     172,   0,
    0,     173,   174,   175,   0,     0,     0,     176,   0,     0,     0,     177,   178,   179,   180,   0,
    0,     181,   0,     182,   183,   184,   0,     0,     185,   0,     186,   0,     0,     187,   0,     0,
    188,   189,   190,   0,     0,     191,   0,     0,     0,     0,     192,   193,   0,     0,     194,   0,
    195,   0,     0,     0,     0,     0,     0,     196,   197,   0,     0,     198,   199,   0,     0,     200,
    0,     0,     0,     0,     0,     201,   202,   0,     203,   0,     0,     204,   0,     0,     0,     205,
    206,   207,   208,   0,     0,     209,   210,   0,     0,     0,     211,   0,     0,     0,     212,   0,
    0,     0,     213,   0,     0,     214,   215,   0,     0,     0,     0,     0,     0,     216,   0,     217,
    0,     0,     0,     218,   0,     0,     219,   0,     0,     0,     0,     0,     220,   0,     221,   0,
    0,     222,   0,     223,   0,     0,     0,     0,     0,     0,     0,     0,     0,     224,   225,   226,
    227,   228,   229,   0,     230,   231,   232,   233,   234,   235,   236,   237,   238,   0,     239,   240,
    241,   0,     242,   243,   0,     0,     0,     244,   245,   246,   247,   0,     0,     248,   249,   0,
    0,     250,   0,     251,   0,     252,   0,     0,     253,   254,   255,   256,   257,   258,   259,   0,
    0,     260,   261,   0,     262,   263,   264,   0,     0,     0,     265,   0,     0,     0,     0,     266,
    267,   268,   0,     269,   270,   271,   0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    272,   273,   274,   0,     275,   0,     276,   0,     277,   0,     0,     278,   279,   0,     280,   0,
    281,   282,   0,     283,   284,   285,   286,   287,   288,   289,   290,   0,     0,     0,     0,     291,
    292,   0,     0,     293,   294,   295,   0,     296,   0,     297,   298,   0,     0,     299,   0,     300,
    301,   302,   0,     303,   304,   0,     0,     0,     305,   306,   0,     307,   308,   0,     309,   310,
    311,   312,   0,     313,   314,   0,     0,     0,     315,   316,   317,   0,     0,     318,   0,     0,
    0,     319,   320,   321,   322,   0,     323,   324,   0,     0,     0,     0,     0,     0,     325,   326,
    0,     327,   0,     0,     328,   0,     0,     329,   330,   0,     0,     331,   332,   0,     333,   334,
    335,   0,     0,     0,     336,   337,   0,     338,   339,   0,     340,   341,   0,     0,     342,   343,
    344,   345,   346,   0,     0,     0,     0,     0,     347,   0,     348,   0,     0,     349,   350,   351,
    352,   0,     0,     353,   354,   0,     0,     355,   0,     0,     0,     0,     356,   0,     0,     357,
    0,     0,     358,   359,   0,     0,     0,     0,     0,     0,     0,     360,   0,     0,     361,   0,
    0,     362,   363,   364,   0,     0,     0,     0,     365,   0,     366,   367,   0,     0,     0,     368,
    0,     0,     0,     0,     0,     0,     121,   0,     122,   123,   124,   125,   126,   0,     0,     0,
    2163,  0,     127,   0,     0,     128,   0,     2164,  129,   130,   131,   132,   0,     133,   0,     134,
    0,     0,     135,   0,     0,     0,     136,   0,     0,     137,   138,   0,     139,   0,     140,   141,
    0,     0,     142,   0,     143,   0,     144,   145,   0,     146,   0,     147,   148,   149,   0,     0,
    150,   151,   0,     152,   153,   154,   155,   156,   0,     0,     157,   0,     0,     158,   0,     159,
    0,     0,     0,     0,     0,     0,     160,   0,     0,     0,     0,     0,     0,     161,   162,   0,
    0,     163,   0,     0,     0,     0,     164,   165,   0,     0,     0,     0,     0,     166,   0,     167,
    0,     0,     0,     0,     0,     168,   0,     169,   170,   171,   0,     0,     0,     172,   0,     0,
    173,   174,   175,   0,     0,     0,     176,   0,     0,     0,     177,   178,   179,   180,   0,     0,
    181,   0,     182,   183,   184,   0,     0,     185,   0,     186,   0,     0,     187,   0,     0,     188,
    189,   190,   0,     0,     191,   0,     0,     0,     0,     192,   193,   0,     0,     194,   0,     195,
    0,     0,     0,     0,     0,     0,     196,   197,   0,     0,     198,   199,   0,     0,     200,   0,
    0,     0,     0,     0,     201,   202,   0,     203,   0,     0,     204,   0,     0,     0,     205,   206,
    207,   208,   0,     0,     209,   210,   0,     0,     0,     211,   0,     0,     0,     212,   0,     0,
    0,     213,   0,     0,     214,   215,   0,     0,     0,     0,     0,     0,     216,   0,     217,   0,
    0,     0,     218,   0,     0,     219,   0,     0,     0,     0,     0,     220,   0,     221,   0,     0,
    222,   0,     223,   0,     0,     0,     0,     0,     0,     0,     0,     0,     224,   225,   226,   227,
    228,   229,   0,     230,   231,   232,   233,   234,   235,   236,   237,   238,   0,     239,   240,   241,
    0,     242,   243,   0,     0,     0,     244,   245,   246,   247,   0,     0,     248,   249,   0,     0,
    250,   0,     251,   0,     252,   0,     0,     253,   254,   255,   256,   257,   258,   259,   0,     0,
    260,   261,   0,     262,   263,   264,   0,     0,     0,     265,   0,     0,     0,     0,     266,   267,
    268,   0,     269,   270,   271,   0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     272,
    273,   274,   0,     275,   0,     276,   0,     277,   0,     0,     278,   279,   0,     280,   0,     281,
    282,   0,     283,   284,   285,   286,   287,   288,   289,   290,   0,     0,     0,     0,     291,   292,
    0,     0,     293,   294,   295,   0,     296,   0,     297,   298,   0,     0,     299,   0,     300,   301,
    302,   0,     303,   304,   0,     0,     0,     305,   306,   0,     307,   308,   0,     309,   310,   311,
    312,   0,     313,   314,   0,     0,     0,     315,   316,   317,   0,     0,     318,   0,     0,     0,
    319,   320,   321,   322,   0,     323,   324,   0,     0,     0,     0,     0,     0,     325,   326,   0,
    327,   0,     0,     328,   0,     0,     329,   330,   0,     0,     331,   332,   0,     333,   334,   335,
    0,     0,     0,     336,   337,   0,     338,   339,   0,     340,   341,   0,     0,     342,   343,   344,
    345,   346,   0,     0,     0,     0,     0,     347,   0,     348,   0,     0,     349,   350,   351,   352,
    0,     0,     353,   354,   0,     0,     355,   0,     0,     0,     0,     356,   0,     0,     357,   0,
    0,     358,   359,   0,     0,     0,     0,     0,     0,     0,     360,   0,     0,     361,   0,     0,
    362,   363,   364,   0,     0,     0,     0,     365,   0,     366,   367,   0,     0,     0,     368,   0,
    0,     0,     0,     0,     0,     121,   0,     122,   123,   124,   125,   126,   0,     0,     0,     0,
    0,     127,   0,     0,     128,   3561,  704,   129,   130,   131,   132,   0,     133,   0,     134,   0,
    0,     135,   0,     0,     0,     136,   0,     0,     137,   138,   0,     139,   0,     140,   141,   0,
    0,     142,   0,     143,   0,     144,   145,   0,     146,   0,     147,   148,   149,   0,     0,     150,
    151,   0,     152,   153,   154,   155,   156,   0,     0,     157,   0,     0,     158,   0,     159,   0,
    0,     0,     0,     0,     0,     160,   0,     0,     0,     0,     0,     0,     161,   162,   0,     0,
    163,   0,     0,     0,     0,     164,   165,   0,     0,     0,     0,     0,     166,   0,     167,   0,
    0,     0,     0,     0,     168,   0,     169,   170,   171,   0,     0,     0,     172,   0,     0,     173,
    174,   175,   0,     0,     0,     176,   0,     0,     0,     177,   178,   179,   180,   0,     0,     181,
    0,     182,   183,   184,   0,     0,     185,   0,     186,   0,     0,     187,   0,     0,     188,   189,
    190,   0,     0,     191,   0,     0,     0,     0,     192,   193,   0,     0,     194,   0,     195,   0,
    0,     0,     0,     0,     0,     196,   197,   0,     0,     198,   199,   0,     0,     200,   0,     0,
    0,     0,     0,     201,   202,   0,     203,   0,     0,     204,   0,     0,     0,     205,   206,   207,
    208,   0,     0,     209,   210,   0,     0,     0,     211,   0,     0,     0,     212,   0,     0,     0,
    213,   0,     0,     214,   215,   0,     0,     0,     0,     0,     0,     216,   0,     217,   0,     0,
    0,     218,   0,     0,     219,   0,     0,     0,     0,     0,     220,   0,     221,   0,     0,     222,
    0,     223,   0,     0,     0,     0,     0,     0,     0,     0,     0,     224,   225,   226,   227,   228,
    229,   0,     230,   231,   232,   233,   234,   235,   236,   237,   238,   0,     239,   240,   241,   0,
    242,   243,   0,     0,     0,     244,   245,   246,   247,   0,     0,     248,   249,   0,     0,     250,
    0,     251,   0,     252,   0,     0,     253,   254,   255,   256,   257,   258,   259,   0,     0,     260,
    261,   0,     262,   263,   264,   0,     0,     0,     265,   0,     0,     0,     0,     266,   267,   268,
    0,     269,   270,   271,   0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     272,   273,
    274,   0,     275,   0,     276,   0,     277,   0,     0,     278,   279,   0,     280,   0,     281,   282,
    0,     283,   284,   285,   286,   287,   288,   289,   290,   0,     0,     0,     0,     291,   292,   0,
    0,     293,   294,   295,   0,     296,   0,     297,   298,   0,     0,     299,   0,     300,   301,   302,
    0,     303,   304,   0,     0,     0,     305,   306,   0,     307,   308,   0,     309,   310,   311,   312,
    0,     313,   314,   0,     0,     0,     315,   316,   317,   0,     0,     318,   0,     0,     0,     319,
    320,   321,   322,   0,     323,   324,   0,     0,     0,     0,     0,     0,     325,   326,   0,     327,
    0,     0,     328,   0,     0,     329,   330,   0,     0,     331,   332,   0,     333,   334,   335,   0,
    0,     0,     336,   337,   0,     338,   339,   0,     340,   341,   0,     0,     342,   343,   344,   345,
    346,   0,     0,     0,     0,     0,     347,   0,     348,   0,     0,     349,   350,   351,   352,   0,
    0,     353,   354,   0,     0,     355,   0,     0,     0,     0,     356,   0,     0,     357,   0,     0,
    358,   359,   0,     0,     0,     0,     0,     0,     0,     360,   0,     0,     361,   0,     0,     362,
    363,   364,   0,     0,     0,     0,     365,   0,     366,   367,   0,     0,     0,     368,   0,     121,
    0,     122,   123,   124,   125,   126,   0,     0,     0,     0,     0,     127,   0,     0,     128,   0,
    0,     129,   130,   131,   132,   409,   133,   0,     134,   0,     0,     135,   0,     0,     0,     136,
    0,     0,     137,   138,   0,     139,   0,     140,   141,   0,     0,     142,   0,     143,   0,     144,
    145,   0,     146,   0,     147,   148,   149,   0,     0,     150,   151,   0,     152,   153,   154,   155,
    156,   0,     0,     157,   0,     0,     158,   0,     159,   0,     0,     0,     0,     0,     0,     160,
    0,     0,     0,     0,     0,     0,     161,   162,   0,     0,     163,   0,     0,     0,     0,     164,
    165,   0,     0,     0,     0,     0,     166,   0,     167,   0,     0,     0,     0,     0,     168,   0,
    169,   170,   171,   0,     0,     0,     172,   0,     0,     173,   174,   175,   0,     0,     0,     176,
    0,     0,     0,     177,   178,   179,   180,   0,     0,     181,   0,     182,   183,   184,   0,     0,
    185,   0,     465,   0,     0,     187,   0,     0,     188,   189,   190,   0,     0,     191,   0,     0,
    0,     0,     192,   193,   0,     0,     194,   0,     195,   0,     0,     0,     0,     0,     0,     196,
    197,   0,     0,     198,   199,   0,     0,     200,   0,     0,     0,     0,     0,     201,   202,   0,
    203,   0,     0,     204,   0,     0,     0,     205,   206,   207,   208,   0,     0,     209,   210,   0,
    0,     0,     211,   0,     0,     0,     212,   0,     0,     0,     213,   0,     0,     214,   215,   0,
    0,     0,     0,     0,     0,     216,   0,     217,   0,     0,     0,     218,   0,     0,     219,   0,
    0,     0,     0,     0,     220,   0,     221,   0,     0,     222,   0,     223,   0,     0,     0,     0,
    0,     0,     0,     0,     0,     224,   225,   226,   227,   228,   229,   0,     230,   231,   232,   233,
    234,   235,   236,   237,   238,   0,     239,   240,   241,   0,     242,   243,   0,     0,     0,     244,
    245,   246,   247,   0,     0,     248,   249,   0,     0,     250,   0,     251,   0,     252,   0,     0,
    253,   254,   255,   256,   257,   258,   259,   0,     0,     260,   261,   0,     262,   263,   264,   0,
    0,     0,     265,   0,     0,     0,     0,     266,   267,   268,   0,     269,   270,   271,   0,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     272,   273,   274,   0,     275,   0,     276,   0,
    277,   0,     0,     278,   279,   0,     280,   0,     281,   282,   0,     283,   284,   285,   286,   287,
    288,   289,   290,   0,     0,     0,     0,     291,   292,   0,     0,     293,   294,   295,   0,     296,
    0,     297,   298,   0,     0,     299,   0,     300,   301,   302,   0,     303,   304,   0,     0,     0,
    305,   306,   0,     307,   308,   0,     309,   310,   311,   312,   0,     313,   314,   0,     0,     0,
    315,   316,   317,   0,     0,     318,   0,     0,     0,     319,   320,   321,   322,   0,     323,   324,
    0,     0,     0,     0,     0,     0,     325,   326,   0,     327,   0,     0,     328,   0,     0,     329,
    330,   0,     0,     331,   332,   0,     333,   334,   335,   0,     0,     0,     336,   337,   0,     338,
    339,   0,     340,   341,   0,     0,     342,   343,   344,   345,   346,   0,     0,     0,     0,     0,
    347,   0,     348,   0,     0,     349,   350,   351,   352,   0,     0,     353,   354,   0,     0,     355,
    0,     0,     0,     0,     356,   0,     0,     357,   0,     0,     358,   359,   0,     0,     0,     0,
    0,     0,     0,     360,   0,     0,     361,   0,     0,     362,   363,   364,   0,     0,     0,     0,
    365,   0,     366,   367,   0,     0,     0,     368,   0,     121,   0,     122,   123,   124,   125,   126,
    0,     0,     0,     0,     0,     127,   0,     0,     128,   0,     0,     129,   130,   131,   132,   409,
    133,   0,     134,   0,     0,     135,   0,     0,     0,     136,   0,     0,     137,   138,   0,     139,
    0,     140,   141,   0,     0,     142,   0,     143,   0,     144,   145,   0,     146,   0,     147,   148,
    149,   0,     0,     150,   151,   0,     152,   153,   154,   155,   156,   0,     0,     157,   0,     0,
    158,   0,     159,   0,     0,     0,     0,     0,     0,     160,   0,     0,     0,     0,     0,     0,
    161,   162,   0,     0,     163,   0,     0,     0,     0,     164,   165,   0,     0,     0,     0,     0,
    166,   0,     167,   0,     0,     0,     0,     0,     168,   0,     169,   170,   171,   0,     0,     0,
    172,   0,     0,     173,   174,   175,   0,     0,     0,     176,   0,     0,     0,     177,   178,   179,
    180,   0,     0,     181,   0,     182,   183,   184,   0,     0,     185,   0,     186,   0,     0,     187,
    0,     0,     188,   189,   190,   0,     0,     191,   0,     0,     0,     0,     192,   193,   0,     0,
    194,   0,     195,   0,     0,     0,     0,     0,     0,     196,   197,   0,     0,     198,   199,   0,
    0,     200,   0,     0,     0,     0,     0,     201,   202,   0,     203,   0,     0,     204,   0,     0,
    0,     205,   206,   207,   208,   0,     0,     209,   210,   0,     0,     0,     211,   0,     0,     0,
    212,   0,     0,     0,     213,   0,     0,     214,   215,   0,     0,     0,     0,     0,     0,     216,
    0,     217,   0,     0,     0,     218,   0,     0,     219,   0,     0,     0,     0,     0,     220,   0,
    221,   0,     0,     222,   0,     223,   0,     0,     0,     0,     0,     0,     0,     0,     0,     224,
    225,   226,   227,   228,   229,   0,     230,   231,   232,   233,   234,   235,   236,   237,   238,   0,
    239,   240,   241,   0,     242,   243,   0,     0,     0,     244,   245,   246,   247,   0,     0,     248,
    249,   0,     0,     250,   0,     251,   0,     252,   0,     0,     253,   254,   255,   256,   257,   258,
    259,   0,     0,     260,   261,   0,     262,   263,   264,   0,     0,     0,     265,   0,     0,     0,
    0,     266,   267,   268,   0,     269,   270,   271,   0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     272,   273,   274,   0,     275,   0,     276,   0,     277,   0,     0,     278,   279,   0,
    280,   0,     281,   282,   0,     283,   284,   285,   286,   287,   288,   289,   290,   0,     0,     0,
    0,     291,   292,   0,     0,     293,   294,   295,   0,     296,   0,     297,   298,   0,     0,     299,
    0,     300,   301,   302,   0,     303,   304,   0,     0,     0,     305,   306,   0,     307,   308,   0,
    309,   310,   311,   312,   0,     313,   314,   0,     0,     0,     315,   316,   317,   0,     0,     318,
    0,     0,     0,     319,   320,   321,   322,   0,     323,   324,   0,     0,     0,     0,     0,     0,
    325,   326,   0,     327,   0,     0,     328,   0,     0,     329,   330,   0,     0,     331,   332,   0,
    333,   334,   335,   0,     0,     0,     336,   337,   0,     338,   339,   0,     340,   341,   0,     0,
    342,   343,   344,   345,   346,   0,     0,     0,     0,     0,     347,   0,     348,   0,     0,     349,
    350,   351,   352,   0,     0,     353,   354,   0,     0,     355,   0,     0,     0,     0,     356,   0,
    0,     357,   0,     0,     358,   359,   0,     0,     0,     0,     0,     0,     0,     360,   0,     0,
    361,   0,     0,     362,   363,   364,   0,     0,     0,     0,     365,   0,     366,   367,   0,     0,
    0,     368,   0,     121,   0,     122,   123,   124,   125,   126,   0,     0,     0,     0,     0,     127,
    0,     0,     128,   0,     0,     129,   130,   131,   132,   704,   133,   0,     134,   0,     0,     135,
    0,     0,     0,     136,   0,     0,     137,   138,   0,     139,   0,     140,   141,   0,     0,     142,
    0,     143,   0,     144,   145,   0,     146,   0,     147,   148,   149,   0,     0,     150,   151,   0,
    152,   153,   154,   155,   156,   0,     0,     157,   0,     0,     158,   0,     159,   0,     0,     0,
    0,     0,     0,     160,   0,     0,     0,     0,     0,     0,     161,   162,   0,     0,     163,   0,
    0,     0,     0,     164,   165,   0,     0,     0,     0,     0,     166,   0,     167,   0,     0,     0,
    0,     0,     168,   0,     169,   170,   171,   0,     0,     0,     172,   0,     0,     173,   174,   175,
    0,     0,     0,     176,   0,     0,     0,     177,   178,   179,   180,   0,     0,     181,   0,     182,
    183,   184,   0,     0,     185,   0,     186,   0,     0,     187,   0,     0,     188,   189,   190,   0,
    0,     191,   0,     0,     0,     0,     192,   193,   0,     0,     194,   0,     195,   0,     0,     0,
    0,     0,     0,     196,   197,   0,     0,     198,   199,   0,     0,     200,   0,     0,     0,     0,
    0,     201,   202,   0,     203,   0,     0,     204,   0,     0,     0,     205,   206,   207,   208,   0,
    0,     209,   210,   0,     0,     0,     211,   0,     0,     0,     212,   0,     0,     0,     213,   0,
    0,     214,   215,   0,     0,     0,     0,     0,     0,     216,   0,     217,   0,     0,     0,     218,
    0,     0,     219,   0,     0,     0,     0,     0,     220,   0,     221,   0,     0,     222,   0,     223,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     224,   225,   226,   227,   228,   229,   0,
    230,   231,   232,   233,   234,   235,   236,   237,   238,   0,     239,   240,   241,   0,     242,   243,
    0,     0,     0,     244,   245,   246,   247,   0,     0,     248,   249,   0,     0,     250,   0,     251,
    0,     252,   0,     0,     253,   254,   255,   256,   257,   258,   259,   0,     0,     260,   261,   0,
    262,   263,   264,   0,     0,     0,     265,   0,     0,     0,     0,     266,   267,   268,   0,     269,
    270,   271,   0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     272,   273,   274,   0,
    275,   0,     276,   0,     277,   0,     0,     278,   279,   0,     280,   0,     281,   282,   0,     283,
    284,   285,   286,   287,   288,   289,   290,   0,     0,     0,     0,     291,   292,   0,     0,     293,
    294,   295,   0,     296,   0,     297,   298,   0,     0,     299,   0,     300,   301,   302,   0,     303,
    304,   0,     0,     0,     305,   306,   0,     307,   308,   0,     309,   310,   311,   312,   0,     313,
    314,   0,     0,     0,     315,   316,   317,   0,     0,     318,   0,     0,     0,     319,   320,   321,
    322,   0,     323,   324,   0,     0,     0,     0,     0,     0,     325,   326,   0,     327,   0,     0,
    328,   0,     0,     329,   330,   0,     0,     331,   332,   0,     333,   334,   335,   0,     0,     0,
    336,   337,   0,     338,   339,   0,     340,   341,   0,     0,     342,   343,   344,   345,   346,   0,
    0,     0,     0,     0,     347,   0,     348,   0,     0,     349,   350,   351,   352,   0,     0,     353,
    354,   0,     0,     355,   0,     0,     0,     0,     356,   0,     0,     357,   0,     0,     358,   359,
    0,     0,     0,     0,     0,     0,     0,     360,   0,     0,     361,   0,     0,     362,   363,   364,
    0,     0,     0,     0,     365,   0,     366,   367,   0,     0,     0,     368,   0,     121,   0,     122,
    123,   124,   125,   126,   0,     0,     0,     0,     0,     127,   0,     0,     128,   0,     0,     129,
    130,   131,   132,   2164,  133,   0,     134,   0,     0,     135,   0,     0,     0,     136,   0,     0,
    137,   138,   0,     139,   0,     140,   141,   0,     0,     142,   0,     143,   0,     144,   145,   0,
    146,   0,     147,   148,   149,   0,     0,     150,   151,   0,     152,   153,   154,   155,   156,   0,
    0,     157,   0,     0,     158,   0,     159,   0,     0,     0,     0,     0,     0,     160,   0,     0,
    0,     0,     0,     0,     161,   162,   0,     0,     163,   0,     0,     0,     0,     164,   165,   0,
    0,     0,     0,     0,     166,   0,     167,   0,     0,     0,     0,     0,     168,   0,     169,   170,
    171,   0,     0,     0,     172,   0,     0,     173,   174,   175,   0,     0,     0,     176,   0,     0,
    0,     177,   178,   179,   180,   0,     0,     181,   0,     182,   183,   184,   0,     0,     185,   0,
    186,   0,     0,     187,   0,     0,     188,   189,   190,   0,     0,     191,   0,     0,     0,     0,
    192,   193,   0,     0,     194,   0,     195,   0,     0,     0,     0,     0,     0,     196,   197,   0,
    0,     198,   199,   0,     0,     200,   0,     0,     0,     0,     0,     201,   202,   0,     203,   0,
    0,     204,   0,     0,     0,     205,   206,   207,   208,   0,     0,     209,   210,   0,     0,     0,
    211,   0,     0,     0,     212,   0,     0,     0,     213,   0,     0,     214,   215,   0,     0,     0,
    0,     0,     0,     216,   0,     217,   0,     0,     0,     218,   0,     0,     219,   550,   0,     0,
    0,     0,     220,   0,     221,   0,     0,     222,   0,     223,   0,     0,     0,     0,     0,     0,
    0,     0,     0,     224,   225,   226,   227,   228,   229,   0,     230,   231,   232,   233,   234,   235,
    236,   237,   238,   0,     239,   240,   241,   0,     242,   243,   0,     0,     0,     244,   245,   246,
    247,   0,     0,     248,   249,   0,     0,     250,   0,     251,   0,     252,   0,     0,     253,   254,
    255,   256,   257,   258,   259,   0,     0,     260,   261,   0,     262,   263,   264,   0,     0,     0,
    265,   0,     0,     0,     0,     266,   267,   268,   0,     269,   270,   271,   0,     0,     0,     0,
    0,     0,     0,     0,     0,     0,     272,   273,   274,   0,     275,   0,     276,   0,     277,   0,
    0,     278,   279,   0,     280,   0,     281,   282,   0,     283,   284,   285,   286,   287,   288,   289,
    290,   0,     0,     0,     0,     291,   292,   0,     0,     293,   294,   295,   0,     296,   0,     297,
    298,   0,     0,     299,   0,     300,   301,   302,   0,     303,   304,   0,     0,     0,     305,   306,
    0,     307,   308,   0,     309,   310,   311,   312,   0,     313,   314,   0,     0,     0,     315,   316,
    317,   0,     0,     318,   0,     0,     0,     319,   320,   321,   322,   0,     323,   324,   0,     0,
    0,     0,     0,     0,     325,   326,   0,     327,   0,     0,     328,   0,     0,     329,   330,   0,
    0,     331,   332,   0,     333,   334,   335,   0,     0,     0,     336,   337,   0,     338,   339,   0,
    340,   341,   0,     551,   342,   343,   344,   345,   346,   0,     0,     0,     0,     0,     347,   0,
    348,   0,     0,     349,   350,   351,   352,   0,     0,     353,   354,   0,     0,     355,   0,     0,
    0,     0,     356,   0,     0,     357,   0,     0,     358,   359,   0,     0,     0,     0,     0,     0,
    0,     360,   0,     0,     361,   0,     0,     362,   363,   364,   0,     0,     0,     0,     365,   0,
    366,   367,   0,     0,     121,   368,   122,   123,   124,   125,   126,   0,     0,     0,     0,     0,
    127,   0,     0,     128,   0,     0,     129,   130,   131,   132,   0,     133,   1091,  134,   0,     0,
    135,   0,     0,     0,     136,   0,     0,     137,   138,   0,     139,   0,     140,   141,   0,     0,
    142,   0,     143,   0,     144,   145,   0,     146,   0,     147,   148,   149,   0,     0,     150,   151,
    0,     152,   153,   154,   155,   156,   0,     0,     157,   0,     0,     158,   0,     159,   0,     0,
    0,     0,     0,     0,     160,   0,     0,     0,     0,     0,     0,     161,   162,   0,     0,     163,
    0,     0,     0,     0,     164,   165,   0,     0,     0,     0,     0,     166,   0,     167,   0,     0,
    0,     0,     0,     168,   0,     169,   170,   171,   0,     0,     0,     172,   0,     0,     173,   174,
    175,   0,     0,     0,     176,   0,     0,     0,     177,   178,   179,   180,   0,     0,     181,   0,
    182,   183,   184,   0,     0,     185,   0,     186,   0,     0,     187,   0,     0,     188,   189,   190,
    0,     0,     191,   0,     0,     0,     0,     192,   193,   0,     0,     194,   0,     195,   0,     0,
    0,     0,     0,     0,     196,   197,   0,     0,     198,   199,   0,     0,     200,   0,     0,     0,
    0,     0,     201,   202,   0,     203,   0,     0,     204,   0,     0,     0,     205,   206,   207,   208,
    0,     0,     209,   210,   0,     0,     0,     211,   0,     0,     0,     212,   0,     0,     0,     213,
    0,     0,     214,   215,   0,     0,     0,     0,     0,     0,     216,   0,     217,   0,     0,     0,
    218,   0,     0,     219,   550,   0,     0,     0,     0,     220,   0,     221,   0,     0,     222,   0,
    223,   0,     0,     0,     0,     0,     0,     0,     0,     0,     224,   225,   226,   227,   228,   229,
    0,     230,   231,   232,   233,   234,   235,   236,   237,   238,   0,     239,   240,   241,   0,     242,
    243,   0,     0,     0,     244,   245,   246,   247,   0,     0,     248,   249,   0,     0,     250,   0,
    251,   0,     252,   0,     0,     253,   254,   255,   256,   257,   258,   259,   0,     0,     260,   261,
    0,     262,   263,   264,   0,     0,     0,     265,   0,     0,     0,     0,     266,   267,   268,   0,
    269,   270,   271,   0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     272,   273,   274,
    0,     275,   0,     276,   0,     277,   0,     0,     278,   279,   0,     280,   0,     281,   282,   0,
    283,   284,   285,   286,   287,   288,   289,   290,   0,     0,     0,     0,     291,   292,   0,     0,
    293,   294,   295,   0,     296,   0,     297,   298,   0,     0,     299,   0,     300,   301,   302,   0,
    303,   304,   0,     0,     0,     305,   306,   0,     307,   308,   0,     309,   310,   311,   312,   0,
    313,   314,   0,     0,     0,     315,   316,   317,   0,     0,     318,   0,     0,     0,     319,   320,
    321,   322,   0,     323,   324,   0,     0,     0,     0,     0,     0,     325,   326,   0,     327,   0,
    0,     328,   0,     0,     329,   330,   0,     0,     331,   332,   0,     333,   334,   335,   0,     0,
    0,     336,   337,   0,     338,   339,   0,     340,   341,   0,     551,   342,   343,   344,   345,   346,
    0,     0,     0,     0,     0,     347,   0,     348,   0,     0,     349,   350,   351,   352,   0,     0,
    353,   354,   0,     0,     355,   0,     0,     0,     0,     356,   0,     0,     357,   0,     0,     358,
    359,   0,     0,     0,     0,     0,     0,     0,     360,   0,     0,     361,   0,     0,     362,   363,
    364,   0,     0,     0,     0,     365,   0,     366,   367,   0,     0,     121,   368,   122,   123,   124,
    125,   126,   0,     0,     0,     0,     0,     127,   0,     0,     128,   0,     0,     129,   130,   131,
    132,   0,     133,   2412,  134,   0,     0,     135,   0,     0,     0,     136,   0,     0,     137,   138,
    0,     139,   0,     140,   141,   0,     0,     142,   0,     143,   0,     144,   145,   0,     146,   0,
    147,   148,   149,   0,     0,     150,   151,   0,     152,   153,   154,   155,   156,   0,     0,     157,
    0,     0,     158,   0,     159,   0,     0,     0,     0,     0,     0,     160,   0,     0,     0,     0,
    0,     0,     161,   162,   0,     0,     163,   0,     0,     0,     0,     164,   165,   0,     0,     0,
    0,     0,     166,   0,     167,   0,     0,     0,     0,     0,     168,   0,     169,   170,   171,   0,
    0,     0,     172,   0,     0,     173,   174,   175,   0,     0,     0,     176,   0,     0,     0,     177,
    178,   179,   180,   0,     0,     181,   0,     182,   183,   184,   0,     0,     185,   0,     186,   0,
    0,     187,   0,     0,     188,   189,   190,   0,     0,     191,   0,     0,     0,     0,     192,   193,
    0,     0,     194,   0,     195,   0,     0,     0,     0,     0,     0,     196,   197,   0,     0,     198,
    199,   0,     0,     200,   0,     0,     0,     0,     0,     201,   202,   0,     203,   0,     0,     204,
    0,     0,     0,     205,   206,   207,   208,   0,     0,     209,   210,   0,     0,     0,     211,   0,
    0,     0,     212,   0,     0,     0,     213,   0,     0,     214,   215,   0,     0,     0,     0,     0,
    0,     216,   0,     217,   0,     0,     0,     218,   0,     0,     219,   550,   0,     0,     0,     0,
    220,   0,     221,   0,     0,     222,   0,     223,   0,     0,     0,     0,     0,     0,     0,     0,
    0,     224,   225,   226,   227,   228,   229,   0,     230,   231,   232,   233,   234,   235,   236,   237,
    238,   0,     239,   240,   241,   0,     242,   243,   0,     0,     0,     244,   245,   246,   247,   0,
    0,     248,   249,   0,     0,     250,   0,     251,   0,     252,   0,     0,     253,   254,   255,   256,
    257,   258,   259,   0,     0,     260,   261,   0,     262,   263,   264,   0,     0,     0,     265,   0,
    0,     0,     0,     266,   267,   268,   0,     269,   270,   271,   0,     0,     0,     0,     0,     0,
    0,     0,     0,     0,     272,   273,   274,   0,     275,   0,     276,   0,     277,   0,     0,     278,
    279,   0,     280,   0,     281,   282,   0,     283,   284,   285,   286,   287,   288,   289,   290,   0,
    0,     0,     0,     291,   292,   0,     0,     293,   294,   295,   0,     296,   0,     297,   298,   0,
    0,     299,   0,     300,   301,   302,   0,     303,   304,   0,     0,     0,     305,   306,   0,     307,
    308,   0,     309,   310,   311,   312,   0,     313,   314,   0,     0,     0,     315,   316,   317,   0,
    0,     318,   0,     0,     0,     319,   320,   321,   322,   0,     323,   324,   0,     0,     0,     0,
    0,     0,     325,   326,   0,     327,   0,     0,     328,   0,     0,     329,   330,   0,     0,     331,
    332,   0,     333,   334,   335,   0,     0,     0,     336,   337,   0,     338,   339,   0,     340,   341,
    0,     551,   342,   343,   344,   345,   346,   0,     0,     0,     0,     0,     347,   0,     348,   0,
    0,     349,   350,   351,   352,   0,     0,     353,   354,   0,     0,     355,   0,     0,     0,     0,
    356,   0,     0,     357,   0,     0,     358,   359,   0,     0,     0,     0,     0,     0,     0,     360,
    0,     0,     361,   0,     0,     362,   363,   364,   0,     0,     0,     0,     365,   0,     366,   367,
    0,     0,     121,   368,   122,   123,   124,   125,   126,   0,     0,     0,     0,     0,     127,   0,
    0,     0,     0,     0,     129,   130,   131,   0,     0,     -194,  2700,  134,   0,     0,     135,   0,
    0,     0,     136,   0,     0,     137,   138,   0,     139,   0,     0,     0,     0,     0,     142,   0,
    143,   0,     144,   0,     0,     0,     0,     147,   148,   3288,  0,     0,     150,   151,   0,     0,
    153,   0,     155,   156,   0,     0,     157,   0,     0,     158,   0,     0,     0,     0,     0,     0,
    0,     0,     160,   0,     0,     0,     0,     0,     0,     161,   162,   0,     0,     163,   0,     0,
    0,     0,     164,   0,     0,     0,     0,     0,     0,     166,   0,     167,   0,     0,     0,     0,
    0,     168,   0,     169,   170,   171,   0,     0,     0,     0,     0,     0,     173,   174,   175,   0,
    0,     0,     176,   0,     0,     0,     0,     178,   179,   180,   0,     0,     181,   0,     182,   183,
    0,     0,     0,     185,   0,     186,   0,     0,     187,   3289,  0,     188,   189,   190,   0,     0,
    0,     0,     0,     0,     0,     192,   193,   0,     0,     194,   0,     195,   0,     0,     0,     0,
    0,     0,     196,   197,   0,     0,     198,   199,   3290,  0,     200,   0,     0,     0,     0,     0,
    0,     202,   0,     0,     0,     0,     204,   0,     0,     0,     205,   206,   207,   208,   3291,  0,
    209,   210,   0,     0,     0,     211,   0,     0,     0,     212,   0,     0,     0,     213,   0,     0,
    214,   215,   3292,  0,     0,     0,     0,     3293,  0,     0,     217,   0,     0,     0,     218,   3294,
    0,     219,   0,     0,     0,     0,     0,     220,   0,     221,   0,     0,     222,   0,     223,   0,
    0,     0,     0,     0,     -194,  0,     0,     0,     224,   225,   226,   227,   228,   229,   0,     230,
    231,   232,   233,   234,   235,   236,   237,   238,   0,     239,   240,   241,   0,     242,   243,   0,
    0,     0,     244,   245,   246,   247,   0,     0,     248,   249,   0,     0,     250,   0,     251,   0,
    252,   0,     0,     253,   254,   255,   256,   257,   258,   259,   0,     0,     260,   261,   0,     262,
    263,   264,   0,     0,     0,     0,     0,     0,     0,     0,     266,   267,   268,   0,     269,   270,
    3295,  0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     272,   273,   274,   0,     275,
    0,     276,   0,     277,   0,     0,     0,     279,   0,     280,   0,     281,   282,   0,     283,   284,
    285,   286,   287,   288,   289,   290,   0,     0,     0,     0,     291,   292,   0,     0,     293,   294,
    295,   0,     296,   0,     0,     298,   -194,  0,     299,   0,     0,     301,   0,     0,     303,   304,
    3296,  0,     0,     0,     306,   0,     307,   308,   0,     309,   310,   311,   0,     0,     313,   0,
    0,     0,     0,     315,   316,   317,   0,     0,     318,   0,     0,     0,     319,   0,     321,   0,
    0,     323,   324,   0,     0,     0,     0,     0,     0,     325,   326,   0,     327,   0,     0,     328,
    0,     0,     0,     330,   0,     0,     0,     332,   0,     333,   334,   335,   0,     0,     0,     336,
    337,   0,     338,   339,   0,     340,   341,   0,     0,     342,   343,   344,   345,   346,   0,     0,
    0,     0,     0,     347,   0,     348,   0,     0,     0,     350,   351,   352,   0,     0,     353,   354,
    0,     0,     0,     0,     0,     0,     0,     356,   0,     0,     357,   0,     0,     358,   359,   0,
    0,     0,     0,     0,     0,     0,     360,   0,     0,     361,   0,     0,     362,   363,   364,   0,
    0,     -194,  0,     365,   0,     366,   0,     0,     0,     0,     368,   0,     0,     0,     0,     3297,
    121,   0,     122,   123,   124,   125,   126,   0,     0,     0,     0,     0,     127,   3601,  0,     128,
    0,     0,     129,   130,   131,   132,   0,     133,   0,     134,   0,     0,     135,   0,     0,     0,
    136,   0,     0,     137,   138,   0,     139,   0,     140,   141,   0,     0,     142,   0,     143,   0,
    144,   145,   0,     146,   0,     147,   148,   149,   0,     0,     150,   151,   0,     152,   153,   154,
    155,   156,   0,     0,     157,   0,     0,     158,   0,     159,   0,     0,     0,     0,     0,     0,
    160,   0,     0,     0,     0,     0,     0,     161,   162,   0,     0,     163,   0,     0,     0,     0,
    164,   165,   0,     0,     0,     0,     0,     166,   0,     167,   0,     0,     0,     0,     0,     168,
    0,     169,   170,   171,   0,     0,     0,     172,   0,     0,     173,   174,   175,   0,     0,     0,
    176,   0,     0,     0,     177,   178,   179,   180,   0,     0,     181,   0,     182,   183,   184,   0,
    0,     185,   0,     186,   0,     0,     187,   0,     0,     188,   189,   190,   0,     0,     191,   0,
    0,     0,     0,     192,   193,   0,     0,     194,   0,     195,   0,     0,     0,     0,     0,     0,
    196,   197,   0,     0,     198,   199,   0,     0,     200,   0,     0,     0,     0,     0,     201,   202,
    0,     203,   0,     0,     204,   0,     0,     0,     205,   206,   207,   208,   0,     0,     209,   210,
    0,     0,     0,     211,   0,     0,     0,     212,   0,     0,     0,     213,   0,     0,     214,   215,
    0,     0,     0,     0,     0,     0,     216,   0,     217,   0,     0,     0,     218,   0,     0,     219,
    0,     0,     0,     0,     0,     220,   0,     221,   0,     0,     222,   0,     223,   0,     0,     0,
    0,     0,     0,     0,     0,     0,     224,   225,   226,   227,   228,   229,   0,     230,   231,   232,
    233,   234,   235,   236,   237,   238,   0,     239,   240,   241,   0,     242,   243,   0,     0,     0,
    244,   245,   246,   247,   0,     0,     248,   249,   0,     0,     250,   0,     251,   0,     252,   0,
    0,     253,   254,   255,   256,   257,   258,   259,   0,     0,     260,   261,   0,     262,   263,   264,
    0,     0,     0,     265,   0,     0,     0,     0,     266,   267,   268,   0,     269,   270,   271,   0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     272,   273,   274,   0,     275,   0,     276,
    0,     277,   0,     0,     278,   279,   0,     280,   0,     281,   282,   0,     283,   284,   285,   286,
    287,   288,   289,   290,   0,     0,     0,     0,     291,   292,   0,     0,     293,   294,   295,   0,
    296,   0,     297,   298,   0,     0,     299,   0,     300,   301,   302,   0,     303,   304,   0,     0,
    0,     305,   306,   0,     307,   308,   0,     309,   310,   311,   312,   0,     313,   314,   0,     0,
    0,     315,   316,   317,   0,     0,     318,   0,     0,     0,     319,   320,   321,   322,   0,     323,
    324,   0,     0,     0,     0,     0,     0,     325,   326,   0,     327,   0,     0,     328,   0,     0,
    329,   330,   0,     0,     331,   332,   0,     333,   334,   335,   0,     0,     0,     336,   337,   0,
    338,   339,   0,     340,   341,   0,     0,     342,   343,   344,   345,   346,   0,     0,     0,     0,
    0,     347,   0,     348,   0,     0,     349,   350,   351,   352,   0,     0,     353,   354,   0,     0,
    355,   0,     0,     0,     0,     356,   0,     0,     357,   0,     0,     358,   359,   0,     0,     0,
    0,     0,     0,     0,     360,   0,     0,     361,   0,     0,     362,   363,   364,   0,     0,     0,
    0,     365,   0,     366,   367,   0,     0,     0,     368,   121,   0,     122,   123,   124,   125,   126,
    0,     0,     0,     1780,  0,     127,   0,     0,     128,   0,     0,     129,   130,   131,   132,   0,
    133,   0,     134,   0,     0,     135,   0,     0,     0,     136,   0,     0,     137,   138,   0,     139,
    0,     140,   141,   0,     0,     142,   0,     143,   0,     144,   145,   0,     146,   0,     147,   148,
    149,   0,     0,     150,   151,   0,     152,   153,   154,   155,   156,   0,     0,     157,   0,     0,
    158,   0,     159,   0,     0,     0,     0,     0,     0,     160,   0,     0,     0,     0,     0,     0,
    161,   162,   0,     0,     163,   0,     0,     0,     0,     164,   165,   0,     0,     0,     0,     0,
    166,   0,     167,   0,     0,     0,     0,     0,     168,   0,     169,   170,   171,   0,     0,     0,
    172,   0,     0,     173,   174,   175,   0,     0,     0,     176,   0,     0,     0,     177,   178,   179,
    180,   0,     0,     181,   0,     182,   183,   184,   0,     0,     185,   0,     186,   0,     0,     187,
    0,     0,     188,   189,   190,   0,     0,     191,   0,     0,     0,     0,     192,   193,   0,     0,
    194,   0,     195,   0,     0,     0,     0,     0,     0,     196,   197,   0,     0,     198,   199,   0,
    0,     200,   0,     0,     0,     0,     0,     201,   202,   0,     203,   0,     0,     204,   0,     0,
    0,     205,   206,   207,   208,   0,     0,     209,   210,   0,     0,     0,     211,   0,     0,     0,
    212,   0,     0,     0,     213,   0,     0,     214,   215,   0,     0,     0,     0,     0,     0,     216,
    0,     217,   0,     0,     0,     218,   0,     0,     219,   0,     0,     0,     0,     0,     220,   0,
    221,   0,     0,     222,   0,     223,   0,     0,     0,     0,     0,     0,     0,     0,     0,     224,
    225,   226,   227,   228,   229,   0,     230,   231,   232,   233,   234,   235,   236,   237,   238,   0,
    239,   240,   241,   0,     242,   243,   0,     0,     0,     244,   245,   246,   247,   0,     0,     248,
    249,   0,     0,     250,   0,     251,   0,     252,   0,     0,     253,   254,   255,   256,   257,   258,
    259,   0,     0,     260,   261,   0,     262,   263,   264,   0,     0,     0,     265,   0,     0,     0,
    0,     266,   267,   268,   0,     269,   270,   271,   0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     272,   273,   274,   0,     275,   0,     276,   0,     277,   0,     0,     278,   279,   0,
    280,   0,     281,   282,   0,     283,   284,   285,   286,   287,   288,   289,   290,   0,     0,     0,
    0,     291,   292,   0,     0,     293,   294,   295,   0,     296,   0,     297,   298,   0,     0,     299,
    0,     300,   301,   302,   0,     303,   304,   0,     0,     0,     305,   306,   0,     307,   308,   0,
    309,   310,   311,   312,   0,     313,   314,   0,     0,     0,     315,   316,   317,   0,     0,     318,
    0,     0,     0,     319,   320,   321,   322,   0,     323,   324,   0,     0,     0,     0,     0,     0,
    325,   326,   0,     327,   0,     0,     328,   0,     0,     329,   330,   0,     0,     331,   332,   0,
    333,   334,   335,   0,     0,     0,     336,   337,   0,     338,   339,   0,     340,   341,   0,     0,
    342,   343,   344,   345,   346,   0,     0,     0,     0,     0,     347,   0,     348,   0,     0,     349,
    350,   351,   352,   0,     0,     353,   354,   0,     0,     355,   0,     0,     0,     0,     356,   0,
    0,     357,   0,     0,     358,   359,   0,     0,     0,     0,     0,     0,     0,     360,   0,     0,
    361,   0,     0,     362,   363,   364,   0,     0,     0,     0,     365,   0,     366,   367,   0,     0,
    0,     368,   121,   0,     122,   123,   124,   125,   126,   0,     0,     0,     2400,  0,     127,   0,
    0,     128,   0,     0,     129,   130,   131,   132,   0,     133,   0,     134,   0,     0,     135,   0,
    0,     0,     136,   0,     0,     137,   138,   0,     139,   0,     140,   141,   0,     0,     142,   0,
    143,   0,     144,   145,   0,     146,   0,     147,   148,   149,   0,     0,     150,   151,   0,     152,
    153,   154,   155,   156,   0,     0,     157,   0,     0,     158,   0,     159,   0,     0,     0,     0,
    0,     0,     160,   0,     0,     0,     0,     0,     0,     161,   162,   0,     0,     163,   0,     0,
    0,     0,     164,   165,   0,     0,     0,     0,     0,     166,   0,     167,   0,     0,     0,     0,
    0,     168,   0,     169,   170,   171,   0,     0,     0,     172,   0,     0,     173,   174,   175,   0,
    0,     0,     176,   0,     0,     0,     177,   178,   179,   180,   0,     0,     181,   0,     182,   183,
    184,   0,     0,     185,   0,     186,   0,     0,     187,   0,     0,     188,   189,   190,   0,     0,
    191,   0,     0,     0,     0,     192,   193,   0,     0,     194,   0,     195,   0,     0,     0,     0,
    0,     0,     196,   197,   0,     0,     198,   199,   0,     0,     200,   0,     0,     0,     0,     0,
    201,   202,   0,     203,   0,     0,     204,   0,     0,     0,     205,   206,   207,   208,   0,     0,
    209,   210,   0,     0,     0,     211,   0,     0,     0,     212,   0,     0,     0,     213,   0,     0,
    214,   215,   0,     0,     0,     0,     0,     0,     216,   0,     217,   0,     0,     0,     218,   0,
    0,     219,   0,     0,     0,     0,     0,     220,   0,     221,   0,     0,     222,   0,     223,   0,
    0,     0,     0,     0,     0,     0,     0,     0,     224,   225,   226,   227,   228,   229,   0,     230,
    231,   232,   233,   234,   235,   236,   237,   238,   0,     239,   240,   241,   0,     242,   243,   0,
    0,     0,     244,   245,   246,   247,   0,     0,     248,   249,   0,     0,     250,   0,     251,   0,
    252,   0,     0,     253,   254,   255,   256,   257,   258,   259,   0,     0,     260,   261,   0,     262,
    263,   264,   0,     0,     0,     265,   0,     0,     0,     0,     266,   267,   268,   0,     269,   270,
    271,   0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     272,   273,   274,   0,     275,
    0,     276,   0,     277,   0,     0,     278,   279,   0,     280,   0,     281,   282,   0,     283,   284,
    285,   286,   287,   288,   289,   290,   0,     0,     0,     0,     291,   292,   0,     0,     293,   294,
    295,   0,     296,   0,     297,   298,   0,     0,     299,   0,     300,   301,   302,   0,     303,   304,
    0,     0,     0,     305,   306,   0,     307,   308,   0,     309,   310,   311,   312,   0,     313,   314,
    0,     0,     0,     315,   316,   317,   0,     0,     318,   0,     0,     0,     319,   320,   321,   322,
    0,     323,   324,   0,     0,     0,     0,     0,     0,     325,   326,   0,     327,   0,     0,     328,
    0,     0,     329,   330,   0,     0,     331,   332,   0,     333,   334,   335,   0,     0,     0,     336,
    337,   0,     338,   339,   0,     340,   341,   0,     0,     342,   343,   344,   345,   346,   0,     0,
    0,     0,     0,     347,   0,     348,   0,     0,     349,   350,   351,   352,   0,     0,     353,   354,
    0,     0,     355,   0,     0,     0,     0,     356,   0,     0,     357,   0,     0,     358,   359,   0,
    0,     0,     0,     0,     0,     0,     360,   0,     0,     361,   0,     0,     362,   363,   364,   0,
    0,     0,     0,     365,   0,     366,   367,   0,     0,     0,     368,   121,   0,     122,   123,   124,
    125,   126,   0,     0,     0,     2564,  0,     127,   0,     0,     128,   0,     0,     129,   130,   131,
    132,   0,     133,   0,     134,   0,     0,     135,   0,     0,     0,     136,   0,     0,     137,   138,
    0,     139,   0,     140,   141,   0,     0,     142,   0,     143,   0,     144,   145,   0,     146,   0,
    147,   148,   149,   0,     0,     150,   151,   0,     152,   153,   154,   155,   156,   0,     0,     157,
    0,     0,     158,   0,     159,   0,     0,     0,     0,     0,     0,     160,   0,     0,     0,     0,
    0,     0,     161,   162,   0,     0,     163,   0,     0,     0,     0,     164,   165,   0,     0,     0,
    0,     0,     166,   0,     167,   0,     0,     0,     0,     0,     168,   0,     169,   170,   171,   0,
    0,     0,     172,   0,     0,     173,   174,   175,   0,     0,     0,     176,   0,     0,     0,     177,
    178,   179,   180,   0,     0,     181,   0,     182,   183,   184,   0,     0,     185,   0,     186,   0,
    0,     187,   0,     0,     188,   189,   190,   0,     0,     191,   0,     0,     0,     0,     192,   193,
    0,     0,     194,   0,     195,   0,     0,     0,     0,     0,     0,     196,   197,   0,     0,     198,
    199,   0,     0,     200,   0,     0,     0,     0,     0,     201,   202,   0,     203,   0,     0,     204,
    0,     0,     0,     205,   206,   207,   208,   0,     0,     209,   210,   0,     0,     0,     211,   0,
    0,     0,     212,   0,     0,     0,     213,   0,     0,     214,   215,   0,     0,     0,     0,     0,
    0,     216,   0,     217,   0,     0,     0,     218,   0,     0,     219,   0,     0,     0,     0,     0,
    220,   0,     221,   0,     0,     222,   0,     223,   0,     0,     0,     0,     0,     0,     0,     0,
    0,     224,   225,   226,   227,   228,   229,   0,     230,   231,   232,   233,   234,   235,   236,   237,
    238,   0,     239,   240,   241,   0,     242,   243,   0,     0,     0,     244,   245,   246,   247,   0,
    0,     248,   249,   0,     0,     250,   0,     251,   0,     252,   0,     0,     253,   254,   255,   256,
    257,   258,   259,   0,     0,     260,   261,   0,     262,   263,   264,   0,     0,     0,     265,   0,
    0,     0,     0,     266,   267,   268,   0,     269,   270,   271,   0,     0,     0,     0,     0,     0,
    0,     0,     0,     0,     272,   273,   274,   0,     275,   0,     276,   0,     277,   0,     0,     278,
    279,   0,     280,   0,     281,   282,   0,     283,   284,   285,   286,   287,   288,   289,   290,   0,
    0,     0,     0,     291,   292,   0,     0,     293,   294,   295,   0,     296,   0,     297,   298,   0,
    0,     299,   0,     300,   301,   302,   0,     303,   304,   0,     0,     0,     305,   306,   0,     307,
    308,   0,     309,   310,   311,   312,   0,     313,   314,   0,     0,     0,     315,   316,   317,   0,
    0,     318,   0,     0,     0,     319,   320,   321,   322,   0,     323,   324,   0,     0,     0,     0,
    0,     0,     325,   326,   0,     327,   0,     0,     328,   0,     0,     329,   330,   0,     0,     331,
    332,   0,     333,   334,   335,   0,     0,     0,     336,   337,   0,     338,   339,   0,     340,   341,
    0,     0,     342,   343,   344,   345,   346,   0,     0,     0,     0,     0,     347,   0,     348,   0,
    0,     349,   350,   351,   352,   0,     0,     353,   354,   0,     0,     355,   0,     0,     0,     0,
    356,   0,     0,     357,   0,     0,     358,   359,   0,     0,     0,     0,     0,     0,     0,     360,
    0,     0,     361,   0,     0,     362,   363,   364,   0,     0,     0,     0,     365,   0,     366,   367,
    0,     0,     0,     368,   121,   0,     122,   123,   124,   125,   126,   0,     0,     0,     2921,  0,
    127,   0,     0,     0,     0,     0,     129,   130,   131,   0,     0,     -194,  0,     134,   0,     0,
    135,   0,     0,     0,     136,   0,     0,     137,   138,   0,     139,   0,     0,     0,     0,     0,
    142,   0,     143,   0,     144,   0,     0,     0,     0,     147,   148,   3288,  0,     0,     150,   151,
    0,     0,     153,   0,     155,   156,   0,     0,     157,   0,     0,     158,   0,     0,     0,     0,
    0,     0,     0,     0,     160,   0,     0,     0,     0,     0,     0,     161,   162,   0,     0,     163,
    0,     0,     0,     0,     164,   0,     0,     0,     0,     0,     0,     166,   0,     167,   0,     0,
    0,     0,     0,     168,   0,     169,   170,   171,   0,     0,     0,     0,     0,     0,     173,   174,
    175,   0,     -211,  0,     176,   0,     0,     0,     -211,  178,   179,   180,   0,     0,     181,   0,
    182,   183,   0,     0,     0,     185,   0,     186,   0,     0,     187,   3289,  0,     188,   189,   190,
    0,     0,     0,     0,     0,     0,     0,     192,   193,   0,     0,     194,   0,     195,   0,     0,
    0,     0,     0,     0,     196,   197,   0,     0,     198,   199,   3290,  0,     200,   0,     0,     0,
    0,     0,     0,     202,   0,     0,     0,     0,     204,   0,     0,     0,     205,   206,   207,   208,
    3291,  0,     209,   210,   0,     0,     0,     211,   0,     0,     0,     212,   0,     0,     0,     213,
    0,     0,     214,   215,   3292,  0,     0,     0,     0,     3293,  0,     0,     217,   0,     0,     0,
    218,   3294,  0,     219,   0,     0,     0,     0,     0,     220,   0,     221,   0,     0,     222,   0,
    223,   0,     0,     0,     0,     0,     -194,  0,     0,     0,     224,   225,   226,   227,   228,   229,
    0,     230,   231,   232,   233,   234,   235,   236,   237,   238,   0,     239,   240,   241,   0,     242,
    243,   0,     0,     0,     244,   245,   246,   247,   0,     0,     248,   249,   0,     0,     250,   0,
    251,   0,     252,   0,     0,     253,   254,   255,   256,   257,   258,   259,   0,     0,     260,   261,
    0,     262,   263,   264,   0,     0,     0,     0,     0,     0,     0,     0,     266,   267,   268,   0,
    269,   270,   3295,  0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     272,   273,   274,
    0,     275,   0,     276,   0,     277,   0,     0,     0,     279,   0,     280,   0,     281,   282,   0,
    283,   284,   285,   286,   287,   288,   289,   290,   0,     0,     0,     0,     291,   292,   0,     0,
    293,   294,   295,   0,     296,   0,     0,     298,   -194,  0,     299,   0,     0,     301,   0,     0,
    303,   304,   3296,  0,     0,     0,     306,   0,     307,   308,   0,     309,   310,   311,   0,     0,
    313,   0,     0,     0,     0,     315,   316,   317,   0,     0,     318,   0,     0,     0,     319,   0,
    321,   0,     0,     323,   324,   0,     0,     0,     0,     0,     0,     325,   326,   0,     327,   0,
    0,     328,   0,     0,     0,     330,   0,     0,     0,     332,   0,     333,   334,   335,   0,     0,
    0,     336,   337,   0,     338,   339,   0,     340,   341,   0,     0,     342,   343,   344,   345,   346,
    0,     0,     0,     0,     0,     347,   0,     348,   0,     0,     0,     350,   351,   352,   0,     0,
    353,   354,   0,     0,     0,     0,     0,     0,     0,     356,   0,     0,     357,   0,     0,     358,
    359,   0,     0,     0,     0,     0,     0,     0,     360,   0,     0,     361,   0,     0,     362,   363,
    364,   0,     0,     -194,  0,     365,   0,     366,   0,     0,     0,     0,     368,   0,     0,     -211,
    121,   3297,  122,   123,   124,   125,   126,   0,     0,     0,     0,     0,     127,   0,     0,     0,
    0,     0,     129,   130,   131,   0,     0,     -194,  0,     134,   0,     0,     135,   0,     0,     0,
    136,   0,     0,     137,   138,   0,     139,   0,     0,     0,     0,     0,     142,   0,     143,   0,
    144,   0,     0,     0,     0,     147,   148,   3288,  0,     0,     150,   151,   0,     0,     153,   0,
    155,   156,   0,     0,     157,   0,     0,     158,   0,     0,     0,     0,     0,     0,     0,     0,
    160,   0,     0,     0,     0,     0,     0,     161,   162,   0,     0,     163,   0,     0,     0,     0,
    164,   0,     0,     0,     0,     0,     0,     166,   0,     167,   0,     0,     0,     0,     0,     168,
    0,     169,   170,   171,   0,     0,     0,     0,     0,     0,     173,   174,   175,   0,     0,     0,
    176,   0,     0,     0,     -218,  178,   179,   180,   0,     0,     181,   0,     182,   183,   0,     0,
    0,     185,   0,     186,   0,     0,     187,   3289,  0,     188,   189,   190,   0,     0,     0,     0,
    0,     0,     0,     192,   193,   0,     0,     194,   0,     195,   0,     0,     0,     0,     0,     0,
    196,   197,   0,     0,     198,   199,   3290,  0,     200,   0,     0,     0,     0,     0,     0,     202,
    0,     0,     0,     0,     204,   0,     0,     0,     205,   206,   207,   208,   3291,  0,     209,   210,
    0,     0,     0,     211,   0,     0,     0,     212,   0,     0,     0,     213,   0,     0,     214,   215,
    3292,  0,     0,     0,     0,     3293,  0,     0,     217,   0,     0,     0,     218,   3294,  0,     219,
    0,     0,     0,     0,     0,     220,   0,     221,   0,     0,     222,   0,     223,   0,     0,     0,
    0,     0,     -194,  0,     0,     0,     224,   225,   226,   227,   228,   229,   0,     230,   231,   232,
    233,   234,   235,   236,   237,   238,   0,     239,   240,   241,   0,     242,   243,   0,     0,     0,
    244,   245,   246,   247,   0,     0,     248,   249,   0,     0,     250,   0,     251,   0,     252,   0,
    0,     253,   254,   255,   256,   257,   258,   259,   0,     0,     260,   261,   0,     262,   263,   264,
    0,     0,     0,     0,     0,     0,     0,     0,     266,   267,   268,   0,     269,   270,   3295,  0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     272,   273,   274,   0,     275,   0,     276,
    0,     277,   0,     0,     0,     279,   0,     280,   0,     281,   282,   0,     283,   284,   285,   286,
    287,   288,   289,   290,   0,     0,     0,     0,     291,   292,   0,     0,     293,   294,   295,   0,
    296,   0,     0,     298,   -194,  0,     299,   0,     0,     301,   0,     0,     303,   304,   3296,  0,
    0,     0,     306,   0,     307,   308,   0,     309,   310,   311,   0,     0,     313,   0,     0,     0,
    0,     315,   316,   317,   0,     0,     318,   0,     0,     0,     319,   0,     321,   0,     0,     323,
    324,   0,     0,     0,     0,     0,     0,     325,   326,   0,     327,   0,     0,     328,   0,     0,
    0,     330,   0,     0,     0,     332,   0,     333,   334,   335,   0,     0,     0,     336,   337,   0,
    338,   339,   0,     340,   341,   0,     0,     342,   343,   344,   345,   346,   0,     0,     0,     0,
    0,     347,   0,     348,   0,     0,     0,     350,   351,   352,   0,     0,     353,   354,   0,     0,
    0,     0,     0,     0,     0,     356,   0,     0,     357,   0,     0,     358,   359,   0,     0,     0,
    0,     0,     0,     0,     360,   0,     0,     361,   0,     0,     362,   363,   364,   -218,  0,     -194,
    0,     365,   0,     366,   0,     0,     0,     0,     368,   0,     0,     -218,  121,   3297,  122,   123,
    124,   125,   126,   0,     0,     0,     0,     0,     127,   0,     0,     0,     0,     0,     129,   130,
    131,   0,     0,     -194,  0,     134,   0,     0,     135,   0,     0,     0,     136,   0,     0,     137,
    138,   0,     139,   0,     0,     0,     0,     0,     142,   0,     143,   0,     144,   0,     0,     0,
    0,     147,   148,   3288,  0,     0,     150,   151,   0,     0,     153,   0,     155,   156,   0,     0,
    157,   0,     0,     158,   0,     0,     0,     0,     0,     0,     0,     0,     160,   0,     0,     0,
    0,     0,     0,     161,   162,   0,     0,     163,   0,     0,     0,     0,     164,   0,     0,     0,
    0,     0,     0,     166,   0,     167,   0,     0,     0,     0,     0,     168,   0,     169,   170,   171,
    0,     0,     0,     0,     0,     0,     173,   174,   175,   0,     0,     0,     176,   0,     0,     0,
    3472,  178,   179,   180,   0,     0,     181,   0,     182,   183,   0,     0,     0,     185,   0,     186,
    0,     0,     187,   3289,  0,     188,   189,   190,   0,     0,     0,     0,     0,     0,     0,     192,
    193,   0,     0,     194,   0,     195,   0,     0,     0,     0,     0,     0,     196,   197,   0,     0,
    198,   199,   3290,  0,     200,   0,     0,     0,     0,     0,     0,     202,   0,     0,     0,     0,
    204,   0,     0,     0,     205,   206,   207,   208,   3291,  0,     209,   210,   0,     0,     0,     211,
    0,     0,     0,     212,   0,     0,     0,     213,   0,     0,     214,   215,   3292,  0,     0,     0,
    0,     3293,  0,     0,     217,   0,     0,     0,     218,   3294,  0,     219,   0,     0,     0,     0,
    0,     220,   0,     221,   0,     0,     222,   0,     223,   0,     0,     0,     0,     0,     -194,  0,
    0,     0,     224,   225,   226,   227,   228,   229,   0,     230,   231,   232,   233,   234,   235,   236,
    237,   238,   0,     239,   240,   241,   0,     242,   243,   0,     0,     0,     244,   245,   246,   247,
    0,     0,     248,   249,   0,     0,     250,   0,     251,   0,     252,   0,     0,     253,   254,   255,
    256,   257,   258,   259,   0,     0,     260,   261,   0,     262,   263,   264,   0,     0,     0,     0,
    0,     0,     0,     0,     266,   267,   268,   0,     269,   270,   3295,  0,     0,     0,     0,     0,
    0,     0,     0,     0,     0,     272,   273,   274,   0,     275,   0,     276,   0,     277,   0,     0,
    0,     279,   0,     280,   0,     281,   282,   0,     283,   284,   285,   286,   287,   288,   289,   290,
    0,     0,     0,     0,     291,   292,   0,     0,     293,   294,   295,   0,     296,   0,     0,     298,
    -194,  0,     299,   0,     0,     301,   0,     0,     303,   304,   3296,  0,     0,     0,     306,   0,
    307,   308,   0,     309,   310,   311,   0,     0,     313,   0,     0,     0,     0,     315,   316,   317,
    0,     0,     318,   0,     0,     0,     319,   0,     321,   0,     0,     323,   324,   0,     0,     0,
    0,     0,     0,     325,   326,   0,     327,   0,     0,     328,   0,     0,     0,     330,   0,     0,
    0,     332,   0,     333,   334,   335,   0,     0,     0,     336,   337,   0,     338,   339,   0,     340,
    341,   0,     0,     342,   343,   344,   345,   346,   0,     0,     0,     0,     0,     347,   0,     348,
    0,     0,     0,     350,   351,   352,   0,     0,     353,   354,   0,     0,     0,     0,     0,     0,
    0,     356,   0,     0,     357,   0,     0,     358,   359,   0,     0,     0,     0,     0,     0,     0,
    360,   0,     0,     361,   0,     0,     362,   363,   364,   0,     0,     -194,  0,     365,   0,     366,
    0,     0,     0,     0,     368,   0,     0,     0,     121,   3297,  122,   123,   124,   125,   126,   0,
    0,     0,     0,     0,     127,   0,     0,     0,     0,     0,     129,   130,   131,   0,     0,     -194,
    0,     134,   0,     0,     135,   0,     0,     0,     136,   0,     0,     137,   138,   0,     139,   0,
    0,     0,     0,     0,     142,   0,     143,   0,     144,   0,     0,     0,     0,     147,   148,   3288,
    0,     0,     150,   151,   0,     0,     153,   0,     155,   156,   0,     0,     157,   0,     0,     158,
    0,     0,     0,     0,     0,     0,     0,     0,     160,   0,     0,     0,     0,     0,     0,     161,
    162,   0,     0,     163,   0,     0,     0,     0,     164,   0,     0,     0,     0,     0,     0,     166,
    0,     167,   0,     0,     0,     0,     0,     168,   0,     169,   170,   171,   0,     0,     0,     0,
    0,     0,     173,   174,   175,   0,     0,     0,     176,   0,     0,     0,     3514,  178,   179,   180,
    0,     0,     181,   0,     182,   183,   0,     0,     0,     185,   0,     186,   0,     0,     187,   3289,
    0,     188,   189,   190,   0,     0,     0,     0,     0,     0,     0,     192,   193,   0,     0,     194,
    0,     195,   0,     0,     0,     0,     0,     0,     196,   197,   0,     0,     198,   199,   3290,  0,
    200,   0,     0,     0,     0,     0,     0,     202,   0,     0,     0,     0,     204,   0,     0,     0,
    205,   206,   207,   208,   3291,  0,     209,   210,   0,     0,     0,     211,   0,     0,     0,     212,
    0,     0,     0,     213,   0,     0,     214,   215,   3292,  0,     0,     0,     0,     3293,  0,     0,
    217,   0,     0,     0,     218,   3294,  0,     219,   0,     0,     0,     0,     0,     220,   0,     221,
    0,     0,     222,   0,     223,   0,     0,     0,     0,     0,     -194,  0,     0,     0,     224,   225,
    226,   227,   228,   229,   0,     230,   231,   232,   233,   234,   235,   236,   237,   238,   0,     239,
    240,   241,   0,     242,   243,   0,     0,     0,     244,   245,   246,   247,   0,     0,     248,   249,
    0,     0,     250,   0,     251,   0,     252,   0,     0,     253,   254,   255,   256,   257,   258,   259,
    0,     0,     260,   261,   0,     262,   263,   264,   0,     0,     0,     0,     0,     0,     0,     0,
    266,   267,   268,   0,     269,   270,   3295,  0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     272,   273,   274,   0,     275,   0,     276,   0,     277,   0,     0,     0,     279,   0,     280,
    0,     281,   282,   0,     283,   284,   285,   286,   287,   288,   289,   290,   0,     0,     0,     0,
    291,   292,   0,     0,     293,   294,   295,   0,     296,   0,     0,     298,   -194,  0,     299,   0,
    0,     301,   0,     0,     303,   304,   3296,  0,     0,     0,     306,   0,     307,   308,   0,     309,
    310,   311,   0,     0,     313,   0,     0,     0,     0,     315,   316,   317,   0,     0,     318,   0,
    0,     0,     319,   0,     321,   0,     0,     323,   324,   0,     0,     0,     0,     0,     0,     325,
    326,   0,     327,   0,     0,     328,   0,     0,     0,     330,   0,     0,     0,     332,   0,     333,
    334,   335,   0,     0,     0,     336,   337,   0,     338,   339,   0,     340,   341,   0,     0,     342,
    343,   344,   345,   346,   0,     0,     0,     0,     0,     347,   0,     348,   0,     0,     0,     350,
    351,   352,   0,     0,     353,   354,   0,     0,     0,     0,     0,     0,     0,     356,   0,     0,
    357,   0,     0,     358,   359,   0,     0,     0,     0,     0,     0,     0,     360,   0,     0,     361,
    0,     0,     362,   363,   364,   0,     0,     -194,  0,     365,   0,     366,   0,     0,     0,     0,
    368,   0,     0,     0,     121,   3297,  122,   123,   124,   125,   126,   0,     0,     0,     0,     0,
    127,   0,     0,     0,     0,     0,     129,   130,   131,   0,     0,     -194,  0,     134,   0,     0,
    135,   0,     0,     0,     136,   0,     0,     137,   138,   0,     139,   0,     0,     0,     0,     0,
    142,   0,     143,   0,     144,   0,     0,     0,     0,     147,   148,   3288,  0,     0,     150,   151,
    0,     0,     153,   0,     155,   156,   0,     0,     157,   0,     0,     158,   0,     0,     0,     0,
    0,     0,     0,     0,     160,   0,     0,     0,     0,     0,     0,     161,   162,   0,     0,     163,
    0,     0,     0,     0,     164,   0,     0,     0,     0,     0,     0,     166,   0,     167,   0,     0,
    0,     0,     0,     168,   0,     169,   170,   171,   0,     0,     0,     0,     0,     0,     173,   174,
    175,   0,     0,     0,     176,   0,     0,     0,     3558,  178,   179,   180,   0,     0,     181,   0,
    182,   183,   0,     0,     0,     185,   0,     186,   0,     0,     187,   3289,  0,     188,   189,   190,
    0,     0,     0,     0,     0,     0,     0,     192,   193,   0,     0,     194,   0,     195,   0,     0,
    0,     0,     0,     0,     196,   197,   0,     0,     198,   199,   3290,  0,     200,   0,     0,     0,
    0,     0,     0,     202,   0,     0,     0,     0,     204,   0,     0,     0,     205,   206,   207,   208,
    3291,  0,     209,   210,   0,     0,     0,     211,   0,     0,     0,     212,   0,     0,     0,     213,
    0,     0,     214,   215,   3292,  0,     0,     0,     0,     3293,  0,     0,     217,   0,     0,     0,
    218,   3294,  0,     219,   0,     0,     0,     0,     0,     220,   0,     221,   0,     0,     222,   0,
    223,   0,     0,     0,     0,     0,     -194,  0,     0,     0,     224,   225,   226,   227,   228,   229,
    0,     230,   231,   232,   233,   234,   235,   236,   237,   238,   0,     239,   240,   241,   0,     242,
    243,   0,     0,     0,     244,   245,   246,   247,   0,     0,     248,   249,   0,     0,     250,   0,
    251,   0,     252,   0,     0,     253,   254,   255,   256,   257,   258,   259,   0,     0,     260,   261,
    0,     262,   263,   264,   0,     0,     0,     0,     0,     0,     0,     0,     266,   267,   268,   0,
    269,   270,   3295,  0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     272,   273,   274,
    0,     275,   0,     276,   0,     277,   0,     0,     0,     279,   0,     280,   0,     281,   282,   0,
    283,   284,   285,   286,   287,   288,   289,   290,   0,     0,     0,     0,     291,   292,   0,     0,
    293,   294,   295,   0,     296,   0,     0,     298,   -194,  0,     299,   0,     0,     301,   0,     0,
    303,   304,   3296,  0,     0,     0,     306,   0,     307,   308,   0,     309,   310,   311,   0,     0,
    313,   0,     0,     0,     0,     315,   316,   317,   0,     0,     318,   0,     0,     0,     319,   0,
    321,   0,     0,     323,   324,   0,     0,     0,     0,     0,     0,     325,   326,   0,     327,   0,
    0,     328,   0,     0,     0,     330,   0,     0,     0,     332,   0,     333,   334,   335,   0,     0,
    0,     336,   337,   0,     338,   339,   0,     340,   341,   0,     0,     342,   343,   344,   345,   346,
    0,     0,     0,     0,     0,     347,   0,     348,   0,     0,     0,     350,   351,   352,   0,     0,
    353,   354,   0,     0,     0,     0,     0,     0,     0,     356,   0,     0,     357,   0,     0,     358,
    359,   0,     0,     0,     0,     0,     0,     0,     360,   0,     0,     361,   0,     0,     362,   363,
    364,   0,     0,     -194,  0,     365,   0,     366,   0,     0,     0,     0,     368,   0,     0,     0,
    121,   3297,  122,   123,   124,   125,   126,   0,     0,     0,     0,     0,     127,   0,     0,     0,
    0,     0,     129,   130,   131,   0,     0,     -194,  0,     134,   0,     0,     135,   0,     0,     0,
    136,   0,     0,     137,   138,   0,     139,   0,     0,     0,     0,     0,     142,   0,     143,   0,
    144,   0,     0,     0,     0,     147,   148,   3288,  0,     0,     150,   151,   0,     0,     153,   0,
    155,   156,   0,     0,     157,   0,     0,     158,   0,     0,     0,     0,     0,     0,     0,     0,
    160,   0,     0,     0,     0,     0,     0,     161,   162,   0,     0,     163,   0,     0,     0,     0,
    164,   0,     0,     0,     0,     0,     0,     166,   0,     167,   0,     0,     0,     0,     0,     168,
    0,     169,   170,   171,   0,     0,     0,     0,     0,     0,     173,   174,   175,   0,     0,     0,
    176,   0,     0,     0,     -215,  178,   179,   180,   0,     0,     181,   0,     182,   183,   0,     0,
    0,     185,   0,     186,   0,     0,     187,   3289,  0,     188,   189,   190,   0,     0,     0,     0,
    0,     0,     0,     192,   193,   0,     0,     194,   0,     195,   0,     0,     0,     0,     0,     0,
    196,   197,   0,     0,     198,   199,   3290,  0,     200,   0,     0,     0,     0,     0,     0,     202,
    0,     0,     0,     0,     204,   0,     0,     0,     205,   206,   207,   208,   3291,  0,     209,   210,
    0,     0,     0,     211,   0,     0,     0,     212,   0,     0,     0,     213,   0,     0,     214,   215,
    3292,  0,     0,     0,     0,     3293,  0,     0,     217,   0,     0,     0,     218,   3294,  0,     219,
    0,     0,     0,     0,     0,     220,   0,     221,   0,     0,     222,   0,     223,   0,     0,     0,
    0,     0,     -194,  0,     0,     0,     224,   225,   226,   227,   228,   229,   0,     230,   231,   232,
    233,   234,   235,   236,   237,   238,   0,     239,   240,   241,   0,     242,   243,   0,     0,     0,
    244,   245,   246,   247,   0,     0,     248,   249,   0,     0,     250,   0,     251,   0,     252,   0,
    0,     253,   254,   255,   256,   257,   258,   259,   0,     0,     260,   261,   0,     262,   263,   264,
    0,     0,     0,     0,     0,     0,     0,     0,     266,   267,   268,   0,     269,   270,   3295,  0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     272,   273,   274,   0,     275,   0,     276,
    0,     277,   0,     0,     0,     279,   0,     280,   0,     281,   282,   0,     283,   284,   285,   286,
    287,   288,   289,   290,   0,     0,     0,     0,     291,   292,   0,     0,     293,   294,   295,   0,
    296,   0,     0,     298,   -194,  0,     299,   0,     0,     301,   0,     0,     303,   304,   3296,  0,
    0,     0,     306,   0,     307,   308,   0,     309,   310,   311,   0,     0,     313,   0,     0,     0,
    0,     315,   316,   317,   0,     0,     318,   0,     0,     0,     319,   0,     321,   0,     0,     323,
    324,   0,     0,     0,     0,     0,     0,     325,   326,   0,     327,   0,     0,     328,   0,     0,
    0,     330,   0,     0,     0,     332,   0,     333,   334,   335,   0,     0,     0,     336,   337,   0,
    338,   339,   0,     340,   341,   0,     0,     342,   343,   344,   345,   346,   0,     0,     0,     0,
    0,     347,   0,     348,   0,     0,     0,     350,   351,   352,   0,     0,     353,   354,   0,     0,
    0,     0,     0,     0,     0,     356,   0,     0,     357,   0,     0,     358,   359,   0,     0,     0,
    0,     0,     0,     0,     360,   0,     0,     361,   0,     0,     362,   363,   364,   0,     0,     -194,
    0,     365,   0,     366,   0,     0,     0,     0,     368,   0,     0,     0,     121,   3297,  122,   123,
    124,   125,   126,   0,     0,     0,     0,     0,     127,   0,     0,     0,     0,     0,     129,   130,
    131,   0,     0,     -194,  0,     134,   0,     0,     135,   0,     0,     0,     136,   0,     0,     137,
    138,   0,     139,   0,     0,     0,     0,     0,     142,   0,     143,   0,     144,   0,     0,     0,
    0,     147,   148,   3288,  0,     0,     150,   151,   0,     0,     153,   0,     155,   156,   0,     0,
    157,   0,     0,     158,   0,     0,     0,     0,     0,     0,     0,     0,     160,   0,     0,     0,
    0,     0,     0,     161,   162,   0,     0,     163,   0,     0,     0,     0,     164,   0,     0,     0,
    0,     0,     0,     166,   0,     167,   0,     0,     0,     0,     0,     168,   0,     169,   170,   171,
    0,     0,     0,     0,     0,     0,     173,   174,   175,   0,     0,     0,     176,   0,     0,     0,
    -221,  178,   179,   180,   0,     0,     181,   0,     182,   183,   0,     0,     0,     185,   0,     186,
    0,     0,     187,   3289,  0,     188,   189,   190,   0,     0,     0,     0,     0,     0,     0,     192,
    193,   0,     0,     194,   0,     195,   0,     0,     0,     0,     0,     0,     196,   197,   0,     0,
    198,   199,   3290,  0,     200,   0,     0,     0,     0,     0,     0,     202,   0,     0,     0,     0,
    204,   0,     0,     0,     205,   206,   207,   208,   3291,  0,     209,   210,   0,     0,     0,     211,
    0,     0,     0,     212,   0,     0,     0,     213,   0,     0,     214,   215,   3292,  0,     0,     0,
    0,     3293,  0,     0,     217,   0,     0,     0,     218,   3294,  0,     219,   0,     0,     0,     0,
    0,     220,   0,     221,   0,     0,     222,   0,     223,   0,     0,     0,     0,     0,     -194,  0,
    0,     0,     224,   225,   226,   227,   228,   229,   0,     230,   231,   232,   233,   234,   235,   236,
    237,   238,   0,     239,   240,   241,   0,     242,   243,   0,     0,     0,     244,   245,   246,   247,
    0,     0,     248,   249,   0,     0,     250,   0,     251,   0,     252,   0,     0,     253,   254,   255,
    256,   257,   258,   259,   0,     0,     260,   261,   0,     262,   263,   264,   0,     0,     0,     0,
    0,     0,     0,     0,     266,   267,   268,   0,     269,   270,   3295,  0,     0,     0,     0,     0,
    0,     0,     0,     0,     0,     272,   273,   274,   0,     275,   0,     276,   0,     277,   0,     0,
    0,     279,   0,     280,   0,     281,   282,   0,     283,   284,   285,   286,   287,   288,   289,   290,
    0,     0,     0,     0,     291,   292,   0,     0,     293,   294,   295,   0,     296,   0,     0,     298,
    -194,  0,     299,   0,     0,     301,   0,     0,     303,   304,   3296,  0,     0,     0,     306,   0,
    307,   308,   0,     309,   310,   311,   0,     0,     313,   0,     0,     0,     0,     315,   316,   317,
    0,     0,     318,   0,     0,     0,     319,   0,     321,   0,     0,     323,   324,   0,     0,     0,
    0,     0,     0,     325,   326,   0,     327,   0,     0,     328,   0,     0,     0,     330,   0,     0,
    0,     332,   0,     333,   334,   335,   0,     0,     0,     336,   337,   0,     338,   339,   0,     340,
    341,   0,     0,     342,   343,   344,   345,   346,   0,     0,     0,     0,     0,     347,   0,     348,
    0,     0,     0,     350,   351,   352,   0,     0,     353,   354,   0,     0,     0,     0,     0,     0,
    0,     356,   0,     0,     357,   0,     0,     358,   359,   0,     0,     0,     0,     0,     0,     0,
    360,   0,     0,     361,   0,     0,     362,   363,   364,   0,     0,     -194,  0,     365,   0,     366,
    0,     0,     0,     0,     368,   0,     0,     0,     121,   3297,  122,   123,   124,   125,   126,   0,
    0,     0,     0,     0,     127,   0,     0,     0,     0,     0,     129,   130,   131,   0,     0,     -194,
    0,     134,   0,     0,     135,   0,     0,     0,     136,   0,     0,     137,   138,   0,     139,   0,
    0,     0,     0,     0,     142,   0,     143,   0,     144,   0,     0,     0,     0,     147,   148,   3288,
    0,     0,     150,   151,   0,     0,     153,   0,     155,   156,   0,     0,     157,   0,     0,     158,
    0,     0,     0,     0,     0,     0,     0,     0,     160,   0,     0,     0,     0,     0,     0,     161,
    162,   0,     0,     163,   0,     0,     0,     0,     164,   0,     0,     0,     0,     0,     0,     166,
    0,     167,   0,     0,     0,     0,     0,     168,   0,     169,   170,   171,   0,     0,     0,     0,
    0,     0,     173,   174,   175,   0,     0,     0,     176,   0,     0,     0,     0,     178,   179,   180,
    0,     0,     181,   0,     182,   183,   0,     0,     0,     185,   0,     186,   0,     0,     187,   3289,
    0,     188,   189,   190,   0,     0,     0,     0,     0,     0,     0,     192,   193,   0,     0,     194,
    0,     195,   0,     0,     0,     0,     0,     0,     196,   197,   0,     0,     198,   199,   3290,  0,
    200,   0,     0,     0,     0,     0,     0,     202,   0,     0,     0,     0,     204,   0,     0,     0,
    205,   206,   207,   208,   3291,  0,     209,   210,   0,     0,     0,     211,   0,     0,     0,     212,
    0,     0,     0,     213,   0,     0,     214,   215,   3292,  0,     0,     0,     0,     3293,  0,     0,
    217,   0,     0,     0,     218,   3294,  0,     219,   0,     0,     0,     0,     0,     220,   0,     221,
    0,     0,     222,   0,     223,   0,     0,     0,     0,     0,     -194,  0,     0,     0,     224,   225,
    226,   227,   228,   229,   0,     230,   231,   232,   233,   234,   235,   236,   237,   238,   0,     239,
    240,   241,   0,     242,   243,   0,     0,     0,     244,   245,   246,   247,   0,     0,     248,   249,
    0,     0,     250,   0,     251,   0,     252,   0,     0,     253,   254,   255,   256,   257,   258,   259,
    0,     0,     260,   261,   0,     262,   263,   264,   0,     0,     0,     0,     0,     0,     0,     0,
    266,   267,   268,   0,     269,   270,   3295,  0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     272,   273,   274,   0,     275,   0,     276,   0,     277,   0,     0,     0,     279,   0,     280,
    0,     281,   282,   0,     283,   284,   285,   286,   287,   288,   289,   290,   0,     0,     0,     0,
    291,   292,   0,     0,     293,   294,   295,   0,     296,   0,     0,     298,   -194,  0,     299,   0,
    0,     301,   0,     0,     303,   304,   3296,  0,     0,     0,     306,   0,     307,   308,   0,     309,
    310,   311,   0,     0,     313,   0,     0,     0,     0,     315,   316,   317,   0,     0,     318,   0,
    0,     0,     319,   0,     321,   0,     0,     323,   324,   0,     0,     0,     0,     0,     0,     325,
    326,   0,     327,   0,     0,     328,   0,     0,     0,     330,   0,     0,     0,     332,   0,     333,
    334,   335,   0,     0,     0,     336,   337,   0,     338,   339,   0,     340,   341,   0,     0,     342,
    343,   344,   345,   346,   0,     0,     0,     0,     0,     347,   0,     348,   0,     0,     0,     350,
    351,   352,   0,     0,     353,   354,   0,     0,     0,     0,     0,     0,     0,     356,   0,     0,
    357,   0,     0,     358,   359,   0,     0,     0,     0,     0,     0,     0,     360,   0,     0,     361,
    0,     0,     362,   363,   364,   0,     0,     -194,  0,     365,   0,     366,   0,     0,     0,     0,
    368,   0,     0,     0,     121,   3297,  122,   123,   124,   125,   126,   0,     0,     0,     0,     0,
    127,   0,     0,     0,     0,     0,     129,   130,   131,   0,     0,     -194,  0,     134,   0,     0,
    135,   0,     0,     0,     136,   0,     0,     137,   138,   0,     139,   0,     0,     0,     0,     0,
    142,   0,     143,   0,     144,   0,     0,     0,     0,     147,   148,   3288,  0,     0,     150,   151,
    0,     0,     153,   0,     155,   156,   0,     0,     157,   0,     0,     158,   0,     0,     0,     0,
    0,     0,     0,     0,     160,   0,     0,     0,     0,     0,     0,     161,   162,   0,     0,     163,
    0,     0,     0,     0,     164,   0,     0,     0,     0,     0,     0,     166,   0,     167,   0,     0,
    0,     0,     0,     168,   0,     169,   170,   171,   0,     0,     0,     0,     0,     0,     173,   174,
    175,   0,     0,     0,     176,   0,     0,     0,     0,     178,   179,   180,   0,     0,     181,   0,
    182,   183,   0,     0,     0,     185,   0,     186,   0,     0,     187,   3289,  0,     188,   189,   190,
    0,     0,     0,     0,     0,     0,     0,     192,   193,   0,     0,     194,   0,     195,   0,     0,
    0,     0,     0,     0,     196,   197,   0,     0,     198,   199,   3290,  0,     200,   0,     0,     0,
    0,     0,     0,     202,   0,     0,     0,     0,     204,   0,     0,     0,     205,   206,   207,   208,
    3291,  0,     209,   210,   0,     0,     0,     211,   0,     0,     0,     212,   0,     0,     0,     213,
    0,     0,     214,   215,   3292,  0,     0,     0,     0,     3293,  0,     0,     217,   0,     0,     0,
    218,   3294,  0,     219,   0,     0,     0,     0,     0,     220,   0,     221,   0,     0,     222,   0,
    223,   0,     0,     0,     0,     0,     -194,  0,     0,     0,     224,   225,   226,   227,   228,   229,
    0,     230,   231,   232,   233,   234,   235,   236,   237,   238,   0,     239,   240,   241,   0,     242,
    243,   0,     0,     0,     244,   245,   246,   247,   0,     0,     248,   249,   0,     0,     250,   0,
    251,   0,     252,   0,     0,     253,   254,   255,   256,   257,   258,   259,   0,     0,     260,   261,
    0,     262,   263,   264,   0,     0,     0,     0,     0,     0,     0,     0,     266,   267,   268,   0,
    269,   270,   3295,  0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     272,   273,   274,
    0,     275,   0,     276,   0,     277,   0,     0,     0,     279,   0,     280,   0,     281,   282,   0,
    283,   284,   285,   286,   287,   288,   289,   290,   0,     0,     0,     0,     291,   292,   0,     0,
    293,   294,   295,   0,     296,   0,     0,     298,   -194,  0,     299,   0,     0,     301,   0,     0,
    303,   304,   3296,  0,     0,     0,     306,   0,     307,   308,   0,     309,   310,   311,   0,     0,
    313,   0,     0,     0,     0,     315,   316,   317,   0,     0,     318,   0,     0,     0,     319,   0,
    321,   0,     0,     323,   324,   0,     0,     0,     0,     0,     0,     325,   326,   0,     327,   0,
    0,     328,   0,     0,     0,     330,   0,     0,     0,     332,   0,     333,   334,   335,   0,     0,
    0,     336,   337,   0,     338,   339,   0,     340,   341,   0,     0,     342,   343,   344,   345,   346,
    0,     0,     0,     0,     0,     347,   0,     348,   0,     0,     0,     350,   351,   352,   0,     0,
    353,   354,   0,     0,     0,     0,     0,     0,     0,     356,   0,     0,     3475,  0,     0,     358,
    359,   0,     0,     0,     0,     0,     0,     0,     360,   0,     0,     361,   0,     0,     362,   363,
    364,   0,     0,     -194,  0,     365,   0,     366,   0,     0,     0,     0,     368,   0,     0,     0,
    121,   3297,  122,   123,   124,   125,   126,   0,     0,     0,     0,     0,     127,   0,     0,     128,
    0,     0,     129,   130,   131,   132,   0,     133,   0,     134,   0,     0,     135,   0,     0,     0,
    136,   0,     0,     137,   138,   0,     139,   0,     140,   141,   0,     0,     142,   0,     143,   0,
    144,   145,   0,     146,   0,     147,   148,   149,   0,     0,     150,   151,   0,     152,   153,   154,
    155,   156,   0,     0,     157,   0,     0,     158,   0,     159,   0,     0,     0,     0,     0,     0,
    160,   0,     0,     0,     0,     0,     0,     161,   162,   0,     0,     163,   0,     0,     0,     0,
    164,   165,   1391,  0,     0,     0,     0,     166,   0,     167,   0,     0,     0,     0,     0,     168,
    0,     169,   170,   171,   0,     0,     0,     172,   0,     0,     173,   174,   175,   0,     0,     0,
    176,   0,     0,     0,     177,   178,   179,   180,   0,     0,     181,   0,     182,   183,   184,   0,
    0,     185,   0,     186,   0,     0,     187,   0,     0,     188,   189,   190,   1392,  0,     191,   0,
    0,     0,     0,     192,   193,   0,     0,     194,   0,     195,   0,     0,     0,     0,     0,     0,
    196,   197,   0,     0,     198,   199,   0,     0,     200,   0,     0,     0,     0,     0,     201,   202,
    0,     203,   1393,  0,     204,   0,     0,     0,     205,   206,   207,   208,   0,     0,     209,   210,
    0,     0,     0,     211,   0,     0,     0,     212,   0,     0,     0,     213,   0,     0,     214,   215,
    0,     0,     0,     0,     0,     0,     216,   0,     217,   0,     0,     0,     218,   0,     0,     219,
    0,     0,     0,     0,     0,     220,   0,     221,   0,     0,     222,   0,     223,   0,     0,     0,
    1394,  0,     0,     0,     0,     0,     224,   225,   226,   227,   228,   229,   0,     230,   231,   232,
    233,   234,   235,   236,   237,   238,   0,     239,   240,   241,   0,     242,   243,   0,     0,     0,
    244,   245,   246,   247,   0,     0,     248,   249,   0,     0,     250,   0,     251,   0,     252,   0,
    0,     253,   254,   255,   256,   257,   258,   259,   0,     0,     260,   261,   0,     262,   263,   264,
    871,   872,   0,     265,   0,     0,     1395,  0,     266,   267,   268,   0,     269,   270,   271,   0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     272,   273,   274,   0,     275,   0,     276,
    0,     277,   0,     0,     278,   279,   0,     280,   0,     281,   282,   0,     283,   284,   285,   286,
    287,   288,   289,   290,   0,     0,     0,     0,     291,   292,   0,     0,     293,   294,   295,   0,
    296,   0,     297,   298,   0,     0,     299,   0,     300,   301,   302,   0,     303,   304,   0,     0,
    0,     305,   306,   0,     307,   308,   0,     309,   310,   311,   312,   0,     313,   314,   0,     0,
    0,     315,   316,   317,   0,     0,     318,   0,     0,     0,     319,   320,   321,   322,   0,     323,
    324,   0,     0,     3587,  3574,  3588,  0,     325,   326,   0,     327,   0,     0,     328,   0,     0,
    329,   330,   0,     0,     331,   332,   0,     333,   334,   335,   0,     0,     0,     336,   337,   0,
    338,   339,   0,     340,   341,   0,     0,     342,   343,   344,   345,   346,   0,     0,     0,     0,
    0,     347,   0,     348,   0,     0,     349,   350,   351,   352,   0,     1396,  353,   354,   0,     0,
    355,   0,     0,     0,     0,     356,   0,     0,     357,   0,     0,     358,   359,   0,     0,     0,
    0,     0,     0,     0,     360,   0,     0,     361,   0,     0,     362,   363,   364,   0,     0,     0,
    0,     365,   0,     366,   367,   0,     0,     121,   368,   122,   123,   124,   125,   126,   0,     0,
    0,     0,     0,     127,   0,     0,     128,   0,     0,     129,   130,   131,   132,   0,     133,   0,
    134,   0,     2256,  135,   0,     0,     0,     136,   0,     0,     137,   138,   0,     139,   0,     140,
    141,   0,     0,     142,   0,     143,   0,     144,   145,   0,     146,   0,     147,   148,   149,   0,
    0,     150,   151,   0,     152,   153,   154,   155,   156,   0,     0,     157,   0,     0,     158,   0,
    159,   0,     0,     0,     0,     0,     0,     160,   0,     0,     0,     0,     0,     0,     161,   162,
    0,     0,     163,   0,     0,     0,     0,     164,   165,   0,     0,     0,     0,     2406,  166,   0,
    167,   0,     0,     0,     0,     0,     168,   0,     169,   170,   171,   0,     0,     0,     172,   0,
    0,     173,   174,   175,   0,     0,     0,     176,   0,     0,     0,     177,   178,   179,   180,   2103,
    0,     181,   0,     182,   183,   184,   0,     0,     185,   0,     186,   0,     0,     187,   0,     0,
    188,   189,   190,   0,     0,     191,   0,     0,     0,     0,     192,   193,   0,     0,     194,   0,
    195,   0,     0,     0,     0,     0,     0,     196,   197,   0,     0,     198,   199,   0,     0,     200,
    0,     0,     0,     0,     0,     201,   202,   0,     203,   0,     0,     204,   0,     0,     0,     205,
    206,   207,   208,   0,     0,     209,   210,   0,     0,     0,     211,   0,     0,     0,     212,   0,
    0,     0,     213,   0,     0,     214,   215,   0,     0,     0,     0,     0,     0,     216,   0,     217,
    0,     0,     0,     218,   0,     0,     219,   550,   0,     0,     0,     0,     220,   0,     221,   0,
    0,     222,   0,     223,   0,     0,     0,     0,     0,     0,     0,     0,     0,     224,   225,   226,
    227,   228,   229,   0,     230,   231,   232,   233,   234,   235,   236,   237,   238,   0,     239,   240,
    241,   0,     242,   243,   0,     0,     0,     244,   245,   246,   247,   0,     0,     248,   249,   0,
    0,     250,   0,     251,   0,     252,   0,     0,     253,   254,   255,   256,   257,   258,   259,   0,
    0,     260,   261,   0,     262,   263,   264,   0,     0,     0,     265,   0,     0,     0,     0,     266,
    267,   268,   0,     269,   270,   271,   0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    272,   273,   274,   0,     275,   0,     276,   0,     277,   0,     0,     278,   279,   0,     280,   0,
    281,   282,   0,     283,   284,   285,   286,   287,   288,   289,   290,   0,     0,     0,     0,     291,
    292,   0,     0,     293,   294,   295,   0,     296,   0,     297,   298,   0,     0,     299,   0,     300,
    301,   302,   0,     303,   304,   0,     0,     0,     305,   306,   0,     307,   308,   0,     309,   310,
    311,   312,   0,     313,   314,   0,     0,     0,     315,   316,   317,   0,     2104,  318,   0,     0,
    0,     319,   320,   321,   322,   0,     323,   324,   0,     0,     0,     0,     0,     0,     325,   326,
    0,     327,   0,     0,     328,   0,     0,     329,   330,   0,     0,     331,   332,   0,     333,   334,
    335,   0,     0,     0,     336,   337,   0,     338,   339,   0,     340,   341,   0,     551,   342,   343,
    344,   345,   346,   0,     0,     0,     0,     0,     347,   0,     348,   0,     0,     349,   350,   351,
    352,   0,     0,     353,   354,   0,     0,     355,   0,     0,     0,     0,     356,   0,     0,     357,
    0,     0,     358,   359,   0,     0,     0,     0,     0,     0,     0,     360,   0,     0,     361,   0,
    0,     362,   363,   364,   0,     0,     0,     0,     365,   0,     366,   367,   0,     0,     121,   368,
    122,   123,   124,   125,   126,   0,     0,     0,     0,     0,     127,   0,     0,     128,   0,     0,
    129,   130,   131,   132,   0,     133,   0,     134,   0,     2414,  135,   0,     0,     0,     136,   0,
    0,     137,   138,   0,     139,   0,     140,   141,   0,     0,     142,   0,     143,   0,     144,   145,
    0,     146,   0,     147,   148,   149,   0,     0,     150,   151,   0,     152,   153,   154,   155,   156,
    0,     0,     157,   0,     0,     158,   0,     159,   0,     0,     0,     0,     0,     0,     160,   0,
    0,     0,     0,     0,     0,     161,   162,   0,     0,     163,   0,     0,     0,     0,     164,   165,
    0,     0,     0,     0,     2415,  166,   0,     167,   0,     0,     0,     0,     0,     168,   0,     169,
    170,   171,   0,     0,     0,     172,   0,     0,     173,   174,   175,   0,     0,     0,     176,   0,
    0,     0,     177,   178,   179,   180,   0,     0,     181,   0,     182,   183,   184,   0,     0,     185,
    0,     186,   0,     0,     187,   0,     0,     188,   189,   190,   0,     0,     191,   0,     0,     0,
    0,     192,   193,   0,     0,     194,   0,     195,   0,     0,     0,     0,     0,     0,     196,   197,
    0,     0,     198,   199,   0,     0,     200,   0,     0,     0,     0,     0,     201,   202,   0,     203,
    0,     0,     204,   0,     0,     0,     205,   206,   207,   208,   0,     0,     209,   210,   0,     0,
    0,     211,   0,     0,     0,     212,   0,     0,     0,     213,   0,     0,     214,   215,   0,     0,
    0,     0,     0,     0,     216,   0,     217,   0,     0,     0,     218,   0,     0,     219,   550,   0,
    0,     0,     0,     220,   0,     221,   0,     0,     222,   0,     223,   0,     0,     0,     0,     0,
    0,     0,     0,     0,     224,   225,   226,   227,   228,   229,   0,     230,   231,   232,   233,   234,
    235,   236,   237,   238,   0,     239,   240,   241,   0,     242,   243,   0,     0,     0,     244,   245,
    246,   247,   0,     0,     248,   249,   0,     0,     250,   0,     251,   0,     252,   0,     0,     253,
    254,   255,   256,   257,   258,   259,   0,     0,     260,   261,   0,     262,   263,   264,   0,     0,
    0,     265,   0,     0,     0,     0,     266,   267,   268,   0,     269,   270,   271,   0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     272,   273,   274,   0,     275,   0,     276,   0,     277,
    0,     0,     278,   279,   0,     280,   0,     281,   282,   0,     283,   284,   285,   286,   287,   288,
    289,   290,   0,     0,     0,     0,     291,   292,   0,     0,     293,   294,   295,   0,     296,   0,
    297,   298,   0,     0,     299,   0,     300,   301,   302,   0,     303,   304,   0,     0,     0,     305,
    306,   0,     307,   308,   0,     309,   310,   311,   312,   0,     313,   314,   0,     0,     0,     315,
    316,   317,   0,     0,     318,   0,     0,     0,     319,   320,   321,   322,   0,     323,   324,   0,
    0,     0,     0,     0,     0,     325,   326,   0,     327,   0,     0,     328,   0,     0,     329,   330,
    0,     0,     331,   332,   0,     333,   334,   335,   0,     0,     0,     336,   337,   0,     338,   339,
    0,     340,   341,   0,     551,   342,   343,   344,   345,   346,   0,     0,     0,     0,     0,     347,
    0,     348,   0,     0,     349,   350,   351,   352,   0,     0,     353,   354,   0,     0,     355,   0,
    0,     0,     0,     356,   0,     0,     357,   0,     0,     358,   359,   0,     0,     0,     0,     0,
    0,     0,     360,   0,     0,     361,   0,     0,     362,   363,   364,   0,     0,     0,     0,     365,
    0,     366,   367,   0,     0,     121,   368,   122,   123,   124,   125,   126,   0,     0,     0,     0,
    0,     127,   0,     0,     128,   0,     0,     129,   130,   131,   132,   0,     133,   0,     134,   0,
    2256,  135,   0,     0,     0,     136,   0,     0,     137,   138,   0,     139,   0,     140,   141,   0,
    0,     142,   0,     143,   0,     144,   145,   0,     146,   0,     147,   148,   149,   0,     0,     150,
    151,   0,     152,   153,   154,   155,   156,   0,     0,     157,   0,     0,     158,   0,     159,   0,
    0,     0,     0,     0,     0,     160,   0,     0,     0,     0,     0,     0,     161,   162,   0,     0,
    163,   0,     0,     0,     0,     164,   165,   0,     0,     0,     0,     2406,  166,   0,     167,   0,
    0,     0,     0,     0,     168,   0,     169,   170,   171,   0,     0,     0,     172,   0,     0,     173,
    174,   175,   0,     0,     0,     176,   0,     0,     0,     177,   178,   179,   180,   0,     0,     181,
    0,     182,   183,   184,   0,     0,     185,   0,     186,   0,     0,     187,   0,     0,     188,   189,
    190,   0,     0,     191,   0,     0,     0,     0,     192,   193,   0,     0,     194,   0,     195,   0,
    0,     0,     0,     0,     0,     196,   197,   0,     0,     198,   199,   0,     0,     200,   0,     0,
    0,     0,     0,     201,   202,   0,     203,   0,     0,     204,   0,     0,     0,     205,   206,   207,
    208,   0,     0,     209,   210,   0,     0,     0,     211,   0,     0,     0,     212,   0,     0,     0,
    213,   0,     0,     214,   215,   0,     0,     0,     0,     0,     0,     216,   0,     217,   0,     0,
    0,     218,   0,     0,     219,   550,   0,     0,     0,     0,     220,   0,     221,   0,     0,     222,
    0,     223,   0,     0,     0,     0,     0,     0,     0,     0,     0,     224,   225,   226,   227,   228,
    229,   0,     230,   231,   232,   233,   234,   235,   236,   237,   238,   0,     239,   240,   241,   0,
    242,   243,   0,     0,     0,     244,   245,   246,   247,   0,     0,     248,   249,   0,     0,     250,
    0,     251,   0,     252,   0,     0,     253,   254,   255,   256,   257,   258,   259,   0,     0,     260,
    261,   0,     262,   263,   264,   0,     0,     0,     265,   0,     0,     0,     0,     266,   267,   268,
    0,     269,   270,   271,   0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     272,   273,
    274,   0,     275,   0,     276,   0,     277,   0,     0,     278,   279,   0,     280,   0,     281,   282,
    0,     283,   284,   285,   286,   287,   288,   289,   290,   0,     0,     0,     0,     291,   292,   0,
    0,     293,   294,   295,   0,     296,   0,     297,   298,   0,     0,     299,   0,     300,   301,   302,
    0,     303,   304,   0,     0,     0,     305,   306,   0,     307,   308,   0,     309,   310,   311,   312,
    0,     313,   314,   0,     0,     0,     315,   316,   317,   0,     0,     318,   0,     0,     0,     319,
    320,   321,   322,   0,     323,   324,   0,     0,     0,     0,     0,     0,     325,   326,   0,     327,
    0,     0,     328,   0,     0,     329,   330,   0,     0,     331,   332,   0,     333,   334,   335,   0,
    0,     0,     336,   337,   0,     338,   339,   0,     340,   341,   0,     551,   342,   343,   344,   345,
    346,   0,     0,     0,     0,     0,     347,   0,     348,   0,     0,     349,   350,   351,   352,   0,
    0,     353,   354,   0,     0,     355,   0,     0,     0,     0,     356,   0,     0,     357,   0,     0,
    358,   359,   0,     0,     0,     0,     0,     0,     0,     360,   0,     0,     361,   0,     0,     362,
    363,   364,   0,     0,     0,     0,     365,   0,     366,   367,   0,     0,     121,   368,   122,   123,
    124,   125,   126,   0,     0,     0,     0,     0,     127,   0,     0,     128,   0,     0,     129,   130,
    131,   132,   0,     133,   0,     134,   0,     0,     135,   0,     0,     0,     136,   0,     0,     137,
    138,   0,     139,   0,     140,   141,   0,     0,     142,   0,     143,   0,     144,   145,   0,     146,
    0,     147,   148,   149,   0,     0,     150,   151,   0,     152,   153,   154,   155,   156,   0,     0,
    157,   0,     0,     158,   0,     159,   0,     0,     0,     0,     0,     0,     160,   0,     879,   0,
    0,     0,     0,     161,   162,   0,     0,     163,   0,     0,     0,     0,     164,   165,   0,     0,
    0,     0,     0,     166,   0,     167,   0,     0,     0,     0,     0,     168,   0,     169,   170,   171,
    0,     0,     0,     172,   0,     0,     173,   174,   175,   0,     0,     0,     176,   0,     0,     0,
    177,   178,   179,   180,   0,     0,     181,   0,     182,   183,   184,   0,     0,     185,   0,     186,
    0,     0,     187,   0,     0,     188,   189,   190,   0,     0,     191,   0,     0,     0,     0,     192,
    193,   0,     0,     194,   0,     195,   0,     0,     0,     0,     0,     0,     196,   197,   0,     0,
    198,   199,   0,     0,     200,   0,     0,     0,     0,     0,     201,   202,   0,     203,   0,     0,
    204,   0,     0,     0,     205,   206,   207,   208,   0,     0,     209,   210,   0,     0,     0,     211,
    0,     0,     0,     212,   0,     0,     0,     213,   0,     0,     214,   215,   0,     0,     0,     0,
    0,     0,     216,   0,     217,   0,     0,     0,     218,   0,     0,     219,   550,   0,     0,     0,
    0,     220,   0,     221,   0,     0,     222,   0,     223,   0,     0,     0,     0,     0,     0,     0,
    0,     0,     224,   225,   226,   227,   228,   229,   0,     230,   231,   232,   233,   234,   235,   236,
    237,   238,   0,     239,   240,   241,   0,     242,   243,   0,     0,     0,     244,   245,   246,   247,
    0,     0,     248,   249,   0,     0,     250,   0,     251,   0,     252,   0,     0,     253,   254,   255,
    256,   257,   258,   259,   0,     0,     260,   261,   0,     262,   263,   264,   0,     0,     0,     265,
    0,     0,     0,     0,     266,   267,   268,   0,     269,   270,   271,   0,     0,     0,     0,     0,
    0,     0,     0,     0,     0,     272,   273,   274,   0,     275,   0,     276,   0,     277,   0,     0,
    278,   279,   0,     280,   0,     281,   282,   0,     283,   284,   285,   286,   287,   288,   289,   290,
    0,     0,     0,     0,     291,   292,   0,     0,     293,   294,   295,   0,     296,   0,     297,   298,
    0,     0,     299,   0,     300,   301,   302,   0,     303,   304,   0,     0,     0,     305,   306,   0,
    307,   308,   0,     309,   310,   311,   312,   0,     313,   314,   0,     0,     0,     315,   316,   317,
    0,     0,     318,   0,     0,     0,     319,   320,   321,   322,   0,     323,   324,   0,     0,     0,
    0,     0,     0,     325,   326,   0,     327,   0,     0,     328,   0,     0,     329,   330,   0,     0,
    331,   332,   0,     333,   334,   335,   0,     0,     0,     336,   337,   0,     338,   339,   0,     340,
    341,   0,     551,   342,   343,   344,   345,   346,   0,     0,     0,     0,     0,     347,   0,     348,
    0,     0,     349,   350,   351,   352,   0,     0,     353,   354,   0,     0,     355,   0,     0,     0,
    0,     356,   0,     0,     357,   0,     0,     358,   359,   0,     0,     0,     0,     0,     0,     0,
    360,   0,     0,     361,   0,     0,     362,   363,   364,   0,     0,     0,     0,     365,   0,     366,
    367,   0,     0,     121,   368,   122,   123,   124,   125,   126,   0,     0,     0,     0,     0,     127,
    0,     0,     128,   0,     0,     129,   130,   131,   132,   0,     133,   0,     134,   0,     0,     135,
    827,   0,     0,     136,   0,     0,     137,   138,   0,     139,   0,     140,   141,   0,     0,     142,
    0,     143,   0,     144,   145,   0,     146,   0,     147,   148,   149,   0,     0,     150,   151,   0,
    152,   153,   154,   155,   156,   0,     0,     157,   0,     0,     158,   0,     159,   0,     0,     0,
    0,     0,     0,     160,   0,     0,     0,     0,     0,     0,     161,   162,   0,     0,     163,   0,
    0,     0,     0,     164,   165,   0,     0,     0,     0,     0,     166,   0,     167,   0,     0,     0,
    0,     0,     168,   0,     169,   170,   171,   0,     0,     0,     172,   0,     0,     173,   174,   175,
    0,     0,     0,     176,   0,     0,     0,     177,   178,   179,   180,   0,     0,     181,   0,     182,
    183,   184,   0,     0,     185,   0,     186,   0,     0,     187,   0,     0,     188,   189,   190,   0,
    0,     191,   0,     0,     0,     0,     192,   193,   0,     0,     194,   0,     195,   0,     0,     0,
    0,     0,     0,     196,   197,   0,     0,     198,   199,   0,     0,     200,   0,     0,     0,     0,
    0,     201,   202,   0,     203,   828,   0,     204,   0,     0,     0,     205,   206,   207,   208,   0,
    0,     209,   210,   0,     0,     0,     211,   0,     0,     0,     212,   0,     0,     0,     213,   0,
    0,     214,   215,   0,     0,     0,     0,     0,     0,     216,   0,     217,   0,     0,     0,     218,
    0,     0,     219,   0,     0,     0,     0,     0,     220,   0,     221,   0,     0,     222,   0,     223,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     224,   225,   226,   227,   228,   229,   0,
    230,   231,   232,   233,   234,   235,   236,   237,   238,   0,     239,   240,   241,   0,     242,   243,
    0,     0,     0,     244,   245,   246,   247,   0,     0,     248,   249,   0,     0,     250,   0,     251,
    0,     252,   0,     0,     253,   254,   255,   256,   257,   258,   259,   0,     0,     260,   261,   0,
    262,   263,   264,   0,     0,     0,     265,   0,     0,     0,     0,     266,   267,   268,   0,     269,
    270,   271,   0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     272,   273,   274,   0,
    275,   0,     276,   0,     277,   0,     0,     278,   279,   0,     280,   0,     281,   282,   0,     283,
    284,   285,   286,   287,   288,   289,   290,   0,     0,     0,     0,     291,   292,   0,     0,     293,
    294,   295,   0,     296,   0,     297,   298,   0,     0,     299,   0,     300,   301,   302,   0,     303,
    304,   0,     0,     0,     305,   306,   0,     307,   308,   0,     309,   310,   311,   312,   0,     313,
    314,   0,     0,     0,     315,   316,   317,   0,     0,     318,   0,     0,     0,     319,   320,   321,
    322,   0,     323,   324,   0,     0,     0,     0,     0,     0,     325,   326,   0,     327,   0,     0,
    328,   0,     0,     329,   330,   0,     0,     331,   332,   0,     333,   334,   335,   0,     0,     0,
    336,   337,   0,     338,   339,   0,     340,   341,   0,     674,   342,   343,   344,   345,   346,   0,
    0,     0,     0,     0,     347,   0,     348,   0,     0,     349,   350,   351,   352,   0,     0,     353,
    354,   0,     0,     355,   0,     0,     0,     0,     356,   0,     0,     357,   0,     0,     358,   359,
    0,     0,     0,     0,     0,     0,     0,     360,   0,     0,     361,   0,     0,     362,   363,   364,
    0,     0,     0,     0,     365,   0,     366,   367,   0,     0,     121,   368,   122,   123,   124,   125,
    126,   0,     0,     0,     0,     0,     127,   0,     0,     128,   0,     0,     129,   130,   131,   132,
    0,     133,   0,     134,   0,     2256,  135,   0,     0,     0,     136,   0,     0,     137,   138,   0,
    139,   0,     140,   141,   0,     0,     142,   0,     143,   0,     144,   145,   0,     146,   0,     147,
    148,   149,   0,     0,     150,   151,   0,     152,   153,   154,   155,   156,   0,     0,     157,   0,
    0,     158,   0,     159,   0,     0,     0,     0,     0,     0,     160,   0,     0,     0,     0,     0,
    0,     161,   162,   0,     0,     163,   0,     0,     0,     0,     164,   165,   0,     0,     0,     0,
    0,     166,   0,     167,   0,     0,     0,     0,     0,     168,   0,     169,   170,   171,   0,     0,
    0,     172,   0,     0,     173,   174,   175,   0,     0,     0,     176,   0,     0,     0,     177,   178,
    179,   180,   0,     0,     181,   0,     182,   183,   184,   0,     0,     185,   0,     186,   0,     0,
    187,   0,     0,     188,   189,   190,   0,     0,     191,   0,     0,     0,     0,     192,   193,   0,
    0,     194,   0,     195,   0,     0,     0,     0,     0,     0,     196,   197,   0,     0,     198,   199,
    0,     0,     200,   0,     0,     0,     0,     0,     201,   202,   0,     203,   0,     0,     204,   0,
    0,     0,     205,   206,   207,   208,   0,     0,     209,   210,   0,     0,     0,     211,   0,     0,
    0,     212,   0,     0,     0,     213,   0,     0,     214,   215,   0,     0,     0,     0,     0,     0,
    216,   0,     217,   0,     0,     0,     218,   0,     0,     219,   550,   0,     0,     0,     0,     220,
    0,     221,   0,     0,     222,   0,     223,   0,     0,     0,     0,     0,     0,     0,     0,     0,
    224,   225,   226,   227,   228,   229,   0,     230,   231,   232,   233,   234,   235,   236,   237,   238,
    0,     239,   240,   241,   0,     242,   243,   0,     0,     0,     244,   245,   246,   247,   0,     0,
    248,   249,   0,     0,     250,   0,     251,   0,     252,   0,     0,     253,   254,   255,   256,   257,
    258,   259,   0,     0,     260,   261,   0,     262,   263,   264,   0,     0,     0,     265,   0,     0,
    0,     0,     266,   267,   268,   0,     269,   270,   271,   0,     0,     0,     0,     0,     0,     0,
    0,     0,     0,     272,   273,   274,   0,     275,   0,     276,   0,     277,   0,     0,     278,   279,
    0,     280,   0,     281,   282,   0,     283,   284,   285,   286,   287,   288,   289,   290,   0,     0,
    0,     0,     291,   292,   0,     0,     293,   294,   295,   0,     296,   0,     297,   298,   0,     0,
    299,   0,     300,   301,   302,   0,     303,   304,   0,     0,     0,     305,   306,   0,     307,   308,
    0,     309,   310,   311,   312,   0,     313,   314,   0,     0,     0,     315,   316,   317,   0,     0,
    318,   0,     0,     0,     319,   320,   321,   322,   0,     323,   324,   0,     0,     0,     0,     0,
    0,     325,   326,   0,     327,   0,     0,     328,   0,     0,     329,   330,   0,     0,     331,   332,
    0,     333,   334,   335,   0,     0,     0,     336,   337,   0,     338,   339,   0,     340,   341,   0,
    551,   342,   343,   344,   345,   346,   0,     0,     0,     0,     0,     347,   0,     348,   0,     0,
    349,   350,   351,   352,   0,     0,     353,   354,   0,     0,     355,   0,     0,     0,     0,     356,
    0,     0,     357,   0,     0,     358,   359,   0,     0,     0,     0,     0,     0,     0,     360,   0,
    0,     361,   0,     0,     362,   363,   364,   0,     0,     0,     0,     365,   0,     366,   367,   0,
    0,     121,   368,   122,   123,   124,   125,   126,   0,     0,     0,     0,     0,     127,   0,     0,
    128,   0,     0,     129,   130,   131,   132,   0,     133,   0,     134,   0,     0,     135,   0,     0,
    0,     136,   0,     0,     137,   138,   0,     139,   0,     140,   141,   0,     0,     142,   0,     143,
    0,     144,   145,   0,     146,   0,     147,   148,   149,   0,     0,     150,   151,   0,     152,   153,
    154,   155,   156,   0,     0,     157,   0,     0,     158,   0,     159,   0,     0,     0,     0,     0,
    0,     160,   0,     0,     0,     0,     0,     0,     161,   162,   0,     0,     163,   0,     0,     0,
    0,     164,   165,   0,     0,     0,     0,     2453,  166,   0,     167,   0,     0,     0,     0,     0,
    168,   0,     169,   170,   171,   0,     0,     0,     172,   0,     0,     173,   174,   175,   0,     0,
    0,     176,   0,     0,     0,     177,   178,   179,   180,   0,     0,     181,   0,     182,   183,   184,
    0,     0,     185,   0,     186,   0,     0,     187,   0,     0,     188,   189,   190,   0,     0,     191,
    0,     0,     0,     0,     192,   193,   0,     0,     194,   0,     195,   0,     0,     0,     0,     0,
    0,     196,   197,   0,     0,     198,   199,   0,     0,     200,   0,     0,     0,     0,     0,     201,
    202,   0,     203,   0,     0,     204,   0,     0,     0,     205,   206,   207,   208,   0,     0,     209,
    210,   0,     0,     0,     211,   0,     0,     0,     212,   0,     0,     0,     213,   0,     0,     214,
    215,   0,     0,     0,     0,     0,     0,     216,   0,     217,   0,     0,     0,     218,   0,     0,
    219,   550,   0,     0,     0,     0,     220,   0,     221,   0,     0,     222,   0,     223,   0,     0,
    0,     0,     0,     0,     0,     0,     0,     224,   225,   226,   227,   228,   229,   0,     230,   231,
    232,   233,   234,   235,   236,   237,   238,   0,     239,   240,   241,   0,     242,   243,   0,     0,
    0,     244,   245,   246,   247,   0,     0,     248,   249,   0,     0,     250,   0,     251,   0,     252,
    0,     0,     253,   254,   255,   256,   257,   258,   259,   0,     0,     260,   261,   0,     262,   263,
    264,   0,     0,     0,     265,   0,     0,     0,     0,     266,   267,   268,   0,     269,   270,   271,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     272,   273,   274,   0,     275,   0,
    276,   0,     277,   0,     0,     278,   279,   0,     280,   0,     281,   282,   0,     283,   284,   285,
    286,   287,   288,   289,   290,   0,     0,     0,     0,     291,   292,   0,     0,     293,   294,   295,
    0,     296,   0,     297,   298,   0,     0,     299,   0,     300,   301,   302,   0,     303,   304,   0,
    0,     0,     305,   306,   0,     307,   308,   0,     309,   310,   311,   312,   0,     313,   314,   0,
    0,     0,     315,   316,   317,   0,     0,     318,   0,     0,     0,     319,   320,   321,   322,   0,
    323,   324,   0,     0,     0,     0,     0,     0,     325,   326,   0,     327,   0,     0,     328,   0,
    0,     329,   330,   0,     0,     331,   332,   0,     333,   334,   335,   0,     0,     0,     336,   337,
    0,     338,   339,   0,     340,   341,   0,     551,   342,   343,   344,   345,   346,   0,     0,     0,
    0,     0,     347,   0,     348,   0,     0,     349,   350,   351,   352,   0,     0,     353,   354,   0,
    0,     355,   0,     0,     0,     0,     356,   0,     0,     357,   0,     0,     358,   359,   0,     0,
    0,     0,     0,     0,     0,     360,   0,     0,     361,   0,     0,     362,   363,   364,   0,     0,
    0,     0,     365,   0,     366,   367,   0,     0,     121,   368,   122,   123,   124,   125,   126,   0,
    0,     0,     0,     0,     127,   0,     0,     128,   0,     0,     129,   130,   131,   132,   0,     133,
    0,     134,   0,     0,     135,   0,     0,     0,     136,   0,     0,     137,   138,   0,     139,   0,
    140,   141,   0,     0,     142,   0,     143,   0,     144,   145,   0,     146,   0,     147,   148,   149,
    0,     0,     150,   151,   0,     152,   153,   154,   155,   156,   0,     0,     157,   0,     0,     158,
    0,     159,   0,     0,     0,     0,     0,     0,     160,   0,     0,     0,     0,     0,     0,     161,
    162,   0,     0,     163,   0,     0,     0,     0,     164,   165,   0,     0,     0,     0,     0,     166,
    0,     167,   0,     0,     0,     0,     0,     168,   0,     169,   170,   171,   0,     0,     0,     172,
    0,     0,     173,   174,   175,   0,     0,     0,     176,   0,     0,     0,     177,   178,   179,   180,
    0,     0,     181,   0,     182,   183,   184,   0,     0,     185,   0,     186,   0,     0,     187,   0,
    0,     188,   189,   190,   0,     0,     191,   0,     0,     0,     0,     192,   193,   0,     0,     194,
    0,     195,   0,     0,     0,     0,     0,     0,     196,   197,   0,     0,     198,   199,   0,     0,
    200,   0,     0,     0,     0,     0,     201,   202,   0,     203,   0,     0,     204,   0,     0,     0,
    205,   206,   207,   208,   0,     0,     209,   210,   0,     0,     0,     211,   0,     0,     0,     212,
    0,     0,     0,     213,   0,     0,     214,   215,   0,     0,     0,     0,     0,     0,     216,   0,
    217,   0,     0,     0,     218,   0,     0,     219,   550,   0,     0,     0,     0,     220,   0,     221,
    0,     0,     222,   0,     223,   0,     0,     0,     0,     0,     0,     0,     0,     0,     224,   225,
    226,   227,   228,   229,   0,     230,   231,   232,   233,   234,   235,   236,   237,   238,   0,     239,
    240,   241,   0,     242,   243,   0,     0,     0,     244,   245,   246,   247,   0,     0,     248,   249,
    0,     0,     250,   0,     251,   0,     252,   0,     0,     253,   254,   255,   256,   257,   258,   259,
    0,     0,     260,   261,   0,     262,   263,   264,   0,     0,     0,     265,   0,     0,     0,     0,
    266,   267,   268,   0,     269,   270,   271,   0,     0,     0,     0,     0,     0,     0,     0,     0,
    0,     272,   273,   274,   0,     275,   0,     276,   0,     277,   0,     0,     278,   279,   0,     280,
    0,     281,   282,   0,     283,   284,   285,   286,   287,   288,   289,   290,   0,     0,     0,     0,
    291,   292,   0,     0,     293,   294,   295,   0,     296,   0,     297,   298,   0,     0,     299,   0,
    300,   301,   302,   0,     303,   304,   0,     0,     0,     305,   306,   0,     307,   308,   0,     309,
    310,   311,   312,   0,     313,   314,   0,     0,     0,     315,   316,   317,   0,     0,     318,   0,
    0,     0,     319,   320,   321,   322,   0,     323,   324,   0,     0,     0,     0,     0,     0,     325,
    326,   0,     327,   0,     0,     328,   0,     0,     329,   330,   0,     0,     331,   332,   0,     333,
    334,   335,   0,     0,     0,     336,   337,   0,     338,   339,   0,     340,   341,   0,     551,   342,
    343,   344,   345,   346,   0,     0,     0,     0,     0,     347,   0,     348,   0,     0,     349,   350,
    351,   352,   0,     0,     353,   354,   0,     0,     355,   0,     0,     0,     0,     356,   0,     0,
    357,   0,     0,     358,   359,   0,     0,     0,     0,     0,     0,     0,     360,   0,     0,     361,
    0,     0,     362,   363,   364,   0,     0,     0,     0,     365,   0,     366,   367,   0,     0,     121,
    368,   122,   123,   124,   125,   126,   0,     0,     0,     0,     0,     127,   2396,  0,     128,   0,
    0,     129,   130,   131,   132,   0,     133,   0,     134,   0,     0,     135,   0,     0,     0,     136,
    0,     0,     137,   138,   0,     139,   0,     140,   141,   0,     0,     142,   0,     143,   0,     144,
    145,   0,     146,   0,     147,   148,   149,   0,     0,     150,   151,   0,     152,   153,   154,   155,
    156,   0,     0,     157,   0,     0,     158,   0,     159,   0,     0,     0,     0,     0,     0,     160,
    0,     0,     0,     0,     0,     0,     161,   162,   0,     0,     163,   0,     0,     0,     0,     164,
    165,   0,     0,     0,     0,     0,     166,   0,     167,   0,     0,     0,     0,     0,     168,   0,
    169,   170,   171,   0,     0,     0,     172,   0,     0,     173,   174,   175,   0,     0,     0,     176,
    0,     0,     0,     177,   178,   179,   180,   0,     0,     181,   0,     182,   183,   184,   0,     0,
    185,   0,     186,   0,     0,     187,   0,     0,     188,   189,   190,   0,     0,     191,   0,     0,
    0,     0,     192,   193,   0,     0,     194,   0,     195,   0,     0,     0,     0,     0,     0,     196,
    197,   0,     0,     198,   199,   0,     0,     200,   0,     0,     0,     0,     0,     201,   202,   0,
    203,   0,     0,     204,   0,     0,     0,     205,   206,   207,   208,   0,     0,     209,   210,   0,
    0,     0,     211,   0,     0,     0,     212,   0,     0,     0,     213,   0,     0,     214,   215,   0,
    0,     0,     0,     0,     0,     216,   0,     217,   0,     0,     0,     218,   0,     0,     219,   0,
    0,     0,     0,     0,     220,   0,     221,   0,     0,     222,   0,     223,   0,     0,     0,     0,
    0,     0,     0,     0,     0,     224,   225,   226,   227,   228,   229,   0,     230,   231,   232,   233,
    234,   235,   236,   237,   238,   0,     239,   240,   241,   0,     242,   243,   0,     0,     0,     244,
    245,   246,   247,   0,     0,     248,   249,   0,     0,     250,   0,     251,   0,     252,   0,     0,
    253,   254,   255,   256,   257,   258,   259,   0,     0,     260,   261,   0,     262,   263,   264,   0,
    0,     0,     265,   0,     0,     0,     0,     266,   267,   268,   0,     269,   270,   271,   0,     0,
    0,     0,     0,     0,     0,     0,     0,     0,     272,   273,   274,   0,     275,   0,     276,   0,
    277,   0,     0,     278,   279,   0,     280,   0,     281,   282,   0,     283,   284,   285,   286,   287,
    288,   289,   290,   0,     0,     0,     0,     291,   292,   0,     0,     293,   294,   295,   0,     296,
    0,     297,   298,   0,     0,     299,   0,     300,   301,   302,   0,     303,   304,   0,     0,     0,
    305,   306,   0,     307,   308,   0,     309,   310,   311,   312,   0,     313,   314,   0,     0,     0,
    315,   316,   317,   0,     0,     318,   0,     0,     0,     319,   320,   321,   322,   0,     323,   324,
    0,     0,     0,     0,     0,     0,     325,   326,   0,     327,   0,     0,     328,   0,     0,     329,
    330,   0,     0,     331,   332,   0,     333,   334,   335,   0,     0,     0,     336,   337,   0,     338,
    339,   0,     340,   341,   0,     551,   342,   343,   344,   345,   346,   0,     0,     0,     0,     0,
    347,   0,     348,   0,     0,     349,   350,   351,   352,   0,     0,     353,   354,   0,     0,     355,
    0,     0,     0,     0,     356,   0,     0,     357,   0,     0,     358,   359,   0,     0,     0,     0,
    0,     0,     0,     360,   0,     0,     361,   0,     0,     362,   363,   364,   0,     0,     0,     0,
    365,   0,     366,   367,   0,     0,     121,   368,   122,   123,   124,   125,   126,   0,     0,     0,
    0,     0,     127,   0,     0,     128,   0,     0,     129,   130,   131,   132,   0,     133,   0,     134,
    0,     0,     135,   0,     0,     0,     136,   0,     0,     137,   138,   0,     139,   0,     140,   141,
    0,     0,     142,   0,     143,   0,     144,   145,   0,     146,   0,     147,   148,   149,   0,     0,
    150,   151,   0,     152,   153,   154,   155,   156,   0,     0,     157,   0,     0,     158,   0,     159,
    3509,  0,     0,     0,     0,     0,     160,   0,     0,     0,     0,     0,     0,     161,   162,   0,
    0,     163,   0,     0,     0,     0,     164,   165,   0,     0,     0,     0,     0,     166,   0,     167,
    0,     0,     0,     0,     0,     168,   0,     169,   170,   171,   0,     0,     0,     172,   0,     0,
    173,   174,   175,   0,     0,     0,     176,   0,     0,     0,     177,   178,   179,   180,   0,     0,
    181,   0,     182,   183,   184,   0,     3510,  185,   0,     186,   0,     0,     187,   0,     0,     188,
    189,   190,   0,     0,     191,   0,     0,     0,     0,     192,   193,   0,     0,     194,   0,     195,
    0,     0,     0,     0,     0,     0,     196,   197,   0,     0,     198,   199,   0,     0,     200,   0,
    0,     0,     0,     0,     201,   202,   0,     203,   0,     0,     204,   0,     0,     0,     205,   206,
    207,   208,   0,     0,     209,   210,   0,     0,     0,     211,   0,     0,     0,     212,   0,     0,
    0,     213,   0,     0,     214,   215,   0,     0,     0,     0,     0,     0,     216,   0,     217,   0,
    0,     0,     218,   0,     0,     219,   0,     0,     0,     0,     0,     220,   0,     221,   0,     0,
    222,   0,     223,   0,     0,     0,     0,     0,     0,     0,     0,     0,     224,   225,   226,   227,
    228,   229,   0,     230,   231,   232,   233,   234,   235,   236,   237,   238,   0,     239,   240,   241,
    0,     242,   243,   0,     0,     0,     244,   245,   246,   247,   0,     0,     248,   249,   0,     0,
    250,   0,     251,   0,     252,   0,     0,     253,   254,   255,   256,   257,   258,   259,   0,     0,
    260,   261,   0,     262,   263,   264,   0,     0,     0,     265,   0,     0,     0,     0,     266,   267,
    268,   0,     269,   270,   271,   0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     272,
    273,   274,   0,     275,   0,     276,   0,     277,   0,     0,     278,   279,   0,     280,   0,     281,
    282,   0,     283,   284,   285,   286,   287,   288,   289,   290,   0,     0,     0,     0,     291,   292,
    0,     0,     293,   294,   295,   0,     296,   0,     297,   298,   0,     0,     299,   0,     300,   301,
    302,   0,     303,   304,   0,     0,     0,     305,   306,   0,     307,   308,   0,     309,   310,   311,
    312,   0,     313,   314,   0,     0,     0,     315,   316,   317,   0,     0,     318,   0,     0,     0,
    319,   320,   321,   322,   0,     323,   324,   0,     0,     0,     0,     0,     0,     325,   326,   0,
    327,   0,     0,     328,   0,     0,     329,   330,   0,     0,     331,   332,   0,     333,   334,   335,
    0,     0,     0,     336,   337,   0,     338,   339,   0,     340,   341,   0,     0,     342,   343,   344,
    345,   346,   0,     0,     0,     0,     0,     347,   0,     348,   0,     0,     349,   350,   351,   352,
    0,     0,     353,   354,   0,     0,     355,   0,     0,     0,     0,     356,   0,     0,     357,   0,
    0,     358,   359,   0,     0,     0,     0,     0,     0,     0,     360,   0,     0,     361,   0,     0,
    362,   363,   364,   0,     0,     0,     0,     365,   0,     366,   367,   0,     0,     121,   368,   122,
    123,   124,   125,   126,   0,     0,     0,     0,     0,     127,   0,     0,     128,   0,     0,     129,
    130,   131,   132,   0,     133,   0,     134,   0,     0,     135,   0,     0,     0,     136,   0,     0,
    137,   138,   0,     139,   0,     140,   141,   0,     0,     142,   0,     143,   0,     144,   145,   0,
    146,   0,     147,   148,   149,   0,     0,     150,   151,   0,     152,   153,   154,   155,   156,   0,
    0,     157,   0,     0,     158,   0,     159,   0,     0,     0,     0,     0,     0,     160,   0,     0,
    0,     0,     0,     0,     161,   162,   0,     0,     163,   0,     0,     0,     0,     164,   165,   0,
    0,     0,     0,     0,     166,   0,     167,   0,     0,     0,     0,     0,     168,   0,     169,   170,
    171,   0,     0,     0,     172,   0,     0,     173,   174,   175,   0,     0,     0,     176,   0,     0,
    0,     177,   178,   179,   180,   0,     0,     181,   0,     182,   183,   184,   0,     0,     185,   0,
    186,   0,     0,     187,   0,     0,     188,   189,   190,   0,     0,     191,   0,     0,     0,     0,
    192,   193,   888,   0,     194,   0,     195,   0,     0,     0,     0,     0,     0,     196,   197,   0,
    0,     198,   199,   0,     0,     200,   0,     0,     0,     0,     0,     201,   202,   0,     203,   0,
    0,     204,   0,     0,     0,     205,   206,   207,   208,   0,     0,     209,   210,   0,     0,     0,
    211,   0,     0,     0,     212,   0,     0,     0,     213,   0,     0,     214,   215,   0,     0,     0,
    0,     0,     0,     216,   0,     217,   0,     0,     0,     218,   0,     0,     219,   0,     0,     0,
    0,     0,     220,   0,     221,   0,     0,     222,   0,     223,   0,     0,     0,     0,     0,     0,
    0,     0,     0,     224,   225,   226,   227,   228,   229,   0,     230,   231,   232,   233,   234,   235,
    236,   237,   238,   0,     239,   240,   241,   0,     242,   243,   0,     0,     0,     244,   245,   246,
    247,   0,     0,     248,   249,   0,     0,     250,   0,     251,   0,     252,   0,     0,     253,   254,
    255,   256,   257,   258,   259,   0,     0,     260,   261,   0,     262,   263,   264,   0,     0,     0,
    265,   0,     0,     0,     0,     266,   267,   268,   0,     269,   270,   271,   0,     0,     0,     0,
    0,     0,     0,     0,     0,     0,     272,   273,   274,   0,     275,   0,     276,   0,     277,   0,
    0,     278,   279,   0,     280,   0,     281,   282,   0,     283,   284,   285,   286,   287,   288,   289,
    290,   0,     0,     0,     0,     291,   292,   0,     0,     293,   294,   295,   0,     296,   0,     297,
    298,   0,     0,     299,   0,     300,   301,   302,   0,     303,   304,   0,     0,     0,     305,   306,
    0,     307,   308,   0,     309,   310,   311,   312,   0,     313,   314,   0,     0,     0,     315,   316,
    317,   0,     0,     318,   0,     0,     0,     319,   320,   321,   322,   0,     323,   324,   0,     0,
    0,     0,     0,     0,     325,   326,   0,     327,   0,     0,     328,   0,     0,     329,   330,   0,
    0,     331,   332,   0,     333,   334,   335,   0,     0,     0,     336,   337,   0,     338,   339,   0,
    340,   341,   0,     0,     342,   343,   344,   345,   346,   0,     0,     0,     0,     0,     347,   0,
    348,   0,     0,     349,   350,   351,   352,   0,     0,     353,   354,   0,     0,     355,   0,     0,
    0,     0,     356,   0,     0,     357,   0,     0,     358,   359,   0,     0,     0,     0,     0,     0,
    0,     360,   0,     0,     361,   0,     0,     362,   363,   364,   0,     0,     0,     0,     365,   0,
    366,   367,   0,     0,     121,   368,   122,   123,   124,   125,   126,   0,     0,     0,     0,     0,
    127,   0,     0,     128,   0,     0,     129,   130,   131,   132,   0,     133,   0,     134,   0,     0,
    135,   0,     0,     0,     136,   0,     0,     137,   138,   0,     139,   0,     140,   141,   0,     0,
    142,   0,     143,   0,     144,   145,   0,     146,   0,     147,   148,   149,   0,     0,     150,   151,
    0,     152,   153,   154,   155,   156,   0,     0,     157,   0,     0,     158,   0,     159,   0,     0,
    0,     0,     0,     0,     160,   0,     0,     0,     0,     0,     0,     161,   162,   0,     0,     163,
    0,     0,     0,     0,     164,   165,   0,     0,     0,     0,     1285,  166,   0,     167,   0,     0,
    0,     0,     0,     168,   0,     169,   170,   171,   0,     0,     0,     172,   0,     0,     173,   174,
    175,   0,     0,     0,     176,   0,     0,     0,     177,   178,   179,   180,   0,     0,     181,   0,
    182,   183,   184,   0,     0,     185,   0,     186,   0,     0,     187,   0,     0,     188,   189,   190,
    0,     0,     191,   0,     0,     0,     0,     192,   193,   0,     0,     194,   0,     195,   0,     0,
    0,     0,     0,     0,     196,   197,   0,     0,     198,   199,   0,     0,     200,   0,     0,     0,
    0,     0,     201,   202,   0,     203,   0,     0,     204,   0,     0,     0,     205,   206,   207,   208,
    0,     0,     209,   210,   0,     0,     0,     211,   0,     0,     0,     212,   0,     0,     0,     213,
    0,     0,     214,   215,   0,     0,     0,     0,     0,     0,     216,   0,     217,   0,     0,     0,
    218,   0,     0,     219,   0,     0,     0,     0,     0,     220,   0,     221,   0,     0,     222,   0,
    223,   0,     0,     0,     0,     0,     0,     0,     0,     0,     224,   225,   226,   227,   228,   229,
    0,     230,   231,   232,   233,   234,   235,   236,   237,   238,   0,     239,   240,   241,   0,     242,
    243,   0,     0,     0,     244,   245,   246,   247,   0,     0,     248,   249,   0,     0,     250,   0,
    251,   0,     252,   0,     0,     253,   254,   255,   256,   257,   258,   259,   0,     0,     260,   261,
    0,     262,   263,   264,   0,     0,     0,     265,   0,     0,     0,     0,     266,   267,   268,   0,
    269,   270,   271,   0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     272,   273,   274,
    0,     275,   0,     276,   0,     277,   0,     0,     278,   279,   0,     280,   0,     281,   282,   0,
    283,   284,   285,   286,   287,   288,   289,   290,   0,     0,     0,     0,     291,   292,   0,     0,
    293,   294,   295,   0,     296,   0,     297,   298,   0,     0,     299,   0,     300,   301,   302,   0,
    303,   304,   0,     0,     0,     305,   306,   0,     307,   308,   0,     309,   310,   311,   312,   0,
    313,   314,   0,     0,     0,     315,   316,   317,   0,     0,     318,   0,     0,     0,     319,   320,
    321,   322,   0,     323,   324,   0,     0,     0,     0,     0,     0,     325,   326,   0,     327,   0,
    0,     328,   0,     0,     329,   330,   0,     0,     331,   332,   0,     333,   334,   335,   0,     0,
    0,     336,   337,   0,     338,   339,   0,     340,   341,   0,     0,     342,   343,   344,   345,   346,
    0,     0,     0,     0,     0,     347,   0,     348,   0,     0,     349,   350,   351,   352,   0,     0,
    353,   354,   0,     0,     355,   0,     0,     0,     0,     356,   0,     0,     357,   0,     0,     358,
    359,   0,     0,     0,     0,     0,     0,     0,     360,   0,     0,     361,   0,     0,     362,   363,
    364,   0,     0,     0,     0,     365,   0,     366,   367,   0,     0,     121,   368,   122,   123,   124,
    125,   126,   0,     0,     0,     0,     0,     127,   0,     0,     128,   0,     0,     129,   130,   131,
    132,   0,     133,   0,     134,   0,     0,     135,   0,     0,     0,     136,   0,     0,     137,   138,
    0,     139,   0,     140,   141,   0,     0,     142,   0,     143,   0,     144,   145,   0,     146,   0,
    147,   148,   149,   0,     0,     150,   151,   0,     152,   153,   154,   155,   156,   0,     0,     157,
    0,     0,     158,   0,     159,   0,     0,     0,     0,     0,     0,     160,   0,     0,     0,     0,
    0,     0,     161,   162,   0,     0,     163,   0,     0,     0,     0,     164,   165,   0,     0,     0,
    0,     2053,  166,   0,     167,   0,     0,     0,     0,     0,     168,   0,     169,   170,   171,   0,
    0,     0,     172,   0,     0,     173,   174,   175,   0,     0,     0,     176,   0,     0,     0,     177,
    178,   179,   180,   0,     0,     181,   0,     182,   183,   184,   0,     0,     185,   0,     186,   0,
    0,     187,   0,     0,     188,   189,   190,   0,     0,     191,   0,     0,     0,     0,     192,   193,
    0,     0,     194,   0,     195,   0,     0,     0,     0,     0,     0,     196,   197,   0,     0,     198,
    199,   0,     0,     200,   0,     0,     0,     0,     0,     201,   202,   0,     203,   0,     0,     204,
    0,     0,     0,     205,   206,   207,   208,   0,     0,     209,   210,   0,     0,     0,     211,   0,
    0,     0,     212,   0,     0,     0,     213,   0,     0,     214,   215,   0,     0,     0,     0,     0,
    0,     216,   0,     217,   0,     0,     0,     218,   0,     0,     219,   0,     0,     0,     0,     0,
    220,   0,     221,   0,     0,     222,   0,     223,   0,     0,     0,     0,     0,     0,     0,     0,
    0,     224,   225,   226,   227,   228,   229,   0,     230,   231,   232,   233,   234,   235,   236,   237,
    238,   0,     239,   240,   241,   0,     242,   243,   0,     0,     0,     244,   245,   246,   247,   0,
    0,     248,   249,   0,     0,     250,   0,     251,   0,     252,   0,     0,     253,   254,   255,   256,
    257,   258,   259,   0,     0,     260,   261,   0,     262,   263,   264,   0,     0,     0,     265,   0,
    0,     0,     0,     266,   267,   268,   0,     269,   270,   271,   0,     0,     0,     0,     0,     0,
    0,     0,     0,     0,     272,   273,   274,   0,     275,   0,     276,   0,     277,   0,     0,     278,
    279,   0,     280,   0,     281,   282,   0,     283,   284,   285,   286,   287,   288,   289,   290,   0,
    0,     0,     0,     291,   292,   0,     0,     293,   294,   295,   0,     296,   0,     297,   298,   0,
    0,     299,   0,     300,   301,   302,   0,     303,   304,   0,     0,     0,     305,   306,   0,     307,
    308,   0,     309,   310,   311,   312,   0,     313,   314,   0,     0,     0,     315,   316,   317,   0,
    0,     318,   0,     0,     0,     319,   320,   321,   322,   0,     323,   324,   0,     0,     0,     0,
    0,     0,     325,   326,   0,     327,   0,     0,     328,   0,     0,     329,   330,   0,     0,     331,
    332,   0,     333,   334,   335,   0,     0,     0,     336,   337,   0,     338,   339,   0,     340,   341,
    0,     0,     342,   343,   344,   345,   346,   0,     0,     0,     0,     0,     2054,  0,     348,   0,
    0,     349,   350,   351,   352,   0,     0,     353,   354,   0,     0,     355,   0,     0,     0,     0,
    356,   0,     0,     357,   0,     0,     358,   359,   0,     0,     0,     0,     0,     0,     0,     360,
    0,     0,     361,   0,     0,     362,   363,   364,   0,     0,     0,     0,     365,   0,     366,   367,
    0,     0,     121,   368,   122,   123,   124,   125,   126,   0,     0,     0,     0,     0,     127,   0,
    0,     128,   0,     0,     129,   130,   131,   132,   0,     133,   0,     134,   0,     0,     135,   0,
    0,     0,     136,   0,     0,     137,   138,   0,     139,   0,     140,   141,   0,     0,     142,   0,
    143,   0,     144,   145,   0,     146,   0,     147,   148,   149,   0,     0,     150,   151,   0,     152,
    153,   154,   155,   156,   0,     0,     157,   0,     0,     158,   0,     159,   0,     0,     0,     0,
    0,     0,     160,   0,     0,     0,     0,     0,     0,     161,   162,   0,     0,     163,   0,     0,
    0,     0,     164,   165,   0,     0,     0,     0,     0,     166,   0,     167,   0,     0,     0,     0,
    0,     168,   0,     169,   170,   171,   0,     0,     0,     172,   0,     0,     173,   174,   175,   0,
    0,     0,     176,   0,     0,     0,     177,   178,   179,   180,   0,     0,     181,   0,     182,   183,
    184,   0,     0,     185,   0,     186,   0,     0,     187,   0,     0,     188,   189,   190,   0,     0,
    191,   0,     0,     0,     0,     192,   193,   0,     0,     194,   0,     195,   0,     0,     0,     0,
    0,     0,     196,   197,   0,     0,     198,   199,   0,     0,     200,   0,     0,     0,     0,     0,
    201,   202,   0,     203,   0,     0,     204,   0,     0,     0,     205,   206,   207,   208,   0,     0,
    209,   210,   0,     0,     0,     211,   0,     0,     0,     212,   0,     0,     0,     213,   0,     0,
    214,   215,   0,     0,     0,     0,     0,     0,     216,   0,     217,   0,     0,     0,     218,   0,
    0,     219,   0,     0,     0,     0,     0,     220,   0,     221,   0,     0,     222,   0,     223,   0,
    0,     0,     0,     0,     0,     0,     0,     0,     224,   225,   226,   227,   228,   229,   0,     230,
    231,   232,   233,   234,   235,   236,   237,   238,   0,     239,   240,   241,   0,     242,   243,   0,
    0,     0,     244,   245,   246,   247,   0,     0,     248,   249,   0,     0,     250,   0,     251,   0,
    252,   0,     0,     253,   254,   255,   256,   257,   258,   259,   0,     0,     260,   261,   0,     262,
    263,   264,   0,     0,     0,     265,   0,     0,     0,     0,     266,   267,   268,   0,     269,   270,
    271,   0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     272,   273,   274,   0,     275,
    0,     276,   0,     277,   0,     0,     278,   279,   2171,  280,   0,     281,   282,   0,     283,   284,
    285,   286,   287,   288,   289,   290,   0,     0,     0,     0,     291,   292,   0,     0,     293,   294,
    295,   0,     296,   0,     297,   298,   0,     0,     299,   0,     300,   301,   302,   0,     303,   304,
    0,     0,     0,     305,   306,   0,     307,   308,   0,     309,   310,   311,   312,   0,     313,   314,
    0,     0,     0,     315,   316,   317,   0,     0,     318,   0,     0,     0,     319,   320,   321,   322,
    0,     323,   324,   0,     0,     0,     0,     0,     0,     325,   326,   0,     327,   0,     0,     328,
    0,     0,     329,   330,   0,     0,     331,   332,   0,     333,   334,   335,   0,     0,     0,     336,
    337,   0,     338,   339,   0,     340,   341,   0,     0,     342,   343,   344,   345,   346,   0,     0,
    0,     0,     0,     347,   0,     348,   0,     0,     349,   350,   351,   352,   0,     0,     353,   354,
    0,     0,     355,   0,     0,     0,     0,     356,   0,     0,     357,   0,     0,     358,   359,   0,
    0,     0,     0,     0,     0,     0,     360,   0,     0,     361,   0,     0,     362,   363,   364,   0,
    0,     0,     0,     365,   0,     366,   367,   0,     0,     121,   368,   122,   123,   124,   125,   126,
    0,     0,     0,     0,     0,     127,   0,     0,     128,   0,     0,     129,   130,   131,   132,   0,
    133,   0,     134,   0,     0,     135,   0,     0,     0,     136,   0,     0,     137,   138,   0,     139,
    0,     140,   141,   0,     0,     142,   0,     143,   0,     144,   145,   0,     146,   0,     147,   148,
    149,   0,     0,     150,   151,   0,     152,   153,   154,   155,   156,   0,     0,     157,   0,     0,
    158,   0,     159,   0,     0,     0,     0,     0,     0,     160,   0,     0,     0,     0,     0,     0,
    161,   162,   0,     0,     163,   0,     0,     0,     0,     164,   165,   0,     0,     0,     0,     0,
    166,   0,     167,   0,     0,     0,     0,     0,     168,   0,     169,   170,   171,   0,     0,     0,
    172,   0,     0,     173,   174,   175,   0,     0,     0,     176,   0,     0,     0,     177,   178,   179,
    180,   0,     0,     181,   0,     182,   183,   184,   0,     0,     185,   0,     186,   0,     0,     187,
    0,     0,     188,   189,   190,   0,     0,     191,   0,     0,     0,     0,     192,   193,   0,     0,
    194,   0,     195,   0,     0,     0,     0,     0,     0,     196,   197,   0,     0,     198,   199,   0,
    0,     200,   0,     0,     0,     0,     0,     201,   202,   0,     203,   0,     0,     204,   0,     0,
    0,     205,   206,   207,   208,   0,     0,     209,   210,   0,     0,     0,     211,   0,     0,     0,
    212,   0,     0,     0,     213,   0,     0,     214,   215,   0,     0,     0,     0,     0,     0,     216,
    0,     217,   0,     0,     0,     218,   0,     0,     219,   0,     0,     0,     0,     0,     220,   0,
    221,   0,     0,     222,   0,     223,   0,     0,     0,     0,     0,     0,     0,     0,     0,     224,
    225,   226,   227,   228,   229,   0,     230,   231,   232,   233,   234,   235,   236,   237,   238,   0,
    239,   240,   241,   0,     242,   243,   0,     0,     0,     244,   245,   246,   247,   0,     0,     248,
    249,   0,     0,     250,   0,     251,   0,     252,   0,     0,     253,   254,   255,   256,   257,   258,
    259,   0,     0,     260,   261,   0,     262,   263,   264,   0,     0,     0,     265,   0,     0,     0,
    0,     266,   267,   268,   0,     269,   270,   271,   0,     0,     0,     0,     0,     0,     0,     0,
    0,     0,     272,   273,   274,   0,     275,   0,     276,   0,     277,   0,     0,     278,   279,   0,
    280,   0,     281,   282,   0,     283,   284,   285,   286,   287,   288,   289,   290,   0,     0,     0,
    0,     291,   292,   0,     0,     293,   294,   295,   0,     296,   0,     297,   298,   0,     0,     299,
    0,     300,   301,   302,   0,     303,   304,   0,     0,     0,     305,   306,   0,     307,   308,   0,
    309,   310,   311,   312,   0,     313,   314,   0,     0,     0,     315,   316,   317,   0,     0,     318,
    0,     0,     0,     319,   320,   321,   322,   0,     323,   324,   0,     0,     0,     0,     0,     0,
    325,   326,   0,     327,   0,     0,     328,   0,     0,     329,   330,   0,     0,     331,   332,   0,
    333,   334,   335,   0,     0,     0,     336,   337,   0,     338,   339,   0,     340,   341,   0,     551,
    342,   343,   344,   345,   346,   0,     0,     0,     0,     0,     347,   0,     348,   0,     0,     349,
    350,   351,   352,   0,     0,     353,   354,   0,     0,     355,   0,     0,     0,     0,     356,   0,
    0,     357,   0,     0,     358,   359,   0,     0,     0,     0,     0,     0,     0,     360,   0,     0,
    361,   0,     0,     362,   363,   364,   0,     0,     0,     0,     365,   0,     366,   367,   0,     0,
    121,   368,   122,   123,   124,   125,   126,   0,     0,     0,     0,     0,     127,   0,     0,     128,
    0,     0,     129,   130,   131,   132,   0,     133,   0,     134,   0,     0,     135,   0,     0,     0,
    136,   0,     0,     137,   138,   0,     139,   0,     140,   141,   0,     0,     142,   0,     143,   0,
    144,   145,   0,     146,   0,     147,   148,   149,   0,     0,     150,   151,   0,     152,   153,   154,
    155,   156,   0,     0,     157,   0,     0,     158,   0,     159,   0,     0,     0,     0,     0,     0,
    160,   0,     0,     0,     0,     0,     0,     161,   162,   0,     0,     163,   0,     0,     0,     0,
    164,   165,   0,     0,     0,     0,     2053,  166,   0,     167,   0,     0,     0,     0,     0,     168,
    0,     169,   170,   171,   0,     0,     0,     172,   0,     0,     173,   174,   175,   0,     0,     0,
    176,   0,     0,     0,     177,   178,   179,   180,   0,     0,     181,   0,     182,   183,   184,   0,
    0,     185,   0,     186,   0,     0,     187,   0,     0,     188,   189,   190,   0,     0,     191,   0,
    0,     0,     0,     192,   193,   0,     0,     194,   0,     195,   0,     0,     0,     0,     0,     0,
    196,   197,   0,     0,     198,   199,   0,     0,     200,   0,     0,     0,     0,     0,     201,   202,
    0,     203,   0,     0,     204,   0,     0,     0,     205,   206,   207,   208,   0,     0,     209,   210,
    0,     0,     0,     211,   0,     0,     0,     212,   0,     0,     0,     213,   0,     0,     214,   215,
    0,     0,     0,     0,     0,     0,     216,   0,     217,   0,     0,     0,     218,   0,     0,     219,
    0,     0,     0,     0,     0,     220,   0,     221,   0,     0,     222,   0,     223,   0,     0,     0,
    0,     0,     0,     0,     0,     0,     224,   225,   226,   227,   228,   229,   0,     230,   231,   232,
    233,   234,   235,   236,   237,   238,   0,     239,   240,   241,   0,     242,   243,   0,     0,     0,
    244,   245,   246,   247,   0,     0,     248,   249,   0,     0,     250,   0,     251,   0,     252,   0,
    0,     253,   254,   255,   256,   257,   258,   259,   0,     0,     260,   261,   0,     262,   263,   264,
    0,     0,     0,     265,   0,     0,     0,     0,     266,   267,   268,   0,     269,   270,   271,   0,
    0,     0,     0,     0,     0,     0,     0,     0,     0,     272,   273,   274,   0,     275,   0,     276,
    0,     277,   0,     0,     278,   279,   0,     280,   0,     281,   282,   0,     283,   284,   285,   286,
    287,   288,   289,   290,   0,     0,     0,     0,     291,   292,   0,     0,     293,   294,   295,   0,
    296,   0,     297,   298,   0,     0,     299,   0,     300,   301,   302,   0,     303,   304,   0,     0,
    0,     305,   306,   0,     307,   308,   0,     309,   310,   311,   312,   0,     313,   314,   0,     0,
    0,     315,   316,   317,   0,     0,     318,   0,     0,     0,     319,   320,   321,   322,   0,     323,
    324,   0,     0,     0,     0,     0,     0,     325,   326,   0,     327,   0,     0,     328,   0,     0,
    329,   330,   0,     0,     331,   332,   0,     333,   334,   335,   0,     0,     0,     336,   337,   0,
    338,   339,   0,     340,   341,   0,     0,     342,   343,   344,   345,   346,   0,     0,     0,     0,
    0,     347,   0,     348,   0,     0,     349,   350,   351,   352,   0,     0,     353,   354,   0,     0,
    355,   0,     0,     0,     0,     356,   0,     0,     357,   0,     0,     358,   359,   0,     0,     0,
    0,     0,     0,     0,     360,   0,     0,     361,   0,     0,     362,   363,   364,   0,     0,     0,
    0,     365,   0,     366,   367,   0,     0,     121,   368,   122,   123,   124,   125,   126,   0,     0,
    0,     0,     0,     127,   0,     0,     128,   0,     0,     129,   130,   131,   132,   0,     133,   0,
    134,   0,     0,     135,   0,     0,     0,     136,   0,     0,     137,   138,   0,     139,   0,     140,
    141,   0,     0,     142,   0,     143,   0,     144,   145,   0,     146,   0,     147,   148,   149,   0,
    0,     150,   151,   0,     152,   153,   154,   155,   156,   0,     0,     157,   0,     0,     158,   0,
    159,   0,     0,     0,     0,     0,     0,     160,   0,     0,     0,     0,     0,     0,     161,   162,
    0,     0,     163,   0,     0,     0,     0,     164,   165,   0,     0,     0,     0,     0,     166,   0,
    167,   0,     0,     0,     0,     0,     168,   0,     169,   170,   171,   0,     0,     0,     172,   0,
    0,     173,   174,   175,   0,     0,     0,     176,   0,     0,     0,     177,   178,   179,   180,   0,
    0,     181,   0,     182,   183,   184,   0,     0,     185,   0,     186,   0,     0,     187,   0,     0,
    188,   189,   190,   0,     0,     191,   0,     0,     0,     0,     192,   193,   0,     0,     194,   0,
    195,   0,     0,     0,     0,     0,     0,     196,   197,   0,     0,     198,   199,   0,     0,     200,
    0,     0,     0,     0,     0,     201,   202,   0,     203,   0,     0,     204,   0,     0,     0,     205,
    206,   207,   208,   0,     0,     209,   210,   0,     0,     0,     211,   0,     0,     0,     212,   0,
    0,     0,     213,   0,     0,     214,   215,   0,     0,     0,     0,     0,     0,     216,   0,     217,
    0,     0,     0,     218,   0,     0,     219,   0,     0,     0,     0,     0,     220,   0,     221,   0,
    0,     222,   0,     223,   0,     0,     0,     0,     0,     0,     0,     0,     0,     224,   225,   226,
    227,   228,   229,   0,     230,   231,   232,   233,   234,   235,   236,   237,   238,   0,     239,   240,
    241,   0,     242,   243,   0,     0,     0,     244,   245,   246,   247,   0,     0,     248,   249,   0,
    0,     250,   0,     251,   0,     252,   0,     0,     253,   254,   255,   256,   257,   258,   259,   0,
    0,     260,   261,   0,     262,   263,   264,   0,     0,     0,     265,   0,     0,     0,     0,     266,
    267,   268,   0,     269,   270,   271,   0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    272,   273,   274,   0,     275,   0,     276,   0,     277,   0,     0,     278,   279,   0,     280,   0,
    281,   282,   0,     283,   284,   285,   286,   287,   288,   289,   290,   0,     0,     0,     0,     291,
    292,   0,     0,     293,   294,   295,   0,     296,   0,     297,   298,   0,     0,     299,   0,     300,
    301,   302,   0,     303,   304,   0,     0,     0,     305,   306,   0,     307,   308,   0,     309,   310,
    311,   312,   0,     313,   314,   0,     0,     0,     315,   316,   317,   0,     0,     318,   0,     0,
    0,     319,   320,   321,   322,   0,     323,   324,   0,     0,     0,     0,     0,     0,     325,   326,
    0,     327,   0,     0,     328,   0,     0,     329,   330,   0,     0,     331,   332,   0,     333,   334,
    335,   0,     0,     0,     336,   337,   0,     338,   339,   0,     340,   341,   0,     0,     342,   343,
    344,   345,   346,   0,     0,     0,     0,     0,     347,   0,     348,   0,     0,     349,   350,   351,
    352,   0,     0,     353,   354,   0,     0,     355,   0,     0,     0,     0,     356,   0,     0,     357,
    0,     0,     358,   359,   0,     0,     0,     0,     0,     0,     0,     360,   0,     0,     361,   0,
    0,     362,   363,   364,   0,     0,     0,     0,     365,   0,     366,   367,   0,     0,     121,   368,
    122,   123,   124,   125,   126,   0,     0,     0,     0,     0,     127,   0,     0,     128,   0,     0,
    129,   130,   131,   132,   0,     133,   0,     134,   0,     0,     135,   0,     0,     0,     136,   0,
    0,     137,   138,   0,     139,   0,     140,   141,   0,     0,     142,   0,     143,   0,     144,   145,
    0,     146,   0,     147,   148,   149,   0,     0,     150,   151,   0,     152,   153,   154,   155,   156,
    0,     0,     157,   0,     0,     158,   0,     159,   0,     0,     0,     0,     0,     0,     160,   0,
    0,     0,     0,     0,     0,     161,   162,   0,     0,     163,   0,     0,     0,     0,     164,   165,
    0,     0,     0,     0,     0,     166,   0,     167,   0,     0,     0,     0,     0,     168,   0,     169,
    170,   171,   0,     0,     0,     172,   0,     0,     173,   174,   175,   0,     0,     0,     176,   0,
    0,     0,     177,   178,   179,   180,   0,     0,     181,   0,     182,   183,   184,   0,     0,     185,
    0,     186,   0,     0,     187,   0,     0,     188,   1378,  190,   0,     0,     191,   0,     0,     0,
    0,     192,   193,   0,     0,     194,   0,     195,   0,     0,     0,     0,     0,     0,     196,   197,
    0,     0,     198,   199,   0,     0,     200,   0,     0,     0,     0,     0,     201,   202,   0,     203,
    0,     0,     204,   0,     0,     0,     205,   206,   207,   208,   0,     0,     209,   210,   0,     0,
    0,     211,   0,     0,     0,     212,   0,     0,     0,     213,   0,     0,     214,   215,   0,     0,
    0,     0,     0,     0,     216,   0,     217,   0,     0,     0,     218,   0,     0,     219,   0,     0,
    0,     0,     0,     220,   0,     221,   0,     0,     222,   0,     223,   0,     0,     0,     0,     0,
    0,     0,     0,     0,     224,   225,   226,   227,   228,   229,   0,     230,   231,   232,   233,   234,
    235,   236,   237,   238,   0,     239,   240,   241,   0,     242,   243,   0,     0,     0,     244,   245,
    246,   247,   0,     0,     248,   249,   0,     0,     250,   0,     251,   0,     252,   0,     0,     253,
    254,   255,   256,   257,   258,   259,   0,     0,     260,   261,   0,     262,   1379,  264,   0,     0,
    0,     265,   0,     0,     0,     0,     266,   267,   268,   0,     269,   270,   271,   0,     0,     0,
    0,     0,     0,     0,     0,     0,     0,     272,   273,   274,   0,     275,   0,     276,   0,     277,
    0,     0,     278,   279,   0,     280,   0,     281,   282,   0,     283,   284,   285,   286,   287,   288,
    289,   290,   0,     0,     0,     0,     291,   292,   0,     0,     293,   294,   295,   0,     296,   0,
    297,   298,   0,     0,     299,   0,     300,   301,   302,   0,     303,   304,   0,     0,     0,     305,
    306,   0,     307,   308,   0,     309,   310,   311,   312,   0,     313,   314,   0,     0,     0,     315,
    316,   317,   0,     0,     318,   0,     0,     0,     319,   320,   321,   322,   0,     323,   324,   0,
    0,     0,     0,     0,     0,     325,   326,   0,     327,   0,     0,     328,   0,     0,     329,   330,
    0,     0,     331,   332,   0,     333,   334,   335,   0,     0,     0,     336,   337,   0,     338,   339,
    0,     340,   341,   0,     0,     342,   343,   344,   345,   346,   0,     0,     0,     0,     0,     347,
    0,     348,   0,     0,     349,   350,   351,   352,   0,     0,     353,   354,   0,     0,     355,   0,
    0,     0,     0,     356,   0,     0,     357,   0,     0,     358,   359,   0,     0,     0,     0,     0,
    0,     0,     360,   0,     0,     361,   0,     0,     362,   363,   364,   0,     0,     0,     0,     365,
    0,     366,   367,   0,     0,     0,     368};

static const short yycheck[] = {
    7,    460,  586,  440,  732,  491,  950,  762,  413,  580,  581,  582,  19,   841,  564,  22,   487,  488,  515,
    1162, 808,  988,  29,   2032, 738,  452,  453,  454,  2032, 456,  1215, 458,  39,   1814, 787,  952,  953,  954,
    646,  2003, 1358, 596,  49,   785,  22,   516,  1691, 2063, 965,  1263, 2056, 2057, 2058, 957,  958,  808,  960,
    1098, 1829, 1704, 108,  2084, 110,  1277, 1105, 1836, 2032, 809,  2537, 2092, 1776, 2094, 978,  2429, 1277, 1094,
    647,  1042, 1657, 2221, 87,   2378, 497,  447,  2093, 2745, 2555, 2070, 2071, 2093, 2122, 675,  2091, 997,  678,
    1116, 1117, 3,    3,    3,    107,  108,  673,  110,  1021, 3,    3,    1024, 1012, 87,   2126, 1228, 18,   120,
    1020, 1429, 687,  688,  689,  32,   3,    3,    1239, 1240, 845,  3,    1030, 1031, 1032, 845,  2146, 2147, 48,
    55,   2247, 1052, 1053, 1041, 2251, 58,   1057, 18,   120,  1108, 16,   1110, 2116, 697,  698,  699,  20,   3,
    2122, 2793, 2794, 2125, 126,  2797, 2128, 18,   1077, 28,   1079, 27,   16,   20,   3026, 717,  16,   2139, 2140,
    20,   1078, 16,   18,   1781, 2816, 32,   2148, 122,  34,   34,   2822, 32,   54,   55,   1671, 23,   24,   20,
    45,   1779, 54,   55,   67,   167,  45,   91,   810,  54,   55,   32,   107,  170,  111,  54,   55,   1613, 1351,
    107,  131,  152,  11,   43,   45,   111,  170,  57,   54,   55,   56,   225,  48,   54,   55,   711,  62,   48,
    53,   57,   66,   58,   164,  2117, 2118, 141,  217,  2211, 57,   75,   170,  2207, 225,  152,  225,  2905, 85,
    744,  60,   90,   2232, 2233, 2234, 59,   141,  294,  92,   143,  986,  51,   125,  2107, 2370, 2962, 141,  558,
    2047, 396,  339,  334,  246,  107,  210,  257,  110,  75,   92,   201,  210,  1373, 167,  1375, 141,  419,  335,
    756,  484,  402,  3292, 419,  3294, 90,   32,   186,  8,    722,  107,  141,  703,  2768, 103,  352,  49,   139,
    64,   109,  432,  230,  879,  228,  57,   170,  219,  210,  328,  225,  454,  252,  210,  475,  243,  502,  213,
    38,   170,  165,  3489, 152,  152,  2863, 155,  493,  2866, 174,  19,   383,  246,  165,  386,  12,   2980, 232,
    213,  247,  2953, 199,  199,  54,   55,   2989, 134,  454,  419,  515,  402,  62,   2365, 387,  161,  252,  144,
    2365, 560,  306,  247,  247,  196,  103,  349,  247,  2076, 62,   264,  515,  388,  174,  383,  213,  559,  386,
    174,  786,  508,  854,  220,  749,  524,  264,  533,  492,  520,  521,  399,  3053, 329,  402,  263,  213,  2380,
    2381, 2382, 228,  409,  2090, 119,  324,  413,  2413, 564,  1282, 225,  210,  37,   420,  841,  560,  542,  559,
    425,  1003, 450,  3584, 558,  1251, 475,  161,  562,  112,  558,  154,  371,  560,  93,   904,  473,  96,   90,
    2436, 2444, 2471, 447,  141,  420,  558,  104,  159,  851,  2474, 121,  419,  286,  499,  314,  2485, 145,  2043,
    394,  464,  261,  498,  264,  344,  371,  511,  300,  513,  344,  474,  293,  62,   454,  1388, 479,  3477, 384,
    3299, 1218, 323,  485,  371,  487,  488,  405,  1225, 400,  492,  3095, 1071, 1202, 496,  352,  558,  499,  500,
    565,  560,  474,  394,  505,  1241, 1242, 2471, 379,  510,  511,  252,  513,  328,  515,  516,  1263, 1605, 1606,
    1607, 350,  2485, 352,  2223, 2163, 330,  174,  1724, 32,   363,  365,  261,  393,  200,  331,  3063, 454,  424,
    451,  826,  1651, 363,  328,  373,  374,  426,  376,  281,  549,  462,  548,  55,   371,  371,  975,  1270, 28,
    1106, 1469, 2909, 1270, 531,  1473, 1107, 342,  213,  425,  3260, 2207, 223,  383,  174,  365,  379,  407,  1283,
    370,  365,  513,  1123, 400,  2549, 412,  560,  559,  400,  2688, 945,  514,  93,   414,  2469, 96,   559,  558,
    1506, 68,   1556, 562,  560,  104,  331,  1561, 1562, 2083, 1149, 1567, 523,  1569, 510,  425,  330,  560,  367,
    1329, 552,  553,  554,  484,  1329, 510,  1101, 2222, 536,  3478, 560,  484,  475,  475,  544,  497,  1237, 1530,
    531,  434,  559,  471,  501,  2220, 527,  1061, 462,  2482, 547,  1065, 3279, 484,  3281, 528,  2049, 560,  558,
    501,  1551, 531,  531,  10,   560,  501,  531,  345,  471,  515,  493,  535,  137,  566,  566,  566,  503,  2777,
    532,  502,  558,  566,  566,  501,  526,  471,  3029, 1988, 503,  2682, 471,  2384, 2385, 2689, 533,  565,  566,
    566,  2689, 527,  565,  566,  513,  474,  522,  523,  496,  1165, 702,  703,  704,  2811, 2812, 548,  560,  564,
    558,  1175, 548,  2819, 361,  2672, 469,  2692, 365,  2735, 2826, 566,  2721, 2739, 1590, 533,  2685, 380,  3330,
    1219, 2755, 560,  3365, 426,  3367, 488,  736,  90,   2758, 3036, 548,  2743, 560,  2735, 744,  745,  2743, 2739,
    264,  749,  1148, 247,  84,   3280, 172,  3282, 756,  2437, 2438, 345,  127,  3578, 23,   365,  283,  736,  170,
    496,  1166, 318,  388,  159,  490,  230,  745,  69,   70,   443,  444,  445,  446,  447,  448,  170,  109,  403,
    786,  108,  506,  283,  453,  352,  2755, 459,  457,  103,  281,  261,  170,  1207, 3453, 62,   281,  247,  1741,
    66,   65,   460,  426,  1746, 2679, 2946, 419,  107,  8,    1752, 319,  336,  1755, 1176, 173,  174,  53,   477,
    475,  472,  480,  3124, 515,  1843, 1844, 1251, 1553, 27,   2959, 129,  108,  534,  225,  12,   487,  841,  336,
    247,  1274, 419,  107,  3309, 344,  237,  222,  851,  415,  161,  854,  101,  2428, 857,  858,  2558, 213,  12,
    74,   379,  1354, 512,  160,  331,  84,   471,  434,  419,  73,   560,  2850, 200,  88,   318,  12,   419,  527,
    2750, 2841, 215,  884,  370,  1593, 858,  888,  353,  361,  199,  2070, 2071, 12,   1676, 1603, 186,  318,  899,
    344,  1365, 2904, 224,  904,  3195, 165,  2904, 2142, 560,  381,  243,  1647, 884,  475,  1650, 12,   888,  1653,
    1654, 1627, 152,  2696, 169,  155,  2159, 475,  1284, 899,  432,  1676, 2930, 3229, 351,  318,  406,  1894, 1834,
    1336, 264,  328,  941,  1839, 943,  401,  945,  2938, 2939, 121,  434,  499,  558,  224,  261,  213,  2162, 341,
    1854, 1992, 205,  2096, 1359, 3097, 252,  1861, 1977, 2162, 2077, 57,   170,  121,  232,  344,  232,  475,  1682,
    65,   480,  978,  1876, 1877, 348,  453,  2364, 558,  317,  1883, 121,  77,   471,  3394, 419,  167,  346,  1891,
    361,  1895, 425,  103,  215,  3125, 3126, 1550, 121,  336,  508,  502,  12,   409,  66,   558,  1559, 365,  3310,
    230,  433,  2961, 1560, 558,  535,  1020, 78,   217,  331,  3373, 121,  141,  243,  154,  452,  225,  1451, 496,
    1930, 475,  1742, 1743, 0,    1745, 558,  1747, 1748, 1749, 1750, 1751, 2744, 1753, 1754, 337,  3398, 3512, 474,
    2997, 299,  523,  475,  161,  526,  499,  560,  34,   307,  293,  264,  325,  326,  3023, 3024, 2449, 330,  3187,
    472,  3031, 405,  3191, 336,  165,  3,    1078, 499,  2287, 256,  3486, 103,  173,  438,  84,   107,  382,  2225,
    434,  475,  520,  521,  199,  3111, 1993, 471,  1518, 103,  87,   317,  363,  2867, 363,  1595, 1596, 565,  2746,
    2747, 2748, 512,  3409, 84,   3518, 499,  121,  558,  471,  472,  336,  108,  96,   369,  213,  3529, 527,  459,
    213,  103,  558,  141,  530,  2771, 487,  424,  484,  1535, 558,  16,   371,  161,  486,  232,  3548, 84,   544,
    232,  1148, 159,  503,  394,  1152, 469,  349,  471,  261,  161,  398,  512,  400,  2098, 423,  1550, 404,  1165,
    1166, 1208, 1209, 179,  1692, 417,  1559, 1695, 558,  1175, 1176, 2488, 235,  199,  154,  3585, 1704, 515,  194,
    20,   1186, 161,  496,  405,  2127, 1713, 2129, 28,   1624, 199,  512,  2134, 33,   325,  326,  4,    325,  326,
    330,  379,  9,    10,   1208, 1209, 1210, 1211, 2149, 558,  2151, 2152, 2153, 215,  392,  1219, 565,  23,   24,
    558,  27,   199,  331,  237,  238,  32,   565,  209,  230,  36,   1234, 442,  443,  66,   445,  1210, 1211, 261,
    503,  459,  215,  243,  472,  304,  422,  78,   471,  3,    54,   55,   56,   265,  174,  261,  2783, 230,  62,
    2786, 2787, 1234, 66,   213,  18,   372,  269,  270,  375,  328,  243,  75,   363,  11,   215,  517,  2803, 343,
    209,  1281, 346,  529,  1284, 339,  930,  261,  117,  933,  92,   230,  936,  428,  429,  541,  3060, 222,  469,
    2006, 471,  84,   141,  142,  243,  107,  2266, 2267, 110,  170,  1281, 331,  115,  323,  533,  3347, 2350, 3349,
    3320, 317,  264,  378,  550,  551,  559,  560,  559,  331,  3445, 565,  3447, 558,  84,   1731, 559,  560,  1336,
    139,  1338, 449,  179,  559,  560,  2050, 318,  141,  317,  558,  1348, 438,  1350, 148,  362,  327,  1354, 194,
    330,  331,  515,  1359, 559,  560,  559,  560,  490,  1365, 336,  1367, 559,  560,  559,  560,  1372, 1373, 3491,
    1375, 559,  560,  317,  1980, 506,  364,  3499, 409,  385,  386,  341,  226,  3505, 141,  469,  496,  449,  188,
    336,  453,  454,  336,  456,  238,  458,  1372, 1373, 210,  1375, 3404, 235,  405,  15,   16,   3419, 213,  164,
    560,  503,  167,  559,  560,  220,  559,  560,  3538, 558,  2130, 2131, 558,  265,  1847, 558,  2974, 2975, 1829,
    215,  3550, 405,  1855, 558,  441,  1836, 191,  559,  560,  2987, 2150, 246,  197,  1989, 230,  2993, 558,  3452,
    558,  3569, 559,  560,  559,  560,  3231, 210,  558,  243,  459,  538,  215,  559,  560,  405,  558,  12,   13,
    222,  3016, 3589, 555,  3019, 304,  496,  558,  230,  559,  560,  558,  321,  3600, 286,  559,  560,  558,  459,
    284,  285,  243,  496,  288,  289,  247,  325,  326,  300,  328,  549,  475,  558,  477,  256,  558,  480,  558,
    225,  1118, 1119, 1120, 1121, 1122, 559,  560,  490,  559,  560,  558,  459,  558,  496,  559,  560,  499,  559,
    560,  558,  246,  559,  560,  54,   55,   317,  1535, 558,  1537, 3540, 83,   559,  560,  558,  3540, 3501, 559,
    560,  558,  350,  378,  352,  559,  560,  336,  1114, 1115, 559,  560,  565,  559,  560,  1116, 1117, 3565, 558,
    317,  558,  111,  559,  560,  558,  373,  374,  558,  376,  46,   550,  551,  116,  558,  3582, 125,  559,  560,
    336,  3582, 1586, 3544, 170,  1589, 559,  560,  344,  559,  560,  1595, 1596, 1597, 1598, 559,  560,  558,  405,
    147,  558,  1605, 1606, 1607, 325,  326,  412,  558,  2572, 365,  158,  1586, 559,  560,  1589, 422,  449,  558,
    405,  1623, 558,  428,  1597, 1598, 559,  560,  2378, 558,  1632, 257,  1605, 1606, 1607, 559,  560,  2420, 559,
    560,  559,  560,  188,  448,  559,  560,  1648, 559,  560,  558,  1652, 405,  559,  560,  559,  560,  558,  2057,
    558,  2059, 2060, 201,  1664, 559,  560,  384,  558,  213,  1670, 558,  2850, 425,  2420, 219,  459,  559,  560,
    2386, 2387, 1652, 558,  2643, 559,  560,  559,  560,  558,  2396, 558,  493,  2427, 559,  560,  2747, 2748, 1062,
    1063, 1670, 502,  558,  2132, 3131, 3132, 2566, 2567, 459,  2106, 2107, 2854, 2855, 256,  558,  558,  558,  558,
    558,  558,  257,  437,  558,  558,  46,   558,  558,  558,  558,  1728, 415,  558,  1731, 558,  558,  558,  558,
    558,  558,  1738, 558,  558,  558,  558,  281,  2142, 558,  558,  558,  558,  558,  502,  475,  558,  558,  558,
    336,  558,  558,  558,  558,  1760, 2159, 514,  515,  558,  558,  558,  558,  558,  558,  558,  3,    558,  1773,
    1774, 560,  2483, 1777, 558,  531,  558,  533,  558,  2490, 558,  3,    18,   558,  6,    1760, 558,  558,  558,
    558,  558,  13,   558,  2933, 558,  34,   558,  558,  1773, 1774, 558,  23,   24,   559,  560,  558,  558,  558,
    558,  558,  566,  558,  558,  558,  558,  558,  558,  558,  366,  558,  558,  558,  364,  502,  257,  1829, 547,
    548,  370,  552,  52,   146,  1836, 425,  56,   383,  492,  247,  558,  454,  2551, 389,  167,  281,  66,   1849,
    454,  395,  84,   454,  454,  469,  454,  75,   257,  138,  398,  96,   80,   76,   560,  338,  559,  559,  103,
    418,  467,  527,  2362, 51,   92,   419,  388,  148,  558,  564,  207,  560,  560,  565,  560,  46,   430,  431,
    560,  107,  564,  533,  110,  560,  469,  1895, 434,  558,  62,   12,   559,  119,  120,  475,  419,  559,  121,
    125,  9,    141,  559,  559,  530,  426,  565,  133,  454,  558,  246,  154,  2410, 139,  466,  551,  559,  281,
    161,  252,  281,  560,  560,  469,  484,  471,  560,  167,  484,  560,  560,  560,  225,  475,  552,  167,  509,
    560,  164,  436,  564,  354,  558,  560,  141,  559,  141,  141,  141,  141,  141,  191,  141,  141,  141,  336,
    199,  197,  510,  511,  13,   141,  141,  141,  141,  141,  141,  560,  44,   336,  170,  379,  527,  560,  560,
    215,  560,  531,  559,  18,   559,  559,  222,  2389, 559,  211,  560,  213,  559,  559,  230,  559,  559,  559,
    220,  560,  560,  2005, 559,  552,  559,  563,  560,  243,  170,  214,  188,  247,  170,  560,  559,  559,  434,
    560,  559,  565,  256,  560,  261,  560,  560,  560,  560,  559,  2032, 560,  560,  559,  565,  560,  83,   560,
    559,  548,  560,  560,  560,  559,  425,  167,  558,  560,  2050, 2051, 2516, 559,  559,  2876, 560,  2057, 560,
    2059, 2060, 560,  560,  559,  559,  559,  111,  559,  286,  560,  560,  559,  559,  559,  559,  559,  559,  559,
    559,  559,  125,  559,  300,  318,  2482, 317,  560,  305,  560,  565,  560,  560,  559,  2093, 559,  330,  331,
    559,  44,   560,  560,  559,  147,  559,  336,  560,  2106, 2107, 560,  559,  558,  560,  344,  158,  559,  559,
    2116, 559,  559,  559,  559,  558,  2122, 449,  559,  2125, 344,  565,  2128, 565,  560,  449,  350,  365,  352,
    560,  449,  449,  418,  2139, 2140, 449,  2142, 188,  65,   484,  118,  231,  2148, 231,  470,  470,  118,  560,
    515,  373,  374,  2157, 376,  2159, 256,  565,  3072, 2163, 2164, 560,  559,  565,  213,  565,  2713, 559,  390,
    405,  219,  484,  331,  484,  484,  221,  331,  559,  559,  12,   13,   559,  2157, 170,  170,  3086, 170,  331,
    2899, 425,  412,  544,  559,  565,  560,  559,  535,  559,  2202, 252,  558,  341,  2206, 2207, 484,  170,  170,
    256,  170,  222,  170,  565,  227,  2217, 565,  533,  560,  347,  230,  230,  296,  2932, 92,   459,  92,   2229,
    232,  2231, 2232, 2233, 2234, 2206, 232,  167,  475,  495,  475,  558,  477,  565,  559,  480,  344,  552,  558,
    552,  336,  137,  223,  223,  83,   490,  560,  558,  560,  559,  559,  496,  559,  558,  499,  558,  560,  559,
    559,  559,  502,  3208, 3209, 3210, 3211, 493,  559,  559,  559,  565,  170,  559,  111,  515,  502,  559,  559,
    559,  210,  2996, 559,  559,  559,  559,  559,  559,  125,  559,  559,  531,  560,  533,  2700, 560,  559,  559,
    559,  559,  530,  560,  560,  559,  559,  559,  559,  550,  551,  559,  147,  559,  2718, 366,  560,  559,  545,
    559,  559,  559,  560,  158,  559,  3152, 559,  559,  566,  560,  559,  3158, 383,  559,  2340, 560,  560,  559,
    389,  559,  225,  559,  566,  559,  395,  559,  244,  560,  559,  559,  559,  559,  2358, 188,  559,  559,  2362,
    560,  559,  2365, 559,  510,  62,   560,  560,  559,  269,  230,  419,  230,  232,  559,  232,  336,  2380, 2381,
    2382, 18,   213,  430,  431,  2358, 565,  2389, 219,  130,  18,   559,  7,    560,  2396, 559,  247,  558,  560,
    128,  2402, 331,  2404, 331,  19,   559,  421,  22,   2410, 559,  559,  331,  559,  40,   29,   370,  559,  331,
    559,  466,  559,  241,  419,  560,  39,   256,  191,  560,  427,  558,  141,  558,  2864, 559,  49,   347,  230,
    230,  267,  268,  269,  270,  271,  272,  560,  3195, 275,  276,  277,  278,  279,  280,  558,  282,  2876, 107,
    107,  558,  360,  3182, 565,  558,  558,  510,  511,  558,  558,  2867, 558,  2471, 413,  18,   87,   533,  559,
    32,   559,  559,  559,  559,  2482, 559,  559,  2485, 560,  560,  559,  559,  303,  150,  559,  559,  107,  108,
    559,  110,  559,  559,  559,  545,  559,  222,  560,  559,  44,   120,  560,  197,  565,  64,   379,  303,  3335,
    3336, 2516, 3338, 230,  558,  475,  2919, 515,  2523, 475,  515,  2526, 331,  558,  558,  2530, 2531, 331,  558,
    2534, 526,  558,  366,  526,  107,  232,  2541, 331,  510,  330,  3366, 232,  3026, 331,  331,  331,  3128, 3129,
    3130, 383,  2526, 331,  331,  385,  386,  389,  402,  475,  232,  533,  331,  395,  475,  475,  558,  2541, 249,
    559,  559,  16,   515,  515,  558,  327,  521,  559,  559,  559,  559,  559,  559,  559,  117,  331,  3526, 419,
    1681, 560,  3414, 559,  3416, 3417, 2995, 471,  341,  3164, 430,  431,  1693, 1694, 510,  1696, 1697, 1698, 559,
    559,  1701, 559,  44,   559,  44,   1706, 134,  23,   24,   1710, 1711, 1712, 44,   1714, 1715, 1716, 1717, 1718,
    270,  1720, 1721, 1722, 558,  558,  57,   559,  466,  341,  57,   206,  206,  530,  30,   559,  32,   33,   567,
    365,  54,   55,   56,   44,   44,   44,   141,  559,  62,   560,  383,  5,    66,   3060, 170,  341,  341,  137,
    54,   55,   560,  75,   222,  559,  209,  545,  16,   63,   530,  65,   563,  137,  510,  511,  566,  263,  105,
    566,  92,   124,  2689, 2690, 567,  2692, 558,  274,  82,   83,   566,  546,  545,  2700, 210,  107,  141,  91,
    110,  195,  559,  2708, 560,  137,  23,   24,   3277, 137,  331,  566,  559,  2718, 558,  560,  546,  167,  167,
    167,  393,  2726, 249,  425,  107,  532,  3183, 3152, 521,  139,  168,  1788, 847,  3158, 1756, 3451, 2845, 2536,
    2743, 56,   3555, 3601, 3547, 3449, 3030, 1270, 138,  139,  391,  66,   2755, 143,  2839, 3123, 1724, 1329, 2207,
    2762, 75,   1728, 2771, 2166, 1691, 2120, 2762, 383,  2771, 2794, 386,  2794, 2827, 3150, 2964, 3004, 2995, 92,
    2763, 3354, 2718, 3363, 172,  399,  174,  3142, 402,  3265, 3198, 3158, 2162, 1659, 107,  409,  1248, 110,  186,
    413,  2358, 189,  2027, 2009, 858,  1342, 420,  213,  2041, 1597, 3038, 425,  840,  459,  220,  1325, 3187, 2671,
    2899, 774,  3191, 3226, 1111, 1113, 212,  213,  139,  1612, 216,  3252, 1837, 2004, 965,  447,  1995, 3121, 2672,
    2733, 3544, 2919, 1017, 2046, 945,  231,  2845, 1176, 2847, 1815, 2031, 2904, 464,  3565, 2684, 3452, 97,   98,
    99,   100,  101,  2743, 474,  449,  506,  888,  252,  479,  2867, 2683, 1348, 257,  440,  485,  2674, 487,  488,
    3236, 3455, 3481, 492,  3342, 286,  3582, 496,  2997, 1181, 499,  500,  1618, 1364, 2412, 2689, 505,  2927, 281,
    300,  1194, 510,  511,  2899, 513,  213,  515,  516,  2904, 3108, 1589, 1184, 220,  432,  2726, 3206, 757,  3212,
    1338, 3335, 3336, 938,  3338, 2919, 2229, 433,  3292, 761,  3294, 2557, 313,  169,  394,  501,  3201, -1,   -1,
    -1,   -1,   322,  549,  -1,   -1,   887,  -1,   -1,   -1,   -1,   -1,   350,  3366, 352,  -1,   -1,   -1,   -1,
    339,  -1,   -1,   -1,   -1,   -1,   -1,   2959, 202,  203,  204,  205,  -1,   -1,   -1,   -1,   373,  374,  -1,
    376,  -1,   -1,   286,  -1,   -1,   364,  365,  -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   300,  -1,
    -1,   -1,   -1,   -1,   3414, 2995, 3416, 3417, -1,   3478, -1,   -1,   -1,   -1,   -1,   -1,   -1,   412,  -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   3020, -1,   3022, 3393, 3394, -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   424,  350,  -1,   352,  -1,   -1,   2133, -1,   -1,   -1,
    434,  -1,   -1,   -1,   -1,   -1,   295,  2144, 297,  298,  299,  -1,   -1,   3060, 373,  374,  -1,   376,  307,
    -1,   454,  -1,   -1,   -1,   458,  -1,   -1,   -1,   3445, -1,   3447, -1,   -1,   -1,   -1,   -1,   -1,   471,
    -1,   -1,   -1,   493,  702,  703,  704,  3571, -1,   -1,   -1,   -1,   502,  -1,   -1,   412,  -1,   -1,   -1,
    -1,   -1,   -1,   3477, -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   3486, -1,   -1,   -1,   3120, 3491, 3601,
    736,  -1,   3125, 3126, 369,  -1,   3499, -1,   744,  745,  -1,   -1,   3505, 749,  524,  -1,   3139, -1,   528,
    -1,   756,  -1,   -1,   -1,   -1,   3518, -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   3529, -1,
    -1,   -1,   3561, -1,   -1,   -1,   -1,   3538, -1,   -1,   -1,   -1,   786,  416,  417,  3596, -1,   3548, -1,
    3550, 493,  -1,   -1,   -1,   -1,   -1,   3187, -1,   -1,   502,  3191, -1,   -1,   -1,   -1,   -1,   -1,   3198,
    3569, -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   3585, -1,   -1,
    -1,   3589, -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   841,  -1,   3600, -1,   -1,   -1,   -1,   -1,   -1,
    -1,   851,  -1,   -1,   854,  -1,   -1,   857,  858,  -1,   -1,   -1,   -1,   -1,   -1,   3252, -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   884,  -1,   -1,   -1,
    888,  -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   899,  529,  3288, -1,   -1,   904,  3292, -1,
    3294, 3295, -1,   -1,   540,  541,  -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   3320, -1,   -1,   -1,   -1,   -1,   -1,   3327, 941,  -1,   943,  -1,
    945,  -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   3347, -1,   3349, -1,
    3351, -1,   -1,   -1,   -1,   3327, -1,   -1,   -1,   -1,   -1,   3,    -1,   3364, 978,  -1,   -1,   -1,   -1,
    -1,   -1,   13,   14,   -1,   -1,   -1,   -1,   -1,   -1,   3380, -1,   -1,   -1,   -1,   26,   -1,   28,   -1,
    -1,   -1,   -1,   -1,   3393, 3394, -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   46,   47,   1020,
    -1,   -1,   3410, 52,   -1,   -1,   -1,   56,   57,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    68,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   83,   -1,   -1,   3445,
    -1,   3447, -1,   -1,   -1,   -1,   3452, -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   102,  -1,   -1,   -1,
    1078, -1,   -1,   -1,   -1,   111,  112,  113,  -1,   -1,   -1,   -1,   3477, -1,   -1,   -1,   -1,   -1,   124,
    125,  3485, 3486, -1,   -1,   -1,   3490, 3491, -1,   -1,   -1,   -1,   -1,   -1,   -1,   3499, -1,   -1,   -1,
    -1,   -1,   3505, 147,  -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   3518, -1,   -1,   -1,
    163,  -1,   -1,   -1,   -1,   3527, -1,   3529, -1,   -1,   3532, -1,   -1,   1148, -1,   -1,   3538, 1152, 3540,
    -1,   -1,   -1,   -1,   -1,   -1,   188,  3548, -1,   3550, -1,   1165, 1166, 195,  -1,   -1,   198,  -1,   -1,
    -1,   3561, 1175, 1176, -1,   3565, -1,   -1,   -1,   3569, -1,   3571, -1,   1186, -1,   -1,   -1,   -1,   219,
    -1,   -1,   1194, 3582, -1,   -1,   3585, -1,   -1,   -1,   3589, -1,   -1,   233,  -1,   -1,   1208, 1209, 1210,
    1211, -1,   3600, 3601, -1,   -1,   -1,   -1,   1219, -1,   -1,   -1,   251,  -1,   -1,   -1,   -1,   256,  -1,
    -1,   -1,   -1,   -1,   1234, -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   1281, -1,   -1,   1284, -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   340,  -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   361,  6,    -1,   1336, -1,   1338, -1,   368,  13,   -1,   -1,
    -1,   -1,   -1,   -1,   1348, -1,   1350, 23,   24,   -1,   1354, -1,   -1,   -1,   -1,   1359, 388,  -1,   390,
    391,  -1,   1365, 394,  1367, -1,   397,  -1,   399,  1372, 1373, -1,   1375, 404,  -1,   406,  -1,   52,   -1,
    -1,   -1,   56,   -1,   -1,   415,  -1,   -1,   -1,   419,  -1,   -1,   66,   -1,   -1,   425,  -1,   -1,   -1,
    -1,   430,  75,   -1,   -1,   434,  -1,   80,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    92,   -1,   -1,   -1,   -1,   453,  -1,   -1,   -1,   457,  -1,   -1,   -1,   -1,   -1,   107,  -1,   -1,   110,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   119,  -1,   -1,   -1,   -1,   -1,   125,  -1,   -1,   -1,   -1,
    -1,   -1,   -1,   133,  -1,   491,  -1,   -1,   -1,   139,  -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   507,  -1,   -1,   510,  -1,   -1,   -1,   514,  -1,   -1,   -1,   -1,   -1,   164,  -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   537,  13,   14,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   26,   -1,   -1,   -1,   -1,   -1,   -1,   558,  -1,   -1,   -1,
    -1,   1535, -1,   1537, -1,   -1,   -1,   213,  -1,   46,   47,   -1,   -1,   -1,   220,  52,   -1,   -1,   -1,
    56,   57,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   68,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   83,   -1,   -1,   -1,   -1,   -1,   1586, -1,   -1,   1589, -1,
    -1,   -1,   -1,   -1,   1595, 1596, 1597, 1598, 102,  -1,   -1,   -1,   -1,   -1,   1605, 1606, 1607, 111,  112,
    113,  -1,   -1,   -1,   286,  -1,   -1,   -1,   -1,   -1,   -1,   124,  125,  1623, -1,   -1,   -1,   -1,   300,
    -1,   -1,   -1,   1632, 305,  -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   147,  -1,   -1,   -1,
    1648, -1,   -1,   -1,   1652, -1,   -1,   -1,   -1,   -1,   -1,   -1,   163,  -1,   -1,   -1,   1664, -1,   -1,
    -1,   -1,   -1,   1670, -1,   344,  -1,   -1,   -1,   -1,   -1,   350,  -1,   352,  -1,   -1,   -1,   -1,   188,
    -1,   -1,   -1,   -1,   -1,   -1,   195,  -1,   -1,   198,  -1,   -1,   -1,   -1,   -1,   373,  374,  -1,   376,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   219,  -1,   390,  -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   1728, -1,   233,  1731, -1,   -1,   -1,   -1,   -1,   -1,   1738, -1,   412,  -1,   -1,
    -1,   -1,   -1,   -1,   -1,   251,  -1,   -1,   -1,   -1,   256,  -1,   -1,   -1,   -1,   -1,   -1,   1760, -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   1773, 1774, -1,   -1,   1777, -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   31,   32,   -1,
    -1,   -1,   493,  37,   -1,   39,   40,   41,   -1,   -1,   1829, 502,  -1,   -1,   -1,   -1,   -1,   1836, 340,
    -1,   -1,   55,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   1849, -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   361,  -1,   -1,   -1,   -1,   -1,   -1,   368,  -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   93,   -1,   -1,   96,   -1,   -1,   -1,   388,  -1,   390,  391,  104,  -1,   394,  -1,   -1,   397,
    1895, 399,  -1,   -1,   -1,   -1,   404,  -1,   406,  -1,   -1,   -1,   -1,   123,  -1,   -1,   -1,   415,  -1,
    -1,   -1,   419,  -1,   -1,   -1,   -1,   -1,   425,  -1,   -1,   140,  -1,   430,  -1,   -1,   -1,   434,  -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   160,  -1,   162,  -1,   -1,   453,  -1,
    -1,   -1,   457,  -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   181,  182,  -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   491,  -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   507,  2005, -1,   510,  223,
    -1,   -1,   514,  -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   2032, -1,   537,  250,  -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   259,  260,  -1,
    262,  -1,   -1,   2050, 2051, -1,   -1,   -1,   558,  -1,   2057, -1,   2059, 2060, -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   290,  291,  292,  -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   2093, -1,   310,  311,  312,  -1,   -1,   -1,   316,  -1,   -1,
    319,  -1,   2106, 2107, -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   2116, 332,  333,  -1,   -1,   -1,   2122,
    -1,   -1,   2125, -1,   -1,   2128, -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   2139, 2140, 356,
    2142, 358,  -1,   -1,   -1,   -1,   2148, -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   2157, -1,   2159, -1,
    -1,   -1,   2163, 2164, 380,  -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   2202, -1,   -1,   -1,   2206, 2207, 423,  -1,   425,  -1,   -1,   -1,   -1,   -1,   -1,   2217,
    -1,   -1,   435,  -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   2229, -1,   2231, 2232, 2233, 2234, -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   476,  477,  -1,   -1,   480,  481,  482,  483,  -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   522,  523,  -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   417,  -1,   541,  -1,   -1,   -1,   -1,   -1,
    -1,   31,   32,   -1,   -1,   -1,   -1,   37,   2340, 39,   40,   41,   -1,   560,  -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   55,   2358, -1,   -1,   -1,   2362, -1,   -1,   2365, -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   2380, 2381, 2382, -1,   -1,   -1,   -1,   -1,   -1,
    2389, -1,   -1,   -1,   -1,   -1,   93,   2396, -1,   96,   -1,   -1,   -1,   2402, -1,   2404, -1,   104,  -1,
    -1,   -1,   2410, -1,   -1,   -1,   -1,   508,  -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   123,  -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   140,  -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   160,  -1,   162,
    -1,   -1,   -1,   -1,   -1,   -1,   2471, -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   2482, 181,
    182,  2485, -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   2516, -1,   -1,   -1,   -1,   -1,
    -1,   2523, -1,   223,  2526, 620,  -1,   -1,   2530, 2531, -1,   -1,   2534, -1,   -1,   -1,   -1,   -1,   -1,
    2541, -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   250,  -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   259,  260,  -1,   262,  -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   290,  291,  292,  -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   696,  -1,   -1,   -1,   700,  -1,   -1,   -1,   -1,   310,  311,  312,  -1,   -1,
    -1,   316,  -1,   -1,   319,  -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   332,  333,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   356,  -1,   358,  -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   380,  -1,   -1,   -1,   -1,   -1,   -1,   2689, 2690, -1,   2692,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   2700, -1,   -1,   -1,   -1,   -1,   -1,   -1,   2708, -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   2718, -1,   -1,   -1,   -1,   -1,   -1,   423,  2726, 425,  -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   435,  -1,   -1,   -1,   -1,   -1,   2743, -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   2755, -1,   -1,   -1,   -1,   -1,   -1,   2762, -1,   -1,   -1,   -1,   -1,   861,
    -1,   -1,   2771, -1,   -1,   -1,   -1,   -1,   -1,   476,  477,  -1,   -1,   480,  481,  482,  483,  -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   522,  523,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   541,  -1,
    2845, -1,   2847, -1,   -1,   -1,   -1,   -1,   946,  947,  948,  -1,   -1,   -1,   -1,   -1,   -1,   955,  956,
    -1,   -1,   959,  2867, 961,  962,  963,  964,  -1,   -1,   -1,   968,  -1,   -1,   971,  972,  -1,   974,  -1,
    976,  977,  -1,   979,  980,  981,  982,  983,  -1,   -1,   -1,   987,  -1,   989,  990,  991,  2899, 993,  994,
    995,  996,  2904, 998,  999,  -1,   1001, -1,   -1,   1004, 1005, 1006, -1,   1008, 1009, 1010, 1011, 2919, 1013,
    1014, 1015, 1016, -1,   -1,   -1,   -1,   -1,   1022, 1023, -1,   1025, 1026, 1027, 1028, 1029, -1,   -1,   -1,
    -1,   1034, -1,   1036, 1037, 1038, 1039, 1040, -1,   -1,   1043, 1044, 1045, 1046, 1047, 1048, -1,   1050, 1051,
    2959, -1,   1054, 1055, 1056, -1,   1058, -1,   1060, -1,   -1,   -1,   1064, -1,   1066, 1067, -1,   -1,   -1,
    -1,   1072, -1,   -1,   -1,   -1,   -1,   -1,   -1,   1080, 1081, 1082, -1,   -1,   -1,   -1,   -1,   2995, -1,
    1090, -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   3020, -1,   3022, -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   3060, -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   1194, -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   1203,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   3120, -1,   -1,   -1,   -1,   3125, 3126, -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   3139, -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   3198, -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   3252, -1,   -1,   -1,   -1,   -1,   -1,   1352, -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   3288, -1,   -1,   -1,   -1,   -1,   -1,   3295, -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    3320, -1,   -1,   -1,   -1,   -1,   -1,   3327, -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   3347, -1,   3349, -1,   3351, -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   3364, -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   3380, -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   3410, -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   1513, 1514, 1515, -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   1536, -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   3452,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   1576, -1,   3485, -1,   -1,   -1,   -1,   3490,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   1592, -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   3527, -1,
    -1,   -1,   -1,   3532, -1,   -1,   -1,   -1,   -1,   -1,   -1,   3540, -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   3561, -1,   -1,   -1,   3565, -1,
    -1,   -1,   -1,   -1,   3571, -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   3582, -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   3601, -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   1740, -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   1816, -1,   -1,   1819, -1,   -1,   1822, 1823, -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   1835, -1,   -1,   1838, -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   1851, -1,   1853, -1,   -1,   -1,   1857, -1,   1859, 1860, -1,   -1,   -1,   1864, -1,   1866, 1867, -1,
    1869, -1,   -1,   1872, -1,   1874, 1875, -1,   -1,   -1,   -1,   1880, 1881, -1,   -1,   1884, -1,   1886, -1,
    1888, -1,   1890, -1,   1892, -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   1903, 1904, -1,   -1,
    1907, -1,   1909, -1,   -1,   -1,   -1,   -1,   -1,   -1,   1917, 1918, -1,   1920, -1,   1922, -1,   -1,   1925,
    1926, 1927, -1,   1929, -1,   -1,   -1,   -1,   1934, 1935, 1936, 1937, -1,   -1,   -1,   -1,   1942, 1943, 1944,
    -1,   1946, -1,   1948, -1,   1950, -1,   1952, -1,   1954, -1,   -1,   -1,   -1,   -1,   -1,   1961, -1,   1963,
    -1,   -1,   1966, -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   5,    -1,   7,    8,
    9,    10,   11,   -1,   -1,   -1,   -1,   -1,   17,   -1,   -1,   -1,   -1,   -1,   23,   24,   25,   -1,   -1,
    -1,   -1,   30,   -1,   -1,   33,   -1,   -1,   -1,   37,   -1,   -1,   40,   41,   -1,   43,   -1,   -1,   -1,
    -1,   -1,   49,   -1,   51,   -1,   53,   -1,   -1,   -1,   -1,   58,   59,   -1,   -1,   -1,   63,   64,   -1,
    -1,   67,   -1,   69,   70,   -1,   -1,   73,   -1,   -1,   76,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    85,   -1,   -1,   -1,   -1,   -1,   -1,   92,   93,   -1,   -1,   96,   -1,   -1,   -1,   -1,   101,  -1,   -1,
    -1,   -1,   -1,   -1,   108,  -1,   110,  -1,   -1,   -1,   -1,   -1,   116,  -1,   118,  119,  120,  -1,   -1,
    -1,   -1,   -1,   -1,   127,  128,  129,  -1,   -1,   -1,   133,  -1,   -1,   -1,   -1,   138,  139,  140,  -1,
    -1,   143,  -1,   145,  146,  -1,   -1,   -1,   150,  -1,   152,  -1,   -1,   155,  -1,   -1,   158,  159,  160,
    -1,   -1,   -1,   -1,   -1,   -1,   2236, 168,  169,  -1,   2240, 172,  -1,   174,  -1,   -1,   -1,   -1,   -1,
    -1,   181,  182,  -1,   -1,   185,  186,  -1,   -1,   189,  -1,   -1,   -1,   -1,   -1,   -1,   196,  -1,   -1,
    -1,   -1,   201,  -1,   -1,   -1,   205,  206,  207,  208,  -1,   -1,   211,  212,  -1,   -1,   -1,   216,  -1,
    -1,   -1,   220,  -1,   -1,   -1,   224,  -1,   -1,   227,  228,  -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    237,  -1,   -1,   -1,   241,  -1,   -1,   244,  -1,   2315, -1,   -1,   -1,   250,  -1,   252,  -1,   -1,   255,
    2325, 257,  2327, -1,   2329, -1,   -1,   -1,   -1,   -1,   2335, 267,  268,  269,  270,  271,  272,  -1,   274,
    275,  276,  277,  278,  279,  280,  281,  282,  2352, 284,  285,  286,  -1,   288,  289,  -1,   -1,   -1,   293,
    294,  295,  296,  -1,   -1,   299,  300,  -1,   -1,   303,  -1,   305,  -1,   307,  -1,   -1,   310,  311,  312,
    313,  314,  315,  316,  -1,   -1,   319,  320,  -1,   322,  323,  324,  -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   333,  334,  335,  2405, 337,  338,  -1,   2409, -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   350,
    351,  352,  -1,   354,  -1,   356,  -1,   358,  -1,   -1,   -1,   362,  -1,   364,  -1,   366,  367,  -1,   369,
    370,  371,  372,  373,  374,  375,  376,  -1,   -1,   -1,   -1,   381,  382,  2452, -1,   385,  386,  387,  -1,
    389,  -1,   -1,   392,  -1,   -1,   395,  -1,   2466, 398,  -1,   -1,   401,  402,  -1,   -1,   -1,   -1,   407,
    -1,   409,  410,  -1,   412,  413,  414,  -1,   -1,   417,  -1,   -1,   -1,   -1,   422,  423,  424,  -1,   -1,
    427,  -1,   -1,   -1,   431,  -1,   433,  -1,   -1,   436,  437,  -1,   -1,   -1,   -1,   -1,   -1,   444,  445,
    -1,   447,  -1,   -1,   450,  -1,   -1,   -1,   454,  -1,   -1,   -1,   458,  -1,   460,  461,  462,  -1,   -1,
    -1,   466,  467,  -1,   469,  470,  -1,   472,  473,  -1,   -1,   476,  477,  478,  479,  480,  -1,   -1,   -1,
    -1,   -1,   486,  -1,   488,  -1,   -1,   -1,   492,  493,  494,  -1,   -1,   497,  498,  -1,   -1,   -1,   -1,
    -1,   -1,   -1,   506,  -1,   -1,   509,  -1,   -1,   512,  513,  -1,   -1,   -1,   -1,   -1,   -1,   -1,   521,
    2591, -1,   524,  -1,   -1,   527,  528,  529,  -1,   -1,   2601, -1,   534,  -1,   536,  -1,   2607, -1,   -1,
    541,  -1,   -1,   -1,   -1,   -1,   2616, 2617, -1,   -1,   -1,   -1,   2622, -1,   -1,   -1,   2626, -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   2639, -1,   -1,   -1,   -1,   -1,   2645, -1,   -1,
    2648, 2649, -1,   2651, 2652, -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   2666,
    2667, -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   2727, -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   2942, 2943, -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   2953, -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   3068, -1,   -1,   -1,   -1,   -1,   3074, -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   3087, -1,   -1,   -1,   -1,   -1,   -1,   -1,   3095, -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   3108, -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   3230, -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   3245, -1,   3247, -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   3323, -1,   -1,   -1,   -1,   -1,   -1,   3330, -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   3383, -1,   -1,   -1,   -1,   3388,
    -1,   3390, -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   3420, -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   3448, -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   3469, -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   5,    -1,   7,    8,    9,
    10,   11,   -1,   -1,   -1,   -1,   -1,   17,   -1,   -1,   20,   3495, 22,   23,   24,   25,   26,   -1,   28,
    29,   30,   -1,   32,   33,   34,   35,   36,   37,   38,   -1,   40,   41,   42,   43,   -1,   45,   46,   -1,
    3522, 49,   50,   51,   -1,   53,   54,   55,   56,   -1,   58,   59,   60,   61,   -1,   63,   64,   -1,   66,
    67,   68,   69,   70,   71,   72,   73,   -1,   -1,   76,   -1,   78,   -1,   80,   81,   82,   -1,   -1,   85,
    86,   87,   -1,   89,   90,   -1,   92,   93,   94,   95,   96,   -1,   3572, -1,   -1,   101,  102,  103,  -1,
    -1,   106,  107,  108,  -1,   110,  -1,   -1,   -1,   114,  115,  116,  -1,   118,  119,  120,  -1,   -1,   -1,
    124,  -1,   -1,   127,  128,  129,  -1,   -1,   132,  133,  -1,   135,  136,  137,  138,  139,  140,  -1,   -1,
    143,  -1,   145,  146,  147,  148,  -1,   150,  151,  152,  153,  154,  155,  -1,   157,  158,  159,  160,  161,
    -1,   163,  -1,   -1,   166,  -1,   168,  169,  -1,   171,  172,  -1,   174,  175,  176,  177,  178,  -1,   180,
    181,  182,  183,  184,  185,  186,  -1,   -1,   189,  190,  -1,   192,  193,  -1,   195,  196,  -1,   198,  199,
    -1,   201,  -1,   -1,   -1,   205,  206,  207,  208,  209,  -1,   211,  212,  -1,   -1,   -1,   216,  -1,   -1,
    219,  220,  221,  -1,   -1,   224,  -1,   -1,   227,  228,  -1,   -1,   -1,   -1,   -1,   -1,   235,  236,  237,
    -1,   239,  240,  241,  -1,   243,  244,  -1,   -1,   -1,   248,  -1,   250,  -1,   252,  253,  -1,   255,  -1,
    257,  258,  -1,   -1,   261,  -1,   -1,   -1,   -1,   266,  267,  268,  269,  270,  271,  272,  273,  274,  275,
    276,  277,  278,  279,  280,  281,  282,  283,  284,  285,  286,  287,  288,  289,  -1,   -1,   -1,   293,  294,
    295,  296,  -1,   -1,   299,  300,  301,  302,  303,  -1,   305,  306,  307,  308,  309,  310,  311,  312,  313,
    314,  315,  316,  -1,   318,  319,  320,  -1,   322,  323,  324,  325,  326,  327,  328,  -1,   330,  331,  -1,
    333,  334,  335,  -1,   337,  338,  339,  -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   350,  351,
    352,  353,  354,  355,  356,  357,  358,  359,  -1,   361,  362,  -1,   364,  -1,   366,  367,  -1,   369,  370,
    371,  372,  373,  374,  375,  376,  377,  -1,   -1,   -1,   381,  382,  -1,   -1,   385,  386,  387,  -1,   389,
    -1,   391,  392,  393,  394,  395,  -1,   397,  398,  399,  -1,   401,  402,  -1,   -1,   405,  406,  407,  408,
    409,  410,  411,  412,  413,  414,  415,  -1,   417,  418,  -1,   -1,   -1,   422,  423,  424,  -1,   -1,   427,
    -1,   -1,   -1,   431,  432,  433,  434,  -1,   436,  437,  -1,   -1,   -1,   -1,   -1,   -1,   444,  445,  -1,
    447,  -1,   -1,   450,  -1,   -1,   453,  454,  455,  456,  457,  458,  -1,   460,  461,  462,  463,  464,  465,
    466,  467,  468,  469,  470,  -1,   472,  473,  -1,   475,  476,  477,  478,  479,  480,  -1,   -1,   -1,   -1,
    485,  486,  -1,   488,  489,  490,  491,  492,  493,  494,  -1,   496,  497,  498,  499,  -1,   501,  -1,   -1,
    504,  505,  506,  -1,   -1,   509,  -1,   -1,   512,  513,  -1,   -1,   516,  517,  518,  519,  520,  521,  -1,
    -1,   524,  525,  -1,   527,  528,  529,  -1,   -1,   -1,   -1,   534,  -1,   536,  537,  -1,   539,  -1,   541,
    -1,   -1,   -1,   -1,   546,  -1,   -1,   -1,   550,  551,  -1,   -1,   -1,   -1,   556,  -1,   558,  -1,   -1,
    561,  562,  -1,   564,  565,  5,    -1,   7,    8,    9,    10,   11,   12,   -1,   -1,   -1,   -1,   17,   -1,
    -1,   20,   -1,   22,   23,   24,   25,   26,   -1,   28,   29,   30,   -1,   32,   33,   34,   35,   36,   37,
    38,   -1,   40,   41,   -1,   43,   -1,   45,   46,   -1,   -1,   49,   50,   51,   -1,   53,   54,   55,   56,
    -1,   58,   59,   60,   61,   -1,   63,   64,   -1,   66,   67,   68,   69,   70,   71,   72,   73,   -1,   -1,
    76,   -1,   78,   -1,   80,   81,   82,   -1,   -1,   85,   86,   87,   -1,   89,   90,   -1,   92,   93,   94,
    95,   96,   -1,   -1,   -1,   -1,   101,  102,  103,  -1,   -1,   106,  107,  108,  -1,   110,  -1,   -1,   -1,
    114,  115,  116,  -1,   118,  119,  120,  -1,   -1,   -1,   124,  -1,   -1,   127,  128,  129,  -1,   -1,   132,
    133,  -1,   135,  136,  137,  138,  139,  140,  -1,   -1,   143,  -1,   145,  146,  147,  148,  -1,   150,  151,
    152,  153,  154,  155,  -1,   157,  158,  159,  160,  161,  -1,   163,  -1,   -1,   166,  -1,   168,  169,  -1,
    171,  172,  -1,   174,  175,  176,  177,  178,  -1,   180,  181,  182,  183,  184,  185,  186,  -1,   -1,   189,
    190,  -1,   192,  193,  -1,   195,  196,  -1,   198,  199,  -1,   201,  -1,   -1,   -1,   205,  206,  207,  208,
    209,  -1,   211,  212,  -1,   -1,   -1,   216,  -1,   -1,   219,  220,  221,  -1,   -1,   224,  -1,   -1,   227,
    228,  -1,   -1,   -1,   -1,   -1,   -1,   235,  236,  237,  -1,   -1,   240,  241,  -1,   243,  244,  -1,   -1,
    -1,   248,  -1,   250,  -1,   252,  253,  -1,   255,  -1,   257,  258,  -1,   -1,   261,  -1,   -1,   -1,   -1,
    266,  267,  268,  269,  270,  271,  272,  273,  274,  275,  276,  277,  278,  279,  280,  281,  282,  283,  284,
    285,  286,  287,  288,  289,  -1,   -1,   -1,   293,  294,  295,  296,  -1,   -1,   299,  300,  301,  302,  303,
    -1,   305,  306,  307,  308,  309,  310,  311,  312,  313,  314,  315,  316,  -1,   318,  319,  320,  -1,   322,
    323,  324,  325,  326,  327,  328,  -1,   330,  331,  -1,   333,  334,  335,  336,  337,  338,  339,  -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   350,  351,  352,  353,  354,  355,  356,  357,  358,  359,  -1,
    361,  362,  -1,   364,  -1,   366,  367,  -1,   369,  370,  371,  372,  373,  374,  375,  376,  377,  -1,   -1,
    -1,   381,  382,  -1,   -1,   385,  386,  387,  -1,   389,  -1,   391,  392,  393,  394,  395,  -1,   397,  398,
    399,  -1,   401,  402,  -1,   -1,   405,  406,  407,  408,  409,  410,  411,  412,  413,  414,  415,  -1,   417,
    418,  -1,   -1,   -1,   422,  423,  424,  -1,   -1,   427,  -1,   -1,   -1,   431,  432,  433,  434,  -1,   436,
    437,  -1,   -1,   -1,   -1,   -1,   -1,   444,  445,  -1,   447,  -1,   -1,   450,  -1,   -1,   453,  454,  455,
    456,  457,  458,  -1,   460,  461,  462,  463,  464,  465,  466,  467,  468,  469,  470,  -1,   472,  473,  -1,
    475,  476,  477,  478,  479,  480,  -1,   -1,   -1,   -1,   -1,   486,  -1,   488,  489,  490,  491,  492,  493,
    494,  -1,   496,  497,  498,  499,  -1,   501,  -1,   -1,   504,  505,  506,  -1,   -1,   509,  -1,   -1,   512,
    513,  -1,   -1,   516,  517,  518,  519,  520,  521,  -1,   -1,   524,  525,  -1,   527,  528,  529,  -1,   -1,
    -1,   -1,   534,  -1,   536,  537,  -1,   539,  -1,   541,  -1,   -1,   -1,   -1,   546,  -1,   -1,   -1,   550,
    551,  -1,   -1,   -1,   -1,   556,  -1,   558,  -1,   -1,   561,  562,  -1,   564,  565,  5,    -1,   7,    8,
    9,    10,   11,   -1,   -1,   -1,   -1,   -1,   17,   -1,   -1,   20,   -1,   22,   23,   24,   25,   26,   -1,
    28,   29,   30,   -1,   32,   33,   34,   35,   36,   37,   38,   -1,   40,   41,   -1,   43,   -1,   45,   46,
    -1,   -1,   49,   50,   51,   -1,   53,   54,   55,   56,   -1,   58,   59,   60,   61,   -1,   63,   64,   -1,
    66,   67,   68,   69,   70,   71,   72,   73,   -1,   -1,   76,   -1,   78,   -1,   80,   81,   82,   -1,   -1,
    85,   86,   87,   -1,   89,   90,   -1,   92,   93,   94,   95,   96,   -1,   -1,   -1,   -1,   101,  102,  103,
    -1,   -1,   106,  107,  108,  -1,   110,  -1,   -1,   -1,   114,  115,  116,  -1,   118,  119,  120,  -1,   -1,
    -1,   124,  -1,   -1,   127,  128,  129,  -1,   -1,   132,  133,  -1,   135,  136,  137,  138,  139,  140,  -1,
    -1,   143,  -1,   145,  146,  147,  148,  -1,   150,  151,  152,  153,  154,  155,  -1,   157,  158,  159,  160,
    161,  -1,   163,  -1,   -1,   166,  -1,   168,  169,  -1,   171,  172,  -1,   174,  175,  176,  177,  178,  -1,
    180,  181,  182,  183,  184,  185,  186,  -1,   -1,   189,  190,  -1,   192,  193,  -1,   195,  196,  -1,   198,
    199,  -1,   201,  -1,   -1,   -1,   205,  206,  207,  208,  209,  -1,   211,  212,  -1,   -1,   -1,   216,  -1,
    -1,   219,  220,  221,  -1,   -1,   224,  -1,   -1,   227,  228,  -1,   -1,   -1,   -1,   -1,   -1,   235,  236,
    237,  -1,   -1,   240,  241,  -1,   243,  244,  -1,   -1,   -1,   248,  -1,   250,  -1,   252,  253,  -1,   255,
    -1,   257,  258,  -1,   -1,   261,  -1,   -1,   -1,   -1,   266,  267,  268,  269,  270,  271,  272,  273,  274,
    275,  276,  277,  278,  279,  280,  281,  282,  283,  284,  285,  286,  287,  288,  289,  -1,   -1,   -1,   293,
    294,  295,  296,  -1,   -1,   299,  300,  301,  302,  303,  -1,   305,  306,  307,  308,  309,  310,  311,  312,
    313,  314,  315,  316,  -1,   318,  319,  320,  -1,   322,  323,  324,  325,  326,  327,  328,  -1,   330,  331,
    -1,   333,  334,  335,  -1,   337,  338,  339,  -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   350,
    351,  352,  353,  354,  355,  356,  357,  358,  359,  -1,   361,  362,  -1,   364,  -1,   366,  367,  -1,   369,
    370,  371,  372,  373,  374,  375,  376,  377,  -1,   -1,   -1,   381,  382,  -1,   -1,   385,  386,  387,  -1,
    389,  -1,   391,  392,  393,  394,  395,  -1,   397,  398,  399,  -1,   401,  402,  -1,   -1,   405,  406,  407,
    408,  409,  410,  411,  412,  413,  414,  415,  -1,   417,  418,  419,  -1,   -1,   422,  423,  424,  -1,   -1,
    427,  -1,   -1,   -1,   431,  432,  433,  434,  -1,   436,  437,  -1,   -1,   -1,   -1,   -1,   -1,   444,  445,
    -1,   447,  -1,   -1,   450,  -1,   -1,   453,  454,  455,  456,  457,  458,  -1,   460,  461,  462,  463,  464,
    465,  466,  467,  468,  469,  470,  -1,   472,  473,  -1,   475,  476,  477,  478,  479,  480,  -1,   -1,   -1,
    -1,   -1,   486,  -1,   488,  489,  490,  491,  492,  493,  494,  -1,   496,  497,  498,  499,  -1,   501,  -1,
    -1,   504,  505,  506,  -1,   -1,   509,  -1,   -1,   512,  513,  -1,   -1,   516,  517,  518,  519,  520,  521,
    -1,   -1,   524,  525,  -1,   527,  528,  529,  -1,   -1,   -1,   -1,   534,  -1,   536,  537,  -1,   539,  -1,
    541,  -1,   -1,   -1,   -1,   546,  -1,   -1,   -1,   550,  551,  -1,   -1,   -1,   -1,   556,  -1,   558,  -1,
    -1,   561,  562,  -1,   564,  565,  5,    -1,   7,    8,    9,    10,   11,   -1,   -1,   -1,   -1,   -1,   17,
    -1,   -1,   20,   -1,   22,   23,   24,   25,   26,   -1,   28,   29,   30,   -1,   32,   33,   34,   35,   36,
    37,   38,   -1,   40,   41,   -1,   43,   -1,   45,   46,   -1,   -1,   49,   50,   51,   -1,   53,   54,   55,
    56,   -1,   58,   59,   60,   61,   -1,   63,   64,   -1,   66,   67,   68,   69,   70,   71,   72,   73,   -1,
    -1,   76,   -1,   78,   -1,   80,   81,   82,   -1,   -1,   85,   86,   87,   -1,   89,   90,   -1,   92,   93,
    94,   95,   96,   -1,   -1,   -1,   -1,   101,  102,  103,  -1,   -1,   106,  107,  108,  -1,   110,  -1,   -1,
    -1,   114,  115,  116,  -1,   118,  119,  120,  -1,   -1,   -1,   124,  -1,   -1,   127,  128,  129,  -1,   -1,
    132,  133,  -1,   135,  136,  137,  138,  139,  140,  -1,   -1,   143,  -1,   145,  146,  147,  148,  -1,   150,
    151,  152,  153,  154,  155,  -1,   157,  158,  159,  160,  161,  -1,   163,  -1,   -1,   166,  -1,   168,  169,
    -1,   171,  172,  -1,   174,  175,  176,  177,  178,  -1,   180,  181,  182,  183,  184,  185,  186,  -1,   -1,
    189,  190,  -1,   192,  193,  -1,   195,  196,  -1,   198,  199,  -1,   201,  -1,   -1,   -1,   205,  206,  207,
    208,  209,  -1,   211,  212,  -1,   -1,   -1,   216,  -1,   -1,   219,  220,  221,  -1,   -1,   224,  -1,   -1,
    227,  228,  -1,   -1,   -1,   -1,   -1,   -1,   235,  236,  237,  -1,   -1,   240,  241,  -1,   243,  244,  -1,
    -1,   -1,   248,  -1,   250,  -1,   252,  253,  -1,   255,  -1,   257,  258,  -1,   -1,   261,  -1,   -1,   -1,
    -1,   266,  267,  268,  269,  270,  271,  272,  273,  274,  275,  276,  277,  278,  279,  280,  281,  282,  283,
    284,  285,  286,  287,  288,  289,  -1,   -1,   -1,   293,  294,  295,  296,  -1,   -1,   299,  300,  301,  302,
    303,  -1,   305,  306,  307,  308,  309,  310,  311,  312,  313,  314,  315,  316,  -1,   318,  319,  320,  -1,
    322,  323,  324,  325,  326,  327,  328,  -1,   330,  331,  -1,   333,  334,  335,  -1,   337,  338,  339,  -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   350,  351,  352,  353,  354,  355,  356,  357,  358,  359,
    -1,   361,  362,  -1,   364,  -1,   366,  367,  -1,   369,  370,  371,  372,  373,  374,  375,  376,  377,  -1,
    -1,   -1,   381,  382,  -1,   -1,   385,  386,  387,  -1,   389,  -1,   391,  392,  393,  394,  395,  -1,   397,
    398,  399,  -1,   401,  402,  -1,   -1,   405,  406,  407,  408,  409,  410,  411,  412,  413,  414,  415,  -1,
    417,  418,  -1,   -1,   -1,   422,  423,  424,  -1,   -1,   427,  -1,   -1,   -1,   431,  432,  433,  434,  -1,
    436,  437,  -1,   -1,   -1,   -1,   -1,   -1,   444,  445,  -1,   447,  -1,   -1,   450,  -1,   -1,   453,  454,
    455,  456,  457,  458,  -1,   460,  461,  462,  463,  464,  465,  466,  467,  468,  469,  470,  -1,   472,  473,
    -1,   475,  476,  477,  478,  479,  480,  -1,   -1,   -1,   -1,   -1,   486,  -1,   488,  489,  490,  491,  492,
    493,  494,  -1,   496,  497,  498,  499,  -1,   501,  -1,   -1,   504,  505,  506,  -1,   -1,   509,  -1,   -1,
    512,  513,  -1,   -1,   516,  517,  518,  519,  520,  521,  -1,   -1,   524,  525,  -1,   527,  528,  529,  -1,
    -1,   -1,   -1,   534,  -1,   536,  537,  -1,   539,  -1,   541,  -1,   -1,   -1,   -1,   546,  -1,   -1,   -1,
    550,  551,  -1,   -1,   -1,   -1,   556,  -1,   558,  559,  -1,   561,  562,  -1,   564,  565,  5,    -1,   7,
    8,    9,    10,   11,   -1,   -1,   -1,   -1,   -1,   17,   -1,   -1,   20,   -1,   22,   23,   24,   25,   26,
    -1,   28,   29,   30,   -1,   32,   33,   34,   35,   36,   37,   38,   -1,   40,   41,   -1,   43,   -1,   45,
    46,   -1,   -1,   49,   50,   51,   -1,   53,   54,   55,   56,   -1,   58,   59,   60,   61,   -1,   63,   64,
    -1,   66,   67,   68,   69,   70,   71,   72,   73,   -1,   -1,   76,   -1,   78,   -1,   80,   81,   82,   -1,
    -1,   85,   86,   87,   -1,   89,   90,   -1,   92,   93,   94,   95,   96,   -1,   -1,   -1,   -1,   101,  102,
    103,  -1,   -1,   106,  107,  108,  -1,   110,  -1,   -1,   -1,   114,  115,  116,  -1,   118,  119,  120,  -1,
    -1,   -1,   124,  -1,   -1,   127,  128,  129,  -1,   -1,   132,  133,  -1,   135,  136,  137,  138,  139,  140,
    -1,   -1,   143,  -1,   145,  146,  147,  148,  -1,   150,  151,  152,  153,  154,  155,  -1,   157,  158,  159,
    160,  161,  -1,   163,  -1,   -1,   166,  -1,   168,  169,  -1,   171,  172,  -1,   174,  175,  176,  177,  178,
    -1,   180,  181,  182,  183,  184,  185,  186,  -1,   -1,   189,  190,  -1,   192,  193,  -1,   195,  196,  -1,
    198,  199,  -1,   201,  -1,   -1,   -1,   205,  206,  207,  208,  209,  -1,   211,  212,  -1,   -1,   -1,   216,
    -1,   -1,   219,  220,  221,  -1,   -1,   224,  -1,   -1,   227,  228,  -1,   -1,   -1,   -1,   -1,   -1,   235,
    236,  237,  -1,   -1,   240,  241,  -1,   243,  244,  -1,   -1,   -1,   248,  -1,   250,  -1,   252,  253,  -1,
    255,  -1,   257,  258,  -1,   -1,   261,  -1,   -1,   -1,   -1,   266,  267,  268,  269,  270,  271,  272,  273,
    274,  275,  276,  277,  278,  279,  280,  281,  282,  283,  284,  285,  286,  287,  288,  289,  -1,   -1,   -1,
    293,  294,  295,  296,  -1,   -1,   299,  300,  301,  302,  303,  -1,   305,  306,  307,  308,  309,  310,  311,
    312,  313,  314,  315,  316,  -1,   318,  319,  320,  -1,   322,  323,  324,  325,  326,  327,  328,  -1,   330,
    331,  -1,   333,  334,  335,  -1,   337,  338,  339,  -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    350,  351,  352,  353,  354,  355,  356,  357,  358,  359,  -1,   361,  362,  -1,   364,  -1,   366,  367,  -1,
    369,  370,  371,  372,  373,  374,  375,  376,  377,  -1,   -1,   -1,   381,  382,  -1,   -1,   385,  386,  387,
    -1,   389,  -1,   391,  392,  393,  394,  395,  -1,   397,  398,  399,  -1,   401,  402,  -1,   -1,   405,  406,
    407,  408,  409,  410,  411,  412,  413,  414,  415,  -1,   417,  418,  -1,   -1,   -1,   422,  423,  424,  -1,
    -1,   427,  -1,   -1,   -1,   431,  432,  433,  434,  -1,   436,  437,  -1,   -1,   -1,   -1,   -1,   -1,   444,
    445,  -1,   447,  -1,   -1,   450,  -1,   -1,   453,  454,  455,  456,  457,  458,  -1,   460,  461,  462,  463,
    464,  465,  466,  467,  468,  469,  470,  -1,   472,  473,  -1,   475,  476,  477,  478,  479,  480,  -1,   -1,
    -1,   -1,   -1,   486,  -1,   488,  489,  490,  491,  492,  493,  494,  -1,   496,  497,  498,  499,  -1,   501,
    -1,   -1,   504,  505,  506,  -1,   -1,   509,  -1,   -1,   512,  513,  -1,   -1,   516,  517,  518,  519,  520,
    521,  -1,   -1,   524,  525,  -1,   527,  528,  529,  -1,   -1,   -1,   -1,   534,  -1,   536,  537,  -1,   539,
    -1,   541,  -1,   -1,   -1,   -1,   546,  -1,   -1,   -1,   550,  551,  -1,   -1,   -1,   -1,   556,  -1,   558,
    559,  -1,   561,  562,  -1,   564,  565,  5,    -1,   7,    8,    9,    10,   11,   -1,   -1,   -1,   -1,   -1,
    17,   -1,   -1,   20,   -1,   22,   23,   24,   25,   26,   -1,   28,   29,   30,   -1,   32,   33,   34,   35,
    36,   37,   38,   -1,   40,   41,   -1,   43,   -1,   45,   46,   -1,   -1,   49,   50,   51,   -1,   53,   54,
    55,   56,   -1,   58,   59,   60,   61,   -1,   63,   64,   -1,   66,   67,   68,   69,   70,   71,   72,   73,
    -1,   -1,   76,   -1,   78,   -1,   80,   81,   82,   -1,   -1,   85,   86,   87,   -1,   89,   90,   -1,   92,
    93,   94,   95,   96,   -1,   -1,   -1,   -1,   101,  102,  103,  -1,   -1,   106,  107,  108,  -1,   110,  -1,
    -1,   -1,   114,  115,  116,  -1,   118,  119,  120,  -1,   -1,   -1,   124,  -1,   -1,   127,  128,  129,  -1,
    -1,   132,  133,  -1,   135,  136,  137,  138,  139,  140,  -1,   -1,   143,  -1,   145,  146,  147,  148,  -1,
    150,  151,  152,  153,  154,  155,  -1,   157,  158,  159,  160,  161,  -1,   163,  -1,   -1,   166,  -1,   168,
    169,  -1,   171,  172,  -1,   174,  175,  176,  177,  178,  -1,   180,  181,  182,  183,  184,  185,  186,  -1,
    -1,   189,  190,  -1,   192,  193,  -1,   195,  196,  -1,   198,  199,  -1,   201,  -1,   -1,   -1,   205,  206,
    207,  208,  209,  -1,   211,  212,  -1,   -1,   -1,   216,  -1,   -1,   219,  220,  221,  -1,   -1,   224,  -1,
    -1,   227,  228,  -1,   -1,   -1,   -1,   -1,   -1,   235,  236,  237,  -1,   -1,   240,  241,  -1,   243,  244,
    -1,   -1,   -1,   248,  -1,   250,  -1,   252,  253,  -1,   255,  -1,   257,  258,  -1,   -1,   261,  -1,   -1,
    -1,   -1,   266,  267,  268,  269,  270,  271,  272,  273,  274,  275,  276,  277,  278,  279,  280,  281,  282,
    283,  284,  285,  286,  287,  288,  289,  -1,   -1,   -1,   293,  294,  295,  296,  -1,   -1,   299,  300,  301,
    302,  303,  -1,   305,  306,  307,  308,  309,  310,  311,  312,  313,  314,  315,  316,  -1,   318,  319,  320,
    -1,   322,  323,  324,  325,  326,  327,  328,  -1,   330,  331,  -1,   333,  334,  335,  -1,   337,  338,  339,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   350,  351,  352,  353,  354,  355,  356,  357,  358,
    359,  -1,   361,  362,  -1,   364,  -1,   366,  367,  -1,   369,  370,  371,  372,  373,  374,  375,  376,  377,
    -1,   -1,   -1,   381,  382,  -1,   -1,   385,  386,  387,  -1,   389,  -1,   391,  392,  393,  394,  395,  -1,
    397,  398,  399,  -1,   401,  402,  -1,   -1,   405,  406,  407,  408,  409,  410,  411,  412,  413,  414,  415,
    -1,   417,  418,  -1,   -1,   -1,   422,  423,  424,  -1,   -1,   427,  -1,   -1,   -1,   431,  432,  433,  434,
    -1,   436,  437,  -1,   -1,   -1,   -1,   -1,   -1,   444,  445,  -1,   447,  -1,   -1,   450,  -1,   -1,   453,
    454,  455,  456,  457,  458,  -1,   460,  461,  462,  463,  464,  465,  466,  467,  468,  469,  470,  -1,   472,
    473,  -1,   475,  476,  477,  478,  479,  480,  -1,   -1,   -1,   -1,   -1,   486,  -1,   488,  489,  490,  491,
    492,  493,  494,  -1,   496,  497,  498,  499,  -1,   501,  -1,   -1,   504,  505,  506,  -1,   -1,   509,  -1,
    -1,   512,  513,  -1,   -1,   516,  517,  518,  519,  520,  521,  -1,   -1,   524,  525,  -1,   527,  528,  529,
    -1,   -1,   -1,   -1,   534,  -1,   536,  537,  -1,   539,  -1,   541,  -1,   -1,   -1,   -1,   546,  -1,   -1,
    -1,   550,  551,  -1,   -1,   -1,   -1,   556,  -1,   558,  559,  -1,   561,  562,  -1,   564,  565,  5,    -1,
    7,    8,    9,    10,   11,   -1,   -1,   -1,   -1,   -1,   17,   -1,   -1,   20,   -1,   22,   23,   24,   25,
    26,   -1,   28,   29,   30,   -1,   32,   33,   34,   35,   36,   37,   38,   -1,   40,   41,   -1,   43,   -1,
    45,   46,   -1,   -1,   49,   50,   51,   -1,   53,   54,   55,   56,   -1,   58,   59,   60,   61,   -1,   63,
    64,   -1,   66,   67,   68,   69,   70,   71,   72,   73,   -1,   -1,   76,   -1,   78,   -1,   80,   81,   82,
    -1,   -1,   85,   86,   87,   -1,   89,   90,   -1,   92,   93,   94,   95,   96,   -1,   -1,   -1,   -1,   101,
    102,  103,  -1,   -1,   106,  107,  108,  -1,   110,  -1,   -1,   -1,   114,  115,  116,  -1,   118,  119,  120,
    -1,   -1,   -1,   124,  -1,   -1,   127,  128,  129,  -1,   -1,   132,  133,  -1,   135,  136,  137,  138,  139,
    140,  -1,   -1,   143,  -1,   145,  146,  147,  148,  -1,   150,  151,  152,  153,  154,  155,  -1,   157,  158,
    159,  160,  161,  -1,   163,  -1,   -1,   166,  -1,   168,  169,  -1,   171,  172,  -1,   174,  175,  176,  177,
    178,  -1,   180,  181,  182,  183,  184,  185,  186,  -1,   -1,   189,  190,  -1,   192,  193,  -1,   195,  196,
    -1,   198,  199,  -1,   201,  -1,   -1,   -1,   205,  206,  207,  208,  209,  -1,   211,  212,  -1,   -1,   -1,
    216,  -1,   -1,   219,  220,  221,  -1,   -1,   224,  -1,   -1,   227,  228,  -1,   -1,   -1,   -1,   -1,   -1,
    235,  236,  237,  -1,   -1,   240,  241,  -1,   243,  244,  -1,   -1,   -1,   248,  -1,   250,  -1,   252,  253,
    -1,   255,  -1,   257,  258,  -1,   -1,   261,  -1,   -1,   -1,   -1,   266,  267,  268,  269,  270,  271,  272,
    273,  274,  275,  276,  277,  278,  279,  280,  281,  282,  283,  284,  285,  286,  287,  288,  289,  -1,   -1,
    -1,   293,  294,  295,  296,  -1,   -1,   299,  300,  301,  302,  303,  -1,   305,  306,  307,  308,  309,  310,
    311,  312,  313,  314,  315,  316,  -1,   318,  319,  320,  -1,   322,  323,  324,  325,  326,  327,  328,  -1,
    330,  331,  -1,   333,  334,  335,  -1,   337,  338,  339,  -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   350,  351,  352,  353,  354,  355,  356,  357,  358,  359,  -1,   361,  362,  -1,   364,  -1,   366,  367,
    -1,   369,  370,  371,  372,  373,  374,  375,  376,  377,  -1,   -1,   -1,   381,  382,  -1,   -1,   385,  386,
    387,  -1,   389,  -1,   391,  392,  393,  394,  395,  -1,   397,  398,  399,  -1,   401,  402,  -1,   -1,   405,
    406,  407,  408,  409,  410,  411,  412,  413,  414,  415,  -1,   417,  418,  -1,   -1,   -1,   422,  423,  424,
    -1,   -1,   427,  -1,   -1,   -1,   431,  432,  433,  434,  -1,   436,  437,  -1,   -1,   -1,   -1,   -1,   -1,
    444,  445,  -1,   447,  -1,   -1,   450,  -1,   -1,   453,  454,  455,  456,  457,  458,  -1,   460,  461,  462,
    463,  464,  465,  466,  467,  468,  469,  470,  -1,   472,  473,  -1,   475,  476,  477,  478,  479,  480,  -1,
    -1,   -1,   -1,   -1,   486,  -1,   488,  489,  490,  491,  492,  493,  494,  -1,   496,  497,  498,  499,  -1,
    501,  -1,   -1,   504,  505,  506,  -1,   -1,   509,  -1,   -1,   512,  513,  -1,   -1,   516,  517,  518,  519,
    520,  521,  -1,   -1,   524,  525,  -1,   527,  528,  529,  -1,   -1,   -1,   -1,   534,  -1,   536,  537,  -1,
    539,  -1,   541,  -1,   -1,   -1,   -1,   546,  -1,   -1,   -1,   550,  551,  -1,   -1,   -1,   -1,   556,  -1,
    558,  559,  -1,   561,  562,  -1,   564,  565,  5,    -1,   7,    8,    9,    10,   11,   -1,   -1,   -1,   -1,
    -1,   17,   -1,   -1,   20,   -1,   22,   23,   24,   25,   26,   -1,   28,   29,   30,   -1,   32,   33,   34,
    35,   36,   37,   38,   -1,   40,   41,   -1,   43,   -1,   45,   46,   -1,   -1,   49,   50,   51,   -1,   53,
    54,   55,   56,   -1,   58,   59,   60,   61,   -1,   63,   64,   -1,   66,   67,   68,   69,   70,   71,   72,
    73,   -1,   -1,   76,   -1,   78,   -1,   80,   81,   82,   -1,   -1,   85,   86,   87,   -1,   89,   90,   -1,
    92,   93,   94,   95,   96,   -1,   -1,   -1,   -1,   101,  102,  103,  -1,   -1,   106,  107,  108,  -1,   110,
    -1,   -1,   -1,   114,  115,  116,  -1,   118,  119,  120,  -1,   -1,   -1,   124,  -1,   -1,   127,  128,  129,
    -1,   -1,   132,  133,  -1,   135,  136,  137,  138,  139,  140,  -1,   -1,   143,  -1,   145,  146,  147,  148,
    -1,   150,  151,  152,  153,  154,  155,  -1,   157,  158,  159,  160,  161,  -1,   163,  -1,   -1,   166,  -1,
    168,  169,  170,  171,  172,  -1,   174,  175,  176,  177,  178,  -1,   180,  181,  182,  183,  184,  185,  186,
    -1,   -1,   189,  190,  -1,   192,  193,  -1,   195,  196,  -1,   198,  199,  -1,   201,  -1,   -1,   -1,   205,
    206,  207,  208,  209,  -1,   211,  212,  -1,   -1,   -1,   216,  -1,   -1,   219,  220,  221,  -1,   -1,   224,
    -1,   -1,   227,  228,  -1,   -1,   -1,   -1,   -1,   -1,   235,  236,  237,  -1,   -1,   240,  241,  -1,   243,
    244,  -1,   -1,   -1,   248,  -1,   250,  -1,   252,  253,  -1,   255,  -1,   257,  258,  -1,   -1,   261,  -1,
    -1,   -1,   -1,   266,  267,  268,  269,  270,  271,  272,  273,  274,  275,  276,  277,  278,  279,  280,  281,
    282,  283,  284,  285,  286,  287,  288,  289,  -1,   -1,   -1,   293,  294,  295,  296,  -1,   -1,   299,  300,
    301,  302,  303,  -1,   305,  306,  307,  308,  309,  310,  311,  312,  313,  314,  315,  316,  -1,   318,  319,
    320,  -1,   322,  323,  324,  325,  326,  327,  328,  -1,   330,  331,  -1,   333,  334,  335,  -1,   337,  338,
    339,  -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   350,  351,  352,  353,  354,  355,  356,  357,
    358,  359,  -1,   361,  362,  -1,   364,  -1,   366,  367,  -1,   369,  370,  371,  372,  373,  374,  375,  376,
    377,  -1,   -1,   -1,   381,  382,  -1,   -1,   385,  386,  387,  -1,   389,  -1,   391,  392,  393,  394,  395,
    -1,   397,  398,  399,  -1,   401,  402,  -1,   -1,   405,  406,  407,  408,  409,  410,  411,  412,  413,  414,
    415,  -1,   417,  418,  -1,   -1,   -1,   422,  423,  424,  -1,   -1,   427,  -1,   -1,   -1,   431,  432,  433,
    434,  -1,   436,  437,  -1,   -1,   -1,   -1,   -1,   -1,   444,  445,  -1,   447,  -1,   -1,   450,  -1,   -1,
    453,  454,  455,  456,  457,  458,  -1,   460,  461,  462,  463,  464,  465,  466,  467,  468,  469,  470,  -1,
    472,  473,  -1,   475,  476,  477,  478,  479,  480,  -1,   -1,   -1,   -1,   -1,   486,  -1,   488,  489,  490,
    491,  492,  493,  494,  -1,   496,  497,  498,  499,  -1,   501,  -1,   -1,   504,  505,  506,  -1,   -1,   509,
    -1,   -1,   512,  513,  -1,   -1,   516,  517,  518,  519,  520,  521,  -1,   -1,   524,  525,  -1,   527,  528,
    529,  -1,   -1,   -1,   -1,   534,  -1,   536,  537,  -1,   539,  -1,   541,  -1,   -1,   -1,   -1,   546,  -1,
    -1,   -1,   550,  551,  -1,   -1,   -1,   -1,   556,  -1,   558,  -1,   -1,   561,  562,  -1,   564,  565,  5,
    -1,   7,    8,    9,    10,   11,   -1,   -1,   -1,   -1,   -1,   17,   -1,   -1,   20,   -1,   22,   23,   24,
    25,   26,   -1,   28,   29,   30,   -1,   32,   33,   34,   35,   36,   37,   38,   -1,   40,   41,   -1,   43,
    -1,   45,   46,   -1,   -1,   49,   50,   51,   -1,   53,   54,   55,   56,   -1,   58,   59,   60,   61,   -1,
    63,   64,   -1,   66,   67,   68,   69,   70,   71,   72,   73,   -1,   -1,   76,   -1,   78,   -1,   80,   81,
    82,   -1,   -1,   85,   86,   87,   -1,   89,   90,   -1,   92,   93,   94,   95,   96,   -1,   -1,   -1,   -1,
    101,  102,  103,  -1,   -1,   106,  107,  108,  -1,   110,  -1,   -1,   -1,   114,  115,  116,  -1,   118,  119,
    120,  -1,   -1,   -1,   124,  -1,   -1,   127,  128,  129,  -1,   -1,   132,  133,  -1,   135,  136,  137,  138,
    139,  140,  -1,   -1,   143,  -1,   145,  146,  147,  148,  -1,   150,  151,  152,  153,  154,  155,  -1,   157,
    158,  159,  160,  161,  -1,   163,  -1,   -1,   166,  -1,   168,  169,  170,  171,  172,  -1,   174,  175,  176,
    177,  178,  -1,   180,  181,  182,  183,  184,  185,  186,  -1,   -1,   189,  190,  -1,   192,  193,  -1,   195,
    196,  -1,   198,  199,  -1,   201,  -1,   -1,   -1,   205,  206,  207,  208,  209,  -1,   211,  212,  -1,   -1,
    -1,   216,  -1,   -1,   219,  220,  221,  -1,   -1,   224,  -1,   -1,   227,  228,  -1,   -1,   -1,   -1,   -1,
    -1,   235,  236,  237,  -1,   -1,   240,  241,  -1,   243,  244,  -1,   -1,   -1,   248,  -1,   250,  -1,   252,
    253,  -1,   255,  -1,   257,  258,  -1,   -1,   261,  -1,   -1,   -1,   -1,   266,  267,  268,  269,  270,  271,
    272,  273,  274,  275,  276,  277,  278,  279,  280,  281,  282,  283,  284,  285,  286,  287,  288,  289,  -1,
    -1,   -1,   293,  294,  295,  296,  -1,   -1,   299,  300,  301,  302,  303,  -1,   305,  306,  307,  308,  309,
    310,  311,  312,  313,  314,  315,  316,  -1,   318,  319,  320,  -1,   322,  323,  324,  325,  326,  327,  328,
    -1,   330,  331,  -1,   333,  334,  335,  -1,   337,  338,  339,  -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   350,  351,  352,  353,  354,  355,  356,  357,  358,  359,  -1,   361,  362,  -1,   364,  -1,   366,
    367,  -1,   369,  370,  371,  372,  373,  374,  375,  376,  377,  -1,   -1,   -1,   381,  382,  -1,   -1,   385,
    386,  387,  -1,   389,  -1,   391,  392,  393,  394,  395,  -1,   397,  398,  399,  -1,   401,  402,  -1,   -1,
    405,  406,  407,  408,  409,  410,  411,  412,  413,  414,  415,  -1,   417,  418,  -1,   -1,   -1,   422,  423,
    424,  -1,   -1,   427,  -1,   -1,   -1,   431,  432,  433,  434,  -1,   436,  437,  -1,   -1,   -1,   -1,   -1,
    -1,   444,  445,  -1,   447,  -1,   -1,   450,  -1,   -1,   453,  454,  455,  456,  457,  458,  -1,   460,  461,
    462,  463,  464,  465,  466,  467,  468,  469,  470,  -1,   472,  473,  -1,   475,  476,  477,  478,  479,  480,
    -1,   -1,   -1,   -1,   -1,   486,  -1,   488,  489,  490,  491,  492,  493,  494,  -1,   496,  497,  498,  499,
    -1,   501,  -1,   -1,   504,  505,  506,  -1,   -1,   509,  -1,   -1,   512,  513,  -1,   -1,   516,  517,  518,
    519,  520,  521,  -1,   -1,   524,  525,  -1,   527,  528,  529,  -1,   -1,   -1,   -1,   534,  -1,   536,  537,
    -1,   539,  -1,   541,  -1,   -1,   -1,   -1,   546,  -1,   -1,   -1,   550,  551,  -1,   -1,   -1,   -1,   556,
    -1,   558,  -1,   -1,   561,  562,  -1,   564,  565,  5,    -1,   7,    8,    9,    10,   11,   -1,   -1,   -1,
    -1,   -1,   17,   -1,   -1,   20,   -1,   22,   23,   24,   25,   26,   -1,   28,   29,   30,   -1,   32,   33,
    34,   35,   36,   37,   38,   -1,   40,   41,   -1,   43,   -1,   45,   46,   -1,   -1,   49,   50,   51,   -1,
    53,   54,   55,   56,   -1,   58,   59,   60,   61,   -1,   63,   64,   -1,   66,   67,   68,   69,   70,   71,
    72,   73,   -1,   -1,   76,   -1,   78,   -1,   80,   81,   82,   -1,   -1,   85,   86,   87,   -1,   89,   90,
    -1,   92,   93,   94,   95,   96,   -1,   -1,   -1,   -1,   101,  102,  103,  -1,   -1,   106,  107,  108,  -1,
    110,  -1,   -1,   -1,   114,  115,  116,  -1,   118,  119,  120,  -1,   -1,   -1,   124,  -1,   -1,   127,  128,
    129,  -1,   -1,   132,  133,  -1,   135,  136,  137,  138,  139,  140,  -1,   -1,   143,  -1,   145,  146,  147,
    148,  -1,   150,  151,  152,  153,  154,  155,  -1,   157,  158,  159,  160,  161,  -1,   163,  -1,   -1,   166,
    -1,   168,  169,  170,  171,  172,  -1,   174,  175,  176,  177,  178,  -1,   180,  181,  182,  183,  184,  185,
    186,  -1,   -1,   189,  190,  -1,   192,  193,  -1,   195,  196,  -1,   198,  199,  -1,   201,  -1,   -1,   -1,
    205,  206,  207,  208,  209,  -1,   211,  212,  -1,   -1,   -1,   216,  -1,   -1,   219,  220,  221,  -1,   -1,
    224,  -1,   -1,   227,  228,  -1,   -1,   -1,   -1,   -1,   -1,   235,  236,  237,  -1,   -1,   240,  241,  -1,
    243,  244,  -1,   -1,   -1,   248,  -1,   250,  -1,   252,  253,  -1,   255,  -1,   257,  258,  -1,   -1,   261,
    -1,   -1,   -1,   -1,   266,  267,  268,  269,  270,  271,  272,  273,  274,  275,  276,  277,  278,  279,  280,
    281,  282,  283,  284,  285,  286,  287,  288,  289,  -1,   -1,   -1,   293,  294,  295,  296,  -1,   -1,   299,
    300,  301,  302,  303,  -1,   305,  306,  307,  308,  309,  310,  311,  312,  313,  314,  315,  316,  -1,   318,
    319,  320,  -1,   322,  323,  324,  325,  326,  327,  328,  -1,   330,  331,  -1,   333,  334,  335,  -1,   337,
    338,  339,  -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   350,  351,  352,  353,  354,  355,  356,
    357,  358,  359,  -1,   361,  362,  -1,   364,  -1,   366,  367,  -1,   369,  370,  371,  372,  373,  374,  375,
    376,  377,  -1,   -1,   -1,   381,  382,  -1,   -1,   385,  386,  387,  -1,   389,  -1,   391,  392,  393,  394,
    395,  -1,   397,  398,  399,  -1,   401,  402,  -1,   -1,   405,  406,  407,  408,  409,  410,  411,  412,  413,
    414,  415,  -1,   417,  418,  -1,   -1,   -1,   422,  423,  424,  -1,   -1,   427,  -1,   -1,   -1,   431,  432,
    433,  434,  -1,   436,  437,  -1,   -1,   -1,   -1,   -1,   -1,   444,  445,  -1,   447,  -1,   -1,   450,  -1,
    -1,   453,  454,  455,  456,  457,  458,  -1,   460,  461,  462,  463,  464,  465,  466,  467,  468,  469,  470,
    -1,   472,  473,  -1,   475,  476,  477,  478,  479,  480,  -1,   -1,   -1,   -1,   -1,   486,  -1,   488,  489,
    490,  491,  492,  493,  494,  -1,   496,  497,  498,  499,  -1,   501,  -1,   -1,   504,  505,  506,  -1,   -1,
    509,  -1,   -1,   512,  513,  -1,   -1,   516,  517,  518,  519,  520,  521,  -1,   -1,   524,  525,  -1,   527,
    528,  529,  -1,   -1,   -1,   -1,   534,  -1,   536,  537,  -1,   539,  -1,   541,  -1,   -1,   -1,   -1,   546,
    -1,   -1,   -1,   550,  551,  -1,   -1,   -1,   -1,   556,  -1,   558,  -1,   -1,   561,  562,  -1,   564,  565,
    5,    -1,   7,    8,    9,    10,   11,   -1,   -1,   -1,   -1,   -1,   17,   -1,   -1,   20,   -1,   22,   23,
    24,   25,   26,   -1,   28,   29,   30,   -1,   32,   33,   34,   35,   36,   37,   38,   -1,   40,   41,   -1,
    43,   -1,   45,   46,   -1,   -1,   49,   50,   51,   -1,   53,   54,   55,   56,   -1,   58,   59,   60,   61,
    -1,   63,   64,   -1,   66,   67,   68,   69,   70,   71,   72,   73,   -1,   -1,   76,   -1,   78,   -1,   80,
    81,   82,   -1,   -1,   85,   86,   87,   -1,   89,   90,   -1,   92,   93,   94,   95,   96,   -1,   -1,   -1,
    -1,   101,  102,  103,  -1,   -1,   106,  107,  108,  -1,   110,  -1,   -1,   -1,   114,  115,  116,  -1,   118,
    119,  120,  -1,   -1,   -1,   124,  -1,   -1,   127,  128,  129,  -1,   -1,   132,  133,  -1,   135,  136,  137,
    138,  139,  140,  -1,   -1,   143,  -1,   145,  146,  147,  148,  -1,   150,  151,  152,  153,  154,  155,  -1,
    157,  158,  159,  160,  161,  -1,   163,  -1,   -1,   166,  -1,   168,  169,  -1,   171,  172,  -1,   174,  175,
    176,  177,  178,  -1,   180,  181,  182,  183,  184,  185,  186,  -1,   -1,   189,  190,  -1,   192,  193,  -1,
    195,  196,  -1,   198,  199,  -1,   201,  -1,   -1,   -1,   205,  206,  207,  208,  209,  -1,   211,  212,  -1,
    -1,   -1,   216,  -1,   -1,   219,  220,  221,  -1,   -1,   224,  -1,   -1,   227,  228,  -1,   -1,   -1,   -1,
    -1,   -1,   235,  236,  237,  -1,   -1,   240,  241,  -1,   243,  244,  -1,   -1,   -1,   248,  -1,   250,  -1,
    252,  253,  -1,   255,  -1,   257,  258,  -1,   -1,   261,  -1,   -1,   -1,   -1,   266,  267,  268,  269,  270,
    271,  272,  273,  274,  275,  276,  277,  278,  279,  280,  281,  282,  283,  284,  285,  286,  287,  288,  289,
    -1,   -1,   -1,   293,  294,  295,  296,  -1,   -1,   299,  300,  301,  302,  303,  -1,   305,  306,  307,  308,
    309,  310,  311,  312,  313,  314,  315,  316,  -1,   318,  319,  320,  -1,   322,  323,  324,  325,  326,  327,
    328,  -1,   330,  331,  -1,   333,  334,  335,  -1,   337,  338,  339,  -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   350,  351,  352,  353,  354,  355,  356,  357,  358,  359,  -1,   361,  362,  -1,   364,  -1,
    366,  367,  -1,   369,  370,  371,  372,  373,  374,  375,  376,  377,  -1,   -1,   -1,   381,  382,  -1,   -1,
    385,  386,  387,  -1,   389,  -1,   391,  392,  393,  394,  395,  -1,   397,  398,  399,  -1,   401,  402,  -1,
    -1,   405,  406,  407,  408,  409,  410,  411,  412,  413,  414,  415,  -1,   417,  418,  -1,   -1,   -1,   422,
    423,  424,  -1,   -1,   427,  -1,   -1,   -1,   431,  432,  433,  434,  -1,   436,  437,  -1,   -1,   -1,   -1,
    -1,   -1,   444,  445,  -1,   447,  -1,   -1,   450,  -1,   -1,   453,  454,  455,  456,  457,  458,  -1,   460,
    461,  462,  463,  464,  465,  466,  467,  468,  469,  470,  -1,   472,  473,  -1,   475,  476,  477,  478,  479,
    480,  -1,   -1,   -1,   -1,   -1,   486,  -1,   488,  489,  490,  491,  492,  493,  494,  -1,   496,  497,  498,
    499,  -1,   501,  -1,   -1,   504,  505,  506,  -1,   -1,   509,  -1,   -1,   512,  513,  -1,   -1,   516,  517,
    518,  519,  520,  521,  -1,   -1,   524,  525,  -1,   527,  528,  529,  -1,   -1,   -1,   -1,   534,  -1,   536,
    537,  -1,   539,  -1,   541,  -1,   -1,   -1,   -1,   546,  -1,   -1,   -1,   550,  551,  -1,   -1,   -1,   -1,
    556,  -1,   558,  -1,   -1,   561,  562,  -1,   564,  565,  5,    -1,   7,    8,    9,    10,   11,   12,   -1,
    -1,   -1,   -1,   17,   -1,   -1,   20,   -1,   22,   23,   24,   25,   26,   -1,   28,   29,   30,   -1,   32,
    33,   34,   35,   36,   37,   38,   -1,   40,   41,   -1,   43,   -1,   45,   46,   -1,   -1,   49,   50,   51,
    -1,   53,   54,   55,   56,   -1,   58,   59,   60,   61,   -1,   63,   64,   -1,   66,   67,   68,   69,   70,
    71,   72,   73,   -1,   -1,   76,   -1,   78,   -1,   80,   81,   82,   -1,   -1,   85,   86,   87,   -1,   89,
    90,   -1,   92,   93,   94,   95,   96,   -1,   -1,   -1,   -1,   101,  102,  103,  -1,   -1,   106,  107,  108,
    -1,   110,  -1,   -1,   -1,   114,  115,  116,  -1,   118,  119,  120,  -1,   -1,   -1,   124,  -1,   -1,   127,
    128,  129,  -1,   -1,   132,  133,  -1,   135,  136,  137,  138,  139,  140,  -1,   -1,   143,  -1,   145,  146,
    147,  148,  -1,   150,  151,  152,  153,  154,  155,  -1,   157,  158,  159,  160,  161,  -1,   163,  -1,   -1,
    166,  -1,   168,  169,  -1,   171,  172,  -1,   174,  175,  176,  177,  178,  -1,   180,  181,  182,  183,  184,
    185,  186,  -1,   -1,   189,  190,  -1,   192,  193,  -1,   195,  196,  -1,   198,  199,  -1,   201,  -1,   -1,
    -1,   205,  206,  207,  208,  209,  -1,   211,  212,  -1,   -1,   -1,   216,  -1,   -1,   219,  220,  221,  -1,
    -1,   224,  -1,   -1,   227,  228,  -1,   -1,   -1,   -1,   -1,   -1,   235,  236,  237,  -1,   -1,   240,  241,
    -1,   243,  244,  -1,   -1,   -1,   248,  -1,   250,  -1,   252,  253,  -1,   255,  -1,   257,  258,  -1,   -1,
    261,  -1,   -1,   -1,   -1,   266,  267,  268,  269,  270,  271,  272,  273,  274,  275,  276,  277,  278,  279,
    280,  281,  282,  283,  284,  285,  286,  287,  288,  289,  -1,   -1,   -1,   293,  294,  295,  296,  -1,   -1,
    299,  300,  301,  302,  303,  -1,   305,  306,  307,  308,  309,  310,  311,  312,  313,  314,  315,  316,  -1,
    318,  319,  320,  -1,   322,  323,  324,  325,  -1,   327,  328,  -1,   330,  331,  -1,   333,  334,  335,  -1,
    337,  338,  339,  -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   350,  351,  352,  353,  354,  355,
    356,  357,  358,  359,  -1,   361,  362,  -1,   364,  -1,   366,  367,  -1,   369,  370,  371,  372,  373,  374,
    375,  376,  377,  -1,   -1,   -1,   381,  382,  -1,   -1,   385,  386,  387,  -1,   389,  -1,   391,  392,  393,
    394,  395,  -1,   397,  398,  399,  -1,   401,  402,  -1,   -1,   405,  406,  407,  408,  409,  410,  411,  412,
    413,  414,  415,  -1,   417,  418,  -1,   -1,   -1,   422,  423,  424,  -1,   -1,   427,  -1,   -1,   -1,   431,
    432,  433,  434,  -1,   436,  437,  -1,   -1,   -1,   -1,   -1,   -1,   444,  445,  -1,   447,  -1,   -1,   450,
    -1,   -1,   453,  454,  455,  456,  457,  458,  -1,   460,  461,  462,  463,  464,  465,  466,  467,  468,  469,
    470,  -1,   472,  473,  -1,   475,  476,  477,  478,  479,  480,  -1,   -1,   -1,   -1,   -1,   486,  -1,   488,
    489,  490,  491,  492,  493,  494,  -1,   496,  497,  498,  499,  -1,   501,  -1,   -1,   504,  505,  506,  -1,
    -1,   509,  -1,   -1,   512,  513,  -1,   -1,   516,  517,  518,  519,  520,  521,  -1,   -1,   524,  525,  -1,
    527,  528,  529,  -1,   -1,   -1,   -1,   534,  -1,   536,  537,  -1,   539,  -1,   541,  -1,   -1,   -1,   -1,
    546,  -1,   -1,   -1,   550,  551,  -1,   -1,   -1,   -1,   556,  -1,   558,  -1,   -1,   561,  562,  -1,   564,
    565,  5,    -1,   7,    8,    9,    10,   11,   -1,   -1,   -1,   -1,   -1,   17,   -1,   -1,   20,   -1,   22,
    23,   24,   25,   26,   -1,   28,   29,   30,   -1,   32,   33,   34,   35,   36,   37,   38,   -1,   40,   41,
    -1,   43,   -1,   45,   46,   -1,   -1,   49,   50,   51,   -1,   53,   54,   55,   56,   -1,   58,   59,   60,
    61,   -1,   63,   64,   -1,   66,   67,   68,   69,   70,   71,   72,   73,   -1,   -1,   76,   -1,   78,   -1,
    80,   81,   82,   -1,   -1,   85,   86,   87,   -1,   89,   90,   -1,   92,   93,   94,   95,   96,   -1,   -1,
    -1,   -1,   101,  102,  103,  -1,   -1,   106,  107,  108,  -1,   110,  -1,   -1,   -1,   114,  115,  116,  -1,
    118,  119,  120,  -1,   -1,   -1,   124,  -1,   -1,   127,  128,  129,  -1,   -1,   132,  133,  -1,   135,  136,
    137,  138,  139,  140,  -1,   -1,   143,  -1,   145,  146,  147,  148,  -1,   150,  151,  152,  153,  154,  155,
    -1,   157,  158,  159,  160,  161,  -1,   163,  -1,   -1,   166,  -1,   168,  169,  -1,   171,  172,  -1,   174,
    175,  176,  177,  178,  -1,   180,  181,  182,  183,  184,  185,  186,  -1,   -1,   189,  190,  -1,   192,  193,
    -1,   195,  196,  -1,   198,  199,  -1,   201,  -1,   -1,   -1,   205,  206,  207,  208,  209,  -1,   211,  212,
    -1,   -1,   -1,   216,  -1,   -1,   219,  220,  221,  -1,   -1,   224,  -1,   -1,   227,  228,  -1,   -1,   -1,
    -1,   -1,   -1,   235,  236,  237,  -1,   -1,   240,  241,  -1,   243,  244,  -1,   -1,   -1,   248,  -1,   250,
    -1,   252,  253,  -1,   255,  -1,   257,  258,  -1,   -1,   261,  -1,   -1,   -1,   -1,   266,  267,  268,  269,
    270,  271,  272,  273,  274,  275,  276,  277,  278,  279,  280,  281,  282,  283,  284,  285,  286,  287,  288,
    289,  -1,   -1,   -1,   293,  294,  295,  296,  -1,   -1,   299,  300,  301,  302,  303,  -1,   305,  306,  307,
    308,  309,  310,  311,  312,  313,  314,  315,  316,  -1,   318,  319,  320,  -1,   322,  323,  324,  325,  326,
    327,  328,  -1,   330,  331,  -1,   333,  334,  335,  -1,   337,  338,  339,  -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   350,  351,  352,  353,  354,  355,  356,  357,  358,  359,  -1,   361,  362,  -1,   364,
    -1,   366,  367,  -1,   369,  370,  371,  372,  373,  374,  375,  376,  377,  -1,   -1,   -1,   381,  382,  -1,
    -1,   385,  386,  387,  -1,   389,  -1,   391,  392,  393,  394,  395,  -1,   397,  398,  399,  -1,   401,  402,
    -1,   -1,   405,  406,  407,  408,  409,  410,  411,  412,  413,  414,  415,  -1,   417,  418,  -1,   -1,   -1,
    422,  423,  424,  -1,   -1,   427,  -1,   -1,   -1,   431,  432,  433,  434,  -1,   436,  437,  -1,   -1,   -1,
    -1,   -1,   -1,   444,  445,  -1,   447,  -1,   -1,   450,  -1,   -1,   453,  454,  455,  456,  457,  458,  -1,
    460,  461,  462,  463,  464,  465,  466,  467,  468,  469,  470,  -1,   472,  473,  -1,   475,  476,  477,  478,
    479,  480,  -1,   -1,   -1,   -1,   -1,   486,  -1,   488,  489,  490,  491,  492,  493,  494,  -1,   496,  497,
    498,  499,  -1,   501,  -1,   -1,   504,  505,  506,  -1,   -1,   509,  -1,   -1,   512,  513,  -1,   -1,   516,
    517,  518,  519,  520,  521,  -1,   -1,   524,  525,  -1,   527,  528,  529,  -1,   -1,   -1,   -1,   534,  -1,
    536,  537,  -1,   539,  -1,   541,  -1,   -1,   -1,   -1,   546,  -1,   -1,   -1,   550,  551,  -1,   -1,   -1,
    -1,   556,  -1,   558,  -1,   -1,   561,  562,  -1,   564,  565,  5,    -1,   7,    8,    9,    10,   11,   -1,
    -1,   -1,   -1,   -1,   17,   -1,   -1,   20,   -1,   22,   23,   24,   25,   26,   -1,   28,   29,   30,   -1,
    32,   33,   34,   35,   36,   37,   38,   -1,   40,   41,   -1,   43,   -1,   45,   46,   -1,   -1,   49,   50,
    51,   -1,   53,   54,   55,   56,   -1,   58,   59,   60,   61,   -1,   63,   64,   -1,   66,   67,   68,   69,
    70,   71,   72,   73,   -1,   -1,   76,   -1,   78,   -1,   80,   81,   82,   -1,   -1,   85,   86,   87,   -1,
    89,   90,   -1,   92,   93,   94,   95,   96,   -1,   -1,   -1,   -1,   101,  102,  103,  -1,   -1,   106,  107,
    108,  -1,   110,  -1,   -1,   -1,   114,  115,  116,  -1,   118,  119,  120,  -1,   -1,   -1,   124,  -1,   -1,
    127,  128,  129,  -1,   -1,   132,  133,  -1,   135,  136,  137,  138,  139,  140,  -1,   -1,   143,  -1,   145,
    146,  147,  148,  -1,   150,  151,  152,  153,  154,  155,  -1,   157,  158,  159,  160,  161,  -1,   163,  -1,
    -1,   166,  -1,   168,  169,  -1,   171,  172,  -1,   174,  175,  176,  177,  178,  -1,   180,  181,  182,  183,
    184,  185,  186,  -1,   -1,   189,  190,  -1,   192,  193,  -1,   195,  196,  -1,   198,  199,  -1,   201,  -1,
    -1,   -1,   205,  206,  207,  208,  209,  -1,   211,  212,  -1,   -1,   -1,   216,  -1,   -1,   219,  220,  221,
    -1,   -1,   224,  -1,   -1,   227,  228,  -1,   -1,   -1,   -1,   -1,   -1,   235,  236,  237,  -1,   -1,   240,
    241,  -1,   243,  244,  -1,   -1,   -1,   248,  -1,   250,  -1,   252,  253,  -1,   255,  -1,   257,  258,  -1,
    -1,   261,  -1,   -1,   -1,   -1,   266,  267,  268,  269,  270,  271,  272,  273,  274,  275,  276,  277,  278,
    279,  280,  281,  282,  283,  284,  285,  286,  287,  288,  289,  -1,   -1,   -1,   293,  294,  295,  296,  -1,
    -1,   299,  300,  301,  302,  303,  -1,   305,  306,  307,  308,  309,  310,  311,  312,  313,  314,  315,  316,
    -1,   318,  319,  320,  -1,   322,  323,  324,  325,  326,  327,  328,  -1,   330,  331,  -1,   333,  334,  335,
    -1,   337,  338,  339,  -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   350,  351,  352,  353,  354,
    355,  356,  357,  358,  359,  -1,   361,  362,  -1,   364,  -1,   366,  367,  -1,   369,  370,  371,  372,  373,
    374,  375,  376,  377,  -1,   -1,   -1,   381,  382,  -1,   -1,   385,  386,  387,  -1,   389,  -1,   391,  392,
    393,  394,  395,  -1,   397,  398,  399,  -1,   401,  402,  -1,   -1,   405,  406,  407,  408,  409,  410,  411,
    412,  413,  414,  415,  -1,   417,  418,  -1,   -1,   -1,   422,  423,  424,  -1,   -1,   427,  -1,   -1,   -1,
    431,  432,  433,  434,  -1,   436,  437,  -1,   -1,   -1,   -1,   -1,   -1,   444,  445,  -1,   447,  -1,   -1,
    450,  -1,   -1,   453,  454,  455,  456,  457,  458,  -1,   460,  461,  462,  463,  464,  465,  466,  467,  468,
    469,  470,  -1,   472,  473,  -1,   475,  476,  477,  478,  479,  480,  -1,   -1,   -1,   -1,   -1,   486,  -1,
    488,  489,  490,  491,  492,  493,  494,  -1,   496,  497,  498,  499,  -1,   501,  -1,   -1,   504,  505,  506,
    -1,   -1,   509,  -1,   -1,   512,  513,  -1,   -1,   516,  517,  518,  519,  520,  521,  -1,   -1,   524,  525,
    -1,   527,  528,  529,  -1,   -1,   -1,   -1,   534,  -1,   536,  537,  -1,   539,  -1,   541,  -1,   -1,   -1,
    -1,   546,  -1,   -1,   -1,   550,  551,  -1,   -1,   -1,   -1,   556,  -1,   558,  -1,   -1,   561,  562,  -1,
    564,  565,  5,    -1,   7,    8,    9,    10,   11,   -1,   -1,   -1,   -1,   -1,   17,   -1,   -1,   20,   -1,
    22,   23,   24,   25,   26,   -1,   28,   29,   30,   -1,   32,   33,   34,   35,   36,   37,   38,   -1,   40,
    41,   -1,   43,   -1,   45,   46,   -1,   -1,   49,   50,   51,   -1,   53,   54,   55,   56,   -1,   58,   59,
    60,   61,   -1,   63,   64,   -1,   66,   67,   68,   69,   70,   71,   72,   73,   -1,   -1,   76,   -1,   78,
    -1,   80,   81,   82,   -1,   -1,   85,   86,   87,   -1,   89,   90,   -1,   92,   93,   94,   95,   96,   -1,
    -1,   -1,   -1,   101,  102,  103,  -1,   -1,   106,  107,  108,  -1,   110,  -1,   -1,   -1,   114,  115,  116,
    -1,   118,  119,  120,  -1,   -1,   -1,   124,  -1,   -1,   127,  128,  129,  -1,   -1,   132,  133,  -1,   135,
    136,  137,  138,  139,  140,  -1,   -1,   143,  -1,   145,  146,  147,  148,  -1,   150,  151,  152,  153,  154,
    155,  -1,   157,  158,  159,  160,  161,  -1,   163,  -1,   -1,   166,  -1,   168,  169,  -1,   171,  172,  -1,
    174,  175,  176,  177,  178,  -1,   180,  181,  182,  183,  184,  185,  186,  -1,   -1,   189,  190,  -1,   192,
    193,  -1,   195,  196,  -1,   198,  199,  -1,   201,  -1,   -1,   -1,   205,  206,  207,  208,  209,  -1,   211,
    212,  -1,   -1,   -1,   216,  -1,   -1,   219,  220,  221,  -1,   -1,   224,  -1,   -1,   227,  228,  -1,   -1,
    -1,   -1,   -1,   -1,   235,  236,  237,  -1,   -1,   240,  241,  -1,   243,  244,  -1,   -1,   -1,   248,  -1,
    250,  -1,   252,  253,  -1,   255,  -1,   257,  258,  -1,   -1,   261,  -1,   -1,   -1,   -1,   266,  267,  268,
    269,  270,  271,  272,  273,  274,  275,  276,  277,  278,  279,  280,  281,  282,  283,  284,  285,  286,  287,
    288,  289,  -1,   -1,   -1,   293,  294,  295,  296,  -1,   -1,   299,  300,  301,  302,  303,  -1,   305,  306,
    307,  308,  309,  310,  311,  312,  313,  314,  315,  316,  -1,   318,  319,  320,  -1,   322,  323,  324,  325,
    326,  327,  328,  -1,   330,  331,  -1,   333,  334,  335,  -1,   337,  338,  339,  -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   350,  351,  352,  353,  354,  355,  356,  357,  358,  359,  -1,   361,  362,  -1,
    364,  -1,   366,  367,  -1,   369,  370,  371,  372,  373,  374,  375,  376,  377,  -1,   -1,   -1,   381,  382,
    -1,   -1,   385,  386,  387,  -1,   389,  -1,   391,  392,  393,  394,  395,  -1,   397,  398,  399,  -1,   401,
    402,  -1,   -1,   405,  406,  407,  408,  409,  410,  411,  412,  413,  414,  415,  -1,   417,  418,  -1,   -1,
    -1,   422,  423,  424,  -1,   -1,   427,  -1,   -1,   -1,   431,  432,  433,  434,  -1,   436,  437,  -1,   -1,
    -1,   -1,   -1,   -1,   444,  445,  -1,   447,  -1,   -1,   450,  -1,   -1,   453,  454,  455,  456,  457,  458,
    -1,   460,  461,  462,  463,  464,  465,  466,  467,  468,  469,  470,  -1,   472,  473,  -1,   475,  476,  477,
    478,  479,  480,  -1,   -1,   -1,   -1,   -1,   486,  -1,   488,  489,  490,  491,  492,  493,  494,  -1,   496,
    497,  498,  499,  -1,   501,  -1,   -1,   504,  505,  506,  -1,   -1,   509,  -1,   -1,   512,  513,  -1,   -1,
    516,  517,  518,  519,  520,  521,  -1,   -1,   524,  525,  -1,   527,  528,  529,  -1,   -1,   -1,   -1,   534,
    -1,   536,  537,  -1,   539,  -1,   541,  -1,   -1,   -1,   -1,   546,  -1,   -1,   -1,   550,  551,  -1,   -1,
    -1,   -1,   556,  -1,   558,  -1,   -1,   561,  562,  -1,   564,  565,  5,    -1,   7,    8,    9,    10,   11,
    -1,   -1,   -1,   -1,   -1,   17,   -1,   -1,   20,   -1,   22,   23,   24,   25,   26,   -1,   28,   29,   30,
    -1,   32,   33,   34,   35,   36,   37,   38,   -1,   40,   41,   -1,   43,   -1,   45,   46,   -1,   -1,   49,
    50,   51,   -1,   53,   54,   55,   56,   -1,   58,   59,   60,   61,   -1,   63,   64,   -1,   66,   67,   68,
    69,   70,   71,   72,   73,   -1,   -1,   76,   -1,   78,   -1,   80,   81,   82,   -1,   -1,   85,   86,   87,
    -1,   89,   90,   -1,   92,   93,   94,   95,   96,   -1,   -1,   -1,   -1,   101,  102,  103,  -1,   -1,   106,
    107,  108,  -1,   110,  -1,   -1,   -1,   114,  115,  116,  -1,   118,  119,  120,  -1,   -1,   -1,   124,  -1,
    -1,   127,  128,  129,  -1,   -1,   132,  133,  -1,   135,  136,  137,  138,  139,  140,  -1,   -1,   143,  -1,
    145,  146,  147,  148,  -1,   150,  151,  152,  153,  154,  155,  -1,   157,  158,  159,  160,  161,  -1,   163,
    -1,   -1,   166,  -1,   168,  169,  -1,   171,  172,  -1,   174,  175,  176,  177,  178,  -1,   180,  181,  182,
    183,  184,  185,  186,  -1,   -1,   189,  190,  -1,   192,  193,  -1,   195,  196,  -1,   198,  199,  -1,   201,
    -1,   -1,   -1,   205,  206,  207,  208,  209,  -1,   211,  212,  -1,   -1,   -1,   216,  -1,   -1,   219,  220,
    221,  -1,   -1,   224,  -1,   -1,   227,  228,  -1,   -1,   -1,   -1,   -1,   -1,   235,  236,  237,  -1,   -1,
    240,  241,  -1,   243,  244,  -1,   -1,   -1,   248,  -1,   250,  -1,   252,  253,  -1,   255,  -1,   257,  258,
    -1,   -1,   261,  -1,   -1,   -1,   -1,   266,  267,  268,  269,  270,  271,  272,  273,  274,  275,  276,  277,
    278,  279,  280,  281,  282,  283,  284,  285,  286,  287,  288,  289,  -1,   -1,   -1,   293,  294,  295,  296,
    -1,   -1,   299,  300,  301,  302,  303,  -1,   305,  306,  307,  308,  309,  310,  311,  312,  313,  314,  315,
    316,  -1,   318,  319,  320,  -1,   322,  323,  324,  325,  -1,   327,  328,  -1,   330,  331,  -1,   333,  334,
    335,  -1,   337,  338,  339,  -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   350,  351,  352,  353,
    354,  355,  356,  357,  358,  359,  -1,   361,  362,  -1,   364,  -1,   366,  367,  -1,   369,  370,  371,  372,
    373,  374,  375,  376,  377,  -1,   -1,   -1,   381,  382,  -1,   -1,   385,  386,  387,  -1,   389,  -1,   391,
    392,  393,  394,  395,  -1,   397,  398,  399,  -1,   401,  402,  -1,   -1,   405,  406,  407,  408,  409,  410,
    411,  412,  413,  414,  415,  -1,   417,  418,  -1,   -1,   -1,   422,  423,  424,  -1,   -1,   427,  -1,   -1,
    -1,   431,  432,  433,  434,  -1,   436,  437,  -1,   -1,   -1,   -1,   -1,   -1,   444,  445,  -1,   447,  -1,
    -1,   450,  -1,   -1,   453,  454,  455,  456,  457,  458,  -1,   460,  461,  462,  463,  464,  465,  466,  467,
    468,  469,  470,  -1,   472,  473,  -1,   475,  476,  477,  478,  479,  480,  -1,   -1,   -1,   -1,   -1,   486,
    -1,   488,  489,  490,  491,  492,  493,  494,  -1,   496,  497,  498,  499,  -1,   501,  -1,   -1,   504,  505,
    506,  -1,   -1,   509,  -1,   -1,   512,  513,  -1,   -1,   516,  517,  518,  519,  520,  521,  -1,   -1,   524,
    525,  -1,   527,  528,  529,  -1,   -1,   -1,   -1,   534,  -1,   536,  537,  -1,   539,  -1,   541,  -1,   -1,
    -1,   -1,   546,  -1,   -1,   -1,   550,  551,  -1,   -1,   -1,   -1,   556,  -1,   558,  -1,   -1,   561,  562,
    -1,   564,  565,  5,    -1,   7,    8,    9,    10,   11,   -1,   -1,   -1,   -1,   -1,   17,   -1,   -1,   20,
    -1,   -1,   23,   24,   25,   26,   -1,   28,   -1,   30,   -1,   -1,   33,   -1,   -1,   -1,   37,   -1,   -1,
    40,   41,   -1,   43,   -1,   45,   46,   -1,   -1,   49,   -1,   51,   -1,   53,   54,   -1,   56,   -1,   58,
    59,   60,   -1,   -1,   63,   64,   -1,   66,   67,   68,   69,   70,   -1,   -1,   73,   -1,   -1,   76,   77,
    78,   -1,   -1,   -1,   -1,   -1,   -1,   85,   -1,   -1,   -1,   -1,   -1,   -1,   92,   93,   -1,   -1,   96,
    -1,   -1,   -1,   -1,   101,  102,  -1,   -1,   -1,   -1,   -1,   108,  -1,   110,  -1,   -1,   -1,   -1,   -1,
    116,  -1,   118,  119,  120,  -1,   -1,   -1,   124,  -1,   -1,   127,  128,  129,  -1,   -1,   -1,   133,  -1,
    -1,   -1,   137,  138,  139,  140,  -1,   -1,   143,  -1,   145,  146,  147,  -1,   -1,   150,  -1,   152,  -1,
    -1,   155,  -1,   -1,   158,  159,  160,  -1,   -1,   163,  -1,   -1,   -1,   -1,   168,  169,  -1,   -1,   172,
    173,  174,  -1,   -1,   -1,   -1,   -1,   -1,   181,  182,  -1,   -1,   185,  186,  -1,   -1,   189,  -1,   -1,
    -1,   -1,   -1,   195,  196,  -1,   198,  -1,   -1,   201,  -1,   -1,   -1,   205,  206,  207,  208,  -1,   -1,
    211,  212,  213,  -1,   -1,   216,  -1,   -1,   -1,   220,  -1,   -1,   -1,   224,  -1,   -1,   227,  228,  -1,
    -1,   -1,   232,  -1,   -1,   235,  -1,   237,  -1,   -1,   -1,   241,  -1,   -1,   244,  -1,   246,  -1,   -1,
    -1,   250,  -1,   252,  -1,   -1,   255,  -1,   257,  -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   267,
    268,  269,  270,  271,  272,  -1,   274,  275,  276,  277,  278,  279,  280,  281,  282,  -1,   284,  285,  286,
    -1,   288,  289,  -1,   -1,   -1,   293,  294,  295,  296,  -1,   -1,   299,  300,  -1,   -1,   303,  -1,   305,
    -1,   307,  -1,   -1,   310,  311,  312,  313,  314,  315,  316,  -1,   -1,   319,  320,  -1,   322,  323,  324,
    -1,   -1,   -1,   328,  -1,   -1,   -1,   -1,   333,  334,  335,  -1,   337,  338,  339,  -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   350,  351,  352,  -1,   354,  -1,   356,  -1,   358,  -1,   -1,   361,  362,
    -1,   364,  -1,   366,  367,  -1,   369,  370,  371,  372,  373,  374,  375,  376,  -1,   -1,   -1,   -1,   381,
    382,  -1,   -1,   385,  386,  387,  -1,   389,  -1,   391,  392,  -1,   -1,   395,  -1,   397,  398,  399,  -1,
    401,  402,  -1,   -1,   -1,   406,  407,  -1,   409,  410,  -1,   412,  413,  414,  415,  -1,   417,  418,  419,
    -1,   -1,   422,  423,  424,  -1,   -1,   427,  -1,   -1,   -1,   431,  432,  433,  434,  -1,   436,  437,  438,
    -1,   -1,   -1,   -1,   -1,   444,  445,  -1,   447,  -1,   -1,   450,  -1,   -1,   453,  454,  -1,   -1,   457,
    458,  -1,   460,  461,  462,  -1,   -1,   -1,   466,  467,  -1,   469,  470,  -1,   472,  473,  -1,   -1,   476,
    477,  478,  479,  480,  -1,   -1,   -1,   -1,   -1,   486,  -1,   488,  -1,   -1,   491,  492,  493,  494,  -1,
    -1,   497,  498,  -1,   -1,   501,  -1,   -1,   -1,   -1,   506,  -1,   -1,   509,  -1,   -1,   512,  513,  -1,
    -1,   -1,   -1,   -1,   -1,   -1,   521,  -1,   -1,   524,  -1,   -1,   527,  528,  529,  -1,   -1,   -1,   -1,
    534,  -1,   536,  537,  -1,   -1,   -1,   541,  -1,   5,    -1,   7,    8,    9,    10,   11,   -1,   -1,   -1,
    -1,   -1,   17,   -1,   -1,   20,   -1,   -1,   23,   24,   25,   26,   565,  28,   -1,   30,   -1,   -1,   33,
    -1,   -1,   -1,   37,   -1,   -1,   40,   41,   -1,   43,   -1,   45,   46,   -1,   -1,   49,   -1,   51,   -1,
    53,   54,   -1,   56,   -1,   58,   59,   60,   -1,   -1,   63,   64,   -1,   66,   67,   68,   69,   70,   -1,
    -1,   73,   -1,   -1,   76,   77,   78,   -1,   -1,   -1,   -1,   -1,   -1,   85,   -1,   -1,   -1,   -1,   -1,
    -1,   92,   93,   -1,   -1,   96,   -1,   -1,   -1,   -1,   101,  102,  -1,   -1,   -1,   -1,   -1,   108,  -1,
    110,  -1,   -1,   -1,   -1,   -1,   116,  -1,   118,  119,  120,  -1,   -1,   -1,   124,  -1,   -1,   127,  128,
    129,  -1,   -1,   -1,   133,  -1,   -1,   -1,   137,  138,  139,  140,  -1,   -1,   143,  -1,   145,  146,  147,
    -1,   -1,   150,  -1,   152,  -1,   -1,   155,  -1,   -1,   158,  159,  160,  -1,   -1,   163,  -1,   -1,   -1,
    -1,   168,  169,  -1,   -1,   172,  173,  174,  -1,   -1,   -1,   -1,   -1,   -1,   181,  182,  -1,   -1,   185,
    186,  -1,   -1,   189,  -1,   -1,   -1,   -1,   -1,   195,  196,  -1,   198,  -1,   -1,   201,  -1,   -1,   -1,
    205,  206,  207,  208,  -1,   -1,   211,  212,  213,  -1,   -1,   216,  -1,   -1,   -1,   220,  -1,   -1,   -1,
    224,  -1,   -1,   227,  228,  -1,   -1,   -1,   232,  -1,   -1,   235,  -1,   237,  -1,   -1,   -1,   241,  -1,
    -1,   244,  -1,   -1,   -1,   -1,   -1,   250,  -1,   252,  -1,   -1,   255,  -1,   257,  -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   267,  268,  269,  270,  271,  272,  -1,   274,  275,  276,  277,  278,  279,  280,
    281,  282,  -1,   284,  285,  286,  -1,   288,  289,  -1,   -1,   -1,   293,  294,  295,  296,  -1,   -1,   299,
    300,  -1,   -1,   303,  -1,   305,  -1,   307,  -1,   -1,   310,  311,  312,  313,  314,  315,  316,  -1,   -1,
    319,  320,  -1,   322,  323,  324,  -1,   -1,   -1,   328,  -1,   -1,   -1,   -1,   333,  334,  335,  -1,   337,
    338,  339,  -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   350,  351,  352,  -1,   354,  -1,   356,
    -1,   358,  -1,   -1,   361,  362,  -1,   364,  -1,   366,  367,  -1,   369,  370,  371,  372,  373,  374,  375,
    376,  -1,   -1,   -1,   -1,   381,  382,  -1,   -1,   385,  386,  387,  -1,   389,  -1,   391,  392,  -1,   -1,
    395,  -1,   397,  398,  399,  -1,   401,  402,  -1,   -1,   -1,   406,  407,  -1,   409,  410,  -1,   412,  413,
    414,  415,  -1,   417,  418,  -1,   -1,   -1,   422,  423,  424,  -1,   -1,   427,  -1,   -1,   -1,   431,  432,
    433,  434,  -1,   436,  437,  438,  -1,   -1,   -1,   -1,   -1,   444,  445,  -1,   447,  -1,   -1,   450,  -1,
    -1,   453,  454,  -1,   -1,   457,  458,  -1,   460,  461,  462,  -1,   -1,   -1,   466,  467,  -1,   469,  470,
    -1,   472,  473,  -1,   -1,   476,  477,  478,  479,  480,  -1,   -1,   -1,   -1,   -1,   486,  -1,   488,  -1,
    -1,   491,  492,  493,  494,  -1,   -1,   497,  498,  -1,   -1,   501,  -1,   -1,   -1,   -1,   506,  -1,   -1,
    509,  -1,   -1,   512,  513,  -1,   -1,   -1,   -1,   -1,   -1,   -1,   521,  -1,   -1,   524,  -1,   -1,   527,
    528,  529,  -1,   -1,   -1,   -1,   534,  -1,   536,  537,  -1,   -1,   -1,   541,  -1,   5,    -1,   7,    8,
    9,    10,   11,   -1,   -1,   -1,   -1,   -1,   17,   -1,   -1,   20,   -1,   -1,   23,   24,   25,   26,   565,
    28,   -1,   30,   -1,   -1,   33,   -1,   -1,   -1,   37,   -1,   -1,   40,   41,   -1,   43,   -1,   45,   46,
    -1,   -1,   49,   -1,   51,   -1,   53,   54,   -1,   56,   -1,   58,   59,   60,   -1,   -1,   63,   64,   -1,
    66,   67,   68,   69,   70,   -1,   -1,   73,   -1,   -1,   76,   -1,   78,   -1,   -1,   -1,   -1,   -1,   -1,
    85,   -1,   -1,   -1,   -1,   -1,   -1,   92,   93,   -1,   -1,   96,   -1,   -1,   -1,   -1,   101,  102,  -1,
    -1,   -1,   -1,   -1,   108,  -1,   110,  -1,   -1,   -1,   -1,   -1,   116,  -1,   118,  119,  120,  -1,   -1,
    -1,   124,  -1,   -1,   127,  128,  129,  -1,   -1,   -1,   133,  -1,   -1,   -1,   137,  138,  139,  140,  -1,
    -1,   143,  -1,   145,  146,  147,  -1,   -1,   150,  -1,   152,  -1,   -1,   155,  -1,   -1,   158,  159,  160,
    -1,   -1,   163,  -1,   -1,   -1,   -1,   168,  169,  -1,   -1,   172,  -1,   174,  -1,   -1,   -1,   -1,   -1,
    -1,   181,  182,  -1,   -1,   185,  186,  -1,   -1,   189,  -1,   -1,   -1,   -1,   -1,   195,  196,  -1,   198,
    -1,   -1,   201,  -1,   -1,   -1,   205,  206,  207,  208,  -1,   -1,   211,  212,  -1,   -1,   -1,   216,  -1,
    -1,   -1,   220,  -1,   -1,   -1,   224,  -1,   -1,   227,  228,  -1,   -1,   -1,   -1,   -1,   -1,   235,  -1,
    237,  -1,   -1,   -1,   241,  -1,   -1,   244,  -1,   -1,   -1,   -1,   -1,   250,  -1,   252,  -1,   -1,   255,
    -1,   257,  -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   267,  268,  269,  270,  271,  272,  -1,   274,
    275,  276,  277,  278,  279,  280,  281,  282,  -1,   284,  285,  286,  -1,   288,  289,  -1,   -1,   -1,   293,
    294,  295,  296,  -1,   -1,   299,  300,  -1,   -1,   303,  -1,   305,  -1,   307,  -1,   -1,   310,  311,  312,
    313,  314,  315,  316,  -1,   -1,   319,  320,  -1,   322,  323,  324,  -1,   -1,   -1,   328,  -1,   -1,   -1,
    -1,   333,  334,  335,  -1,   337,  338,  339,  -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   350,
    351,  352,  -1,   354,  -1,   356,  -1,   358,  -1,   -1,   361,  362,  -1,   364,  -1,   366,  367,  -1,   369,
    370,  371,  372,  373,  374,  375,  376,  -1,   -1,   -1,   -1,   381,  382,  -1,   -1,   385,  386,  387,  -1,
    389,  -1,   391,  392,  -1,   -1,   395,  -1,   397,  398,  399,  -1,   401,  402,  -1,   -1,   -1,   406,  407,
    -1,   409,  410,  -1,   412,  413,  414,  415,  -1,   417,  418,  419,  -1,   -1,   422,  423,  424,  -1,   -1,
    427,  -1,   -1,   -1,   431,  432,  433,  434,  -1,   436,  437,  -1,   -1,   -1,   -1,   -1,   -1,   444,  445,
    -1,   447,  -1,   -1,   450,  -1,   -1,   453,  454,  -1,   -1,   457,  458,  -1,   460,  461,  462,  -1,   -1,
    -1,   466,  467,  -1,   469,  470,  -1,   472,  473,  -1,   -1,   476,  477,  478,  479,  480,  -1,   -1,   -1,
    -1,   -1,   486,  -1,   488,  -1,   -1,   491,  492,  493,  494,  -1,   -1,   497,  498,  -1,   -1,   501,  -1,
    -1,   -1,   -1,   506,  -1,   -1,   509,  -1,   -1,   512,  513,  -1,   -1,   -1,   -1,   -1,   -1,   -1,   521,
    -1,   -1,   524,  -1,   -1,   527,  528,  529,  -1,   -1,   -1,   -1,   534,  -1,   536,  537,  -1,   -1,   -1,
    541,  -1,   5,    -1,   7,    8,    9,    10,   11,   -1,   -1,   -1,   -1,   -1,   17,   -1,   -1,   20,   559,
    -1,   23,   24,   25,   26,   565,  28,   -1,   30,   -1,   -1,   33,   -1,   -1,   -1,   37,   -1,   -1,   40,
    41,   -1,   43,   -1,   45,   46,   -1,   -1,   49,   -1,   51,   -1,   53,   54,   -1,   56,   -1,   58,   59,
    60,   -1,   -1,   63,   64,   -1,   66,   67,   68,   69,   70,   -1,   -1,   73,   -1,   -1,   76,   -1,   78,
    -1,   -1,   -1,   -1,   -1,   -1,   85,   -1,   -1,   -1,   -1,   -1,   -1,   92,   93,   -1,   -1,   96,   -1,
    -1,   -1,   -1,   101,  102,  -1,   -1,   -1,   -1,   -1,   108,  -1,   110,  -1,   -1,   -1,   -1,   -1,   116,
    -1,   118,  119,  120,  -1,   -1,   -1,   124,  -1,   -1,   127,  128,  129,  -1,   -1,   -1,   133,  -1,   -1,
    -1,   137,  138,  139,  140,  -1,   -1,   143,  -1,   145,  146,  147,  -1,   -1,   150,  -1,   152,  -1,   -1,
    155,  -1,   -1,   158,  159,  160,  -1,   -1,   163,  -1,   -1,   -1,   -1,   168,  169,  -1,   -1,   172,  -1,
    174,  -1,   -1,   -1,   -1,   -1,   -1,   181,  182,  -1,   -1,   185,  186,  -1,   -1,   189,  -1,   -1,   -1,
    -1,   -1,   195,  196,  -1,   198,  -1,   -1,   201,  -1,   -1,   -1,   205,  206,  207,  208,  -1,   -1,   211,
    212,  -1,   -1,   -1,   216,  -1,   -1,   -1,   220,  -1,   -1,   -1,   224,  -1,   -1,   227,  228,  -1,   -1,
    -1,   -1,   -1,   -1,   235,  -1,   237,  -1,   -1,   -1,   241,  -1,   -1,   244,  -1,   -1,   -1,   -1,   -1,
    250,  -1,   252,  -1,   -1,   255,  -1,   257,  -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   267,  268,
    269,  270,  271,  272,  -1,   274,  275,  276,  277,  278,  279,  280,  281,  282,  -1,   284,  285,  286,  -1,
    288,  289,  -1,   -1,   -1,   293,  294,  295,  296,  -1,   -1,   299,  300,  -1,   -1,   303,  -1,   305,  -1,
    307,  -1,   -1,   310,  311,  312,  313,  314,  315,  316,  -1,   -1,   319,  320,  -1,   322,  323,  324,  -1,
    -1,   -1,   328,  -1,   -1,   -1,   -1,   333,  334,  335,  -1,   337,  338,  339,  -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   350,  351,  352,  -1,   354,  -1,   356,  -1,   358,  -1,   -1,   361,  362,  -1,
    364,  -1,   366,  367,  -1,   369,  370,  371,  372,  373,  374,  375,  376,  -1,   -1,   -1,   -1,   381,  382,
    -1,   -1,   385,  386,  387,  -1,   389,  -1,   391,  392,  -1,   -1,   395,  -1,   397,  398,  399,  -1,   401,
    402,  -1,   -1,   -1,   406,  407,  -1,   409,  410,  -1,   412,  413,  414,  415,  -1,   417,  418,  -1,   -1,
    -1,   422,  423,  424,  -1,   -1,   427,  -1,   -1,   -1,   431,  432,  433,  434,  -1,   436,  437,  -1,   -1,
    -1,   -1,   -1,   -1,   444,  445,  -1,   447,  -1,   -1,   450,  -1,   -1,   453,  454,  -1,   -1,   457,  458,
    -1,   460,  461,  462,  -1,   -1,   -1,   466,  467,  -1,   469,  470,  -1,   472,  473,  -1,   -1,   476,  477,
    478,  479,  480,  -1,   -1,   -1,   -1,   -1,   486,  -1,   488,  -1,   -1,   491,  492,  493,  494,  -1,   -1,
    497,  498,  -1,   -1,   501,  -1,   -1,   -1,   -1,   506,  -1,   -1,   509,  -1,   -1,   512,  513,  -1,   -1,
    -1,   -1,   -1,   -1,   -1,   521,  -1,   -1,   524,  -1,   -1,   527,  528,  529,  -1,   -1,   -1,   -1,   534,
    -1,   536,  537,  -1,   -1,   -1,   541,  -1,   -1,   -1,   -1,   -1,   -1,   5,    -1,   7,    8,    9,    10,
    11,   -1,   -1,   -1,   -1,   559,  17,   -1,   -1,   20,   564,  565,  23,   24,   25,   26,   -1,   28,   -1,
    30,   -1,   -1,   33,   -1,   -1,   -1,   37,   -1,   -1,   40,   41,   -1,   43,   -1,   45,   46,   -1,   -1,
    49,   -1,   51,   -1,   53,   54,   -1,   56,   -1,   58,   59,   60,   -1,   -1,   63,   64,   -1,   66,   67,
    68,   69,   70,   -1,   -1,   73,   -1,   -1,   76,   -1,   78,   -1,   -1,   -1,   -1,   -1,   -1,   85,   -1,
    -1,   -1,   -1,   -1,   -1,   92,   93,   -1,   -1,   96,   -1,   -1,   -1,   -1,   101,  102,  -1,   -1,   -1,
    -1,   -1,   108,  -1,   110,  -1,   -1,   -1,   -1,   -1,   116,  -1,   118,  119,  120,  -1,   -1,   -1,   124,
    -1,   -1,   127,  128,  129,  -1,   -1,   -1,   133,  -1,   -1,   -1,   137,  138,  139,  140,  -1,   -1,   143,
    -1,   145,  146,  147,  -1,   -1,   150,  -1,   152,  -1,   -1,   155,  -1,   -1,   158,  159,  160,  -1,   -1,
    163,  -1,   -1,   -1,   -1,   168,  169,  -1,   -1,   172,  -1,   174,  -1,   -1,   -1,   -1,   -1,   -1,   181,
    182,  -1,   -1,   185,  186,  -1,   -1,   189,  -1,   -1,   -1,   -1,   -1,   195,  196,  -1,   198,  -1,   -1,
    201,  -1,   -1,   -1,   205,  206,  207,  208,  -1,   -1,   211,  212,  -1,   -1,   -1,   216,  -1,   -1,   -1,
    220,  -1,   222,  -1,   224,  -1,   -1,   227,  228,  -1,   -1,   -1,   -1,   -1,   -1,   235,  -1,   237,  -1,
    -1,   -1,   241,  -1,   -1,   244,  -1,   -1,   -1,   -1,   -1,   250,  -1,   252,  -1,   -1,   255,  -1,   257,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   267,  268,  269,  270,  271,  272,  -1,   274,  275,  276,
    277,  278,  279,  280,  281,  282,  -1,   284,  285,  286,  -1,   288,  289,  -1,   -1,   -1,   293,  294,  295,
    296,  -1,   -1,   299,  300,  -1,   -1,   303,  -1,   305,  -1,   307,  -1,   -1,   310,  311,  312,  313,  314,
    315,  316,  -1,   -1,   319,  320,  -1,   322,  323,  324,  -1,   -1,   -1,   328,  -1,   -1,   -1,   -1,   333,
    334,  335,  -1,   337,  338,  339,  -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   350,  351,  352,
    -1,   354,  -1,   356,  -1,   358,  -1,   -1,   361,  362,  -1,   364,  -1,   366,  367,  -1,   369,  370,  371,
    372,  373,  374,  375,  376,  -1,   -1,   -1,   -1,   381,  382,  -1,   -1,   385,  386,  387,  -1,   389,  -1,
    391,  392,  -1,   -1,   395,  -1,   397,  398,  399,  -1,   401,  402,  -1,   -1,   -1,   406,  407,  -1,   409,
    410,  -1,   412,  413,  414,  415,  -1,   417,  418,  -1,   -1,   -1,   422,  423,  424,  -1,   -1,   427,  -1,
    -1,   -1,   431,  432,  433,  434,  -1,   436,  437,  -1,   -1,   -1,   -1,   -1,   -1,   444,  445,  -1,   447,
    -1,   -1,   450,  -1,   -1,   453,  454,  -1,   -1,   457,  458,  -1,   460,  461,  462,  -1,   -1,   -1,   466,
    467,  -1,   469,  470,  -1,   472,  473,  -1,   -1,   476,  477,  478,  479,  480,  -1,   -1,   -1,   -1,   -1,
    486,  -1,   488,  -1,   -1,   491,  492,  493,  494,  -1,   -1,   497,  498,  -1,   -1,   501,  -1,   -1,   -1,
    -1,   506,  -1,   -1,   509,  -1,   -1,   512,  513,  -1,   -1,   -1,   -1,   -1,   -1,   -1,   521,  -1,   -1,
    524,  -1,   -1,   527,  528,  529,  -1,   -1,   -1,   -1,   534,  -1,   536,  537,  -1,   -1,   -1,   541,  -1,
    5,    -1,   7,    8,    9,    10,   11,   -1,   -1,   -1,   -1,   -1,   17,   -1,   -1,   20,   -1,   -1,   23,
    24,   25,   26,   565,  28,   -1,   30,   -1,   -1,   33,   -1,   -1,   -1,   37,   -1,   -1,   40,   41,   -1,
    43,   -1,   45,   46,   -1,   -1,   49,   -1,   51,   -1,   53,   54,   -1,   56,   -1,   58,   59,   60,   -1,
    -1,   63,   64,   -1,   66,   67,   68,   69,   70,   -1,   -1,   73,   -1,   -1,   76,   -1,   78,   -1,   -1,
    -1,   -1,   -1,   -1,   85,   -1,   -1,   -1,   -1,   -1,   -1,   92,   93,   -1,   -1,   96,   -1,   -1,   -1,
    -1,   101,  102,  -1,   -1,   -1,   -1,   -1,   108,  -1,   110,  -1,   -1,   -1,   -1,   -1,   116,  -1,   118,
    119,  120,  -1,   -1,   -1,   124,  -1,   -1,   127,  128,  129,  -1,   -1,   -1,   133,  -1,   -1,   -1,   137,
    138,  139,  140,  -1,   -1,   143,  -1,   145,  146,  147,  -1,   -1,   150,  -1,   152,  -1,   -1,   155,  -1,
    -1,   158,  159,  160,  -1,   -1,   163,  -1,   -1,   -1,   -1,   168,  169,  -1,   -1,   172,  -1,   174,  -1,
    -1,   -1,   -1,   -1,   -1,   181,  182,  -1,   -1,   185,  186,  -1,   -1,   189,  -1,   -1,   -1,   -1,   -1,
    195,  196,  -1,   198,  -1,   -1,   201,  -1,   -1,   -1,   205,  206,  207,  208,  -1,   -1,   211,  212,  -1,
    -1,   -1,   216,  -1,   -1,   -1,   220,  -1,   -1,   -1,   224,  -1,   -1,   227,  228,  -1,   -1,   -1,   -1,
    -1,   -1,   235,  -1,   237,  -1,   -1,   -1,   241,  -1,   -1,   244,  -1,   -1,   -1,   -1,   -1,   250,  -1,
    252,  -1,   -1,   255,  -1,   257,  -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   267,  268,  269,  270,
    271,  272,  -1,   274,  275,  276,  277,  278,  279,  280,  281,  282,  -1,   284,  285,  286,  -1,   288,  289,
    -1,   -1,   -1,   293,  294,  295,  296,  -1,   -1,   299,  300,  -1,   -1,   303,  -1,   305,  -1,   307,  -1,
    -1,   310,  311,  312,  313,  314,  315,  316,  -1,   -1,   319,  320,  -1,   322,  323,  324,  -1,   -1,   -1,
    328,  -1,   -1,   -1,   -1,   333,  334,  335,  -1,   337,  338,  339,  -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   350,  351,  352,  -1,   354,  -1,   356,  -1,   358,  -1,   -1,   361,  362,  -1,   364,  -1,
    366,  367,  -1,   369,  370,  371,  372,  373,  374,  375,  376,  -1,   -1,   -1,   -1,   381,  382,  -1,   -1,
    385,  386,  387,  -1,   389,  -1,   391,  392,  -1,   -1,   395,  -1,   397,  398,  399,  -1,   401,  402,  -1,
    -1,   -1,   406,  407,  -1,   409,  410,  -1,   412,  413,  414,  415,  -1,   417,  418,  -1,   -1,   -1,   422,
    423,  424,  -1,   -1,   427,  -1,   -1,   -1,   431,  432,  433,  434,  -1,   436,  437,  -1,   -1,   -1,   -1,
    -1,   -1,   444,  445,  -1,   447,  -1,   -1,   450,  -1,   -1,   453,  454,  -1,   -1,   457,  458,  -1,   460,
    461,  462,  -1,   -1,   -1,   466,  467,  -1,   469,  470,  -1,   472,  473,  -1,   -1,   476,  477,  478,  479,
    480,  -1,   -1,   -1,   -1,   -1,   486,  -1,   488,  -1,   -1,   491,  492,  493,  494,  -1,   -1,   497,  498,
    -1,   -1,   501,  -1,   -1,   -1,   -1,   506,  -1,   -1,   509,  -1,   -1,   512,  513,  -1,   -1,   -1,   -1,
    -1,   -1,   -1,   521,  -1,   -1,   524,  -1,   -1,   527,  528,  529,  -1,   -1,   -1,   -1,   534,  -1,   536,
    537,  -1,   -1,   -1,   541,  -1,   5,    -1,   7,    8,    9,    10,   11,   -1,   -1,   552,  -1,   -1,   17,
    -1,   -1,   20,   -1,   -1,   23,   24,   25,   26,   565,  28,   -1,   30,   -1,   -1,   33,   -1,   -1,   -1,
    37,   -1,   -1,   40,   41,   -1,   43,   -1,   45,   46,   -1,   -1,   49,   -1,   51,   -1,   53,   54,   -1,
    56,   -1,   58,   59,   60,   -1,   -1,   63,   64,   -1,   66,   67,   68,   69,   70,   -1,   -1,   73,   -1,
    -1,   76,   -1,   78,   -1,   -1,   -1,   -1,   -1,   -1,   85,   -1,   -1,   -1,   -1,   -1,   -1,   92,   93,
    -1,   -1,   96,   -1,   -1,   -1,   -1,   101,  102,  -1,   -1,   -1,   -1,   -1,   108,  -1,   110,  -1,   -1,
    -1,   -1,   -1,   116,  -1,   118,  119,  120,  -1,   -1,   -1,   124,  -1,   -1,   127,  128,  129,  -1,   -1,
    -1,   133,  -1,   -1,   -1,   137,  138,  139,  140,  -1,   -1,   143,  -1,   145,  146,  147,  -1,   -1,   150,
    -1,   152,  -1,   -1,   155,  -1,   -1,   158,  159,  160,  -1,   -1,   163,  -1,   -1,   -1,   -1,   168,  169,
    -1,   -1,   172,  -1,   174,  -1,   -1,   -1,   -1,   -1,   -1,   181,  182,  -1,   -1,   185,  186,  -1,   -1,
    189,  -1,   -1,   -1,   -1,   -1,   195,  196,  -1,   198,  -1,   -1,   201,  -1,   -1,   -1,   205,  206,  207,
    208,  -1,   -1,   211,  212,  -1,   -1,   -1,   216,  -1,   -1,   -1,   220,  -1,   -1,   -1,   224,  -1,   -1,
    227,  228,  -1,   -1,   -1,   -1,   -1,   -1,   235,  -1,   237,  -1,   -1,   -1,   241,  -1,   -1,   244,  -1,
    -1,   -1,   -1,   -1,   250,  -1,   252,  -1,   -1,   255,  -1,   257,  -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   267,  268,  269,  270,  271,  272,  -1,   274,  275,  276,  277,  278,  279,  280,  281,  282,  -1,
    284,  285,  286,  -1,   288,  289,  -1,   -1,   -1,   293,  294,  295,  296,  -1,   -1,   299,  300,  -1,   -1,
    303,  -1,   305,  -1,   307,  -1,   -1,   310,  311,  312,  313,  314,  315,  316,  -1,   -1,   319,  320,  -1,
    322,  323,  324,  -1,   -1,   -1,   328,  -1,   -1,   -1,   -1,   333,  334,  335,  -1,   337,  338,  339,  -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   350,  351,  352,  -1,   354,  -1,   356,  -1,   358,  -1,
    -1,   361,  362,  -1,   364,  -1,   366,  367,  -1,   369,  370,  371,  372,  373,  374,  375,  376,  -1,   -1,
    -1,   -1,   381,  382,  -1,   -1,   385,  386,  387,  -1,   389,  -1,   391,  392,  -1,   -1,   395,  -1,   397,
    398,  399,  -1,   401,  402,  -1,   -1,   -1,   406,  407,  -1,   409,  410,  -1,   412,  413,  414,  415,  -1,
    417,  418,  -1,   -1,   -1,   422,  423,  424,  -1,   -1,   427,  -1,   -1,   -1,   431,  432,  433,  434,  -1,
    436,  437,  -1,   -1,   -1,   -1,   -1,   -1,   444,  445,  -1,   447,  -1,   -1,   450,  -1,   -1,   453,  454,
    -1,   -1,   457,  458,  -1,   460,  461,  462,  -1,   -1,   -1,   466,  467,  -1,   469,  470,  -1,   472,  473,
    -1,   -1,   476,  477,  478,  479,  480,  -1,   -1,   -1,   -1,   -1,   486,  -1,   488,  -1,   -1,   491,  492,
    493,  494,  -1,   -1,   497,  498,  -1,   -1,   501,  -1,   -1,   -1,   -1,   506,  -1,   -1,   509,  -1,   -1,
    512,  513,  -1,   -1,   -1,   -1,   -1,   -1,   -1,   521,  -1,   -1,   524,  -1,   -1,   527,  528,  529,  -1,
    -1,   -1,   -1,   534,  -1,   536,  537,  -1,   -1,   -1,   541,  -1,   -1,   -1,   -1,   -1,   -1,   5,    -1,
    7,    8,    9,    10,   11,   -1,   -1,   -1,   558,  -1,   17,   -1,   -1,   20,   -1,   565,  23,   24,   25,
    26,   -1,   28,   -1,   30,   -1,   -1,   33,   -1,   -1,   -1,   37,   -1,   -1,   40,   41,   -1,   43,   -1,
    45,   46,   -1,   -1,   49,   -1,   51,   -1,   53,   54,   -1,   56,   -1,   58,   59,   60,   -1,   -1,   63,
    64,   -1,   66,   67,   68,   69,   70,   -1,   -1,   73,   -1,   -1,   76,   -1,   78,   -1,   -1,   -1,   -1,
    -1,   -1,   85,   -1,   -1,   -1,   -1,   -1,   -1,   92,   93,   -1,   -1,   96,   -1,   -1,   -1,   -1,   101,
    102,  -1,   -1,   -1,   -1,   -1,   108,  -1,   110,  -1,   -1,   -1,   -1,   -1,   116,  -1,   118,  119,  120,
    -1,   -1,   -1,   124,  -1,   -1,   127,  128,  129,  -1,   -1,   -1,   133,  -1,   -1,   -1,   137,  138,  139,
    140,  -1,   -1,   143,  -1,   145,  146,  147,  -1,   -1,   150,  -1,   152,  -1,   -1,   155,  -1,   -1,   158,
    159,  160,  -1,   -1,   163,  -1,   -1,   -1,   -1,   168,  169,  -1,   -1,   172,  -1,   174,  -1,   -1,   -1,
    -1,   -1,   -1,   181,  182,  -1,   -1,   185,  186,  -1,   -1,   189,  -1,   -1,   -1,   -1,   -1,   195,  196,
    -1,   198,  -1,   -1,   201,  -1,   -1,   -1,   205,  206,  207,  208,  -1,   -1,   211,  212,  -1,   -1,   -1,
    216,  -1,   -1,   -1,   220,  -1,   -1,   -1,   224,  -1,   -1,   227,  228,  -1,   -1,   -1,   -1,   -1,   -1,
    235,  -1,   237,  -1,   -1,   -1,   241,  -1,   -1,   244,  -1,   -1,   -1,   -1,   -1,   250,  -1,   252,  -1,
    -1,   255,  -1,   257,  -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   267,  268,  269,  270,  271,  272,
    -1,   274,  275,  276,  277,  278,  279,  280,  281,  282,  -1,   284,  285,  286,  -1,   288,  289,  -1,   -1,
    -1,   293,  294,  295,  296,  -1,   -1,   299,  300,  -1,   -1,   303,  -1,   305,  -1,   307,  -1,   -1,   310,
    311,  312,  313,  314,  315,  316,  -1,   -1,   319,  320,  -1,   322,  323,  324,  -1,   -1,   -1,   328,  -1,
    -1,   -1,   -1,   333,  334,  335,  -1,   337,  338,  339,  -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   350,  351,  352,  -1,   354,  -1,   356,  -1,   358,  -1,   -1,   361,  362,  -1,   364,  -1,   366,  367,
    -1,   369,  370,  371,  372,  373,  374,  375,  376,  -1,   -1,   -1,   -1,   381,  382,  -1,   -1,   385,  386,
    387,  -1,   389,  -1,   391,  392,  -1,   -1,   395,  -1,   397,  398,  399,  -1,   401,  402,  -1,   -1,   -1,
    406,  407,  -1,   409,  410,  -1,   412,  413,  414,  415,  -1,   417,  418,  -1,   -1,   -1,   422,  423,  424,
    -1,   -1,   427,  -1,   -1,   -1,   431,  432,  433,  434,  -1,   436,  437,  -1,   -1,   -1,   -1,   -1,   -1,
    444,  445,  -1,   447,  -1,   -1,   450,  -1,   -1,   453,  454,  -1,   -1,   457,  458,  -1,   460,  461,  462,
    -1,   -1,   -1,   466,  467,  -1,   469,  470,  -1,   472,  473,  -1,   -1,   476,  477,  478,  479,  480,  -1,
    -1,   -1,   -1,   -1,   486,  -1,   488,  -1,   -1,   491,  492,  493,  494,  -1,   -1,   497,  498,  -1,   -1,
    501,  -1,   -1,   -1,   -1,   506,  -1,   -1,   509,  -1,   -1,   512,  513,  -1,   -1,   -1,   -1,   -1,   -1,
    -1,   521,  -1,   -1,   524,  -1,   -1,   527,  528,  529,  -1,   -1,   -1,   -1,   534,  -1,   536,  537,  -1,
    -1,   -1,   541,  -1,   -1,   -1,   -1,   -1,   -1,   5,    -1,   7,    8,    9,    10,   11,   -1,   -1,   -1,
    -1,   -1,   17,   -1,   -1,   20,   564,  565,  23,   24,   25,   26,   -1,   28,   -1,   30,   -1,   -1,   33,
    -1,   -1,   -1,   37,   -1,   -1,   40,   41,   -1,   43,   -1,   45,   46,   -1,   -1,   49,   -1,   51,   -1,
    53,   54,   -1,   56,   -1,   58,   59,   60,   -1,   -1,   63,   64,   -1,   66,   67,   68,   69,   70,   -1,
    -1,   73,   -1,   -1,   76,   -1,   78,   -1,   -1,   -1,   -1,   -1,   -1,   85,   -1,   -1,   -1,   -1,   -1,
    -1,   92,   93,   -1,   -1,   96,   -1,   -1,   -1,   -1,   101,  102,  -1,   -1,   -1,   -1,   -1,   108,  -1,
    110,  -1,   -1,   -1,   -1,   -1,   116,  -1,   118,  119,  120,  -1,   -1,   -1,   124,  -1,   -1,   127,  128,
    129,  -1,   -1,   -1,   133,  -1,   -1,   -1,   137,  138,  139,  140,  -1,   -1,   143,  -1,   145,  146,  147,
    -1,   -1,   150,  -1,   152,  -1,   -1,   155,  -1,   -1,   158,  159,  160,  -1,   -1,   163,  -1,   -1,   -1,
    -1,   168,  169,  -1,   -1,   172,  -1,   174,  -1,   -1,   -1,   -1,   -1,   -1,   181,  182,  -1,   -1,   185,
    186,  -1,   -1,   189,  -1,   -1,   -1,   -1,   -1,   195,  196,  -1,   198,  -1,   -1,   201,  -1,   -1,   -1,
    205,  206,  207,  208,  -1,   -1,   211,  212,  -1,   -1,   -1,   216,  -1,   -1,   -1,   220,  -1,   -1,   -1,
    224,  -1,   -1,   227,  228,  -1,   -1,   -1,   -1,   -1,   -1,   235,  -1,   237,  -1,   -1,   -1,   241,  -1,
    -1,   244,  -1,   -1,   -1,   -1,   -1,   250,  -1,   252,  -1,   -1,   255,  -1,   257,  -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   267,  268,  269,  270,  271,  272,  -1,   274,  275,  276,  277,  278,  279,  280,
    281,  282,  -1,   284,  285,  286,  -1,   288,  289,  -1,   -1,   -1,   293,  294,  295,  296,  -1,   -1,   299,
    300,  -1,   -1,   303,  -1,   305,  -1,   307,  -1,   -1,   310,  311,  312,  313,  314,  315,  316,  -1,   -1,
    319,  320,  -1,   322,  323,  324,  -1,   -1,   -1,   328,  -1,   -1,   -1,   -1,   333,  334,  335,  -1,   337,
    338,  339,  -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   350,  351,  352,  -1,   354,  -1,   356,
    -1,   358,  -1,   -1,   361,  362,  -1,   364,  -1,   366,  367,  -1,   369,  370,  371,  372,  373,  374,  375,
    376,  -1,   -1,   -1,   -1,   381,  382,  -1,   -1,   385,  386,  387,  -1,   389,  -1,   391,  392,  -1,   -1,
    395,  -1,   397,  398,  399,  -1,   401,  402,  -1,   -1,   -1,   406,  407,  -1,   409,  410,  -1,   412,  413,
    414,  415,  -1,   417,  418,  -1,   -1,   -1,   422,  423,  424,  -1,   -1,   427,  -1,   -1,   -1,   431,  432,
    433,  434,  -1,   436,  437,  -1,   -1,   -1,   -1,   -1,   -1,   444,  445,  -1,   447,  -1,   -1,   450,  -1,
    -1,   453,  454,  -1,   -1,   457,  458,  -1,   460,  461,  462,  -1,   -1,   -1,   466,  467,  -1,   469,  470,
    -1,   472,  473,  -1,   -1,   476,  477,  478,  479,  480,  -1,   -1,   -1,   -1,   -1,   486,  -1,   488,  -1,
    -1,   491,  492,  493,  494,  -1,   -1,   497,  498,  -1,   -1,   501,  -1,   -1,   -1,   -1,   506,  -1,   -1,
    509,  -1,   -1,   512,  513,  -1,   -1,   -1,   -1,   -1,   -1,   -1,   521,  -1,   -1,   524,  -1,   -1,   527,
    528,  529,  -1,   -1,   -1,   -1,   534,  -1,   536,  537,  -1,   -1,   -1,   541,  -1,   5,    -1,   7,    8,
    9,    10,   11,   -1,   -1,   -1,   -1,   -1,   17,   -1,   -1,   20,   -1,   -1,   23,   24,   25,   26,   565,
    28,   -1,   30,   -1,   -1,   33,   -1,   -1,   -1,   37,   -1,   -1,   40,   41,   -1,   43,   -1,   45,   46,
    -1,   -1,   49,   -1,   51,   -1,   53,   54,   -1,   56,   -1,   58,   59,   60,   -1,   -1,   63,   64,   -1,
    66,   67,   68,   69,   70,   -1,   -1,   73,   -1,   -1,   76,   -1,   78,   -1,   -1,   -1,   -1,   -1,   -1,
    85,   -1,   -1,   -1,   -1,   -1,   -1,   92,   93,   -1,   -1,   96,   -1,   -1,   -1,   -1,   101,  102,  -1,
    -1,   -1,   -1,   -1,   108,  -1,   110,  -1,   -1,   -1,   -1,   -1,   116,  -1,   118,  119,  120,  -1,   -1,
    -1,   124,  -1,   -1,   127,  128,  129,  -1,   -1,   -1,   133,  -1,   -1,   -1,   137,  138,  139,  140,  -1,
    -1,   143,  -1,   145,  146,  147,  -1,   -1,   150,  -1,   152,  -1,   -1,   155,  -1,   -1,   158,  159,  160,
    -1,   -1,   163,  -1,   -1,   -1,   -1,   168,  169,  -1,   -1,   172,  -1,   174,  -1,   -1,   -1,   -1,   -1,
    -1,   181,  182,  -1,   -1,   185,  186,  -1,   -1,   189,  -1,   -1,   -1,   -1,   -1,   195,  196,  -1,   198,
    -1,   -1,   201,  -1,   -1,   -1,   205,  206,  207,  208,  -1,   -1,   211,  212,  -1,   -1,   -1,   216,  -1,
    -1,   -1,   220,  -1,   -1,   -1,   224,  -1,   -1,   227,  228,  -1,   -1,   -1,   -1,   -1,   -1,   235,  -1,
    237,  -1,   -1,   -1,   241,  -1,   -1,   244,  -1,   -1,   -1,   -1,   -1,   250,  -1,   252,  -1,   -1,   255,
    -1,   257,  -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   267,  268,  269,  270,  271,  272,  -1,   274,
    275,  276,  277,  278,  279,  280,  281,  282,  -1,   284,  285,  286,  -1,   288,  289,  -1,   -1,   -1,   293,
    294,  295,  296,  -1,   -1,   299,  300,  -1,   -1,   303,  -1,   305,  -1,   307,  -1,   -1,   310,  311,  312,
    313,  314,  315,  316,  -1,   -1,   319,  320,  -1,   322,  323,  324,  -1,   -1,   -1,   328,  -1,   -1,   -1,
    -1,   333,  334,  335,  -1,   337,  338,  339,  -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   350,
    351,  352,  -1,   354,  -1,   356,  -1,   358,  -1,   -1,   361,  362,  -1,   364,  -1,   366,  367,  -1,   369,
    370,  371,  372,  373,  374,  375,  376,  -1,   -1,   -1,   -1,   381,  382,  -1,   -1,   385,  386,  387,  -1,
    389,  -1,   391,  392,  -1,   -1,   395,  -1,   397,  398,  399,  -1,   401,  402,  -1,   -1,   -1,   406,  407,
    -1,   409,  410,  -1,   412,  413,  414,  415,  -1,   417,  418,  -1,   -1,   -1,   422,  423,  424,  -1,   -1,
    427,  -1,   -1,   -1,   431,  432,  433,  434,  -1,   436,  437,  -1,   -1,   -1,   -1,   -1,   -1,   444,  445,
    -1,   447,  -1,   -1,   450,  -1,   -1,   453,  454,  -1,   -1,   457,  458,  -1,   460,  461,  462,  -1,   -1,
    -1,   466,  467,  -1,   469,  470,  -1,   472,  473,  -1,   -1,   476,  477,  478,  479,  480,  -1,   -1,   -1,
    -1,   -1,   486,  -1,   488,  -1,   -1,   491,  492,  493,  494,  -1,   -1,   497,  498,  -1,   -1,   501,  -1,
    -1,   -1,   -1,   506,  -1,   -1,   509,  -1,   -1,   512,  513,  -1,   -1,   -1,   -1,   -1,   -1,   -1,   521,
    -1,   -1,   524,  -1,   -1,   527,  528,  529,  -1,   -1,   -1,   -1,   534,  -1,   536,  537,  -1,   -1,   -1,
    541,  -1,   5,    -1,   7,    8,    9,    10,   11,   -1,   -1,   -1,   -1,   -1,   17,   -1,   -1,   20,   -1,
    -1,   23,   24,   25,   26,   565,  28,   -1,   30,   -1,   -1,   33,   -1,   -1,   -1,   37,   -1,   -1,   40,
    41,   -1,   43,   -1,   45,   46,   -1,   -1,   49,   -1,   51,   -1,   53,   54,   -1,   56,   -1,   58,   59,
    60,   -1,   -1,   63,   64,   -1,   66,   67,   68,   69,   70,   -1,   -1,   73,   -1,   -1,   76,   -1,   78,
    -1,   -1,   -1,   -1,   -1,   -1,   85,   -1,   -1,   -1,   -1,   -1,   -1,   92,   93,   -1,   -1,   96,   -1,
    -1,   -1,   -1,   101,  102,  -1,   -1,   -1,   -1,   -1,   108,  -1,   110,  -1,   -1,   -1,   -1,   -1,   116,
    -1,   118,  119,  120,  -1,   -1,   -1,   124,  -1,   -1,   127,  128,  129,  -1,   -1,   -1,   133,  -1,   -1,
    -1,   137,  138,  139,  140,  -1,   -1,   143,  -1,   145,  146,  147,  -1,   -1,   150,  -1,   152,  -1,   -1,
    155,  -1,   -1,   158,  159,  160,  -1,   -1,   163,  -1,   -1,   -1,   -1,   168,  169,  -1,   -1,   172,  -1,
    174,  -1,   -1,   -1,   -1,   -1,   -1,   181,  182,  -1,   -1,   185,  186,  -1,   -1,   189,  -1,   -1,   -1,
    -1,   -1,   195,  196,  -1,   198,  -1,   -1,   201,  -1,   -1,   -1,   205,  206,  207,  208,  -1,   -1,   211,
    212,  -1,   -1,   -1,   216,  -1,   -1,   -1,   220,  -1,   -1,   -1,   224,  -1,   -1,   227,  228,  -1,   -1,
    -1,   -1,   -1,   -1,   235,  -1,   237,  -1,   -1,   -1,   241,  -1,   -1,   244,  -1,   -1,   -1,   -1,   -1,
    250,  -1,   252,  -1,   -1,   255,  -1,   257,  -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   267,  268,
    269,  270,  271,  272,  -1,   274,  275,  276,  277,  278,  279,  280,  281,  282,  -1,   284,  285,  286,  -1,
    288,  289,  -1,   -1,   -1,   293,  294,  295,  296,  -1,   -1,   299,  300,  -1,   -1,   303,  -1,   305,  -1,
    307,  -1,   -1,   310,  311,  312,  313,  314,  315,  316,  -1,   -1,   319,  320,  -1,   322,  323,  324,  -1,
    -1,   -1,   328,  -1,   -1,   -1,   -1,   333,  334,  335,  -1,   337,  338,  339,  -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   350,  351,  352,  -1,   354,  -1,   356,  -1,   358,  -1,   -1,   361,  362,  -1,
    364,  -1,   366,  367,  -1,   369,  370,  371,  372,  373,  374,  375,  376,  -1,   -1,   -1,   -1,   381,  382,
    -1,   -1,   385,  386,  387,  -1,   389,  -1,   391,  392,  -1,   -1,   395,  -1,   397,  398,  399,  -1,   401,
    402,  -1,   -1,   -1,   406,  407,  -1,   409,  410,  -1,   412,  413,  414,  415,  -1,   417,  418,  -1,   -1,
    -1,   422,  423,  424,  -1,   -1,   427,  -1,   -1,   -1,   431,  432,  433,  434,  -1,   436,  437,  -1,   -1,
    -1,   -1,   -1,   -1,   444,  445,  -1,   447,  -1,   -1,   450,  -1,   -1,   453,  454,  -1,   -1,   457,  458,
    -1,   460,  461,  462,  -1,   -1,   -1,   466,  467,  -1,   469,  470,  -1,   472,  473,  -1,   -1,   476,  477,
    478,  479,  480,  -1,   -1,   -1,   -1,   -1,   486,  -1,   488,  -1,   -1,   491,  492,  493,  494,  -1,   -1,
    497,  498,  -1,   -1,   501,  -1,   -1,   -1,   -1,   506,  -1,   -1,   509,  -1,   -1,   512,  513,  -1,   -1,
    -1,   -1,   -1,   -1,   -1,   521,  -1,   -1,   524,  -1,   -1,   527,  528,  529,  -1,   -1,   -1,   -1,   534,
    -1,   536,  537,  -1,   -1,   -1,   541,  -1,   5,    -1,   7,    8,    9,    10,   11,   -1,   -1,   -1,   -1,
    -1,   17,   -1,   -1,   20,   -1,   -1,   23,   24,   25,   26,   565,  28,   -1,   30,   -1,   -1,   33,   -1,
    -1,   -1,   37,   -1,   -1,   40,   41,   -1,   43,   -1,   45,   46,   -1,   -1,   49,   -1,   51,   -1,   53,
    54,   -1,   56,   -1,   58,   59,   60,   -1,   -1,   63,   64,   -1,   66,   67,   68,   69,   70,   -1,   -1,
    73,   -1,   -1,   76,   -1,   78,   -1,   -1,   -1,   -1,   -1,   -1,   85,   -1,   -1,   -1,   -1,   -1,   -1,
    92,   93,   -1,   -1,   96,   -1,   -1,   -1,   -1,   101,  102,  -1,   -1,   -1,   -1,   -1,   108,  -1,   110,
    -1,   -1,   -1,   -1,   -1,   116,  -1,   118,  119,  120,  -1,   -1,   -1,   124,  -1,   -1,   127,  128,  129,
    -1,   -1,   -1,   133,  -1,   -1,   -1,   137,  138,  139,  140,  -1,   -1,   143,  -1,   145,  146,  147,  -1,
    -1,   150,  -1,   152,  -1,   -1,   155,  -1,   -1,   158,  159,  160,  -1,   -1,   163,  -1,   -1,   -1,   -1,
    168,  169,  -1,   -1,   172,  -1,   174,  -1,   -1,   -1,   -1,   -1,   -1,   181,  182,  -1,   -1,   185,  186,
    -1,   -1,   189,  -1,   -1,   -1,   -1,   -1,   195,  196,  -1,   198,  -1,   -1,   201,  -1,   -1,   -1,   205,
    206,  207,  208,  -1,   -1,   211,  212,  -1,   -1,   -1,   216,  -1,   -1,   -1,   220,  -1,   -1,   -1,   224,
    -1,   -1,   227,  228,  -1,   -1,   -1,   -1,   -1,   -1,   235,  -1,   237,  -1,   -1,   -1,   241,  -1,   -1,
    244,  -1,   -1,   -1,   -1,   -1,   250,  -1,   252,  -1,   -1,   255,  -1,   257,  -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   267,  268,  269,  270,  271,  272,  -1,   274,  275,  276,  277,  278,  279,  280,  281,
    282,  -1,   284,  285,  286,  -1,   288,  289,  -1,   -1,   -1,   293,  294,  295,  296,  -1,   -1,   299,  300,
    -1,   -1,   303,  -1,   305,  -1,   307,  -1,   -1,   310,  311,  312,  313,  314,  315,  316,  -1,   -1,   319,
    320,  -1,   322,  323,  324,  -1,   -1,   -1,   328,  -1,   -1,   -1,   -1,   333,  334,  335,  -1,   337,  338,
    339,  -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   350,  351,  352,  -1,   354,  -1,   356,  -1,
    358,  -1,   -1,   361,  362,  -1,   364,  -1,   366,  367,  -1,   369,  370,  371,  372,  373,  374,  375,  376,
    -1,   -1,   -1,   -1,   381,  382,  -1,   -1,   385,  386,  387,  -1,   389,  -1,   391,  392,  -1,   -1,   395,
    -1,   397,  398,  399,  -1,   401,  402,  -1,   -1,   -1,   406,  407,  -1,   409,  410,  -1,   412,  413,  414,
    415,  -1,   417,  418,  -1,   -1,   -1,   422,  423,  424,  -1,   -1,   427,  -1,   -1,   -1,   431,  432,  433,
    434,  -1,   436,  437,  -1,   -1,   -1,   -1,   -1,   -1,   444,  445,  -1,   447,  -1,   -1,   450,  -1,   -1,
    453,  454,  -1,   -1,   457,  458,  -1,   460,  461,  462,  -1,   -1,   -1,   466,  467,  -1,   469,  470,  -1,
    472,  473,  -1,   -1,   476,  477,  478,  479,  480,  -1,   -1,   -1,   -1,   -1,   486,  -1,   488,  -1,   -1,
    491,  492,  493,  494,  -1,   -1,   497,  498,  -1,   -1,   501,  -1,   -1,   -1,   -1,   506,  -1,   -1,   509,
    -1,   -1,   512,  513,  -1,   -1,   -1,   -1,   -1,   -1,   -1,   521,  -1,   -1,   524,  -1,   -1,   527,  528,
    529,  -1,   -1,   -1,   -1,   534,  -1,   536,  537,  -1,   -1,   -1,   541,  -1,   5,    -1,   7,    8,    9,
    10,   11,   -1,   -1,   -1,   -1,   -1,   17,   -1,   -1,   20,   -1,   -1,   23,   24,   25,   26,   565,  28,
    -1,   30,   -1,   -1,   33,   -1,   -1,   -1,   37,   -1,   -1,   40,   41,   -1,   43,   -1,   45,   46,   -1,
    -1,   49,   -1,   51,   -1,   53,   54,   -1,   56,   -1,   58,   59,   60,   -1,   -1,   63,   64,   -1,   66,
    67,   68,   69,   70,   -1,   -1,   73,   -1,   -1,   76,   -1,   78,   -1,   -1,   -1,   -1,   -1,   -1,   85,
    -1,   -1,   -1,   -1,   -1,   -1,   92,   93,   -1,   -1,   96,   -1,   -1,   -1,   -1,   101,  102,  -1,   -1,
    -1,   -1,   -1,   108,  -1,   110,  -1,   -1,   -1,   -1,   -1,   116,  -1,   118,  119,  120,  -1,   -1,   -1,
    124,  -1,   -1,   127,  128,  129,  -1,   -1,   -1,   133,  -1,   -1,   -1,   137,  138,  139,  140,  -1,   -1,
    143,  -1,   145,  146,  147,  -1,   -1,   150,  -1,   152,  -1,   -1,   155,  -1,   -1,   158,  159,  160,  -1,
    -1,   163,  -1,   -1,   -1,   -1,   168,  169,  -1,   -1,   172,  -1,   174,  -1,   -1,   -1,   -1,   -1,   -1,
    181,  182,  -1,   -1,   185,  186,  -1,   -1,   189,  -1,   -1,   -1,   -1,   -1,   195,  196,  -1,   198,  -1,
    -1,   201,  -1,   -1,   -1,   205,  206,  207,  208,  -1,   -1,   211,  212,  -1,   -1,   -1,   216,  -1,   -1,
    -1,   220,  -1,   -1,   -1,   224,  -1,   -1,   227,  228,  -1,   -1,   -1,   -1,   -1,   -1,   235,  -1,   237,
    -1,   -1,   -1,   241,  -1,   -1,   244,  245,  -1,   -1,   -1,   -1,   250,  -1,   252,  -1,   -1,   255,  -1,
    257,  -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   267,  268,  269,  270,  271,  272,  -1,   274,  275,
    276,  277,  278,  279,  280,  281,  282,  -1,   284,  285,  286,  -1,   288,  289,  -1,   -1,   -1,   293,  294,
    295,  296,  -1,   -1,   299,  300,  -1,   -1,   303,  -1,   305,  -1,   307,  -1,   -1,   310,  311,  312,  313,
    314,  315,  316,  -1,   -1,   319,  320,  -1,   322,  323,  324,  -1,   -1,   -1,   328,  -1,   -1,   -1,   -1,
    333,  334,  335,  -1,   337,  338,  339,  -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   350,  351,
    352,  -1,   354,  -1,   356,  -1,   358,  -1,   -1,   361,  362,  -1,   364,  -1,   366,  367,  -1,   369,  370,
    371,  372,  373,  374,  375,  376,  -1,   -1,   -1,   -1,   381,  382,  -1,   -1,   385,  386,  387,  -1,   389,
    -1,   391,  392,  -1,   -1,   395,  -1,   397,  398,  399,  -1,   401,  402,  -1,   -1,   -1,   406,  407,  -1,
    409,  410,  -1,   412,  413,  414,  415,  -1,   417,  418,  -1,   -1,   -1,   422,  423,  424,  -1,   -1,   427,
    -1,   -1,   -1,   431,  432,  433,  434,  -1,   436,  437,  -1,   -1,   -1,   -1,   -1,   -1,   444,  445,  -1,
    447,  -1,   -1,   450,  -1,   -1,   453,  454,  -1,   -1,   457,  458,  -1,   460,  461,  462,  -1,   -1,   -1,
    466,  467,  -1,   469,  470,  -1,   472,  473,  -1,   475,  476,  477,  478,  479,  480,  -1,   -1,   -1,   -1,
    -1,   486,  -1,   488,  -1,   -1,   491,  492,  493,  494,  -1,   -1,   497,  498,  -1,   -1,   501,  -1,   -1,
    -1,   -1,   506,  -1,   -1,   509,  -1,   -1,   512,  513,  -1,   -1,   -1,   -1,   -1,   -1,   -1,   521,  -1,
    -1,   524,  -1,   -1,   527,  528,  529,  -1,   -1,   -1,   -1,   534,  -1,   536,  537,  -1,   -1,   5,    541,
    7,    8,    9,    10,   11,   -1,   -1,   -1,   -1,   -1,   17,   -1,   -1,   20,   -1,   -1,   23,   24,   25,
    26,   -1,   28,   564,  30,   -1,   -1,   33,   -1,   -1,   -1,   37,   -1,   -1,   40,   41,   -1,   43,   -1,
    45,   46,   -1,   -1,   49,   -1,   51,   -1,   53,   54,   -1,   56,   -1,   58,   59,   60,   -1,   -1,   63,
    64,   -1,   66,   67,   68,   69,   70,   -1,   -1,   73,   -1,   -1,   76,   -1,   78,   -1,   -1,   -1,   -1,
    -1,   -1,   85,   -1,   -1,   -1,   -1,   -1,   -1,   92,   93,   -1,   -1,   96,   -1,   -1,   -1,   -1,   101,
    102,  -1,   -1,   -1,   -1,   -1,   108,  -1,   110,  -1,   -1,   -1,   -1,   -1,   116,  -1,   118,  119,  120,
    -1,   -1,   -1,   124,  -1,   -1,   127,  128,  129,  -1,   -1,   -1,   133,  -1,   -1,   -1,   137,  138,  139,
    140,  -1,   -1,   143,  -1,   145,  146,  147,  -1,   -1,   150,  -1,   152,  -1,   -1,   155,  -1,   -1,   158,
    159,  160,  -1,   -1,   163,  -1,   -1,   -1,   -1,   168,  169,  -1,   -1,   172,  -1,   174,  -1,   -1,   -1,
    -1,   -1,   -1,   181,  182,  -1,   -1,   185,  186,  -1,   -1,   189,  -1,   -1,   -1,   -1,   -1,   195,  196,
    -1,   198,  -1,   -1,   201,  -1,   -1,   -1,   205,  206,  207,  208,  -1,   -1,   211,  212,  -1,   -1,   -1,
    216,  -1,   -1,   -1,   220,  -1,   -1,   -1,   224,  -1,   -1,   227,  228,  -1,   -1,   -1,   -1,   -1,   -1,
    235,  -1,   237,  -1,   -1,   -1,   241,  -1,   -1,   244,  245,  -1,   -1,   -1,   -1,   250,  -1,   252,  -1,
    -1,   255,  -1,   257,  -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   267,  268,  269,  270,  271,  272,
    -1,   274,  275,  276,  277,  278,  279,  280,  281,  282,  -1,   284,  285,  286,  -1,   288,  289,  -1,   -1,
    -1,   293,  294,  295,  296,  -1,   -1,   299,  300,  -1,   -1,   303,  -1,   305,  -1,   307,  -1,   -1,   310,
    311,  312,  313,  314,  315,  316,  -1,   -1,   319,  320,  -1,   322,  323,  324,  -1,   -1,   -1,   328,  -1,
    -1,   -1,   -1,   333,  334,  335,  -1,   337,  338,  339,  -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   350,  351,  352,  -1,   354,  -1,   356,  -1,   358,  -1,   -1,   361,  362,  -1,   364,  -1,   366,  367,
    -1,   369,  370,  371,  372,  373,  374,  375,  376,  -1,   -1,   -1,   -1,   381,  382,  -1,   -1,   385,  386,
    387,  -1,   389,  -1,   391,  392,  -1,   -1,   395,  -1,   397,  398,  399,  -1,   401,  402,  -1,   -1,   -1,
    406,  407,  -1,   409,  410,  -1,   412,  413,  414,  415,  -1,   417,  418,  -1,   -1,   -1,   422,  423,  424,
    -1,   -1,   427,  -1,   -1,   -1,   431,  432,  433,  434,  -1,   436,  437,  -1,   -1,   -1,   -1,   -1,   -1,
    444,  445,  -1,   447,  -1,   -1,   450,  -1,   -1,   453,  454,  -1,   -1,   457,  458,  -1,   460,  461,  462,
    -1,   -1,   -1,   466,  467,  -1,   469,  470,  -1,   472,  473,  -1,   475,  476,  477,  478,  479,  480,  -1,
    -1,   -1,   -1,   -1,   486,  -1,   488,  -1,   -1,   491,  492,  493,  494,  -1,   -1,   497,  498,  -1,   -1,
    501,  -1,   -1,   -1,   -1,   506,  -1,   -1,   509,  -1,   -1,   512,  513,  -1,   -1,   -1,   -1,   -1,   -1,
    -1,   521,  -1,   -1,   524,  -1,   -1,   527,  528,  529,  -1,   -1,   -1,   -1,   534,  -1,   536,  537,  -1,
    -1,   5,    541,  7,    8,    9,    10,   11,   -1,   -1,   -1,   -1,   -1,   17,   -1,   -1,   20,   -1,   -1,
    23,   24,   25,   26,   -1,   28,   564,  30,   -1,   -1,   33,   -1,   -1,   -1,   37,   -1,   -1,   40,   41,
    -1,   43,   -1,   45,   46,   -1,   -1,   49,   -1,   51,   -1,   53,   54,   -1,   56,   -1,   58,   59,   60,
    -1,   -1,   63,   64,   -1,   66,   67,   68,   69,   70,   -1,   -1,   73,   -1,   -1,   76,   -1,   78,   -1,
    -1,   -1,   -1,   -1,   -1,   85,   -1,   -1,   -1,   -1,   -1,   -1,   92,   93,   -1,   -1,   96,   -1,   -1,
    -1,   -1,   101,  102,  -1,   -1,   -1,   -1,   -1,   108,  -1,   110,  -1,   -1,   -1,   -1,   -1,   116,  -1,
    118,  119,  120,  -1,   -1,   -1,   124,  -1,   -1,   127,  128,  129,  -1,   -1,   -1,   133,  -1,   -1,   -1,
    137,  138,  139,  140,  -1,   -1,   143,  -1,   145,  146,  147,  -1,   -1,   150,  -1,   152,  -1,   -1,   155,
    -1,   -1,   158,  159,  160,  -1,   -1,   163,  -1,   -1,   -1,   -1,   168,  169,  -1,   -1,   172,  -1,   174,
    -1,   -1,   -1,   -1,   -1,   -1,   181,  182,  -1,   -1,   185,  186,  -1,   -1,   189,  -1,   -1,   -1,   -1,
    -1,   195,  196,  -1,   198,  -1,   -1,   201,  -1,   -1,   -1,   205,  206,  207,  208,  -1,   -1,   211,  212,
    -1,   -1,   -1,   216,  -1,   -1,   -1,   220,  -1,   -1,   -1,   224,  -1,   -1,   227,  228,  -1,   -1,   -1,
    -1,   -1,   -1,   235,  -1,   237,  -1,   -1,   -1,   241,  -1,   -1,   244,  245,  -1,   -1,   -1,   -1,   250,
    -1,   252,  -1,   -1,   255,  -1,   257,  -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   267,  268,  269,
    270,  271,  272,  -1,   274,  275,  276,  277,  278,  279,  280,  281,  282,  -1,   284,  285,  286,  -1,   288,
    289,  -1,   -1,   -1,   293,  294,  295,  296,  -1,   -1,   299,  300,  -1,   -1,   303,  -1,   305,  -1,   307,
    -1,   -1,   310,  311,  312,  313,  314,  315,  316,  -1,   -1,   319,  320,  -1,   322,  323,  324,  -1,   -1,
    -1,   328,  -1,   -1,   -1,   -1,   333,  334,  335,  -1,   337,  338,  339,  -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   350,  351,  352,  -1,   354,  -1,   356,  -1,   358,  -1,   -1,   361,  362,  -1,   364,
    -1,   366,  367,  -1,   369,  370,  371,  372,  373,  374,  375,  376,  -1,   -1,   -1,   -1,   381,  382,  -1,
    -1,   385,  386,  387,  -1,   389,  -1,   391,  392,  -1,   -1,   395,  -1,   397,  398,  399,  -1,   401,  402,
    -1,   -1,   -1,   406,  407,  -1,   409,  410,  -1,   412,  413,  414,  415,  -1,   417,  418,  -1,   -1,   -1,
    422,  423,  424,  -1,   -1,   427,  -1,   -1,   -1,   431,  432,  433,  434,  -1,   436,  437,  -1,   -1,   -1,
    -1,   -1,   -1,   444,  445,  -1,   447,  -1,   -1,   450,  -1,   -1,   453,  454,  -1,   -1,   457,  458,  -1,
    460,  461,  462,  -1,   -1,   -1,   466,  467,  -1,   469,  470,  -1,   472,  473,  -1,   475,  476,  477,  478,
    479,  480,  -1,   -1,   -1,   -1,   -1,   486,  -1,   488,  -1,   -1,   491,  492,  493,  494,  -1,   -1,   497,
    498,  -1,   -1,   501,  -1,   -1,   -1,   -1,   506,  -1,   -1,   509,  -1,   -1,   512,  513,  -1,   -1,   -1,
    -1,   -1,   -1,   -1,   521,  -1,   -1,   524,  -1,   -1,   527,  528,  529,  -1,   -1,   -1,   -1,   534,  -1,
    536,  537,  -1,   -1,   5,    541,  7,    8,    9,    10,   11,   -1,   -1,   -1,   -1,   -1,   17,   -1,   -1,
    -1,   -1,   -1,   23,   24,   25,   -1,   -1,   28,   564,  30,   -1,   -1,   33,   -1,   -1,   -1,   37,   -1,
    -1,   40,   41,   -1,   43,   -1,   -1,   -1,   -1,   -1,   49,   -1,   51,   -1,   53,   -1,   -1,   -1,   -1,
    58,   59,   60,   -1,   -1,   63,   64,   -1,   -1,   67,   -1,   69,   70,   -1,   -1,   73,   -1,   -1,   76,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   85,   -1,   -1,   -1,   -1,   -1,   -1,   92,   93,   -1,   -1,
    96,   -1,   -1,   -1,   -1,   101,  -1,   -1,   -1,   -1,   -1,   -1,   108,  -1,   110,  -1,   -1,   -1,   -1,
    -1,   116,  -1,   118,  119,  120,  -1,   -1,   -1,   -1,   -1,   -1,   127,  128,  129,  -1,   -1,   -1,   133,
    -1,   -1,   -1,   -1,   138,  139,  140,  -1,   -1,   143,  -1,   145,  146,  -1,   -1,   -1,   150,  -1,   152,
    -1,   -1,   155,  156,  -1,   158,  159,  160,  -1,   -1,   -1,   -1,   -1,   -1,   -1,   168,  169,  -1,   -1,
    172,  -1,   174,  -1,   -1,   -1,   -1,   -1,   -1,   181,  182,  -1,   -1,   185,  186,  187,  -1,   189,  -1,
    -1,   -1,   -1,   -1,   -1,   196,  -1,   -1,   -1,   -1,   201,  -1,   -1,   -1,   205,  206,  207,  208,  209,
    -1,   211,  212,  -1,   -1,   -1,   216,  -1,   -1,   -1,   220,  -1,   -1,   -1,   224,  -1,   -1,   227,  228,
    229,  -1,   -1,   -1,   -1,   234,  -1,   -1,   237,  -1,   -1,   -1,   241,  242,  -1,   244,  -1,   -1,   -1,
    -1,   -1,   250,  -1,   252,  -1,   -1,   255,  -1,   257,  -1,   -1,   -1,   -1,   -1,   263,  -1,   -1,   -1,
    267,  268,  269,  270,  271,  272,  -1,   274,  275,  276,  277,  278,  279,  280,  281,  282,  -1,   284,  285,
    286,  -1,   288,  289,  -1,   -1,   -1,   293,  294,  295,  296,  -1,   -1,   299,  300,  -1,   -1,   303,  -1,
    305,  -1,   307,  -1,   -1,   310,  311,  312,  313,  314,  315,  316,  -1,   -1,   319,  320,  -1,   322,  323,
    324,  -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   333,  334,  335,  -1,   337,  338,  339,  -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   350,  351,  352,  -1,   354,  -1,   356,  -1,   358,  -1,   -1,   -1,
    362,  -1,   364,  -1,   366,  367,  -1,   369,  370,  371,  372,  373,  374,  375,  376,  -1,   -1,   -1,   -1,
    381,  382,  -1,   -1,   385,  386,  387,  -1,   389,  -1,   -1,   392,  393,  -1,   395,  -1,   -1,   398,  -1,
    -1,   401,  402,  403,  -1,   -1,   -1,   407,  -1,   409,  410,  -1,   412,  413,  414,  -1,   -1,   417,  -1,
    -1,   -1,   -1,   422,  423,  424,  -1,   -1,   427,  -1,   -1,   -1,   431,  -1,   433,  -1,   -1,   436,  437,
    -1,   -1,   -1,   -1,   -1,   -1,   444,  445,  -1,   447,  -1,   -1,   450,  -1,   -1,   -1,   454,  -1,   -1,
    -1,   458,  -1,   460,  461,  462,  -1,   -1,   -1,   466,  467,  -1,   469,  470,  -1,   472,  473,  -1,   -1,
    476,  477,  478,  479,  480,  -1,   -1,   -1,   -1,   -1,   486,  -1,   488,  -1,   -1,   -1,   492,  493,  494,
    -1,   -1,   497,  498,  -1,   -1,   -1,   -1,   -1,   -1,   -1,   506,  -1,   -1,   509,  -1,   -1,   512,  513,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   521,  -1,   -1,   524,  -1,   -1,   527,  528,  529,  -1,   -1,   532,
    -1,   534,  -1,   536,  -1,   -1,   -1,   -1,   541,  -1,   -1,   -1,   -1,   546,  5,    -1,   7,    8,    9,
    10,   11,   -1,   -1,   -1,   -1,   -1,   17,   560,  -1,   20,   -1,   -1,   23,   24,   25,   26,   -1,   28,
    -1,   30,   -1,   -1,   33,   -1,   -1,   -1,   37,   -1,   -1,   40,   41,   -1,   43,   -1,   45,   46,   -1,
    -1,   49,   -1,   51,   -1,   53,   54,   -1,   56,   -1,   58,   59,   60,   -1,   -1,   63,   64,   -1,   66,
    67,   68,   69,   70,   -1,   -1,   73,   -1,   -1,   76,   -1,   78,   -1,   -1,   -1,   -1,   -1,   -1,   85,
    -1,   -1,   -1,   -1,   -1,   -1,   92,   93,   -1,   -1,   96,   -1,   -1,   -1,   -1,   101,  102,  -1,   -1,
    -1,   -1,   -1,   108,  -1,   110,  -1,   -1,   -1,   -1,   -1,   116,  -1,   118,  119,  120,  -1,   -1,   -1,
    124,  -1,   -1,   127,  128,  129,  -1,   -1,   -1,   133,  -1,   -1,   -1,   137,  138,  139,  140,  -1,   -1,
    143,  -1,   145,  146,  147,  -1,   -1,   150,  -1,   152,  -1,   -1,   155,  -1,   -1,   158,  159,  160,  -1,
    -1,   163,  -1,   -1,   -1,   -1,   168,  169,  -1,   -1,   172,  -1,   174,  -1,   -1,   -1,   -1,   -1,   -1,
    181,  182,  -1,   -1,   185,  186,  -1,   -1,   189,  -1,   -1,   -1,   -1,   -1,   195,  196,  -1,   198,  -1,
    -1,   201,  -1,   -1,   -1,   205,  206,  207,  208,  -1,   -1,   211,  212,  -1,   -1,   -1,   216,  -1,   -1,
    -1,   220,  -1,   -1,   -1,   224,  -1,   -1,   227,  228,  -1,   -1,   -1,   -1,   -1,   -1,   235,  -1,   237,
    -1,   -1,   -1,   241,  -1,   -1,   244,  -1,   -1,   -1,   -1,   -1,   250,  -1,   252,  -1,   -1,   255,  -1,
    257,  -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   267,  268,  269,  270,  271,  272,  -1,   274,  275,
    276,  277,  278,  279,  280,  281,  282,  -1,   284,  285,  286,  -1,   288,  289,  -1,   -1,   -1,   293,  294,
    295,  296,  -1,   -1,   299,  300,  -1,   -1,   303,  -1,   305,  -1,   307,  -1,   -1,   310,  311,  312,  313,
    314,  315,  316,  -1,   -1,   319,  320,  -1,   322,  323,  324,  -1,   -1,   -1,   328,  -1,   -1,   -1,   -1,
    333,  334,  335,  -1,   337,  338,  339,  -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   350,  351,
    352,  -1,   354,  -1,   356,  -1,   358,  -1,   -1,   361,  362,  -1,   364,  -1,   366,  367,  -1,   369,  370,
    371,  372,  373,  374,  375,  376,  -1,   -1,   -1,   -1,   381,  382,  -1,   -1,   385,  386,  387,  -1,   389,
    -1,   391,  392,  -1,   -1,   395,  -1,   397,  398,  399,  -1,   401,  402,  -1,   -1,   -1,   406,  407,  -1,
    409,  410,  -1,   412,  413,  414,  415,  -1,   417,  418,  -1,   -1,   -1,   422,  423,  424,  -1,   -1,   427,
    -1,   -1,   -1,   431,  432,  433,  434,  -1,   436,  437,  -1,   -1,   -1,   -1,   -1,   -1,   444,  445,  -1,
    447,  -1,   -1,   450,  -1,   -1,   453,  454,  -1,   -1,   457,  458,  -1,   460,  461,  462,  -1,   -1,   -1,
    466,  467,  -1,   469,  470,  -1,   472,  473,  -1,   -1,   476,  477,  478,  479,  480,  -1,   -1,   -1,   -1,
    -1,   486,  -1,   488,  -1,   -1,   491,  492,  493,  494,  -1,   -1,   497,  498,  -1,   -1,   501,  -1,   -1,
    -1,   -1,   506,  -1,   -1,   509,  -1,   -1,   512,  513,  -1,   -1,   -1,   -1,   -1,   -1,   -1,   521,  -1,
    -1,   524,  -1,   -1,   527,  528,  529,  -1,   -1,   -1,   -1,   534,  -1,   536,  537,  -1,   -1,   -1,   541,
    5,    -1,   7,    8,    9,    10,   11,   -1,   -1,   -1,   552,  -1,   17,   -1,   -1,   20,   -1,   -1,   23,
    24,   25,   26,   -1,   28,   -1,   30,   -1,   -1,   33,   -1,   -1,   -1,   37,   -1,   -1,   40,   41,   -1,
    43,   -1,   45,   46,   -1,   -1,   49,   -1,   51,   -1,   53,   54,   -1,   56,   -1,   58,   59,   60,   -1,
    -1,   63,   64,   -1,   66,   67,   68,   69,   70,   -1,   -1,   73,   -1,   -1,   76,   -1,   78,   -1,   -1,
    -1,   -1,   -1,   -1,   85,   -1,   -1,   -1,   -1,   -1,   -1,   92,   93,   -1,   -1,   96,   -1,   -1,   -1,
    -1,   101,  102,  -1,   -1,   -1,   -1,   -1,   108,  -1,   110,  -1,   -1,   -1,   -1,   -1,   116,  -1,   118,
    119,  120,  -1,   -1,   -1,   124,  -1,   -1,   127,  128,  129,  -1,   -1,   -1,   133,  -1,   -1,   -1,   137,
    138,  139,  140,  -1,   -1,   143,  -1,   145,  146,  147,  -1,   -1,   150,  -1,   152,  -1,   -1,   155,  -1,
    -1,   158,  159,  160,  -1,   -1,   163,  -1,   -1,   -1,   -1,   168,  169,  -1,   -1,   172,  -1,   174,  -1,
    -1,   -1,   -1,   -1,   -1,   181,  182,  -1,   -1,   185,  186,  -1,   -1,   189,  -1,   -1,   -1,   -1,   -1,
    195,  196,  -1,   198,  -1,   -1,   201,  -1,   -1,   -1,   205,  206,  207,  208,  -1,   -1,   211,  212,  -1,
    -1,   -1,   216,  -1,   -1,   -1,   220,  -1,   -1,   -1,   224,  -1,   -1,   227,  228,  -1,   -1,   -1,   -1,
    -1,   -1,   235,  -1,   237,  -1,   -1,   -1,   241,  -1,   -1,   244,  -1,   -1,   -1,   -1,   -1,   250,  -1,
    252,  -1,   -1,   255,  -1,   257,  -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   267,  268,  269,  270,
    271,  272,  -1,   274,  275,  276,  277,  278,  279,  280,  281,  282,  -1,   284,  285,  286,  -1,   288,  289,
    -1,   -1,   -1,   293,  294,  295,  296,  -1,   -1,   299,  300,  -1,   -1,   303,  -1,   305,  -1,   307,  -1,
    -1,   310,  311,  312,  313,  314,  315,  316,  -1,   -1,   319,  320,  -1,   322,  323,  324,  -1,   -1,   -1,
    328,  -1,   -1,   -1,   -1,   333,  334,  335,  -1,   337,  338,  339,  -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   350,  351,  352,  -1,   354,  -1,   356,  -1,   358,  -1,   -1,   361,  362,  -1,   364,  -1,
    366,  367,  -1,   369,  370,  371,  372,  373,  374,  375,  376,  -1,   -1,   -1,   -1,   381,  382,  -1,   -1,
    385,  386,  387,  -1,   389,  -1,   391,  392,  -1,   -1,   395,  -1,   397,  398,  399,  -1,   401,  402,  -1,
    -1,   -1,   406,  407,  -1,   409,  410,  -1,   412,  413,  414,  415,  -1,   417,  418,  -1,   -1,   -1,   422,
    423,  424,  -1,   -1,   427,  -1,   -1,   -1,   431,  432,  433,  434,  -1,   436,  437,  -1,   -1,   -1,   -1,
    -1,   -1,   444,  445,  -1,   447,  -1,   -1,   450,  -1,   -1,   453,  454,  -1,   -1,   457,  458,  -1,   460,
    461,  462,  -1,   -1,   -1,   466,  467,  -1,   469,  470,  -1,   472,  473,  -1,   -1,   476,  477,  478,  479,
    480,  -1,   -1,   -1,   -1,   -1,   486,  -1,   488,  -1,   -1,   491,  492,  493,  494,  -1,   -1,   497,  498,
    -1,   -1,   501,  -1,   -1,   -1,   -1,   506,  -1,   -1,   509,  -1,   -1,   512,  513,  -1,   -1,   -1,   -1,
    -1,   -1,   -1,   521,  -1,   -1,   524,  -1,   -1,   527,  528,  529,  -1,   -1,   -1,   -1,   534,  -1,   536,
    537,  -1,   -1,   -1,   541,  5,    -1,   7,    8,    9,    10,   11,   -1,   -1,   -1,   552,  -1,   17,   -1,
    -1,   20,   -1,   -1,   23,   24,   25,   26,   -1,   28,   -1,   30,   -1,   -1,   33,   -1,   -1,   -1,   37,
    -1,   -1,   40,   41,   -1,   43,   -1,   45,   46,   -1,   -1,   49,   -1,   51,   -1,   53,   54,   -1,   56,
    -1,   58,   59,   60,   -1,   -1,   63,   64,   -1,   66,   67,   68,   69,   70,   -1,   -1,   73,   -1,   -1,
    76,   -1,   78,   -1,   -1,   -1,   -1,   -1,   -1,   85,   -1,   -1,   -1,   -1,   -1,   -1,   92,   93,   -1,
    -1,   96,   -1,   -1,   -1,   -1,   101,  102,  -1,   -1,   -1,   -1,   -1,   108,  -1,   110,  -1,   -1,   -1,
    -1,   -1,   116,  -1,   118,  119,  120,  -1,   -1,   -1,   124,  -1,   -1,   127,  128,  129,  -1,   -1,   -1,
    133,  -1,   -1,   -1,   137,  138,  139,  140,  -1,   -1,   143,  -1,   145,  146,  147,  -1,   -1,   150,  -1,
    152,  -1,   -1,   155,  -1,   -1,   158,  159,  160,  -1,   -1,   163,  -1,   -1,   -1,   -1,   168,  169,  -1,
    -1,   172,  -1,   174,  -1,   -1,   -1,   -1,   -1,   -1,   181,  182,  -1,   -1,   185,  186,  -1,   -1,   189,
    -1,   -1,   -1,   -1,   -1,   195,  196,  -1,   198,  -1,   -1,   201,  -1,   -1,   -1,   205,  206,  207,  208,
    -1,   -1,   211,  212,  -1,   -1,   -1,   216,  -1,   -1,   -1,   220,  -1,   -1,   -1,   224,  -1,   -1,   227,
    228,  -1,   -1,   -1,   -1,   -1,   -1,   235,  -1,   237,  -1,   -1,   -1,   241,  -1,   -1,   244,  -1,   -1,
    -1,   -1,   -1,   250,  -1,   252,  -1,   -1,   255,  -1,   257,  -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   267,  268,  269,  270,  271,  272,  -1,   274,  275,  276,  277,  278,  279,  280,  281,  282,  -1,   284,
    285,  286,  -1,   288,  289,  -1,   -1,   -1,   293,  294,  295,  296,  -1,   -1,   299,  300,  -1,   -1,   303,
    -1,   305,  -1,   307,  -1,   -1,   310,  311,  312,  313,  314,  315,  316,  -1,   -1,   319,  320,  -1,   322,
    323,  324,  -1,   -1,   -1,   328,  -1,   -1,   -1,   -1,   333,  334,  335,  -1,   337,  338,  339,  -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   350,  351,  352,  -1,   354,  -1,   356,  -1,   358,  -1,   -1,
    361,  362,  -1,   364,  -1,   366,  367,  -1,   369,  370,  371,  372,  373,  374,  375,  376,  -1,   -1,   -1,
    -1,   381,  382,  -1,   -1,   385,  386,  387,  -1,   389,  -1,   391,  392,  -1,   -1,   395,  -1,   397,  398,
    399,  -1,   401,  402,  -1,   -1,   -1,   406,  407,  -1,   409,  410,  -1,   412,  413,  414,  415,  -1,   417,
    418,  -1,   -1,   -1,   422,  423,  424,  -1,   -1,   427,  -1,   -1,   -1,   431,  432,  433,  434,  -1,   436,
    437,  -1,   -1,   -1,   -1,   -1,   -1,   444,  445,  -1,   447,  -1,   -1,   450,  -1,   -1,   453,  454,  -1,
    -1,   457,  458,  -1,   460,  461,  462,  -1,   -1,   -1,   466,  467,  -1,   469,  470,  -1,   472,  473,  -1,
    -1,   476,  477,  478,  479,  480,  -1,   -1,   -1,   -1,   -1,   486,  -1,   488,  -1,   -1,   491,  492,  493,
    494,  -1,   -1,   497,  498,  -1,   -1,   501,  -1,   -1,   -1,   -1,   506,  -1,   -1,   509,  -1,   -1,   512,
    513,  -1,   -1,   -1,   -1,   -1,   -1,   -1,   521,  -1,   -1,   524,  -1,   -1,   527,  528,  529,  -1,   -1,
    -1,   -1,   534,  -1,   536,  537,  -1,   -1,   -1,   541,  5,    -1,   7,    8,    9,    10,   11,   -1,   -1,
    -1,   552,  -1,   17,   -1,   -1,   20,   -1,   -1,   23,   24,   25,   26,   -1,   28,   -1,   30,   -1,   -1,
    33,   -1,   -1,   -1,   37,   -1,   -1,   40,   41,   -1,   43,   -1,   45,   46,   -1,   -1,   49,   -1,   51,
    -1,   53,   54,   -1,   56,   -1,   58,   59,   60,   -1,   -1,   63,   64,   -1,   66,   67,   68,   69,   70,
    -1,   -1,   73,   -1,   -1,   76,   -1,   78,   -1,   -1,   -1,   -1,   -1,   -1,   85,   -1,   -1,   -1,   -1,
    -1,   -1,   92,   93,   -1,   -1,   96,   -1,   -1,   -1,   -1,   101,  102,  -1,   -1,   -1,   -1,   -1,   108,
    -1,   110,  -1,   -1,   -1,   -1,   -1,   116,  -1,   118,  119,  120,  -1,   -1,   -1,   124,  -1,   -1,   127,
    128,  129,  -1,   -1,   -1,   133,  -1,   -1,   -1,   137,  138,  139,  140,  -1,   -1,   143,  -1,   145,  146,
    147,  -1,   -1,   150,  -1,   152,  -1,   -1,   155,  -1,   -1,   158,  159,  160,  -1,   -1,   163,  -1,   -1,
    -1,   -1,   168,  169,  -1,   -1,   172,  -1,   174,  -1,   -1,   -1,   -1,   -1,   -1,   181,  182,  -1,   -1,
    185,  186,  -1,   -1,   189,  -1,   -1,   -1,   -1,   -1,   195,  196,  -1,   198,  -1,   -1,   201,  -1,   -1,
    -1,   205,  206,  207,  208,  -1,   -1,   211,  212,  -1,   -1,   -1,   216,  -1,   -1,   -1,   220,  -1,   -1,
    -1,   224,  -1,   -1,   227,  228,  -1,   -1,   -1,   -1,   -1,   -1,   235,  -1,   237,  -1,   -1,   -1,   241,
    -1,   -1,   244,  -1,   -1,   -1,   -1,   -1,   250,  -1,   252,  -1,   -1,   255,  -1,   257,  -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   267,  268,  269,  270,  271,  272,  -1,   274,  275,  276,  277,  278,  279,
    280,  281,  282,  -1,   284,  285,  286,  -1,   288,  289,  -1,   -1,   -1,   293,  294,  295,  296,  -1,   -1,
    299,  300,  -1,   -1,   303,  -1,   305,  -1,   307,  -1,   -1,   310,  311,  312,  313,  314,  315,  316,  -1,
    -1,   319,  320,  -1,   322,  323,  324,  -1,   -1,   -1,   328,  -1,   -1,   -1,   -1,   333,  334,  335,  -1,
    337,  338,  339,  -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   350,  351,  352,  -1,   354,  -1,
    356,  -1,   358,  -1,   -1,   361,  362,  -1,   364,  -1,   366,  367,  -1,   369,  370,  371,  372,  373,  374,
    375,  376,  -1,   -1,   -1,   -1,   381,  382,  -1,   -1,   385,  386,  387,  -1,   389,  -1,   391,  392,  -1,
    -1,   395,  -1,   397,  398,  399,  -1,   401,  402,  -1,   -1,   -1,   406,  407,  -1,   409,  410,  -1,   412,
    413,  414,  415,  -1,   417,  418,  -1,   -1,   -1,   422,  423,  424,  -1,   -1,   427,  -1,   -1,   -1,   431,
    432,  433,  434,  -1,   436,  437,  -1,   -1,   -1,   -1,   -1,   -1,   444,  445,  -1,   447,  -1,   -1,   450,
    -1,   -1,   453,  454,  -1,   -1,   457,  458,  -1,   460,  461,  462,  -1,   -1,   -1,   466,  467,  -1,   469,
    470,  -1,   472,  473,  -1,   -1,   476,  477,  478,  479,  480,  -1,   -1,   -1,   -1,   -1,   486,  -1,   488,
    -1,   -1,   491,  492,  493,  494,  -1,   -1,   497,  498,  -1,   -1,   501,  -1,   -1,   -1,   -1,   506,  -1,
    -1,   509,  -1,   -1,   512,  513,  -1,   -1,   -1,   -1,   -1,   -1,   -1,   521,  -1,   -1,   524,  -1,   -1,
    527,  528,  529,  -1,   -1,   -1,   -1,   534,  -1,   536,  537,  -1,   -1,   -1,   541,  5,    -1,   7,    8,
    9,    10,   11,   -1,   -1,   -1,   552,  -1,   17,   -1,   -1,   -1,   -1,   -1,   23,   24,   25,   -1,   -1,
    28,   -1,   30,   -1,   -1,   33,   -1,   -1,   -1,   37,   -1,   -1,   40,   41,   -1,   43,   -1,   -1,   -1,
    -1,   -1,   49,   -1,   51,   -1,   53,   -1,   -1,   -1,   -1,   58,   59,   60,   -1,   -1,   63,   64,   -1,
    -1,   67,   -1,   69,   70,   -1,   -1,   73,   -1,   -1,   76,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    85,   -1,   -1,   -1,   -1,   -1,   -1,   92,   93,   -1,   -1,   96,   -1,   -1,   -1,   -1,   101,  -1,   -1,
    -1,   -1,   -1,   -1,   108,  -1,   110,  -1,   -1,   -1,   -1,   -1,   116,  -1,   118,  119,  120,  -1,   -1,
    -1,   -1,   -1,   -1,   127,  128,  129,  -1,   131,  -1,   133,  -1,   -1,   -1,   137,  138,  139,  140,  -1,
    -1,   143,  -1,   145,  146,  -1,   -1,   -1,   150,  -1,   152,  -1,   -1,   155,  156,  -1,   158,  159,  160,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   168,  169,  -1,   -1,   172,  -1,   174,  -1,   -1,   -1,   -1,   -1,
    -1,   181,  182,  -1,   -1,   185,  186,  187,  -1,   189,  -1,   -1,   -1,   -1,   -1,   -1,   196,  -1,   -1,
    -1,   -1,   201,  -1,   -1,   -1,   205,  206,  207,  208,  209,  -1,   211,  212,  -1,   -1,   -1,   216,  -1,
    -1,   -1,   220,  -1,   -1,   -1,   224,  -1,   -1,   227,  228,  229,  -1,   -1,   -1,   -1,   234,  -1,   -1,
    237,  -1,   -1,   -1,   241,  242,  -1,   244,  -1,   -1,   -1,   -1,   -1,   250,  -1,   252,  -1,   -1,   255,
    -1,   257,  -1,   -1,   -1,   -1,   -1,   263,  -1,   -1,   -1,   267,  268,  269,  270,  271,  272,  -1,   274,
    275,  276,  277,  278,  279,  280,  281,  282,  -1,   284,  285,  286,  -1,   288,  289,  -1,   -1,   -1,   293,
    294,  295,  296,  -1,   -1,   299,  300,  -1,   -1,   303,  -1,   305,  -1,   307,  -1,   -1,   310,  311,  312,
    313,  314,  315,  316,  -1,   -1,   319,  320,  -1,   322,  323,  324,  -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   333,  334,  335,  -1,   337,  338,  339,  -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   350,
    351,  352,  -1,   354,  -1,   356,  -1,   358,  -1,   -1,   -1,   362,  -1,   364,  -1,   366,  367,  -1,   369,
    370,  371,  372,  373,  374,  375,  376,  -1,   -1,   -1,   -1,   381,  382,  -1,   -1,   385,  386,  387,  -1,
    389,  -1,   -1,   392,  393,  -1,   395,  -1,   -1,   398,  -1,   -1,   401,  402,  403,  -1,   -1,   -1,   407,
    -1,   409,  410,  -1,   412,  413,  414,  -1,   -1,   417,  -1,   -1,   -1,   -1,   422,  423,  424,  -1,   -1,
    427,  -1,   -1,   -1,   431,  -1,   433,  -1,   -1,   436,  437,  -1,   -1,   -1,   -1,   -1,   -1,   444,  445,
    -1,   447,  -1,   -1,   450,  -1,   -1,   -1,   454,  -1,   -1,   -1,   458,  -1,   460,  461,  462,  -1,   -1,
    -1,   466,  467,  -1,   469,  470,  -1,   472,  473,  -1,   -1,   476,  477,  478,  479,  480,  -1,   -1,   -1,
    -1,   -1,   486,  -1,   488,  -1,   -1,   -1,   492,  493,  494,  -1,   -1,   497,  498,  -1,   -1,   -1,   -1,
    -1,   -1,   -1,   506,  -1,   -1,   509,  -1,   -1,   512,  513,  -1,   -1,   -1,   -1,   -1,   -1,   -1,   521,
    -1,   -1,   524,  -1,   -1,   527,  528,  529,  -1,   -1,   532,  -1,   534,  -1,   536,  -1,   -1,   -1,   -1,
    541,  -1,   -1,   544,  5,    546,  7,    8,    9,    10,   11,   -1,   -1,   -1,   -1,   -1,   17,   -1,   -1,
    -1,   -1,   -1,   23,   24,   25,   -1,   -1,   28,   -1,   30,   -1,   -1,   33,   -1,   -1,   -1,   37,   -1,
    -1,   40,   41,   -1,   43,   -1,   -1,   -1,   -1,   -1,   49,   -1,   51,   -1,   53,   -1,   -1,   -1,   -1,
    58,   59,   60,   -1,   -1,   63,   64,   -1,   -1,   67,   -1,   69,   70,   -1,   -1,   73,   -1,   -1,   76,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   85,   -1,   -1,   -1,   -1,   -1,   -1,   92,   93,   -1,   -1,
    96,   -1,   -1,   -1,   -1,   101,  -1,   -1,   -1,   -1,   -1,   -1,   108,  -1,   110,  -1,   -1,   -1,   -1,
    -1,   116,  -1,   118,  119,  120,  -1,   -1,   -1,   -1,   -1,   -1,   127,  128,  129,  -1,   -1,   -1,   133,
    -1,   -1,   -1,   137,  138,  139,  140,  -1,   -1,   143,  -1,   145,  146,  -1,   -1,   -1,   150,  -1,   152,
    -1,   -1,   155,  156,  -1,   158,  159,  160,  -1,   -1,   -1,   -1,   -1,   -1,   -1,   168,  169,  -1,   -1,
    172,  -1,   174,  -1,   -1,   -1,   -1,   -1,   -1,   181,  182,  -1,   -1,   185,  186,  187,  -1,   189,  -1,
    -1,   -1,   -1,   -1,   -1,   196,  -1,   -1,   -1,   -1,   201,  -1,   -1,   -1,   205,  206,  207,  208,  209,
    -1,   211,  212,  -1,   -1,   -1,   216,  -1,   -1,   -1,   220,  -1,   -1,   -1,   224,  -1,   -1,   227,  228,
    229,  -1,   -1,   -1,   -1,   234,  -1,   -1,   237,  -1,   -1,   -1,   241,  242,  -1,   244,  -1,   -1,   -1,
    -1,   -1,   250,  -1,   252,  -1,   -1,   255,  -1,   257,  -1,   -1,   -1,   -1,   -1,   263,  -1,   -1,   -1,
    267,  268,  269,  270,  271,  272,  -1,   274,  275,  276,  277,  278,  279,  280,  281,  282,  -1,   284,  285,
    286,  -1,   288,  289,  -1,   -1,   -1,   293,  294,  295,  296,  -1,   -1,   299,  300,  -1,   -1,   303,  -1,
    305,  -1,   307,  -1,   -1,   310,  311,  312,  313,  314,  315,  316,  -1,   -1,   319,  320,  -1,   322,  323,
    324,  -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   333,  334,  335,  -1,   337,  338,  339,  -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   350,  351,  352,  -1,   354,  -1,   356,  -1,   358,  -1,   -1,   -1,
    362,  -1,   364,  -1,   366,  367,  -1,   369,  370,  371,  372,  373,  374,  375,  376,  -1,   -1,   -1,   -1,
    381,  382,  -1,   -1,   385,  386,  387,  -1,   389,  -1,   -1,   392,  393,  -1,   395,  -1,   -1,   398,  -1,
    -1,   401,  402,  403,  -1,   -1,   -1,   407,  -1,   409,  410,  -1,   412,  413,  414,  -1,   -1,   417,  -1,
    -1,   -1,   -1,   422,  423,  424,  -1,   -1,   427,  -1,   -1,   -1,   431,  -1,   433,  -1,   -1,   436,  437,
    -1,   -1,   -1,   -1,   -1,   -1,   444,  445,  -1,   447,  -1,   -1,   450,  -1,   -1,   -1,   454,  -1,   -1,
    -1,   458,  -1,   460,  461,  462,  -1,   -1,   -1,   466,  467,  -1,   469,  470,  -1,   472,  473,  -1,   -1,
    476,  477,  478,  479,  480,  -1,   -1,   -1,   -1,   -1,   486,  -1,   488,  -1,   -1,   -1,   492,  493,  494,
    -1,   -1,   497,  498,  -1,   -1,   -1,   -1,   -1,   -1,   -1,   506,  -1,   -1,   509,  -1,   -1,   512,  513,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   521,  -1,   -1,   524,  -1,   -1,   527,  528,  529,  530,  -1,   532,
    -1,   534,  -1,   536,  -1,   -1,   -1,   -1,   541,  -1,   -1,   544,  5,    546,  7,    8,    9,    10,   11,
    -1,   -1,   -1,   -1,   -1,   17,   -1,   -1,   -1,   -1,   -1,   23,   24,   25,   -1,   -1,   28,   -1,   30,
    -1,   -1,   33,   -1,   -1,   -1,   37,   -1,   -1,   40,   41,   -1,   43,   -1,   -1,   -1,   -1,   -1,   49,
    -1,   51,   -1,   53,   -1,   -1,   -1,   -1,   58,   59,   60,   -1,   -1,   63,   64,   -1,   -1,   67,   -1,
    69,   70,   -1,   -1,   73,   -1,   -1,   76,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   85,   -1,   -1,
    -1,   -1,   -1,   -1,   92,   93,   -1,   -1,   96,   -1,   -1,   -1,   -1,   101,  -1,   -1,   -1,   -1,   -1,
    -1,   108,  -1,   110,  -1,   -1,   -1,   -1,   -1,   116,  -1,   118,  119,  120,  -1,   -1,   -1,   -1,   -1,
    -1,   127,  128,  129,  -1,   -1,   -1,   133,  -1,   -1,   -1,   137,  138,  139,  140,  -1,   -1,   143,  -1,
    145,  146,  -1,   -1,   -1,   150,  -1,   152,  -1,   -1,   155,  156,  -1,   158,  159,  160,  -1,   -1,   -1,
    -1,   -1,   -1,   -1,   168,  169,  -1,   -1,   172,  -1,   174,  -1,   -1,   -1,   -1,   -1,   -1,   181,  182,
    -1,   -1,   185,  186,  187,  -1,   189,  -1,   -1,   -1,   -1,   -1,   -1,   196,  -1,   -1,   -1,   -1,   201,
    -1,   -1,   -1,   205,  206,  207,  208,  209,  -1,   211,  212,  -1,   -1,   -1,   216,  -1,   -1,   -1,   220,
    -1,   -1,   -1,   224,  -1,   -1,   227,  228,  229,  -1,   -1,   -1,   -1,   234,  -1,   -1,   237,  -1,   -1,
    -1,   241,  242,  -1,   244,  -1,   -1,   -1,   -1,   -1,   250,  -1,   252,  -1,   -1,   255,  -1,   257,  -1,
    -1,   -1,   -1,   -1,   263,  -1,   -1,   -1,   267,  268,  269,  270,  271,  272,  -1,   274,  275,  276,  277,
    278,  279,  280,  281,  282,  -1,   284,  285,  286,  -1,   288,  289,  -1,   -1,   -1,   293,  294,  295,  296,
    -1,   -1,   299,  300,  -1,   -1,   303,  -1,   305,  -1,   307,  -1,   -1,   310,  311,  312,  313,  314,  315,
    316,  -1,   -1,   319,  320,  -1,   322,  323,  324,  -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   333,  334,
    335,  -1,   337,  338,  339,  -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   350,  351,  352,  -1,
    354,  -1,   356,  -1,   358,  -1,   -1,   -1,   362,  -1,   364,  -1,   366,  367,  -1,   369,  370,  371,  372,
    373,  374,  375,  376,  -1,   -1,   -1,   -1,   381,  382,  -1,   -1,   385,  386,  387,  -1,   389,  -1,   -1,
    392,  393,  -1,   395,  -1,   -1,   398,  -1,   -1,   401,  402,  403,  -1,   -1,   -1,   407,  -1,   409,  410,
    -1,   412,  413,  414,  -1,   -1,   417,  -1,   -1,   -1,   -1,   422,  423,  424,  -1,   -1,   427,  -1,   -1,
    -1,   431,  -1,   433,  -1,   -1,   436,  437,  -1,   -1,   -1,   -1,   -1,   -1,   444,  445,  -1,   447,  -1,
    -1,   450,  -1,   -1,   -1,   454,  -1,   -1,   -1,   458,  -1,   460,  461,  462,  -1,   -1,   -1,   466,  467,
    -1,   469,  470,  -1,   472,  473,  -1,   -1,   476,  477,  478,  479,  480,  -1,   -1,   -1,   -1,   -1,   486,
    -1,   488,  -1,   -1,   -1,   492,  493,  494,  -1,   -1,   497,  498,  -1,   -1,   -1,   -1,   -1,   -1,   -1,
    506,  -1,   -1,   509,  -1,   -1,   512,  513,  -1,   -1,   -1,   -1,   -1,   -1,   -1,   521,  -1,   -1,   524,
    -1,   -1,   527,  528,  529,  -1,   -1,   532,  -1,   534,  -1,   536,  -1,   -1,   -1,   -1,   541,  -1,   -1,
    -1,   5,    546,  7,    8,    9,    10,   11,   -1,   -1,   -1,   -1,   -1,   17,   -1,   -1,   -1,   -1,   -1,
    23,   24,   25,   -1,   -1,   28,   -1,   30,   -1,   -1,   33,   -1,   -1,   -1,   37,   -1,   -1,   40,   41,
    -1,   43,   -1,   -1,   -1,   -1,   -1,   49,   -1,   51,   -1,   53,   -1,   -1,   -1,   -1,   58,   59,   60,
    -1,   -1,   63,   64,   -1,   -1,   67,   -1,   69,   70,   -1,   -1,   73,   -1,   -1,   76,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   85,   -1,   -1,   -1,   -1,   -1,   -1,   92,   93,   -1,   -1,   96,   -1,   -1,
    -1,   -1,   101,  -1,   -1,   -1,   -1,   -1,   -1,   108,  -1,   110,  -1,   -1,   -1,   -1,   -1,   116,  -1,
    118,  119,  120,  -1,   -1,   -1,   -1,   -1,   -1,   127,  128,  129,  -1,   -1,   -1,   133,  -1,   -1,   -1,
    137,  138,  139,  140,  -1,   -1,   143,  -1,   145,  146,  -1,   -1,   -1,   150,  -1,   152,  -1,   -1,   155,
    156,  -1,   158,  159,  160,  -1,   -1,   -1,   -1,   -1,   -1,   -1,   168,  169,  -1,   -1,   172,  -1,   174,
    -1,   -1,   -1,   -1,   -1,   -1,   181,  182,  -1,   -1,   185,  186,  187,  -1,   189,  -1,   -1,   -1,   -1,
    -1,   -1,   196,  -1,   -1,   -1,   -1,   201,  -1,   -1,   -1,   205,  206,  207,  208,  209,  -1,   211,  212,
    -1,   -1,   -1,   216,  -1,   -1,   -1,   220,  -1,   -1,   -1,   224,  -1,   -1,   227,  228,  229,  -1,   -1,
    -1,   -1,   234,  -1,   -1,   237,  -1,   -1,   -1,   241,  242,  -1,   244,  -1,   -1,   -1,   -1,   -1,   250,
    -1,   252,  -1,   -1,   255,  -1,   257,  -1,   -1,   -1,   -1,   -1,   263,  -1,   -1,   -1,   267,  268,  269,
    270,  271,  272,  -1,   274,  275,  276,  277,  278,  279,  280,  281,  282,  -1,   284,  285,  286,  -1,   288,
    289,  -1,   -1,   -1,   293,  294,  295,  296,  -1,   -1,   299,  300,  -1,   -1,   303,  -1,   305,  -1,   307,
    -1,   -1,   310,  311,  312,  313,  314,  315,  316,  -1,   -1,   319,  320,  -1,   322,  323,  324,  -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   333,  334,  335,  -1,   337,  338,  339,  -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   350,  351,  352,  -1,   354,  -1,   356,  -1,   358,  -1,   -1,   -1,   362,  -1,   364,
    -1,   366,  367,  -1,   369,  370,  371,  372,  373,  374,  375,  376,  -1,   -1,   -1,   -1,   381,  382,  -1,
    -1,   385,  386,  387,  -1,   389,  -1,   -1,   392,  393,  -1,   395,  -1,   -1,   398,  -1,   -1,   401,  402,
    403,  -1,   -1,   -1,   407,  -1,   409,  410,  -1,   412,  413,  414,  -1,   -1,   417,  -1,   -1,   -1,   -1,
    422,  423,  424,  -1,   -1,   427,  -1,   -1,   -1,   431,  -1,   433,  -1,   -1,   436,  437,  -1,   -1,   -1,
    -1,   -1,   -1,   444,  445,  -1,   447,  -1,   -1,   450,  -1,   -1,   -1,   454,  -1,   -1,   -1,   458,  -1,
    460,  461,  462,  -1,   -1,   -1,   466,  467,  -1,   469,  470,  -1,   472,  473,  -1,   -1,   476,  477,  478,
    479,  480,  -1,   -1,   -1,   -1,   -1,   486,  -1,   488,  -1,   -1,   -1,   492,  493,  494,  -1,   -1,   497,
    498,  -1,   -1,   -1,   -1,   -1,   -1,   -1,   506,  -1,   -1,   509,  -1,   -1,   512,  513,  -1,   -1,   -1,
    -1,   -1,   -1,   -1,   521,  -1,   -1,   524,  -1,   -1,   527,  528,  529,  -1,   -1,   532,  -1,   534,  -1,
    536,  -1,   -1,   -1,   -1,   541,  -1,   -1,   -1,   5,    546,  7,    8,    9,    10,   11,   -1,   -1,   -1,
    -1,   -1,   17,   -1,   -1,   -1,   -1,   -1,   23,   24,   25,   -1,   -1,   28,   -1,   30,   -1,   -1,   33,
    -1,   -1,   -1,   37,   -1,   -1,   40,   41,   -1,   43,   -1,   -1,   -1,   -1,   -1,   49,   -1,   51,   -1,
    53,   -1,   -1,   -1,   -1,   58,   59,   60,   -1,   -1,   63,   64,   -1,   -1,   67,   -1,   69,   70,   -1,
    -1,   73,   -1,   -1,   76,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   85,   -1,   -1,   -1,   -1,   -1,
    -1,   92,   93,   -1,   -1,   96,   -1,   -1,   -1,   -1,   101,  -1,   -1,   -1,   -1,   -1,   -1,   108,  -1,
    110,  -1,   -1,   -1,   -1,   -1,   116,  -1,   118,  119,  120,  -1,   -1,   -1,   -1,   -1,   -1,   127,  128,
    129,  -1,   -1,   -1,   133,  -1,   -1,   -1,   137,  138,  139,  140,  -1,   -1,   143,  -1,   145,  146,  -1,
    -1,   -1,   150,  -1,   152,  -1,   -1,   155,  156,  -1,   158,  159,  160,  -1,   -1,   -1,   -1,   -1,   -1,
    -1,   168,  169,  -1,   -1,   172,  -1,   174,  -1,   -1,   -1,   -1,   -1,   -1,   181,  182,  -1,   -1,   185,
    186,  187,  -1,   189,  -1,   -1,   -1,   -1,   -1,   -1,   196,  -1,   -1,   -1,   -1,   201,  -1,   -1,   -1,
    205,  206,  207,  208,  209,  -1,   211,  212,  -1,   -1,   -1,   216,  -1,   -1,   -1,   220,  -1,   -1,   -1,
    224,  -1,   -1,   227,  228,  229,  -1,   -1,   -1,   -1,   234,  -1,   -1,   237,  -1,   -1,   -1,   241,  242,
    -1,   244,  -1,   -1,   -1,   -1,   -1,   250,  -1,   252,  -1,   -1,   255,  -1,   257,  -1,   -1,   -1,   -1,
    -1,   263,  -1,   -1,   -1,   267,  268,  269,  270,  271,  272,  -1,   274,  275,  276,  277,  278,  279,  280,
    281,  282,  -1,   284,  285,  286,  -1,   288,  289,  -1,   -1,   -1,   293,  294,  295,  296,  -1,   -1,   299,
    300,  -1,   -1,   303,  -1,   305,  -1,   307,  -1,   -1,   310,  311,  312,  313,  314,  315,  316,  -1,   -1,
    319,  320,  -1,   322,  323,  324,  -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   333,  334,  335,  -1,   337,
    338,  339,  -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   350,  351,  352,  -1,   354,  -1,   356,
    -1,   358,  -1,   -1,   -1,   362,  -1,   364,  -1,   366,  367,  -1,   369,  370,  371,  372,  373,  374,  375,
    376,  -1,   -1,   -1,   -1,   381,  382,  -1,   -1,   385,  386,  387,  -1,   389,  -1,   -1,   392,  393,  -1,
    395,  -1,   -1,   398,  -1,   -1,   401,  402,  403,  -1,   -1,   -1,   407,  -1,   409,  410,  -1,   412,  413,
    414,  -1,   -1,   417,  -1,   -1,   -1,   -1,   422,  423,  424,  -1,   -1,   427,  -1,   -1,   -1,   431,  -1,
    433,  -1,   -1,   436,  437,  -1,   -1,   -1,   -1,   -1,   -1,   444,  445,  -1,   447,  -1,   -1,   450,  -1,
    -1,   -1,   454,  -1,   -1,   -1,   458,  -1,   460,  461,  462,  -1,   -1,   -1,   466,  467,  -1,   469,  470,
    -1,   472,  473,  -1,   -1,   476,  477,  478,  479,  480,  -1,   -1,   -1,   -1,   -1,   486,  -1,   488,  -1,
    -1,   -1,   492,  493,  494,  -1,   -1,   497,  498,  -1,   -1,   -1,   -1,   -1,   -1,   -1,   506,  -1,   -1,
    509,  -1,   -1,   512,  513,  -1,   -1,   -1,   -1,   -1,   -1,   -1,   521,  -1,   -1,   524,  -1,   -1,   527,
    528,  529,  -1,   -1,   532,  -1,   534,  -1,   536,  -1,   -1,   -1,   -1,   541,  -1,   -1,   -1,   5,    546,
    7,    8,    9,    10,   11,   -1,   -1,   -1,   -1,   -1,   17,   -1,   -1,   -1,   -1,   -1,   23,   24,   25,
    -1,   -1,   28,   -1,   30,   -1,   -1,   33,   -1,   -1,   -1,   37,   -1,   -1,   40,   41,   -1,   43,   -1,
    -1,   -1,   -1,   -1,   49,   -1,   51,   -1,   53,   -1,   -1,   -1,   -1,   58,   59,   60,   -1,   -1,   63,
    64,   -1,   -1,   67,   -1,   69,   70,   -1,   -1,   73,   -1,   -1,   76,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   85,   -1,   -1,   -1,   -1,   -1,   -1,   92,   93,   -1,   -1,   96,   -1,   -1,   -1,   -1,   101,
    -1,   -1,   -1,   -1,   -1,   -1,   108,  -1,   110,  -1,   -1,   -1,   -1,   -1,   116,  -1,   118,  119,  120,
    -1,   -1,   -1,   -1,   -1,   -1,   127,  128,  129,  -1,   -1,   -1,   133,  -1,   -1,   -1,   137,  138,  139,
    140,  -1,   -1,   143,  -1,   145,  146,  -1,   -1,   -1,   150,  -1,   152,  -1,   -1,   155,  156,  -1,   158,
    159,  160,  -1,   -1,   -1,   -1,   -1,   -1,   -1,   168,  169,  -1,   -1,   172,  -1,   174,  -1,   -1,   -1,
    -1,   -1,   -1,   181,  182,  -1,   -1,   185,  186,  187,  -1,   189,  -1,   -1,   -1,   -1,   -1,   -1,   196,
    -1,   -1,   -1,   -1,   201,  -1,   -1,   -1,   205,  206,  207,  208,  209,  -1,   211,  212,  -1,   -1,   -1,
    216,  -1,   -1,   -1,   220,  -1,   -1,   -1,   224,  -1,   -1,   227,  228,  229,  -1,   -1,   -1,   -1,   234,
    -1,   -1,   237,  -1,   -1,   -1,   241,  242,  -1,   244,  -1,   -1,   -1,   -1,   -1,   250,  -1,   252,  -1,
    -1,   255,  -1,   257,  -1,   -1,   -1,   -1,   -1,   263,  -1,   -1,   -1,   267,  268,  269,  270,  271,  272,
    -1,   274,  275,  276,  277,  278,  279,  280,  281,  282,  -1,   284,  285,  286,  -1,   288,  289,  -1,   -1,
    -1,   293,  294,  295,  296,  -1,   -1,   299,  300,  -1,   -1,   303,  -1,   305,  -1,   307,  -1,   -1,   310,
    311,  312,  313,  314,  315,  316,  -1,   -1,   319,  320,  -1,   322,  323,  324,  -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   333,  334,  335,  -1,   337,  338,  339,  -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   350,  351,  352,  -1,   354,  -1,   356,  -1,   358,  -1,   -1,   -1,   362,  -1,   364,  -1,   366,  367,
    -1,   369,  370,  371,  372,  373,  374,  375,  376,  -1,   -1,   -1,   -1,   381,  382,  -1,   -1,   385,  386,
    387,  -1,   389,  -1,   -1,   392,  393,  -1,   395,  -1,   -1,   398,  -1,   -1,   401,  402,  403,  -1,   -1,
    -1,   407,  -1,   409,  410,  -1,   412,  413,  414,  -1,   -1,   417,  -1,   -1,   -1,   -1,   422,  423,  424,
    -1,   -1,   427,  -1,   -1,   -1,   431,  -1,   433,  -1,   -1,   436,  437,  -1,   -1,   -1,   -1,   -1,   -1,
    444,  445,  -1,   447,  -1,   -1,   450,  -1,   -1,   -1,   454,  -1,   -1,   -1,   458,  -1,   460,  461,  462,
    -1,   -1,   -1,   466,  467,  -1,   469,  470,  -1,   472,  473,  -1,   -1,   476,  477,  478,  479,  480,  -1,
    -1,   -1,   -1,   -1,   486,  -1,   488,  -1,   -1,   -1,   492,  493,  494,  -1,   -1,   497,  498,  -1,   -1,
    -1,   -1,   -1,   -1,   -1,   506,  -1,   -1,   509,  -1,   -1,   512,  513,  -1,   -1,   -1,   -1,   -1,   -1,
    -1,   521,  -1,   -1,   524,  -1,   -1,   527,  528,  529,  -1,   -1,   532,  -1,   534,  -1,   536,  -1,   -1,
    -1,   -1,   541,  -1,   -1,   -1,   5,    546,  7,    8,    9,    10,   11,   -1,   -1,   -1,   -1,   -1,   17,
    -1,   -1,   -1,   -1,   -1,   23,   24,   25,   -1,   -1,   28,   -1,   30,   -1,   -1,   33,   -1,   -1,   -1,
    37,   -1,   -1,   40,   41,   -1,   43,   -1,   -1,   -1,   -1,   -1,   49,   -1,   51,   -1,   53,   -1,   -1,
    -1,   -1,   58,   59,   60,   -1,   -1,   63,   64,   -1,   -1,   67,   -1,   69,   70,   -1,   -1,   73,   -1,
    -1,   76,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   85,   -1,   -1,   -1,   -1,   -1,   -1,   92,   93,
    -1,   -1,   96,   -1,   -1,   -1,   -1,   101,  -1,   -1,   -1,   -1,   -1,   -1,   108,  -1,   110,  -1,   -1,
    -1,   -1,   -1,   116,  -1,   118,  119,  120,  -1,   -1,   -1,   -1,   -1,   -1,   127,  128,  129,  -1,   -1,
    -1,   133,  -1,   -1,   -1,   137,  138,  139,  140,  -1,   -1,   143,  -1,   145,  146,  -1,   -1,   -1,   150,
    -1,   152,  -1,   -1,   155,  156,  -1,   158,  159,  160,  -1,   -1,   -1,   -1,   -1,   -1,   -1,   168,  169,
    -1,   -1,   172,  -1,   174,  -1,   -1,   -1,   -1,   -1,   -1,   181,  182,  -1,   -1,   185,  186,  187,  -1,
    189,  -1,   -1,   -1,   -1,   -1,   -1,   196,  -1,   -1,   -1,   -1,   201,  -1,   -1,   -1,   205,  206,  207,
    208,  209,  -1,   211,  212,  -1,   -1,   -1,   216,  -1,   -1,   -1,   220,  -1,   -1,   -1,   224,  -1,   -1,
    227,  228,  229,  -1,   -1,   -1,   -1,   234,  -1,   -1,   237,  -1,   -1,   -1,   241,  242,  -1,   244,  -1,
    -1,   -1,   -1,   -1,   250,  -1,   252,  -1,   -1,   255,  -1,   257,  -1,   -1,   -1,   -1,   -1,   263,  -1,
    -1,   -1,   267,  268,  269,  270,  271,  272,  -1,   274,  275,  276,  277,  278,  279,  280,  281,  282,  -1,
    284,  285,  286,  -1,   288,  289,  -1,   -1,   -1,   293,  294,  295,  296,  -1,   -1,   299,  300,  -1,   -1,
    303,  -1,   305,  -1,   307,  -1,   -1,   310,  311,  312,  313,  314,  315,  316,  -1,   -1,   319,  320,  -1,
    322,  323,  324,  -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   333,  334,  335,  -1,   337,  338,  339,  -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   350,  351,  352,  -1,   354,  -1,   356,  -1,   358,  -1,
    -1,   -1,   362,  -1,   364,  -1,   366,  367,  -1,   369,  370,  371,  372,  373,  374,  375,  376,  -1,   -1,
    -1,   -1,   381,  382,  -1,   -1,   385,  386,  387,  -1,   389,  -1,   -1,   392,  393,  -1,   395,  -1,   -1,
    398,  -1,   -1,   401,  402,  403,  -1,   -1,   -1,   407,  -1,   409,  410,  -1,   412,  413,  414,  -1,   -1,
    417,  -1,   -1,   -1,   -1,   422,  423,  424,  -1,   -1,   427,  -1,   -1,   -1,   431,  -1,   433,  -1,   -1,
    436,  437,  -1,   -1,   -1,   -1,   -1,   -1,   444,  445,  -1,   447,  -1,   -1,   450,  -1,   -1,   -1,   454,
    -1,   -1,   -1,   458,  -1,   460,  461,  462,  -1,   -1,   -1,   466,  467,  -1,   469,  470,  -1,   472,  473,
    -1,   -1,   476,  477,  478,  479,  480,  -1,   -1,   -1,   -1,   -1,   486,  -1,   488,  -1,   -1,   -1,   492,
    493,  494,  -1,   -1,   497,  498,  -1,   -1,   -1,   -1,   -1,   -1,   -1,   506,  -1,   -1,   509,  -1,   -1,
    512,  513,  -1,   -1,   -1,   -1,   -1,   -1,   -1,   521,  -1,   -1,   524,  -1,   -1,   527,  528,  529,  -1,
    -1,   532,  -1,   534,  -1,   536,  -1,   -1,   -1,   -1,   541,  -1,   -1,   -1,   5,    546,  7,    8,    9,
    10,   11,   -1,   -1,   -1,   -1,   -1,   17,   -1,   -1,   -1,   -1,   -1,   23,   24,   25,   -1,   -1,   28,
    -1,   30,   -1,   -1,   33,   -1,   -1,   -1,   37,   -1,   -1,   40,   41,   -1,   43,   -1,   -1,   -1,   -1,
    -1,   49,   -1,   51,   -1,   53,   -1,   -1,   -1,   -1,   58,   59,   60,   -1,   -1,   63,   64,   -1,   -1,
    67,   -1,   69,   70,   -1,   -1,   73,   -1,   -1,   76,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   85,
    -1,   -1,   -1,   -1,   -1,   -1,   92,   93,   -1,   -1,   96,   -1,   -1,   -1,   -1,   101,  -1,   -1,   -1,
    -1,   -1,   -1,   108,  -1,   110,  -1,   -1,   -1,   -1,   -1,   116,  -1,   118,  119,  120,  -1,   -1,   -1,
    -1,   -1,   -1,   127,  128,  129,  -1,   -1,   -1,   133,  -1,   -1,   -1,   -1,   138,  139,  140,  -1,   -1,
    143,  -1,   145,  146,  -1,   -1,   -1,   150,  -1,   152,  -1,   -1,   155,  156,  -1,   158,  159,  160,  -1,
    -1,   -1,   -1,   -1,   -1,   -1,   168,  169,  -1,   -1,   172,  -1,   174,  -1,   -1,   -1,   -1,   -1,   -1,
    181,  182,  -1,   -1,   185,  186,  187,  -1,   189,  -1,   -1,   -1,   -1,   -1,   -1,   196,  -1,   -1,   -1,
    -1,   201,  -1,   -1,   -1,   205,  206,  207,  208,  209,  -1,   211,  212,  -1,   -1,   -1,   216,  -1,   -1,
    -1,   220,  -1,   -1,   -1,   224,  -1,   -1,   227,  228,  229,  -1,   -1,   -1,   -1,   234,  -1,   -1,   237,
    -1,   -1,   -1,   241,  242,  -1,   244,  -1,   -1,   -1,   -1,   -1,   250,  -1,   252,  -1,   -1,   255,  -1,
    257,  -1,   -1,   -1,   -1,   -1,   263,  -1,   -1,   -1,   267,  268,  269,  270,  271,  272,  -1,   274,  275,
    276,  277,  278,  279,  280,  281,  282,  -1,   284,  285,  286,  -1,   288,  289,  -1,   -1,   -1,   293,  294,
    295,  296,  -1,   -1,   299,  300,  -1,   -1,   303,  -1,   305,  -1,   307,  -1,   -1,   310,  311,  312,  313,
    314,  315,  316,  -1,   -1,   319,  320,  -1,   322,  323,  324,  -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    333,  334,  335,  -1,   337,  338,  339,  -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   350,  351,
    352,  -1,   354,  -1,   356,  -1,   358,  -1,   -1,   -1,   362,  -1,   364,  -1,   366,  367,  -1,   369,  370,
    371,  372,  373,  374,  375,  376,  -1,   -1,   -1,   -1,   381,  382,  -1,   -1,   385,  386,  387,  -1,   389,
    -1,   -1,   392,  393,  -1,   395,  -1,   -1,   398,  -1,   -1,   401,  402,  403,  -1,   -1,   -1,   407,  -1,
    409,  410,  -1,   412,  413,  414,  -1,   -1,   417,  -1,   -1,   -1,   -1,   422,  423,  424,  -1,   -1,   427,
    -1,   -1,   -1,   431,  -1,   433,  -1,   -1,   436,  437,  -1,   -1,   -1,   -1,   -1,   -1,   444,  445,  -1,
    447,  -1,   -1,   450,  -1,   -1,   -1,   454,  -1,   -1,   -1,   458,  -1,   460,  461,  462,  -1,   -1,   -1,
    466,  467,  -1,   469,  470,  -1,   472,  473,  -1,   -1,   476,  477,  478,  479,  480,  -1,   -1,   -1,   -1,
    -1,   486,  -1,   488,  -1,   -1,   -1,   492,  493,  494,  -1,   -1,   497,  498,  -1,   -1,   -1,   -1,   -1,
    -1,   -1,   506,  -1,   -1,   509,  -1,   -1,   512,  513,  -1,   -1,   -1,   -1,   -1,   -1,   -1,   521,  -1,
    -1,   524,  -1,   -1,   527,  528,  529,  -1,   -1,   532,  -1,   534,  -1,   536,  -1,   -1,   -1,   -1,   541,
    -1,   -1,   -1,   5,    546,  7,    8,    9,    10,   11,   -1,   -1,   -1,   -1,   -1,   17,   -1,   -1,   -1,
    -1,   -1,   23,   24,   25,   -1,   -1,   28,   -1,   30,   -1,   -1,   33,   -1,   -1,   -1,   37,   -1,   -1,
    40,   41,   -1,   43,   -1,   -1,   -1,   -1,   -1,   49,   -1,   51,   -1,   53,   -1,   -1,   -1,   -1,   58,
    59,   60,   -1,   -1,   63,   64,   -1,   -1,   67,   -1,   69,   70,   -1,   -1,   73,   -1,   -1,   76,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   85,   -1,   -1,   -1,   -1,   -1,   -1,   92,   93,   -1,   -1,   96,
    -1,   -1,   -1,   -1,   101,  -1,   -1,   -1,   -1,   -1,   -1,   108,  -1,   110,  -1,   -1,   -1,   -1,   -1,
    116,  -1,   118,  119,  120,  -1,   -1,   -1,   -1,   -1,   -1,   127,  128,  129,  -1,   -1,   -1,   133,  -1,
    -1,   -1,   -1,   138,  139,  140,  -1,   -1,   143,  -1,   145,  146,  -1,   -1,   -1,   150,  -1,   152,  -1,
    -1,   155,  156,  -1,   158,  159,  160,  -1,   -1,   -1,   -1,   -1,   -1,   -1,   168,  169,  -1,   -1,   172,
    -1,   174,  -1,   -1,   -1,   -1,   -1,   -1,   181,  182,  -1,   -1,   185,  186,  187,  -1,   189,  -1,   -1,
    -1,   -1,   -1,   -1,   196,  -1,   -1,   -1,   -1,   201,  -1,   -1,   -1,   205,  206,  207,  208,  209,  -1,
    211,  212,  -1,   -1,   -1,   216,  -1,   -1,   -1,   220,  -1,   -1,   -1,   224,  -1,   -1,   227,  228,  229,
    -1,   -1,   -1,   -1,   234,  -1,   -1,   237,  -1,   -1,   -1,   241,  242,  -1,   244,  -1,   -1,   -1,   -1,
    -1,   250,  -1,   252,  -1,   -1,   255,  -1,   257,  -1,   -1,   -1,   -1,   -1,   263,  -1,   -1,   -1,   267,
    268,  269,  270,  271,  272,  -1,   274,  275,  276,  277,  278,  279,  280,  281,  282,  -1,   284,  285,  286,
    -1,   288,  289,  -1,   -1,   -1,   293,  294,  295,  296,  -1,   -1,   299,  300,  -1,   -1,   303,  -1,   305,
    -1,   307,  -1,   -1,   310,  311,  312,  313,  314,  315,  316,  -1,   -1,   319,  320,  -1,   322,  323,  324,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   333,  334,  335,  -1,   337,  338,  339,  -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   350,  351,  352,  -1,   354,  -1,   356,  -1,   358,  -1,   -1,   -1,   362,
    -1,   364,  -1,   366,  367,  -1,   369,  370,  371,  372,  373,  374,  375,  376,  -1,   -1,   -1,   -1,   381,
    382,  -1,   -1,   385,  386,  387,  -1,   389,  -1,   -1,   392,  393,  -1,   395,  -1,   -1,   398,  -1,   -1,
    401,  402,  403,  -1,   -1,   -1,   407,  -1,   409,  410,  -1,   412,  413,  414,  -1,   -1,   417,  -1,   -1,
    -1,   -1,   422,  423,  424,  -1,   -1,   427,  -1,   -1,   -1,   431,  -1,   433,  -1,   -1,   436,  437,  -1,
    -1,   -1,   -1,   -1,   -1,   444,  445,  -1,   447,  -1,   -1,   450,  -1,   -1,   -1,   454,  -1,   -1,   -1,
    458,  -1,   460,  461,  462,  -1,   -1,   -1,   466,  467,  -1,   469,  470,  -1,   472,  473,  -1,   -1,   476,
    477,  478,  479,  480,  -1,   -1,   -1,   -1,   -1,   486,  -1,   488,  -1,   -1,   -1,   492,  493,  494,  -1,
    -1,   497,  498,  -1,   -1,   -1,   -1,   -1,   -1,   -1,   506,  -1,   -1,   509,  -1,   -1,   512,  513,  -1,
    -1,   -1,   -1,   -1,   -1,   -1,   521,  -1,   -1,   524,  -1,   -1,   527,  528,  529,  -1,   -1,   532,  -1,
    534,  -1,   536,  -1,   -1,   -1,   -1,   541,  -1,   -1,   -1,   5,    546,  7,    8,    9,    10,   11,   -1,
    -1,   -1,   -1,   -1,   17,   -1,   -1,   20,   -1,   -1,   23,   24,   25,   26,   -1,   28,   -1,   30,   -1,
    -1,   33,   -1,   -1,   -1,   37,   -1,   -1,   40,   41,   -1,   43,   -1,   45,   46,   -1,   -1,   49,   -1,
    51,   -1,   53,   54,   -1,   56,   -1,   58,   59,   60,   -1,   -1,   63,   64,   -1,   66,   67,   68,   69,
    70,   -1,   -1,   73,   -1,   -1,   76,   -1,   78,   -1,   -1,   -1,   -1,   -1,   -1,   85,   -1,   -1,   -1,
    -1,   -1,   -1,   92,   93,   -1,   -1,   96,   -1,   -1,   -1,   -1,   101,  102,  103,  -1,   -1,   -1,   -1,
    108,  -1,   110,  -1,   -1,   -1,   -1,   -1,   116,  -1,   118,  119,  120,  -1,   -1,   -1,   124,  -1,   -1,
    127,  128,  129,  -1,   -1,   -1,   133,  -1,   -1,   -1,   137,  138,  139,  140,  -1,   -1,   143,  -1,   145,
    146,  147,  -1,   -1,   150,  -1,   152,  -1,   -1,   155,  -1,   -1,   158,  159,  160,  161,  -1,   163,  -1,
    -1,   -1,   -1,   168,  169,  -1,   -1,   172,  -1,   174,  -1,   -1,   -1,   -1,   -1,   -1,   181,  182,  -1,
    -1,   185,  186,  -1,   -1,   189,  -1,   -1,   -1,   -1,   -1,   195,  196,  -1,   198,  199,  -1,   201,  -1,
    -1,   -1,   205,  206,  207,  208,  -1,   -1,   211,  212,  -1,   -1,   -1,   216,  -1,   -1,   -1,   220,  -1,
    -1,   -1,   224,  -1,   -1,   227,  228,  -1,   -1,   -1,   -1,   -1,   -1,   235,  -1,   237,  -1,   -1,   -1,
    241,  -1,   -1,   244,  -1,   -1,   -1,   -1,   -1,   250,  -1,   252,  -1,   -1,   255,  -1,   257,  -1,   -1,
    -1,   261,  -1,   -1,   -1,   -1,   -1,   267,  268,  269,  270,  271,  272,  -1,   274,  275,  276,  277,  278,
    279,  280,  281,  282,  -1,   284,  285,  286,  -1,   288,  289,  -1,   -1,   -1,   293,  294,  295,  296,  -1,
    -1,   299,  300,  -1,   -1,   303,  -1,   305,  -1,   307,  -1,   -1,   310,  311,  312,  313,  314,  315,  316,
    -1,   -1,   319,  320,  -1,   322,  323,  324,  325,  326,  -1,   328,  -1,   -1,   331,  -1,   333,  334,  335,
    -1,   337,  338,  339,  -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   350,  351,  352,  -1,   354,
    -1,   356,  -1,   358,  -1,   -1,   361,  362,  -1,   364,  -1,   366,  367,  -1,   369,  370,  371,  372,  373,
    374,  375,  376,  -1,   -1,   -1,   -1,   381,  382,  -1,   -1,   385,  386,  387,  -1,   389,  -1,   391,  392,
    -1,   -1,   395,  -1,   397,  398,  399,  -1,   401,  402,  -1,   -1,   -1,   406,  407,  -1,   409,  410,  -1,
    412,  413,  414,  415,  -1,   417,  418,  -1,   -1,   -1,   422,  423,  424,  -1,   -1,   427,  -1,   -1,   -1,
    431,  432,  433,  434,  -1,   436,  437,  -1,   -1,   440,  441,  442,  -1,   444,  445,  -1,   447,  -1,   -1,
    450,  -1,   -1,   453,  454,  -1,   -1,   457,  458,  -1,   460,  461,  462,  -1,   -1,   -1,   466,  467,  -1,
    469,  470,  -1,   472,  473,  -1,   -1,   476,  477,  478,  479,  480,  -1,   -1,   -1,   -1,   -1,   486,  -1,
    488,  -1,   -1,   491,  492,  493,  494,  -1,   496,  497,  498,  -1,   -1,   501,  -1,   -1,   -1,   -1,   506,
    -1,   -1,   509,  -1,   -1,   512,  513,  -1,   -1,   -1,   -1,   -1,   -1,   -1,   521,  -1,   -1,   524,  -1,
    -1,   527,  528,  529,  -1,   -1,   -1,   -1,   534,  -1,   536,  537,  -1,   -1,   5,    541,  7,    8,    9,
    10,   11,   -1,   -1,   -1,   -1,   -1,   17,   -1,   -1,   20,   -1,   -1,   23,   24,   25,   26,   -1,   28,
    -1,   30,   -1,   32,   33,   -1,   -1,   -1,   37,   -1,   -1,   40,   41,   -1,   43,   -1,   45,   46,   -1,
    -1,   49,   -1,   51,   -1,   53,   54,   -1,   56,   -1,   58,   59,   60,   -1,   -1,   63,   64,   -1,   66,
    67,   68,   69,   70,   -1,   -1,   73,   -1,   -1,   76,   -1,   78,   -1,   -1,   -1,   -1,   -1,   -1,   85,
    -1,   -1,   -1,   -1,   -1,   -1,   92,   93,   -1,   -1,   96,   -1,   -1,   -1,   -1,   101,  102,  -1,   -1,
    -1,   -1,   107,  108,  -1,   110,  -1,   -1,   -1,   -1,   -1,   116,  -1,   118,  119,  120,  -1,   -1,   -1,
    124,  -1,   -1,   127,  128,  129,  -1,   -1,   -1,   133,  -1,   -1,   -1,   137,  138,  139,  140,  141,  -1,
    143,  -1,   145,  146,  147,  -1,   -1,   150,  -1,   152,  -1,   -1,   155,  -1,   -1,   158,  159,  160,  -1,
    -1,   163,  -1,   -1,   -1,   -1,   168,  169,  -1,   -1,   172,  -1,   174,  -1,   -1,   -1,   -1,   -1,   -1,
    181,  182,  -1,   -1,   185,  186,  -1,   -1,   189,  -1,   -1,   -1,   -1,   -1,   195,  196,  -1,   198,  -1,
    -1,   201,  -1,   -1,   -1,   205,  206,  207,  208,  -1,   -1,   211,  212,  -1,   -1,   -1,   216,  -1,   -1,
    -1,   220,  -1,   -1,   -1,   224,  -1,   -1,   227,  228,  -1,   -1,   -1,   -1,   -1,   -1,   235,  -1,   237,
    -1,   -1,   -1,   241,  -1,   -1,   244,  245,  -1,   -1,   -1,   -1,   250,  -1,   252,  -1,   -1,   255,  -1,
    257,  -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   267,  268,  269,  270,  271,  272,  -1,   274,  275,
    276,  277,  278,  279,  280,  281,  282,  -1,   284,  285,  286,  -1,   288,  289,  -1,   -1,   -1,   293,  294,
    295,  296,  -1,   -1,   299,  300,  -1,   -1,   303,  -1,   305,  -1,   307,  -1,   -1,   310,  311,  312,  313,
    314,  315,  316,  -1,   -1,   319,  320,  -1,   322,  323,  324,  -1,   -1,   -1,   328,  -1,   -1,   -1,   -1,
    333,  334,  335,  -1,   337,  338,  339,  -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   350,  351,
    352,  -1,   354,  -1,   356,  -1,   358,  -1,   -1,   361,  362,  -1,   364,  -1,   366,  367,  -1,   369,  370,
    371,  372,  373,  374,  375,  376,  -1,   -1,   -1,   -1,   381,  382,  -1,   -1,   385,  386,  387,  -1,   389,
    -1,   391,  392,  -1,   -1,   395,  -1,   397,  398,  399,  -1,   401,  402,  -1,   -1,   -1,   406,  407,  -1,
    409,  410,  -1,   412,  413,  414,  415,  -1,   417,  418,  -1,   -1,   -1,   422,  423,  424,  -1,   426,  427,
    -1,   -1,   -1,   431,  432,  433,  434,  -1,   436,  437,  -1,   -1,   -1,   -1,   -1,   -1,   444,  445,  -1,
    447,  -1,   -1,   450,  -1,   -1,   453,  454,  -1,   -1,   457,  458,  -1,   460,  461,  462,  -1,   -1,   -1,
    466,  467,  -1,   469,  470,  -1,   472,  473,  -1,   475,  476,  477,  478,  479,  480,  -1,   -1,   -1,   -1,
    -1,   486,  -1,   488,  -1,   -1,   491,  492,  493,  494,  -1,   -1,   497,  498,  -1,   -1,   501,  -1,   -1,
    -1,   -1,   506,  -1,   -1,   509,  -1,   -1,   512,  513,  -1,   -1,   -1,   -1,   -1,   -1,   -1,   521,  -1,
    -1,   524,  -1,   -1,   527,  528,  529,  -1,   -1,   -1,   -1,   534,  -1,   536,  537,  -1,   -1,   5,    541,
    7,    8,    9,    10,   11,   -1,   -1,   -1,   -1,   -1,   17,   -1,   -1,   20,   -1,   -1,   23,   24,   25,
    26,   -1,   28,   -1,   30,   -1,   32,   33,   -1,   -1,   -1,   37,   -1,   -1,   40,   41,   -1,   43,   -1,
    45,   46,   -1,   -1,   49,   -1,   51,   -1,   53,   54,   -1,   56,   -1,   58,   59,   60,   -1,   -1,   63,
    64,   -1,   66,   67,   68,   69,   70,   -1,   -1,   73,   -1,   -1,   76,   -1,   78,   -1,   -1,   -1,   -1,
    -1,   -1,   85,   -1,   -1,   -1,   -1,   -1,   -1,   92,   93,   -1,   -1,   96,   -1,   -1,   -1,   -1,   101,
    102,  -1,   -1,   -1,   -1,   107,  108,  -1,   110,  -1,   -1,   -1,   -1,   -1,   116,  -1,   118,  119,  120,
    -1,   -1,   -1,   124,  -1,   -1,   127,  128,  129,  -1,   -1,   -1,   133,  -1,   -1,   -1,   137,  138,  139,
    140,  -1,   -1,   143,  -1,   145,  146,  147,  -1,   -1,   150,  -1,   152,  -1,   -1,   155,  -1,   -1,   158,
    159,  160,  -1,   -1,   163,  -1,   -1,   -1,   -1,   168,  169,  -1,   -1,   172,  -1,   174,  -1,   -1,   -1,
    -1,   -1,   -1,   181,  182,  -1,   -1,   185,  186,  -1,   -1,   189,  -1,   -1,   -1,   -1,   -1,   195,  196,
    -1,   198,  -1,   -1,   201,  -1,   -1,   -1,   205,  206,  207,  208,  -1,   -1,   211,  212,  -1,   -1,   -1,
    216,  -1,   -1,   -1,   220,  -1,   -1,   -1,   224,  -1,   -1,   227,  228,  -1,   -1,   -1,   -1,   -1,   -1,
    235,  -1,   237,  -1,   -1,   -1,   241,  -1,   -1,   244,  245,  -1,   -1,   -1,   -1,   250,  -1,   252,  -1,
    -1,   255,  -1,   257,  -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   267,  268,  269,  270,  271,  272,
    -1,   274,  275,  276,  277,  278,  279,  280,  281,  282,  -1,   284,  285,  286,  -1,   288,  289,  -1,   -1,
    -1,   293,  294,  295,  296,  -1,   -1,   299,  300,  -1,   -1,   303,  -1,   305,  -1,   307,  -1,   -1,   310,
    311,  312,  313,  314,  315,  316,  -1,   -1,   319,  320,  -1,   322,  323,  324,  -1,   -1,   -1,   328,  -1,
    -1,   -1,   -1,   333,  334,  335,  -1,   337,  338,  339,  -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   350,  351,  352,  -1,   354,  -1,   356,  -1,   358,  -1,   -1,   361,  362,  -1,   364,  -1,   366,  367,
    -1,   369,  370,  371,  372,  373,  374,  375,  376,  -1,   -1,   -1,   -1,   381,  382,  -1,   -1,   385,  386,
    387,  -1,   389,  -1,   391,  392,  -1,   -1,   395,  -1,   397,  398,  399,  -1,   401,  402,  -1,   -1,   -1,
    406,  407,  -1,   409,  410,  -1,   412,  413,  414,  415,  -1,   417,  418,  -1,   -1,   -1,   422,  423,  424,
    -1,   -1,   427,  -1,   -1,   -1,   431,  432,  433,  434,  -1,   436,  437,  -1,   -1,   -1,   -1,   -1,   -1,
    444,  445,  -1,   447,  -1,   -1,   450,  -1,   -1,   453,  454,  -1,   -1,   457,  458,  -1,   460,  461,  462,
    -1,   -1,   -1,   466,  467,  -1,   469,  470,  -1,   472,  473,  -1,   475,  476,  477,  478,  479,  480,  -1,
    -1,   -1,   -1,   -1,   486,  -1,   488,  -1,   -1,   491,  492,  493,  494,  -1,   -1,   497,  498,  -1,   -1,
    501,  -1,   -1,   -1,   -1,   506,  -1,   -1,   509,  -1,   -1,   512,  513,  -1,   -1,   -1,   -1,   -1,   -1,
    -1,   521,  -1,   -1,   524,  -1,   -1,   527,  528,  529,  -1,   -1,   -1,   -1,   534,  -1,   536,  537,  -1,
    -1,   5,    541,  7,    8,    9,    10,   11,   -1,   -1,   -1,   -1,   -1,   17,   -1,   -1,   20,   -1,   -1,
    23,   24,   25,   26,   -1,   28,   -1,   30,   -1,   32,   33,   -1,   -1,   -1,   37,   -1,   -1,   40,   41,
    -1,   43,   -1,   45,   46,   -1,   -1,   49,   -1,   51,   -1,   53,   54,   -1,   56,   -1,   58,   59,   60,
    -1,   -1,   63,   64,   -1,   66,   67,   68,   69,   70,   -1,   -1,   73,   -1,   -1,   76,   -1,   78,   -1,
    -1,   -1,   -1,   -1,   -1,   85,   -1,   -1,   -1,   -1,   -1,   -1,   92,   93,   -1,   -1,   96,   -1,   -1,
    -1,   -1,   101,  102,  -1,   -1,   -1,   -1,   107,  108,  -1,   110,  -1,   -1,   -1,   -1,   -1,   116,  -1,
    118,  119,  120,  -1,   -1,   -1,   124,  -1,   -1,   127,  128,  129,  -1,   -1,   -1,   133,  -1,   -1,   -1,
    137,  138,  139,  140,  -1,   -1,   143,  -1,   145,  146,  147,  -1,   -1,   150,  -1,   152,  -1,   -1,   155,
    -1,   -1,   158,  159,  160,  -1,   -1,   163,  -1,   -1,   -1,   -1,   168,  169,  -1,   -1,   172,  -1,   174,
    -1,   -1,   -1,   -1,   -1,   -1,   181,  182,  -1,   -1,   185,  186,  -1,   -1,   189,  -1,   -1,   -1,   -1,
    -1,   195,  196,  -1,   198,  -1,   -1,   201,  -1,   -1,   -1,   205,  206,  207,  208,  -1,   -1,   211,  212,
    -1,   -1,   -1,   216,  -1,   -1,   -1,   220,  -1,   -1,   -1,   224,  -1,   -1,   227,  228,  -1,   -1,   -1,
    -1,   -1,   -1,   235,  -1,   237,  -1,   -1,   -1,   241,  -1,   -1,   244,  245,  -1,   -1,   -1,   -1,   250,
    -1,   252,  -1,   -1,   255,  -1,   257,  -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   267,  268,  269,
    270,  271,  272,  -1,   274,  275,  276,  277,  278,  279,  280,  281,  282,  -1,   284,  285,  286,  -1,   288,
    289,  -1,   -1,   -1,   293,  294,  295,  296,  -1,   -1,   299,  300,  -1,   -1,   303,  -1,   305,  -1,   307,
    -1,   -1,   310,  311,  312,  313,  314,  315,  316,  -1,   -1,   319,  320,  -1,   322,  323,  324,  -1,   -1,
    -1,   328,  -1,   -1,   -1,   -1,   333,  334,  335,  -1,   337,  338,  339,  -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   350,  351,  352,  -1,   354,  -1,   356,  -1,   358,  -1,   -1,   361,  362,  -1,   364,
    -1,   366,  367,  -1,   369,  370,  371,  372,  373,  374,  375,  376,  -1,   -1,   -1,   -1,   381,  382,  -1,
    -1,   385,  386,  387,  -1,   389,  -1,   391,  392,  -1,   -1,   395,  -1,   397,  398,  399,  -1,   401,  402,
    -1,   -1,   -1,   406,  407,  -1,   409,  410,  -1,   412,  413,  414,  415,  -1,   417,  418,  -1,   -1,   -1,
    422,  423,  424,  -1,   -1,   427,  -1,   -1,   -1,   431,  432,  433,  434,  -1,   436,  437,  -1,   -1,   -1,
    -1,   -1,   -1,   444,  445,  -1,   447,  -1,   -1,   450,  -1,   -1,   453,  454,  -1,   -1,   457,  458,  -1,
    460,  461,  462,  -1,   -1,   -1,   466,  467,  -1,   469,  470,  -1,   472,  473,  -1,   475,  476,  477,  478,
    479,  480,  -1,   -1,   -1,   -1,   -1,   486,  -1,   488,  -1,   -1,   491,  492,  493,  494,  -1,   -1,   497,
    498,  -1,   -1,   501,  -1,   -1,   -1,   -1,   506,  -1,   -1,   509,  -1,   -1,   512,  513,  -1,   -1,   -1,
    -1,   -1,   -1,   -1,   521,  -1,   -1,   524,  -1,   -1,   527,  528,  529,  -1,   -1,   -1,   -1,   534,  -1,
    536,  537,  -1,   -1,   5,    541,  7,    8,    9,    10,   11,   -1,   -1,   -1,   -1,   -1,   17,   -1,   -1,
    20,   -1,   -1,   23,   24,   25,   26,   -1,   28,   -1,   30,   -1,   -1,   33,   -1,   -1,   -1,   37,   -1,
    -1,   40,   41,   -1,   43,   -1,   45,   46,   -1,   -1,   49,   -1,   51,   -1,   53,   54,   -1,   56,   -1,
    58,   59,   60,   -1,   -1,   63,   64,   -1,   66,   67,   68,   69,   70,   -1,   -1,   73,   -1,   -1,   76,
    -1,   78,   -1,   -1,   -1,   -1,   -1,   -1,   85,   -1,   87,   -1,   -1,   -1,   -1,   92,   93,   -1,   -1,
    96,   -1,   -1,   -1,   -1,   101,  102,  -1,   -1,   -1,   -1,   -1,   108,  -1,   110,  -1,   -1,   -1,   -1,
    -1,   116,  -1,   118,  119,  120,  -1,   -1,   -1,   124,  -1,   -1,   127,  128,  129,  -1,   -1,   -1,   133,
    -1,   -1,   -1,   137,  138,  139,  140,  -1,   -1,   143,  -1,   145,  146,  147,  -1,   -1,   150,  -1,   152,
    -1,   -1,   155,  -1,   -1,   158,  159,  160,  -1,   -1,   163,  -1,   -1,   -1,   -1,   168,  169,  -1,   -1,
    172,  -1,   174,  -1,   -1,   -1,   -1,   -1,   -1,   181,  182,  -1,   -1,   185,  186,  -1,   -1,   189,  -1,
    -1,   -1,   -1,   -1,   195,  196,  -1,   198,  -1,   -1,   201,  -1,   -1,   -1,   205,  206,  207,  208,  -1,
    -1,   211,  212,  -1,   -1,   -1,   216,  -1,   -1,   -1,   220,  -1,   -1,   -1,   224,  -1,   -1,   227,  228,
    -1,   -1,   -1,   -1,   -1,   -1,   235,  -1,   237,  -1,   -1,   -1,   241,  -1,   -1,   244,  245,  -1,   -1,
    -1,   -1,   250,  -1,   252,  -1,   -1,   255,  -1,   257,  -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    267,  268,  269,  270,  271,  272,  -1,   274,  275,  276,  277,  278,  279,  280,  281,  282,  -1,   284,  285,
    286,  -1,   288,  289,  -1,   -1,   -1,   293,  294,  295,  296,  -1,   -1,   299,  300,  -1,   -1,   303,  -1,
    305,  -1,   307,  -1,   -1,   310,  311,  312,  313,  314,  315,  316,  -1,   -1,   319,  320,  -1,   322,  323,
    324,  -1,   -1,   -1,   328,  -1,   -1,   -1,   -1,   333,  334,  335,  -1,   337,  338,  339,  -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   350,  351,  352,  -1,   354,  -1,   356,  -1,   358,  -1,   -1,   361,
    362,  -1,   364,  -1,   366,  367,  -1,   369,  370,  371,  372,  373,  374,  375,  376,  -1,   -1,   -1,   -1,
    381,  382,  -1,   -1,   385,  386,  387,  -1,   389,  -1,   391,  392,  -1,   -1,   395,  -1,   397,  398,  399,
    -1,   401,  402,  -1,   -1,   -1,   406,  407,  -1,   409,  410,  -1,   412,  413,  414,  415,  -1,   417,  418,
    -1,   -1,   -1,   422,  423,  424,  -1,   -1,   427,  -1,   -1,   -1,   431,  432,  433,  434,  -1,   436,  437,
    -1,   -1,   -1,   -1,   -1,   -1,   444,  445,  -1,   447,  -1,   -1,   450,  -1,   -1,   453,  454,  -1,   -1,
    457,  458,  -1,   460,  461,  462,  -1,   -1,   -1,   466,  467,  -1,   469,  470,  -1,   472,  473,  -1,   475,
    476,  477,  478,  479,  480,  -1,   -1,   -1,   -1,   -1,   486,  -1,   488,  -1,   -1,   491,  492,  493,  494,
    -1,   -1,   497,  498,  -1,   -1,   501,  -1,   -1,   -1,   -1,   506,  -1,   -1,   509,  -1,   -1,   512,  513,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   521,  -1,   -1,   524,  -1,   -1,   527,  528,  529,  -1,   -1,   -1,
    -1,   534,  -1,   536,  537,  -1,   -1,   5,    541,  7,    8,    9,    10,   11,   -1,   -1,   -1,   -1,   -1,
    17,   -1,   -1,   20,   -1,   -1,   23,   24,   25,   26,   -1,   28,   -1,   30,   -1,   -1,   33,   34,   -1,
    -1,   37,   -1,   -1,   40,   41,   -1,   43,   -1,   45,   46,   -1,   -1,   49,   -1,   51,   -1,   53,   54,
    -1,   56,   -1,   58,   59,   60,   -1,   -1,   63,   64,   -1,   66,   67,   68,   69,   70,   -1,   -1,   73,
    -1,   -1,   76,   -1,   78,   -1,   -1,   -1,   -1,   -1,   -1,   85,   -1,   -1,   -1,   -1,   -1,   -1,   92,
    93,   -1,   -1,   96,   -1,   -1,   -1,   -1,   101,  102,  -1,   -1,   -1,   -1,   -1,   108,  -1,   110,  -1,
    -1,   -1,   -1,   -1,   116,  -1,   118,  119,  120,  -1,   -1,   -1,   124,  -1,   -1,   127,  128,  129,  -1,
    -1,   -1,   133,  -1,   -1,   -1,   137,  138,  139,  140,  -1,   -1,   143,  -1,   145,  146,  147,  -1,   -1,
    150,  -1,   152,  -1,   -1,   155,  -1,   -1,   158,  159,  160,  -1,   -1,   163,  -1,   -1,   -1,   -1,   168,
    169,  -1,   -1,   172,  -1,   174,  -1,   -1,   -1,   -1,   -1,   -1,   181,  182,  -1,   -1,   185,  186,  -1,
    -1,   189,  -1,   -1,   -1,   -1,   -1,   195,  196,  -1,   198,  199,  -1,   201,  -1,   -1,   -1,   205,  206,
    207,  208,  -1,   -1,   211,  212,  -1,   -1,   -1,   216,  -1,   -1,   -1,   220,  -1,   -1,   -1,   224,  -1,
    -1,   227,  228,  -1,   -1,   -1,   -1,   -1,   -1,   235,  -1,   237,  -1,   -1,   -1,   241,  -1,   -1,   244,
    -1,   -1,   -1,   -1,   -1,   250,  -1,   252,  -1,   -1,   255,  -1,   257,  -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   267,  268,  269,  270,  271,  272,  -1,   274,  275,  276,  277,  278,  279,  280,  281,  282,
    -1,   284,  285,  286,  -1,   288,  289,  -1,   -1,   -1,   293,  294,  295,  296,  -1,   -1,   299,  300,  -1,
    -1,   303,  -1,   305,  -1,   307,  -1,   -1,   310,  311,  312,  313,  314,  315,  316,  -1,   -1,   319,  320,
    -1,   322,  323,  324,  -1,   -1,   -1,   328,  -1,   -1,   -1,   -1,   333,  334,  335,  -1,   337,  338,  339,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   350,  351,  352,  -1,   354,  -1,   356,  -1,   358,
    -1,   -1,   361,  362,  -1,   364,  -1,   366,  367,  -1,   369,  370,  371,  372,  373,  374,  375,  376,  -1,
    -1,   -1,   -1,   381,  382,  -1,   -1,   385,  386,  387,  -1,   389,  -1,   391,  392,  -1,   -1,   395,  -1,
    397,  398,  399,  -1,   401,  402,  -1,   -1,   -1,   406,  407,  -1,   409,  410,  -1,   412,  413,  414,  415,
    -1,   417,  418,  -1,   -1,   -1,   422,  423,  424,  -1,   -1,   427,  -1,   -1,   -1,   431,  432,  433,  434,
    -1,   436,  437,  -1,   -1,   -1,   -1,   -1,   -1,   444,  445,  -1,   447,  -1,   -1,   450,  -1,   -1,   453,
    454,  -1,   -1,   457,  458,  -1,   460,  461,  462,  -1,   -1,   -1,   466,  467,  -1,   469,  470,  -1,   472,
    473,  -1,   475,  476,  477,  478,  479,  480,  -1,   -1,   -1,   -1,   -1,   486,  -1,   488,  -1,   -1,   491,
    492,  493,  494,  -1,   -1,   497,  498,  -1,   -1,   501,  -1,   -1,   -1,   -1,   506,  -1,   -1,   509,  -1,
    -1,   512,  513,  -1,   -1,   -1,   -1,   -1,   -1,   -1,   521,  -1,   -1,   524,  -1,   -1,   527,  528,  529,
    -1,   -1,   -1,   -1,   534,  -1,   536,  537,  -1,   -1,   5,    541,  7,    8,    9,    10,   11,   -1,   -1,
    -1,   -1,   -1,   17,   -1,   -1,   20,   -1,   -1,   23,   24,   25,   26,   -1,   28,   -1,   30,   -1,   32,
    33,   -1,   -1,   -1,   37,   -1,   -1,   40,   41,   -1,   43,   -1,   45,   46,   -1,   -1,   49,   -1,   51,
    -1,   53,   54,   -1,   56,   -1,   58,   59,   60,   -1,   -1,   63,   64,   -1,   66,   67,   68,   69,   70,
    -1,   -1,   73,   -1,   -1,   76,   -1,   78,   -1,   -1,   -1,   -1,   -1,   -1,   85,   -1,   -1,   -1,   -1,
    -1,   -1,   92,   93,   -1,   -1,   96,   -1,   -1,   -1,   -1,   101,  102,  -1,   -1,   -1,   -1,   -1,   108,
    -1,   110,  -1,   -1,   -1,   -1,   -1,   116,  -1,   118,  119,  120,  -1,   -1,   -1,   124,  -1,   -1,   127,
    128,  129,  -1,   -1,   -1,   133,  -1,   -1,   -1,   137,  138,  139,  140,  -1,   -1,   143,  -1,   145,  146,
    147,  -1,   -1,   150,  -1,   152,  -1,   -1,   155,  -1,   -1,   158,  159,  160,  -1,   -1,   163,  -1,   -1,
    -1,   -1,   168,  169,  -1,   -1,   172,  -1,   174,  -1,   -1,   -1,   -1,   -1,   -1,   181,  182,  -1,   -1,
    185,  186,  -1,   -1,   189,  -1,   -1,   -1,   -1,   -1,   195,  196,  -1,   198,  -1,   -1,   201,  -1,   -1,
    -1,   205,  206,  207,  208,  -1,   -1,   211,  212,  -1,   -1,   -1,   216,  -1,   -1,   -1,   220,  -1,   -1,
    -1,   224,  -1,   -1,   227,  228,  -1,   -1,   -1,   -1,   -1,   -1,   235,  -1,   237,  -1,   -1,   -1,   241,
    -1,   -1,   244,  245,  -1,   -1,   -1,   -1,   250,  -1,   252,  -1,   -1,   255,  -1,   257,  -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   267,  268,  269,  270,  271,  272,  -1,   274,  275,  276,  277,  278,  279,
    280,  281,  282,  -1,   284,  285,  286,  -1,   288,  289,  -1,   -1,   -1,   293,  294,  295,  296,  -1,   -1,
    299,  300,  -1,   -1,   303,  -1,   305,  -1,   307,  -1,   -1,   310,  311,  312,  313,  314,  315,  316,  -1,
    -1,   319,  320,  -1,   322,  323,  324,  -1,   -1,   -1,   328,  -1,   -1,   -1,   -1,   333,  334,  335,  -1,
    337,  338,  339,  -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   350,  351,  352,  -1,   354,  -1,
    356,  -1,   358,  -1,   -1,   361,  362,  -1,   364,  -1,   366,  367,  -1,   369,  370,  371,  372,  373,  374,
    375,  376,  -1,   -1,   -1,   -1,   381,  382,  -1,   -1,   385,  386,  387,  -1,   389,  -1,   391,  392,  -1,
    -1,   395,  -1,   397,  398,  399,  -1,   401,  402,  -1,   -1,   -1,   406,  407,  -1,   409,  410,  -1,   412,
    413,  414,  415,  -1,   417,  418,  -1,   -1,   -1,   422,  423,  424,  -1,   -1,   427,  -1,   -1,   -1,   431,
    432,  433,  434,  -1,   436,  437,  -1,   -1,   -1,   -1,   -1,   -1,   444,  445,  -1,   447,  -1,   -1,   450,
    -1,   -1,   453,  454,  -1,   -1,   457,  458,  -1,   460,  461,  462,  -1,   -1,   -1,   466,  467,  -1,   469,
    470,  -1,   472,  473,  -1,   475,  476,  477,  478,  479,  480,  -1,   -1,   -1,   -1,   -1,   486,  -1,   488,
    -1,   -1,   491,  492,  493,  494,  -1,   -1,   497,  498,  -1,   -1,   501,  -1,   -1,   -1,   -1,   506,  -1,
    -1,   509,  -1,   -1,   512,  513,  -1,   -1,   -1,   -1,   -1,   -1,   -1,   521,  -1,   -1,   524,  -1,   -1,
    527,  528,  529,  -1,   -1,   -1,   -1,   534,  -1,   536,  537,  -1,   -1,   5,    541,  7,    8,    9,    10,
    11,   -1,   -1,   -1,   -1,   -1,   17,   -1,   -1,   20,   -1,   -1,   23,   24,   25,   26,   -1,   28,   -1,
    30,   -1,   -1,   33,   -1,   -1,   -1,   37,   -1,   -1,   40,   41,   -1,   43,   -1,   45,   46,   -1,   -1,
    49,   -1,   51,   -1,   53,   54,   -1,   56,   -1,   58,   59,   60,   -1,   -1,   63,   64,   -1,   66,   67,
    68,   69,   70,   -1,   -1,   73,   -1,   -1,   76,   -1,   78,   -1,   -1,   -1,   -1,   -1,   -1,   85,   -1,
    -1,   -1,   -1,   -1,   -1,   92,   93,   -1,   -1,   96,   -1,   -1,   -1,   -1,   101,  102,  -1,   -1,   -1,
    -1,   107,  108,  -1,   110,  -1,   -1,   -1,   -1,   -1,   116,  -1,   118,  119,  120,  -1,   -1,   -1,   124,
    -1,   -1,   127,  128,  129,  -1,   -1,   -1,   133,  -1,   -1,   -1,   137,  138,  139,  140,  -1,   -1,   143,
    -1,   145,  146,  147,  -1,   -1,   150,  -1,   152,  -1,   -1,   155,  -1,   -1,   158,  159,  160,  -1,   -1,
    163,  -1,   -1,   -1,   -1,   168,  169,  -1,   -1,   172,  -1,   174,  -1,   -1,   -1,   -1,   -1,   -1,   181,
    182,  -1,   -1,   185,  186,  -1,   -1,   189,  -1,   -1,   -1,   -1,   -1,   195,  196,  -1,   198,  -1,   -1,
    201,  -1,   -1,   -1,   205,  206,  207,  208,  -1,   -1,   211,  212,  -1,   -1,   -1,   216,  -1,   -1,   -1,
    220,  -1,   -1,   -1,   224,  -1,   -1,   227,  228,  -1,   -1,   -1,   -1,   -1,   -1,   235,  -1,   237,  -1,
    -1,   -1,   241,  -1,   -1,   244,  245,  -1,   -1,   -1,   -1,   250,  -1,   252,  -1,   -1,   255,  -1,   257,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   267,  268,  269,  270,  271,  272,  -1,   274,  275,  276,
    277,  278,  279,  280,  281,  282,  -1,   284,  285,  286,  -1,   288,  289,  -1,   -1,   -1,   293,  294,  295,
    296,  -1,   -1,   299,  300,  -1,   -1,   303,  -1,   305,  -1,   307,  -1,   -1,   310,  311,  312,  313,  314,
    315,  316,  -1,   -1,   319,  320,  -1,   322,  323,  324,  -1,   -1,   -1,   328,  -1,   -1,   -1,   -1,   333,
    334,  335,  -1,   337,  338,  339,  -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   350,  351,  352,
    -1,   354,  -1,   356,  -1,   358,  -1,   -1,   361,  362,  -1,   364,  -1,   366,  367,  -1,   369,  370,  371,
    372,  373,  374,  375,  376,  -1,   -1,   -1,   -1,   381,  382,  -1,   -1,   385,  386,  387,  -1,   389,  -1,
    391,  392,  -1,   -1,   395,  -1,   397,  398,  399,  -1,   401,  402,  -1,   -1,   -1,   406,  407,  -1,   409,
    410,  -1,   412,  413,  414,  415,  -1,   417,  418,  -1,   -1,   -1,   422,  423,  424,  -1,   -1,   427,  -1,
    -1,   -1,   431,  432,  433,  434,  -1,   436,  437,  -1,   -1,   -1,   -1,   -1,   -1,   444,  445,  -1,   447,
    -1,   -1,   450,  -1,   -1,   453,  454,  -1,   -1,   457,  458,  -1,   460,  461,  462,  -1,   -1,   -1,   466,
    467,  -1,   469,  470,  -1,   472,  473,  -1,   475,  476,  477,  478,  479,  480,  -1,   -1,   -1,   -1,   -1,
    486,  -1,   488,  -1,   -1,   491,  492,  493,  494,  -1,   -1,   497,  498,  -1,   -1,   501,  -1,   -1,   -1,
    -1,   506,  -1,   -1,   509,  -1,   -1,   512,  513,  -1,   -1,   -1,   -1,   -1,   -1,   -1,   521,  -1,   -1,
    524,  -1,   -1,   527,  528,  529,  -1,   -1,   -1,   -1,   534,  -1,   536,  537,  -1,   -1,   5,    541,  7,
    8,    9,    10,   11,   -1,   -1,   -1,   -1,   -1,   17,   -1,   -1,   20,   -1,   -1,   23,   24,   25,   26,
    -1,   28,   -1,   30,   -1,   -1,   33,   -1,   -1,   -1,   37,   -1,   -1,   40,   41,   -1,   43,   -1,   45,
    46,   -1,   -1,   49,   -1,   51,   -1,   53,   54,   -1,   56,   -1,   58,   59,   60,   -1,   -1,   63,   64,
    -1,   66,   67,   68,   69,   70,   -1,   -1,   73,   -1,   -1,   76,   -1,   78,   -1,   -1,   -1,   -1,   -1,
    -1,   85,   -1,   -1,   -1,   -1,   -1,   -1,   92,   93,   -1,   -1,   96,   -1,   -1,   -1,   -1,   101,  102,
    -1,   -1,   -1,   -1,   -1,   108,  -1,   110,  -1,   -1,   -1,   -1,   -1,   116,  -1,   118,  119,  120,  -1,
    -1,   -1,   124,  -1,   -1,   127,  128,  129,  -1,   -1,   -1,   133,  -1,   -1,   -1,   137,  138,  139,  140,
    -1,   -1,   143,  -1,   145,  146,  147,  -1,   -1,   150,  -1,   152,  -1,   -1,   155,  -1,   -1,   158,  159,
    160,  -1,   -1,   163,  -1,   -1,   -1,   -1,   168,  169,  -1,   -1,   172,  -1,   174,  -1,   -1,   -1,   -1,
    -1,   -1,   181,  182,  -1,   -1,   185,  186,  -1,   -1,   189,  -1,   -1,   -1,   -1,   -1,   195,  196,  -1,
    198,  -1,   -1,   201,  -1,   -1,   -1,   205,  206,  207,  208,  -1,   -1,   211,  212,  -1,   -1,   -1,   216,
    -1,   -1,   -1,   220,  -1,   -1,   -1,   224,  -1,   -1,   227,  228,  -1,   -1,   -1,   -1,   -1,   -1,   235,
    -1,   237,  -1,   -1,   -1,   241,  -1,   -1,   244,  245,  -1,   -1,   -1,   -1,   250,  -1,   252,  -1,   -1,
    255,  -1,   257,  -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   267,  268,  269,  270,  271,  272,  -1,
    274,  275,  276,  277,  278,  279,  280,  281,  282,  -1,   284,  285,  286,  -1,   288,  289,  -1,   -1,   -1,
    293,  294,  295,  296,  -1,   -1,   299,  300,  -1,   -1,   303,  -1,   305,  -1,   307,  -1,   -1,   310,  311,
    312,  313,  314,  315,  316,  -1,   -1,   319,  320,  -1,   322,  323,  324,  -1,   -1,   -1,   328,  -1,   -1,
    -1,   -1,   333,  334,  335,  -1,   337,  338,  339,  -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    350,  351,  352,  -1,   354,  -1,   356,  -1,   358,  -1,   -1,   361,  362,  -1,   364,  -1,   366,  367,  -1,
    369,  370,  371,  372,  373,  374,  375,  376,  -1,   -1,   -1,   -1,   381,  382,  -1,   -1,   385,  386,  387,
    -1,   389,  -1,   391,  392,  -1,   -1,   395,  -1,   397,  398,  399,  -1,   401,  402,  -1,   -1,   -1,   406,
    407,  -1,   409,  410,  -1,   412,  413,  414,  415,  -1,   417,  418,  -1,   -1,   -1,   422,  423,  424,  -1,
    -1,   427,  -1,   -1,   -1,   431,  432,  433,  434,  -1,   436,  437,  -1,   -1,   -1,   -1,   -1,   -1,   444,
    445,  -1,   447,  -1,   -1,   450,  -1,   -1,   453,  454,  -1,   -1,   457,  458,  -1,   460,  461,  462,  -1,
    -1,   -1,   466,  467,  -1,   469,  470,  -1,   472,  473,  -1,   475,  476,  477,  478,  479,  480,  -1,   -1,
    -1,   -1,   -1,   486,  -1,   488,  -1,   -1,   491,  492,  493,  494,  -1,   -1,   497,  498,  -1,   -1,   501,
    -1,   -1,   -1,   -1,   506,  -1,   -1,   509,  -1,   -1,   512,  513,  -1,   -1,   -1,   -1,   -1,   -1,   -1,
    521,  -1,   -1,   524,  -1,   -1,   527,  528,  529,  -1,   -1,   -1,   -1,   534,  -1,   536,  537,  -1,   -1,
    5,    541,  7,    8,    9,    10,   11,   -1,   -1,   -1,   -1,   -1,   17,   18,   -1,   20,   -1,   -1,   23,
    24,   25,   26,   -1,   28,   -1,   30,   -1,   -1,   33,   -1,   -1,   -1,   37,   -1,   -1,   40,   41,   -1,
    43,   -1,   45,   46,   -1,   -1,   49,   -1,   51,   -1,   53,   54,   -1,   56,   -1,   58,   59,   60,   -1,
    -1,   63,   64,   -1,   66,   67,   68,   69,   70,   -1,   -1,   73,   -1,   -1,   76,   -1,   78,   -1,   -1,
    -1,   -1,   -1,   -1,   85,   -1,   -1,   -1,   -1,   -1,   -1,   92,   93,   -1,   -1,   96,   -1,   -1,   -1,
    -1,   101,  102,  -1,   -1,   -1,   -1,   -1,   108,  -1,   110,  -1,   -1,   -1,   -1,   -1,   116,  -1,   118,
    119,  120,  -1,   -1,   -1,   124,  -1,   -1,   127,  128,  129,  -1,   -1,   -1,   133,  -1,   -1,   -1,   137,
    138,  139,  140,  -1,   -1,   143,  -1,   145,  146,  147,  -1,   -1,   150,  -1,   152,  -1,   -1,   155,  -1,
    -1,   158,  159,  160,  -1,   -1,   163,  -1,   -1,   -1,   -1,   168,  169,  -1,   -1,   172,  -1,   174,  -1,
    -1,   -1,   -1,   -1,   -1,   181,  182,  -1,   -1,   185,  186,  -1,   -1,   189,  -1,   -1,   -1,   -1,   -1,
    195,  196,  -1,   198,  -1,   -1,   201,  -1,   -1,   -1,   205,  206,  207,  208,  -1,   -1,   211,  212,  -1,
    -1,   -1,   216,  -1,   -1,   -1,   220,  -1,   -1,   -1,   224,  -1,   -1,   227,  228,  -1,   -1,   -1,   -1,
    -1,   -1,   235,  -1,   237,  -1,   -1,   -1,   241,  -1,   -1,   244,  -1,   -1,   -1,   -1,   -1,   250,  -1,
    252,  -1,   -1,   255,  -1,   257,  -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   267,  268,  269,  270,
    271,  272,  -1,   274,  275,  276,  277,  278,  279,  280,  281,  282,  -1,   284,  285,  286,  -1,   288,  289,
    -1,   -1,   -1,   293,  294,  295,  296,  -1,   -1,   299,  300,  -1,   -1,   303,  -1,   305,  -1,   307,  -1,
    -1,   310,  311,  312,  313,  314,  315,  316,  -1,   -1,   319,  320,  -1,   322,  323,  324,  -1,   -1,   -1,
    328,  -1,   -1,   -1,   -1,   333,  334,  335,  -1,   337,  338,  339,  -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   350,  351,  352,  -1,   354,  -1,   356,  -1,   358,  -1,   -1,   361,  362,  -1,   364,  -1,
    366,  367,  -1,   369,  370,  371,  372,  373,  374,  375,  376,  -1,   -1,   -1,   -1,   381,  382,  -1,   -1,
    385,  386,  387,  -1,   389,  -1,   391,  392,  -1,   -1,   395,  -1,   397,  398,  399,  -1,   401,  402,  -1,
    -1,   -1,   406,  407,  -1,   409,  410,  -1,   412,  413,  414,  415,  -1,   417,  418,  -1,   -1,   -1,   422,
    423,  424,  -1,   -1,   427,  -1,   -1,   -1,   431,  432,  433,  434,  -1,   436,  437,  -1,   -1,   -1,   -1,
    -1,   -1,   444,  445,  -1,   447,  -1,   -1,   450,  -1,   -1,   453,  454,  -1,   -1,   457,  458,  -1,   460,
    461,  462,  -1,   -1,   -1,   466,  467,  -1,   469,  470,  -1,   472,  473,  -1,   475,  476,  477,  478,  479,
    480,  -1,   -1,   -1,   -1,   -1,   486,  -1,   488,  -1,   -1,   491,  492,  493,  494,  -1,   -1,   497,  498,
    -1,   -1,   501,  -1,   -1,   -1,   -1,   506,  -1,   -1,   509,  -1,   -1,   512,  513,  -1,   -1,   -1,   -1,
    -1,   -1,   -1,   521,  -1,   -1,   524,  -1,   -1,   527,  528,  529,  -1,   -1,   -1,   -1,   534,  -1,   536,
    537,  -1,   -1,   5,    541,  7,    8,    9,    10,   11,   -1,   -1,   -1,   -1,   -1,   17,   -1,   -1,   20,
    -1,   -1,   23,   24,   25,   26,   -1,   28,   -1,   30,   -1,   -1,   33,   -1,   -1,   -1,   37,   -1,   -1,
    40,   41,   -1,   43,   -1,   45,   46,   -1,   -1,   49,   -1,   51,   -1,   53,   54,   -1,   56,   -1,   58,
    59,   60,   -1,   -1,   63,   64,   -1,   66,   67,   68,   69,   70,   -1,   -1,   73,   -1,   -1,   76,   -1,
    78,   79,   -1,   -1,   -1,   -1,   -1,   85,   -1,   -1,   -1,   -1,   -1,   -1,   92,   93,   -1,   -1,   96,
    -1,   -1,   -1,   -1,   101,  102,  -1,   -1,   -1,   -1,   -1,   108,  -1,   110,  -1,   -1,   -1,   -1,   -1,
    116,  -1,   118,  119,  120,  -1,   -1,   -1,   124,  -1,   -1,   127,  128,  129,  -1,   -1,   -1,   133,  -1,
    -1,   -1,   137,  138,  139,  140,  -1,   -1,   143,  -1,   145,  146,  147,  -1,   149,  150,  -1,   152,  -1,
    -1,   155,  -1,   -1,   158,  159,  160,  -1,   -1,   163,  -1,   -1,   -1,   -1,   168,  169,  -1,   -1,   172,
    -1,   174,  -1,   -1,   -1,   -1,   -1,   -1,   181,  182,  -1,   -1,   185,  186,  -1,   -1,   189,  -1,   -1,
    -1,   -1,   -1,   195,  196,  -1,   198,  -1,   -1,   201,  -1,   -1,   -1,   205,  206,  207,  208,  -1,   -1,
    211,  212,  -1,   -1,   -1,   216,  -1,   -1,   -1,   220,  -1,   -1,   -1,   224,  -1,   -1,   227,  228,  -1,
    -1,   -1,   -1,   -1,   -1,   235,  -1,   237,  -1,   -1,   -1,   241,  -1,   -1,   244,  -1,   -1,   -1,   -1,
    -1,   250,  -1,   252,  -1,   -1,   255,  -1,   257,  -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   267,
    268,  269,  270,  271,  272,  -1,   274,  275,  276,  277,  278,  279,  280,  281,  282,  -1,   284,  285,  286,
    -1,   288,  289,  -1,   -1,   -1,   293,  294,  295,  296,  -1,   -1,   299,  300,  -1,   -1,   303,  -1,   305,
    -1,   307,  -1,   -1,   310,  311,  312,  313,  314,  315,  316,  -1,   -1,   319,  320,  -1,   322,  323,  324,
    -1,   -1,   -1,   328,  -1,   -1,   -1,   -1,   333,  334,  335,  -1,   337,  338,  339,  -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   350,  351,  352,  -1,   354,  -1,   356,  -1,   358,  -1,   -1,   361,  362,
    -1,   364,  -1,   366,  367,  -1,   369,  370,  371,  372,  373,  374,  375,  376,  -1,   -1,   -1,   -1,   381,
    382,  -1,   -1,   385,  386,  387,  -1,   389,  -1,   391,  392,  -1,   -1,   395,  -1,   397,  398,  399,  -1,
    401,  402,  -1,   -1,   -1,   406,  407,  -1,   409,  410,  -1,   412,  413,  414,  415,  -1,   417,  418,  -1,
    -1,   -1,   422,  423,  424,  -1,   -1,   427,  -1,   -1,   -1,   431,  432,  433,  434,  -1,   436,  437,  -1,
    -1,   -1,   -1,   -1,   -1,   444,  445,  -1,   447,  -1,   -1,   450,  -1,   -1,   453,  454,  -1,   -1,   457,
    458,  -1,   460,  461,  462,  -1,   -1,   -1,   466,  467,  -1,   469,  470,  -1,   472,  473,  -1,   -1,   476,
    477,  478,  479,  480,  -1,   -1,   -1,   -1,   -1,   486,  -1,   488,  -1,   -1,   491,  492,  493,  494,  -1,
    -1,   497,  498,  -1,   -1,   501,  -1,   -1,   -1,   -1,   506,  -1,   -1,   509,  -1,   -1,   512,  513,  -1,
    -1,   -1,   -1,   -1,   -1,   -1,   521,  -1,   -1,   524,  -1,   -1,   527,  528,  529,  -1,   -1,   -1,   -1,
    534,  -1,   536,  537,  -1,   -1,   5,    541,  7,    8,    9,    10,   11,   -1,   -1,   -1,   -1,   -1,   17,
    -1,   -1,   20,   -1,   -1,   23,   24,   25,   26,   -1,   28,   -1,   30,   -1,   -1,   33,   -1,   -1,   -1,
    37,   -1,   -1,   40,   41,   -1,   43,   -1,   45,   46,   -1,   -1,   49,   -1,   51,   -1,   53,   54,   -1,
    56,   -1,   58,   59,   60,   -1,   -1,   63,   64,   -1,   66,   67,   68,   69,   70,   -1,   -1,   73,   -1,
    -1,   76,   -1,   78,   -1,   -1,   -1,   -1,   -1,   -1,   85,   -1,   -1,   -1,   -1,   -1,   -1,   92,   93,
    -1,   -1,   96,   -1,   -1,   -1,   -1,   101,  102,  -1,   -1,   -1,   -1,   -1,   108,  -1,   110,  -1,   -1,
    -1,   -1,   -1,   116,  -1,   118,  119,  120,  -1,   -1,   -1,   124,  -1,   -1,   127,  128,  129,  -1,   -1,
    -1,   133,  -1,   -1,   -1,   137,  138,  139,  140,  -1,   -1,   143,  -1,   145,  146,  147,  -1,   -1,   150,
    -1,   152,  -1,   -1,   155,  -1,   -1,   158,  159,  160,  -1,   -1,   163,  -1,   -1,   -1,   -1,   168,  169,
    170,  -1,   172,  -1,   174,  -1,   -1,   -1,   -1,   -1,   -1,   181,  182,  -1,   -1,   185,  186,  -1,   -1,
    189,  -1,   -1,   -1,   -1,   -1,   195,  196,  -1,   198,  -1,   -1,   201,  -1,   -1,   -1,   205,  206,  207,
    208,  -1,   -1,   211,  212,  -1,   -1,   -1,   216,  -1,   -1,   -1,   220,  -1,   -1,   -1,   224,  -1,   -1,
    227,  228,  -1,   -1,   -1,   -1,   -1,   -1,   235,  -1,   237,  -1,   -1,   -1,   241,  -1,   -1,   244,  -1,
    -1,   -1,   -1,   -1,   250,  -1,   252,  -1,   -1,   255,  -1,   257,  -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   267,  268,  269,  270,  271,  272,  -1,   274,  275,  276,  277,  278,  279,  280,  281,  282,  -1,
    284,  285,  286,  -1,   288,  289,  -1,   -1,   -1,   293,  294,  295,  296,  -1,   -1,   299,  300,  -1,   -1,
    303,  -1,   305,  -1,   307,  -1,   -1,   310,  311,  312,  313,  314,  315,  316,  -1,   -1,   319,  320,  -1,
    322,  323,  324,  -1,   -1,   -1,   328,  -1,   -1,   -1,   -1,   333,  334,  335,  -1,   337,  338,  339,  -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   350,  351,  352,  -1,   354,  -1,   356,  -1,   358,  -1,
    -1,   361,  362,  -1,   364,  -1,   366,  367,  -1,   369,  370,  371,  372,  373,  374,  375,  376,  -1,   -1,
    -1,   -1,   381,  382,  -1,   -1,   385,  386,  387,  -1,   389,  -1,   391,  392,  -1,   -1,   395,  -1,   397,
    398,  399,  -1,   401,  402,  -1,   -1,   -1,   406,  407,  -1,   409,  410,  -1,   412,  413,  414,  415,  -1,
    417,  418,  -1,   -1,   -1,   422,  423,  424,  -1,   -1,   427,  -1,   -1,   -1,   431,  432,  433,  434,  -1,
    436,  437,  -1,   -1,   -1,   -1,   -1,   -1,   444,  445,  -1,   447,  -1,   -1,   450,  -1,   -1,   453,  454,
    -1,   -1,   457,  458,  -1,   460,  461,  462,  -1,   -1,   -1,   466,  467,  -1,   469,  470,  -1,   472,  473,
    -1,   -1,   476,  477,  478,  479,  480,  -1,   -1,   -1,   -1,   -1,   486,  -1,   488,  -1,   -1,   491,  492,
    493,  494,  -1,   -1,   497,  498,  -1,   -1,   501,  -1,   -1,   -1,   -1,   506,  -1,   -1,   509,  -1,   -1,
    512,  513,  -1,   -1,   -1,   -1,   -1,   -1,   -1,   521,  -1,   -1,   524,  -1,   -1,   527,  528,  529,  -1,
    -1,   -1,   -1,   534,  -1,   536,  537,  -1,   -1,   5,    541,  7,    8,    9,    10,   11,   -1,   -1,   -1,
    -1,   -1,   17,   -1,   -1,   20,   -1,   -1,   23,   24,   25,   26,   -1,   28,   -1,   30,   -1,   -1,   33,
    -1,   -1,   -1,   37,   -1,   -1,   40,   41,   -1,   43,   -1,   45,   46,   -1,   -1,   49,   -1,   51,   -1,
    53,   54,   -1,   56,   -1,   58,   59,   60,   -1,   -1,   63,   64,   -1,   66,   67,   68,   69,   70,   -1,
    -1,   73,   -1,   -1,   76,   -1,   78,   -1,   -1,   -1,   -1,   -1,   -1,   85,   -1,   -1,   -1,   -1,   -1,
    -1,   92,   93,   -1,   -1,   96,   -1,   -1,   -1,   -1,   101,  102,  -1,   -1,   -1,   -1,   107,  108,  -1,
    110,  -1,   -1,   -1,   -1,   -1,   116,  -1,   118,  119,  120,  -1,   -1,   -1,   124,  -1,   -1,   127,  128,
    129,  -1,   -1,   -1,   133,  -1,   -1,   -1,   137,  138,  139,  140,  -1,   -1,   143,  -1,   145,  146,  147,
    -1,   -1,   150,  -1,   152,  -1,   -1,   155,  -1,   -1,   158,  159,  160,  -1,   -1,   163,  -1,   -1,   -1,
    -1,   168,  169,  -1,   -1,   172,  -1,   174,  -1,   -1,   -1,   -1,   -1,   -1,   181,  182,  -1,   -1,   185,
    186,  -1,   -1,   189,  -1,   -1,   -1,   -1,   -1,   195,  196,  -1,   198,  -1,   -1,   201,  -1,   -1,   -1,
    205,  206,  207,  208,  -1,   -1,   211,  212,  -1,   -1,   -1,   216,  -1,   -1,   -1,   220,  -1,   -1,   -1,
    224,  -1,   -1,   227,  228,  -1,   -1,   -1,   -1,   -1,   -1,   235,  -1,   237,  -1,   -1,   -1,   241,  -1,
    -1,   244,  -1,   -1,   -1,   -1,   -1,   250,  -1,   252,  -1,   -1,   255,  -1,   257,  -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   267,  268,  269,  270,  271,  272,  -1,   274,  275,  276,  277,  278,  279,  280,
    281,  282,  -1,   284,  285,  286,  -1,   288,  289,  -1,   -1,   -1,   293,  294,  295,  296,  -1,   -1,   299,
    300,  -1,   -1,   303,  -1,   305,  -1,   307,  -1,   -1,   310,  311,  312,  313,  314,  315,  316,  -1,   -1,
    319,  320,  -1,   322,  323,  324,  -1,   -1,   -1,   328,  -1,   -1,   -1,   -1,   333,  334,  335,  -1,   337,
    338,  339,  -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   350,  351,  352,  -1,   354,  -1,   356,
    -1,   358,  -1,   -1,   361,  362,  -1,   364,  -1,   366,  367,  -1,   369,  370,  371,  372,  373,  374,  375,
    376,  -1,   -1,   -1,   -1,   381,  382,  -1,   -1,   385,  386,  387,  -1,   389,  -1,   391,  392,  -1,   -1,
    395,  -1,   397,  398,  399,  -1,   401,  402,  -1,   -1,   -1,   406,  407,  -1,   409,  410,  -1,   412,  413,
    414,  415,  -1,   417,  418,  -1,   -1,   -1,   422,  423,  424,  -1,   -1,   427,  -1,   -1,   -1,   431,  432,
    433,  434,  -1,   436,  437,  -1,   -1,   -1,   -1,   -1,   -1,   444,  445,  -1,   447,  -1,   -1,   450,  -1,
    -1,   453,  454,  -1,   -1,   457,  458,  -1,   460,  461,  462,  -1,   -1,   -1,   466,  467,  -1,   469,  470,
    -1,   472,  473,  -1,   -1,   476,  477,  478,  479,  480,  -1,   -1,   -1,   -1,   -1,   486,  -1,   488,  -1,
    -1,   491,  492,  493,  494,  -1,   -1,   497,  498,  -1,   -1,   501,  -1,   -1,   -1,   -1,   506,  -1,   -1,
    509,  -1,   -1,   512,  513,  -1,   -1,   -1,   -1,   -1,   -1,   -1,   521,  -1,   -1,   524,  -1,   -1,   527,
    528,  529,  -1,   -1,   -1,   -1,   534,  -1,   536,  537,  -1,   -1,   5,    541,  7,    8,    9,    10,   11,
    -1,   -1,   -1,   -1,   -1,   17,   -1,   -1,   20,   -1,   -1,   23,   24,   25,   26,   -1,   28,   -1,   30,
    -1,   -1,   33,   -1,   -1,   -1,   37,   -1,   -1,   40,   41,   -1,   43,   -1,   45,   46,   -1,   -1,   49,
    -1,   51,   -1,   53,   54,   -1,   56,   -1,   58,   59,   60,   -1,   -1,   63,   64,   -1,   66,   67,   68,
    69,   70,   -1,   -1,   73,   -1,   -1,   76,   -1,   78,   -1,   -1,   -1,   -1,   -1,   -1,   85,   -1,   -1,
    -1,   -1,   -1,   -1,   92,   93,   -1,   -1,   96,   -1,   -1,   -1,   -1,   101,  102,  -1,   -1,   -1,   -1,
    107,  108,  -1,   110,  -1,   -1,   -1,   -1,   -1,   116,  -1,   118,  119,  120,  -1,   -1,   -1,   124,  -1,
    -1,   127,  128,  129,  -1,   -1,   -1,   133,  -1,   -1,   -1,   137,  138,  139,  140,  -1,   -1,   143,  -1,
    145,  146,  147,  -1,   -1,   150,  -1,   152,  -1,   -1,   155,  -1,   -1,   158,  159,  160,  -1,   -1,   163,
    -1,   -1,   -1,   -1,   168,  169,  -1,   -1,   172,  -1,   174,  -1,   -1,   -1,   -1,   -1,   -1,   181,  182,
    -1,   -1,   185,  186,  -1,   -1,   189,  -1,   -1,   -1,   -1,   -1,   195,  196,  -1,   198,  -1,   -1,   201,
    -1,   -1,   -1,   205,  206,  207,  208,  -1,   -1,   211,  212,  -1,   -1,   -1,   216,  -1,   -1,   -1,   220,
    -1,   -1,   -1,   224,  -1,   -1,   227,  228,  -1,   -1,   -1,   -1,   -1,   -1,   235,  -1,   237,  -1,   -1,
    -1,   241,  -1,   -1,   244,  -1,   -1,   -1,   -1,   -1,   250,  -1,   252,  -1,   -1,   255,  -1,   257,  -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   267,  268,  269,  270,  271,  272,  -1,   274,  275,  276,  277,
    278,  279,  280,  281,  282,  -1,   284,  285,  286,  -1,   288,  289,  -1,   -1,   -1,   293,  294,  295,  296,
    -1,   -1,   299,  300,  -1,   -1,   303,  -1,   305,  -1,   307,  -1,   -1,   310,  311,  312,  313,  314,  315,
    316,  -1,   -1,   319,  320,  -1,   322,  323,  324,  -1,   -1,   -1,   328,  -1,   -1,   -1,   -1,   333,  334,
    335,  -1,   337,  338,  339,  -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   350,  351,  352,  -1,
    354,  -1,   356,  -1,   358,  -1,   -1,   361,  362,  -1,   364,  -1,   366,  367,  -1,   369,  370,  371,  372,
    373,  374,  375,  376,  -1,   -1,   -1,   -1,   381,  382,  -1,   -1,   385,  386,  387,  -1,   389,  -1,   391,
    392,  -1,   -1,   395,  -1,   397,  398,  399,  -1,   401,  402,  -1,   -1,   -1,   406,  407,  -1,   409,  410,
    -1,   412,  413,  414,  415,  -1,   417,  418,  -1,   -1,   -1,   422,  423,  424,  -1,   -1,   427,  -1,   -1,
    -1,   431,  432,  433,  434,  -1,   436,  437,  -1,   -1,   -1,   -1,   -1,   -1,   444,  445,  -1,   447,  -1,
    -1,   450,  -1,   -1,   453,  454,  -1,   -1,   457,  458,  -1,   460,  461,  462,  -1,   -1,   -1,   466,  467,
    -1,   469,  470,  -1,   472,  473,  -1,   -1,   476,  477,  478,  479,  480,  -1,   -1,   -1,   -1,   -1,   486,
    -1,   488,  -1,   -1,   491,  492,  493,  494,  -1,   -1,   497,  498,  -1,   -1,   501,  -1,   -1,   -1,   -1,
    506,  -1,   -1,   509,  -1,   -1,   512,  513,  -1,   -1,   -1,   -1,   -1,   -1,   -1,   521,  -1,   -1,   524,
    -1,   -1,   527,  528,  529,  -1,   -1,   -1,   -1,   534,  -1,   536,  537,  -1,   -1,   5,    541,  7,    8,
    9,    10,   11,   -1,   -1,   -1,   -1,   -1,   17,   -1,   -1,   20,   -1,   -1,   23,   24,   25,   26,   -1,
    28,   -1,   30,   -1,   -1,   33,   -1,   -1,   -1,   37,   -1,   -1,   40,   41,   -1,   43,   -1,   45,   46,
    -1,   -1,   49,   -1,   51,   -1,   53,   54,   -1,   56,   -1,   58,   59,   60,   -1,   -1,   63,   64,   -1,
    66,   67,   68,   69,   70,   -1,   -1,   73,   -1,   -1,   76,   -1,   78,   -1,   -1,   -1,   -1,   -1,   -1,
    85,   -1,   -1,   -1,   -1,   -1,   -1,   92,   93,   -1,   -1,   96,   -1,   -1,   -1,   -1,   101,  102,  -1,
    -1,   -1,   -1,   -1,   108,  -1,   110,  -1,   -1,   -1,   -1,   -1,   116,  -1,   118,  119,  120,  -1,   -1,
    -1,   124,  -1,   -1,   127,  128,  129,  -1,   -1,   -1,   133,  -1,   -1,   -1,   137,  138,  139,  140,  -1,
    -1,   143,  -1,   145,  146,  147,  -1,   -1,   150,  -1,   152,  -1,   -1,   155,  -1,   -1,   158,  159,  160,
    -1,   -1,   163,  -1,   -1,   -1,   -1,   168,  169,  -1,   -1,   172,  -1,   174,  -1,   -1,   -1,   -1,   -1,
    -1,   181,  182,  -1,   -1,   185,  186,  -1,   -1,   189,  -1,   -1,   -1,   -1,   -1,   195,  196,  -1,   198,
    -1,   -1,   201,  -1,   -1,   -1,   205,  206,  207,  208,  -1,   -1,   211,  212,  -1,   -1,   -1,   216,  -1,
    -1,   -1,   220,  -1,   -1,   -1,   224,  -1,   -1,   227,  228,  -1,   -1,   -1,   -1,   -1,   -1,   235,  -1,
    237,  -1,   -1,   -1,   241,  -1,   -1,   244,  -1,   -1,   -1,   -1,   -1,   250,  -1,   252,  -1,   -1,   255,
    -1,   257,  -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   267,  268,  269,  270,  271,  272,  -1,   274,
    275,  276,  277,  278,  279,  280,  281,  282,  -1,   284,  285,  286,  -1,   288,  289,  -1,   -1,   -1,   293,
    294,  295,  296,  -1,   -1,   299,  300,  -1,   -1,   303,  -1,   305,  -1,   307,  -1,   -1,   310,  311,  312,
    313,  314,  315,  316,  -1,   -1,   319,  320,  -1,   322,  323,  324,  -1,   -1,   -1,   328,  -1,   -1,   -1,
    -1,   333,  334,  335,  -1,   337,  338,  339,  -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   350,
    351,  352,  -1,   354,  -1,   356,  -1,   358,  -1,   -1,   361,  362,  363,  364,  -1,   366,  367,  -1,   369,
    370,  371,  372,  373,  374,  375,  376,  -1,   -1,   -1,   -1,   381,  382,  -1,   -1,   385,  386,  387,  -1,
    389,  -1,   391,  392,  -1,   -1,   395,  -1,   397,  398,  399,  -1,   401,  402,  -1,   -1,   -1,   406,  407,
    -1,   409,  410,  -1,   412,  413,  414,  415,  -1,   417,  418,  -1,   -1,   -1,   422,  423,  424,  -1,   -1,
    427,  -1,   -1,   -1,   431,  432,  433,  434,  -1,   436,  437,  -1,   -1,   -1,   -1,   -1,   -1,   444,  445,
    -1,   447,  -1,   -1,   450,  -1,   -1,   453,  454,  -1,   -1,   457,  458,  -1,   460,  461,  462,  -1,   -1,
    -1,   466,  467,  -1,   469,  470,  -1,   472,  473,  -1,   -1,   476,  477,  478,  479,  480,  -1,   -1,   -1,
    -1,   -1,   486,  -1,   488,  -1,   -1,   491,  492,  493,  494,  -1,   -1,   497,  498,  -1,   -1,   501,  -1,
    -1,   -1,   -1,   506,  -1,   -1,   509,  -1,   -1,   512,  513,  -1,   -1,   -1,   -1,   -1,   -1,   -1,   521,
    -1,   -1,   524,  -1,   -1,   527,  528,  529,  -1,   -1,   -1,   -1,   534,  -1,   536,  537,  -1,   -1,   5,
    541,  7,    8,    9,    10,   11,   -1,   -1,   -1,   -1,   -1,   17,   -1,   -1,   20,   -1,   -1,   23,   24,
    25,   26,   -1,   28,   -1,   30,   -1,   -1,   33,   -1,   -1,   -1,   37,   -1,   -1,   40,   41,   -1,   43,
    -1,   45,   46,   -1,   -1,   49,   -1,   51,   -1,   53,   54,   -1,   56,   -1,   58,   59,   60,   -1,   -1,
    63,   64,   -1,   66,   67,   68,   69,   70,   -1,   -1,   73,   -1,   -1,   76,   -1,   78,   -1,   -1,   -1,
    -1,   -1,   -1,   85,   -1,   -1,   -1,   -1,   -1,   -1,   92,   93,   -1,   -1,   96,   -1,   -1,   -1,   -1,
    101,  102,  -1,   -1,   -1,   -1,   -1,   108,  -1,   110,  -1,   -1,   -1,   -1,   -1,   116,  -1,   118,  119,
    120,  -1,   -1,   -1,   124,  -1,   -1,   127,  128,  129,  -1,   -1,   -1,   133,  -1,   -1,   -1,   137,  138,
    139,  140,  -1,   -1,   143,  -1,   145,  146,  147,  -1,   -1,   150,  -1,   152,  -1,   -1,   155,  -1,   -1,
    158,  159,  160,  -1,   -1,   163,  -1,   -1,   -1,   -1,   168,  169,  -1,   -1,   172,  -1,   174,  -1,   -1,
    -1,   -1,   -1,   -1,   181,  182,  -1,   -1,   185,  186,  -1,   -1,   189,  -1,   -1,   -1,   -1,   -1,   195,
    196,  -1,   198,  -1,   -1,   201,  -1,   -1,   -1,   205,  206,  207,  208,  -1,   -1,   211,  212,  -1,   -1,
    -1,   216,  -1,   -1,   -1,   220,  -1,   -1,   -1,   224,  -1,   -1,   227,  228,  -1,   -1,   -1,   -1,   -1,
    -1,   235,  -1,   237,  -1,   -1,   -1,   241,  -1,   -1,   244,  -1,   -1,   -1,   -1,   -1,   250,  -1,   252,
    -1,   -1,   255,  -1,   257,  -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   267,  268,  269,  270,  271,
    272,  -1,   274,  275,  276,  277,  278,  279,  280,  281,  282,  -1,   284,  285,  286,  -1,   288,  289,  -1,
    -1,   -1,   293,  294,  295,  296,  -1,   -1,   299,  300,  -1,   -1,   303,  -1,   305,  -1,   307,  -1,   -1,
    310,  311,  312,  313,  314,  315,  316,  -1,   -1,   319,  320,  -1,   322,  323,  324,  -1,   -1,   -1,   328,
    -1,   -1,   -1,   -1,   333,  334,  335,  -1,   337,  338,  339,  -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   -1,   350,  351,  352,  -1,   354,  -1,   356,  -1,   358,  -1,   -1,   361,  362,  -1,   364,  -1,   366,
    367,  -1,   369,  370,  371,  372,  373,  374,  375,  376,  -1,   -1,   -1,   -1,   381,  382,  -1,   -1,   385,
    386,  387,  -1,   389,  -1,   391,  392,  -1,   -1,   395,  -1,   397,  398,  399,  -1,   401,  402,  -1,   -1,
    -1,   406,  407,  -1,   409,  410,  -1,   412,  413,  414,  415,  -1,   417,  418,  -1,   -1,   -1,   422,  423,
    424,  -1,   -1,   427,  -1,   -1,   -1,   431,  432,  433,  434,  -1,   436,  437,  -1,   -1,   -1,   -1,   -1,
    -1,   444,  445,  -1,   447,  -1,   -1,   450,  -1,   -1,   453,  454,  -1,   -1,   457,  458,  -1,   460,  461,
    462,  -1,   -1,   -1,   466,  467,  -1,   469,  470,  -1,   472,  473,  -1,   475,  476,  477,  478,  479,  480,
    -1,   -1,   -1,   -1,   -1,   486,  -1,   488,  -1,   -1,   491,  492,  493,  494,  -1,   -1,   497,  498,  -1,
    -1,   501,  -1,   -1,   -1,   -1,   506,  -1,   -1,   509,  -1,   -1,   512,  513,  -1,   -1,   -1,   -1,   -1,
    -1,   -1,   521,  -1,   -1,   524,  -1,   -1,   527,  528,  529,  -1,   -1,   -1,   -1,   534,  -1,   536,  537,
    -1,   -1,   5,    541,  7,    8,    9,    10,   11,   -1,   -1,   -1,   -1,   -1,   17,   -1,   -1,   20,   -1,
    -1,   23,   24,   25,   26,   -1,   28,   -1,   30,   -1,   -1,   33,   -1,   -1,   -1,   37,   -1,   -1,   40,
    41,   -1,   43,   -1,   45,   46,   -1,   -1,   49,   -1,   51,   -1,   53,   54,   -1,   56,   -1,   58,   59,
    60,   -1,   -1,   63,   64,   -1,   66,   67,   68,   69,   70,   -1,   -1,   73,   -1,   -1,   76,   -1,   78,
    -1,   -1,   -1,   -1,   -1,   -1,   85,   -1,   -1,   -1,   -1,   -1,   -1,   92,   93,   -1,   -1,   96,   -1,
    -1,   -1,   -1,   101,  102,  -1,   -1,   -1,   -1,   107,  108,  -1,   110,  -1,   -1,   -1,   -1,   -1,   116,
    -1,   118,  119,  120,  -1,   -1,   -1,   124,  -1,   -1,   127,  128,  129,  -1,   -1,   -1,   133,  -1,   -1,
    -1,   137,  138,  139,  140,  -1,   -1,   143,  -1,   145,  146,  147,  -1,   -1,   150,  -1,   152,  -1,   -1,
    155,  -1,   -1,   158,  159,  160,  -1,   -1,   163,  -1,   -1,   -1,   -1,   168,  169,  -1,   -1,   172,  -1,
    174,  -1,   -1,   -1,   -1,   -1,   -1,   181,  182,  -1,   -1,   185,  186,  -1,   -1,   189,  -1,   -1,   -1,
    -1,   -1,   195,  196,  -1,   198,  -1,   -1,   201,  -1,   -1,   -1,   205,  206,  207,  208,  -1,   -1,   211,
    212,  -1,   -1,   -1,   216,  -1,   -1,   -1,   220,  -1,   -1,   -1,   224,  -1,   -1,   227,  228,  -1,   -1,
    -1,   -1,   -1,   -1,   235,  -1,   237,  -1,   -1,   -1,   241,  -1,   -1,   244,  -1,   -1,   -1,   -1,   -1,
    250,  -1,   252,  -1,   -1,   255,  -1,   257,  -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   267,  268,
    269,  270,  271,  272,  -1,   274,  275,  276,  277,  278,  279,  280,  281,  282,  -1,   284,  285,  286,  -1,
    288,  289,  -1,   -1,   -1,   293,  294,  295,  296,  -1,   -1,   299,  300,  -1,   -1,   303,  -1,   305,  -1,
    307,  -1,   -1,   310,  311,  312,  313,  314,  315,  316,  -1,   -1,   319,  320,  -1,   322,  323,  324,  -1,
    -1,   -1,   328,  -1,   -1,   -1,   -1,   333,  334,  335,  -1,   337,  338,  339,  -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   -1,   350,  351,  352,  -1,   354,  -1,   356,  -1,   358,  -1,   -1,   361,  362,  -1,
    364,  -1,   366,  367,  -1,   369,  370,  371,  372,  373,  374,  375,  376,  -1,   -1,   -1,   -1,   381,  382,
    -1,   -1,   385,  386,  387,  -1,   389,  -1,   391,  392,  -1,   -1,   395,  -1,   397,  398,  399,  -1,   401,
    402,  -1,   -1,   -1,   406,  407,  -1,   409,  410,  -1,   412,  413,  414,  415,  -1,   417,  418,  -1,   -1,
    -1,   422,  423,  424,  -1,   -1,   427,  -1,   -1,   -1,   431,  432,  433,  434,  -1,   436,  437,  -1,   -1,
    -1,   -1,   -1,   -1,   444,  445,  -1,   447,  -1,   -1,   450,  -1,   -1,   453,  454,  -1,   -1,   457,  458,
    -1,   460,  461,  462,  -1,   -1,   -1,   466,  467,  -1,   469,  470,  -1,   472,  473,  -1,   -1,   476,  477,
    478,  479,  480,  -1,   -1,   -1,   -1,   -1,   486,  -1,   488,  -1,   -1,   491,  492,  493,  494,  -1,   -1,
    497,  498,  -1,   -1,   501,  -1,   -1,   -1,   -1,   506,  -1,   -1,   509,  -1,   -1,   512,  513,  -1,   -1,
    -1,   -1,   -1,   -1,   -1,   521,  -1,   -1,   524,  -1,   -1,   527,  528,  529,  -1,   -1,   -1,   -1,   534,
    -1,   536,  537,  -1,   -1,   5,    541,  7,    8,    9,    10,   11,   -1,   -1,   -1,   -1,   -1,   17,   -1,
    -1,   20,   -1,   -1,   23,   24,   25,   26,   -1,   28,   -1,   30,   -1,   -1,   33,   -1,   -1,   -1,   37,
    -1,   -1,   40,   41,   -1,   43,   -1,   45,   46,   -1,   -1,   49,   -1,   51,   -1,   53,   54,   -1,   56,
    -1,   58,   59,   60,   -1,   -1,   63,   64,   -1,   66,   67,   68,   69,   70,   -1,   -1,   73,   -1,   -1,
    76,   -1,   78,   -1,   -1,   -1,   -1,   -1,   -1,   85,   -1,   -1,   -1,   -1,   -1,   -1,   92,   93,   -1,
    -1,   96,   -1,   -1,   -1,   -1,   101,  102,  -1,   -1,   -1,   -1,   -1,   108,  -1,   110,  -1,   -1,   -1,
    -1,   -1,   116,  -1,   118,  119,  120,  -1,   -1,   -1,   124,  -1,   -1,   127,  128,  129,  -1,   -1,   -1,
    133,  -1,   -1,   -1,   137,  138,  139,  140,  -1,   -1,   143,  -1,   145,  146,  147,  -1,   -1,   150,  -1,
    152,  -1,   -1,   155,  -1,   -1,   158,  159,  160,  -1,   -1,   163,  -1,   -1,   -1,   -1,   168,  169,  -1,
    -1,   172,  -1,   174,  -1,   -1,   -1,   -1,   -1,   -1,   181,  182,  -1,   -1,   185,  186,  -1,   -1,   189,
    -1,   -1,   -1,   -1,   -1,   195,  196,  -1,   198,  -1,   -1,   201,  -1,   -1,   -1,   205,  206,  207,  208,
    -1,   -1,   211,  212,  -1,   -1,   -1,   216,  -1,   -1,   -1,   220,  -1,   -1,   -1,   224,  -1,   -1,   227,
    228,  -1,   -1,   -1,   -1,   -1,   -1,   235,  -1,   237,  -1,   -1,   -1,   241,  -1,   -1,   244,  -1,   -1,
    -1,   -1,   -1,   250,  -1,   252,  -1,   -1,   255,  -1,   257,  -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    -1,   267,  268,  269,  270,  271,  272,  -1,   274,  275,  276,  277,  278,  279,  280,  281,  282,  -1,   284,
    285,  286,  -1,   288,  289,  -1,   -1,   -1,   293,  294,  295,  296,  -1,   -1,   299,  300,  -1,   -1,   303,
    -1,   305,  -1,   307,  -1,   -1,   310,  311,  312,  313,  314,  315,  316,  -1,   -1,   319,  320,  -1,   322,
    323,  324,  -1,   -1,   -1,   328,  -1,   -1,   -1,   -1,   333,  334,  335,  -1,   337,  338,  339,  -1,   -1,
    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   350,  351,  352,  -1,   354,  -1,   356,  -1,   358,  -1,   -1,
    361,  362,  -1,   364,  -1,   366,  367,  -1,   369,  370,  371,  372,  373,  374,  375,  376,  -1,   -1,   -1,
    -1,   381,  382,  -1,   -1,   385,  386,  387,  -1,   389,  -1,   391,  392,  -1,   -1,   395,  -1,   397,  398,
    399,  -1,   401,  402,  -1,   -1,   -1,   406,  407,  -1,   409,  410,  -1,   412,  413,  414,  415,  -1,   417,
    418,  -1,   -1,   -1,   422,  423,  424,  -1,   -1,   427,  -1,   -1,   -1,   431,  432,  433,  434,  -1,   436,
    437,  -1,   -1,   -1,   -1,   -1,   -1,   444,  445,  -1,   447,  -1,   -1,   450,  -1,   -1,   453,  454,  -1,
    -1,   457,  458,  -1,   460,  461,  462,  -1,   -1,   -1,   466,  467,  -1,   469,  470,  -1,   472,  473,  -1,
    -1,   476,  477,  478,  479,  480,  -1,   -1,   -1,   -1,   -1,   486,  -1,   488,  -1,   -1,   491,  492,  493,
    494,  -1,   -1,   497,  498,  -1,   -1,   501,  -1,   -1,   -1,   -1,   506,  -1,   -1,   509,  -1,   -1,   512,
    513,  -1,   -1,   -1,   -1,   -1,   -1,   -1,   521,  -1,   -1,   524,  -1,   -1,   527,  528,  529,  -1,   -1,
    -1,   -1,   534,  -1,   536,  537,  -1,   -1,   5,    541,  7,    8,    9,    10,   11,   -1,   -1,   -1,   -1,
    -1,   17,   -1,   -1,   20,   -1,   -1,   23,   24,   25,   26,   -1,   28,   -1,   30,   -1,   -1,   33,   -1,
    -1,   -1,   37,   -1,   -1,   40,   41,   -1,   43,   -1,   45,   46,   -1,   -1,   49,   -1,   51,   -1,   53,
    54,   -1,   56,   -1,   58,   59,   60,   -1,   -1,   63,   64,   -1,   66,   67,   68,   69,   70,   -1,   -1,
    73,   -1,   -1,   76,   -1,   78,   -1,   -1,   -1,   -1,   -1,   -1,   85,   -1,   -1,   -1,   -1,   -1,   -1,
    92,   93,   -1,   -1,   96,   -1,   -1,   -1,   -1,   101,  102,  -1,   -1,   -1,   -1,   -1,   108,  -1,   110,
    -1,   -1,   -1,   -1,   -1,   116,  -1,   118,  119,  120,  -1,   -1,   -1,   124,  -1,   -1,   127,  128,  129,
    -1,   -1,   -1,   133,  -1,   -1,   -1,   137,  138,  139,  140,  -1,   -1,   143,  -1,   145,  146,  147,  -1,
    -1,   150,  -1,   152,  -1,   -1,   155,  -1,   -1,   158,  159,  160,  -1,   -1,   163,  -1,   -1,   -1,   -1,
    168,  169,  -1,   -1,   172,  -1,   174,  -1,   -1,   -1,   -1,   -1,   -1,   181,  182,  -1,   -1,   185,  186,
    -1,   -1,   189,  -1,   -1,   -1,   -1,   -1,   195,  196,  -1,   198,  -1,   -1,   201,  -1,   -1,   -1,   205,
    206,  207,  208,  -1,   -1,   211,  212,  -1,   -1,   -1,   216,  -1,   -1,   -1,   220,  -1,   -1,   -1,   224,
    -1,   -1,   227,  228,  -1,   -1,   -1,   -1,   -1,   -1,   235,  -1,   237,  -1,   -1,   -1,   241,  -1,   -1,
    244,  -1,   -1,   -1,   -1,   -1,   250,  -1,   252,  -1,   -1,   255,  -1,   257,  -1,   -1,   -1,   -1,   -1,
    -1,   -1,   -1,   -1,   267,  268,  269,  270,  271,  272,  -1,   274,  275,  276,  277,  278,  279,  280,  281,
    282,  -1,   284,  285,  286,  -1,   288,  289,  -1,   -1,   -1,   293,  294,  295,  296,  -1,   -1,   299,  300,
    -1,   -1,   303,  -1,   305,  -1,   307,  -1,   -1,   310,  311,  312,  313,  314,  315,  316,  -1,   -1,   319,
    320,  -1,   322,  323,  324,  -1,   -1,   -1,   328,  -1,   -1,   -1,   -1,   333,  334,  335,  -1,   337,  338,
    339,  -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   350,  351,  352,  -1,   354,  -1,   356,  -1,
    358,  -1,   -1,   361,  362,  -1,   364,  -1,   366,  367,  -1,   369,  370,  371,  372,  373,  374,  375,  376,
    -1,   -1,   -1,   -1,   381,  382,  -1,   -1,   385,  386,  387,  -1,   389,  -1,   391,  392,  -1,   -1,   395,
    -1,   397,  398,  399,  -1,   401,  402,  -1,   -1,   -1,   406,  407,  -1,   409,  410,  -1,   412,  413,  414,
    415,  -1,   417,  418,  -1,   -1,   -1,   422,  423,  424,  -1,   -1,   427,  -1,   -1,   -1,   431,  432,  433,
    434,  -1,   436,  437,  -1,   -1,   -1,   -1,   -1,   -1,   444,  445,  -1,   447,  -1,   -1,   450,  -1,   -1,
    453,  454,  -1,   -1,   457,  458,  -1,   460,  461,  462,  -1,   -1,   -1,   466,  467,  -1,   469,  470,  -1,
    472,  473,  -1,   -1,   476,  477,  478,  479,  480,  -1,   -1,   -1,   -1,   -1,   486,  -1,   488,  -1,   -1,
    491,  492,  493,  494,  -1,   -1,   497,  498,  -1,   -1,   501,  -1,   -1,   -1,   -1,   506,  -1,   -1,   509,
    -1,   -1,   512,  513,  -1,   -1,   -1,   -1,   -1,   -1,   -1,   521,  -1,   -1,   524,  -1,   -1,   527,  528,
    529,  -1,   -1,   -1,   -1,   534,  -1,   536,  537,  -1,   -1,   -1,   541};

/* YYSTOS[STATE-NUM] -- The (internal number of the) accessing
   symbol of state STATE-NUM.  */
static const unsigned short yystos[] = {
    0,    3,    13,   14,   26,   28,   46,   47,   52,   56,   57,   68,   83,   102,  111,  112,  113,  124,  125,
    147,  163,  188,  195,  198,  219,  233,  251,  256,  340,  361,  368,  388,  390,  391,  394,  397,  399,  404,
    406,  415,  419,  425,  430,  434,  453,  457,  491,  507,  510,  514,  537,  558,  569,  570,  571,  572,  573,
    574,  576,  581,  583,  588,  612,  763,  781,  784,  792,  794,  796,  799,  804,  806,  811,  814,  819,  823,
    831,  832,  975,  977,  983,  986,  1011, 1019, 1030, 1032, 1046, 1049, 1052, 1058, 1062, 1066, 1068, 1069, 1113,
    1130, 1136, 1138, 1145, 1147, 1172, 1178, 1179, 1180, 1181, 1205, 11,   90,   174,  210,  365,  777,  1201, 252,
    329,  813,  469,  471,  1132, 1173, 213,  5,    7,    8,    9,    10,   11,   17,   20,   23,   24,   25,   26,
    28,   30,   33,   37,   40,   41,   43,   45,   46,   49,   51,   53,   54,   56,   58,   59,   60,   63,   64,
    66,   67,   68,   69,   70,   73,   76,   78,   85,   92,   93,   96,   101,  102,  108,  110,  116,  118,  119,
    120,  124,  127,  128,  129,  133,  137,  138,  139,  140,  143,  145,  146,  147,  150,  152,  155,  158,  159,
    160,  163,  168,  169,  172,  174,  181,  182,  185,  186,  189,  195,  196,  198,  201,  205,  206,  207,  208,
    211,  212,  216,  220,  224,  227,  228,  235,  237,  241,  244,  250,  252,  255,  257,  267,  268,  269,  270,
    271,  272,  274,  275,  276,  277,  278,  279,  280,  281,  282,  284,  285,  286,  288,  289,  293,  294,  295,
    296,  299,  300,  303,  305,  307,  310,  311,  312,  313,  314,  315,  316,  319,  320,  322,  323,  324,  328,
    333,  334,  335,  337,  338,  339,  350,  351,  352,  354,  356,  358,  361,  362,  364,  366,  367,  369,  370,
    371,  372,  373,  374,  375,  376,  381,  382,  385,  386,  387,  389,  391,  392,  395,  397,  398,  399,  401,
    402,  406,  407,  409,  410,  412,  413,  414,  415,  417,  418,  422,  423,  424,  427,  431,  432,  433,  434,
    436,  437,  444,  445,  447,  450,  453,  454,  457,  458,  460,  461,  462,  466,  467,  469,  470,  472,  473,
    476,  477,  478,  479,  480,  486,  488,  491,  492,  493,  494,  497,  498,  501,  506,  509,  512,  513,  521,
    524,  527,  528,  529,  534,  536,  537,  541,  600,  1104, 1107, 1111, 1112, 281,  1132, 1132, 534,  1174, 10,
    90,   173,  346,  365,  438,  472,  487,  503,  512,  681,  682,  683,  696,  755,  1200, 1020, 976,  90,   174,
    213,  365,  472,  487,  512,  527,  982,  1107, 813,  599,  565,  1102, 1103, 1107, 582,  984,  75,   370,  1067,
    92,   213,  471,  1132, 813,  1107, 1063, 415,  512,  1132, 813,  987,  1059, 1132, 599,  1174, 1107, 835,  837,
    838,  341,  1115, 1033, 453,  457,  434,  486,  434,  471,  1031, 1137, 1012, 1107, 28,   68,   137,  361,  381,
    406,  453,  1207, 419,  558,  834,  0,    3,    361,  152,  1050, 1102, 1107, 141,  769,  1107, 600,  600,  471,
    87,   108,  1202, 1132, 795,  1174, 820,  821,  1102, 613,  565,  484,  797,  807,  16,   1175, 209,  684,  394,
    600,  600,  599,  471,  682,  174,  213,  1201, 210,  264,  371,  1028, 1029, 895,  896,  209,  981,  981,  1107,
    981,  600,  599,  981,  1132, 577,  1053, 12,   13,   83,   111,  125,  147,  158,  188,  213,  219,  256,  366,
    383,  389,  395,  419,  430,  431,  466,  510,  511,  1148, 1150, 1152, 1153, 1107, 339,  60,   379,  565,  245,
    475,  1105, 1107, 1109, 109,  200,  264,  989,  7,    20,   22,   25,   29,   32,   34,   35,   36,   38,   50,
    54,   55,   61,   63,   71,   72,   78,   80,   81,   82,   86,   87,   89,   90,   94,   95,   96,   101,  103,
    106,  107,  114,  115,  132,  135,  136,  148,  151,  153,  154,  157,  161,  166,  171,  175,  176,  177,  178,
    180,  181,  183,  184,  185,  190,  192,  193,  199,  205,  209,  219,  221,  236,  240,  243,  248,  250,  253,
    258,  261,  266,  273,  283,  287,  295,  299,  301,  302,  306,  307,  308,  309,  310,  311,  312,  318,  325,
    326,  327,  330,  331,  335,  352,  353,  355,  356,  357,  358,  359,  369,  377,  393,  394,  405,  408,  411,
    413,  417,  455,  456,  461,  463,  464,  465,  468,  475,  477,  478,  479,  480,  489,  490,  491,  496,  499,
    504,  505,  512,  516,  517,  518,  519,  520,  525,  529,  539,  541,  546,  550,  551,  556,  558,  561,  562,
    564,  565,  853,  856,  859,  860,  861,  862,  863,  864,  865,  866,  867,  868,  872,  875,  876,  878,  885,
    1089, 1091, 1093, 1094, 1098, 1100, 1104, 1106, 1107, 1190, 1196, 1070, 222,  1102, 1131, 1132, 170,  32,   281,
    1038, 1064, 1107, 599,  815,  1132, 109,  264,  990,  1018, 281,  370,  434,  1060, 1061, 793,  12,   1146, 1150,
    484,  1175, 836,  12,   121,  200,  443,  444,  445,  446,  447,  448,  459,  842,  843,  844,  1114, 30,   33,
    54,   55,   63,   65,   82,   83,   91,   139,  143,  172,  174,  186,  189,  212,  213,  216,  231,  252,  257,
    281,  313,  322,  339,  364,  365,  424,  434,  458,  471,  528,  729,  754,  1034, 1038, 1039, 1041, 1121, 786,
    787,  786,  786,  533,  785,  786,  980,  1102, 1132, 1018, 34,   199,  1090, 1106, 1206, 1206, 1206, 1206, 1206,
    837,  834,  559,  1107, 1048, 1047, 294,  473,  498,  765,  767,  766,  1102, 558,  852,  141,  449,  1203, 805,
    979,  980,  225,  560,  827,  828,  558,  1107, 584,  979,  979,  51,   328,  328,  388,  1176, 325,  326,  871,
    1107, 593,  8,    27,   666,  87,   1109, 1110, 1163, 1164, 684,  600,  1107, 1202, 170,  1021, 1025, 1026, 1107,
    1028, 853,  897,  148,  1107, 600,  336,  600,  1110, 1162, 979,  981,  515,  578,  116,  201,  257,  281,  364,
    370,  398,  434,  454,  469,  1054, 1055, 1132, 364,  1151, 409,  409,  472,  512,  527,  341,  1155, 469,  1157,
    59,   434,  1154, 91,   527,  1156, 336,  560,  18,   141,  940,  941,  1139, 1107, 777,  558,  558,  558,  558,
    558,  876,  558,  558,  558,  558,  558,  558,  558,  558,  558,  558,  558,  558,  558,  558,  852,  852,  558,
    852,  558,  558,  558,  499,  558,  1089, 558,  558,  558,  558,  558,  558,  558,  558,  558,  1192, 1196, 558,
    558,  558,  558,  558,  558,  558,  558,  558,  558,  558,  558,  558,  558,  558,  558,  558,  558,  558,  558,
    853,  558,  558,  558,  558,  558,  558,  558,  558,  558,  558,  898,  899,  900,  558,  558,  558,  558,  558,
    558,  558,  558,  558,  558,  558,  558,  859,  558,  852,  558,  558,  558,  558,  558,  558,  558,  558,  558,
    558,  558,  558,  558,  558,  558,  558,  558,  558,  558,  558,  558,  558,  558,  852,  558,  1089, 558,  558,
    558,  1089, 558,  558,  34,   199,  475,  558,  558,  558,  852,  852,  852,  558,  558,  558,  558,  558,  558,
    853,  902,  876,  876,  876,  419,  853,  1107, 564,  1109, 1107, 538,  854,  857,  141,  142,  179,  194,  226,
    238,  265,  321,  873,  225,  246,  384,  437,  547,  548,  871,  549,  428,  429,  550,  551,  122,  306,  552,
    553,  554,  555,  876,  97,   98,   99,   100,  101,  169,  202,  203,  204,  205,  295,  297,  298,  299,  307,
    369,  416,  417,  529,  540,  541,  937,  938,  62,   345,  1106, 558,  565,  835,  1191, 73,   170,  264,  1071,
    1076, 46,   170,  1102, 1133, 1134, 812,  564,  575,  1105, 257,  816,  1110, 817,  818,  1102, 800,  222,  980,
    991,  992,  46,   560,  979,  1151, 336,  415,  1177, 1176, 502,  1182, 1183, 552,  846,  847,  848,  844,  1116,
    1117, 1118, 257,  146,  425,  246,  531,  1045, 492,  558,  90,   174,  365,  471,  527,  1045, 691,  1109, 247,
    956,  958,  454,  167,  454,  454,  454,  281,  469,  454,  201,  454,  454,  492,  956,  1045, 170,  225,  1042,
    257,  138,  64,   367,  469,  488,  454,  524,  783,  387,  450,  788,  789,  782,  76,   777,  560,  338,  1209,
    467,  1210, 230,  401,  1208, 559,  1183, 1185, 1186, 1187, 831,  1051, 1090, 1107, 107,  678,  679,  680,  689,
    690,  737,  607,  607,  764,  559,  1109, 418,  527,  979,  484,  560,  107,  822,  1107, 821,  213,  232,  752,
    753,  829,  614,  615,  853,  267,  268,  269,  270,  271,  272,  275,  276,  277,  278,  279,  280,  282,  385,
    386,  585,  586,  587,  152,  371,  798,  53,   152,  155,  293,  371,  808,  809,  810,  51,   388,  148,  591,
    558,  111,  219,  510,  667,  852,  564,  207,  560,  1102, 592,  493,  515,  756,  1203, 1025, 1102, 1107, 560,
    1023, 565,  1027, 560,  1102, 560,  48,   400,  778,  979,  564,  579,  580,  46,   533,  560,  1056, 469,  558,
    1165, 1165, 1165, 1165, 174,  365,  471,  1149, 1153, 1107, 159,  323,  1107, 1140, 1141, 991,  853,  853,  853,
    12,   121,  892,  942,  103,  161,  199,  261,  331,  496,  962,  892,  892,  892,  853,  853,  895,  895,  853,
    895,  853,  853,  853,  853,  121,  892,  942,  853,  559,  853,  853,  853,  853,  853,  1098, 1107, 853,  853,
    853,  853,  853,  835,  1193, 853,  937,  853,  853,  853,  559,  853,  853,  853,  853,  895,  853,  853,  93,
    96,   477,  480,  939,  853,  121,  889,  1089, 853,  853,  853,  559,  853,  853,  853,  853,  895,  853,  853,
    853,  853,  899,  9,    901,  1098, 121,  892,  853,  853,  121,  892,  853,  853,  853,  853,  853,  895,  895,
    895,  853,  853,  853,  853,  853,  853,  895,  863,  853,  559,  853,  853,  853,  853,  853,  559,  853,  853,
    892,  892,  853,  853,  853,  121,  892,  853,  853,  938,  938,  853,  42,   239,  485,  853,  853,  1089, 559,
    853,  559,  892,  1098, 892,  853,  853,  853,  530,  559,  560,  853,  186,  252,  424,  1122, 426,  565,  856,
    855,  858,  862,  154,  330,  490,  506,  871,  12,   17,   862,  874,  558,  1194, 1196, 876,  863,  246,  863,
    864,  225,  246,  384,  547,  865,  866,  866,  867,  875,  867,  875,  868,  868,  868,  868,  868,  876,  551,
    1109, 876,  877,  1107, 559,  1197, 281,  252,  1075, 824,  281,  941,  560,  979,  1109, 27,   484,  1065, 560,
    484,  560,  484,  979,  992,  988,  1061, 170,  560,  174,  365,  1149, 1107, 12,   121,  1189, 560,  839,  850,
    853,  1096, 1107, 560,  186,  252,  337,  424,  1119, 1120, 1123, 1124, 225,  1043, 1105, 853,  552,  684,  600,
    600,  1102, 1102, 1035, 261,  331,  496,  959,  960,  1091, 1045, 1110, 167,  1040, 1042, 1045, 1040, 1102, 1042,
    1040, 1040, 1045, 1045, 509,  790,  560,  790,  436,  419,  558,  562,  907,  909,  910,  911,  920,  921,  929,
    1090, 354,  1211, 344,  952,  958,  1188, 680,  62,   729,  66,   78,   235,  304,  328,  378,  449,  609,  611,
    6,    13,   23,   24,   52,   56,   66,   75,   80,   92,   110,  119,  120,  125,  133,  139,  164,  211,  213,
    220,  286,  300,  305,  350,  352,  373,  374,  376,  390,  412,  493,  502,  686,  688,  689,  690,  770,  771,
    772,  952,  564,  108,  224,  1102, 808,  1105, 980,  558,  559,  560,  141,  141,  141,  141,  141,  141,  141,
    141,  141,  141,  141,  141,  141,  141,  141,  560,  809,  678,  594,  336,  1109, 44,   1164, 589,  402,  558,
    601,  43,   196,  414,  757,  757,  336,  527,  1024, 1022, 565,  1026, 170,  552,  1107, 941,  853,  978,  1110,
    778,  1109, 560,  379,  1055, 979,  1057, 1107, 1166, 1167, 552,  1102, 1107, 1161, 1161, 1161, 141,  159,  179,
    194,  237,  238,  265,  323,  362,  1142, 1144, 531,  943,  985,  560,  559,  559,  560,  892,  559,  893,  560,
    559,  559,  559,  18,   559,  515,  559,  559,  559,  559,  560,  560,  515,  560,  560,  886,  559,  552,  559,
    560,  560,  559,  559,  560,  559,  565,  559,  560,  559,  560,  560,  560,  559,  560,  1197, 560,  170,  560,
    560,  559,  560,  559,  560,  560,  559,  560,  559,  559,  560,  559,  560,  560,  560,  888,  560,  559,  560,
    560,  559,  560,  560,  559,  560,  559,  560,  559,  560,  560,  560,  559,  558,  560,  892,  559,  559,  559,
    892,  559,  559,  560,  560,  559,  559,  560,  559,  560,  559,  559,  559,  559,  559,  559,  559,  560,  560,
    559,  560,  559,  225,  559,  559,  560,  560,  560,  559,  560,  560,  559,  559,  559,  560,  170,  560,  560,
    892,  559,  559,  559,  560,  560,  560,  559,  170,  853,  170,  853,  170,  853,  170,  559,  560,  560,  559,
    559,  559,  559,  559,  560,  559,  560,  559,  904,  905,  895,  563,  565,  565,  565,  1109, 853,  1107, 343,
    346,  869,  15,   16,   870,  154,  330,  490,  506,  1194, 895,  835,  1195, 145,  947,  863,  16,   558,  1194,
    876,  863,  863,  937,  937,  853,  880,  881,  882,  558,  565,  214,  825,  826,  1102, 264,  379,  535,  1135,
    1134, 808,  853,  1105, 1110, 1110, 818,  1102, 152,  371,  513,  801,  802,  803,  419,  425,  520,  521,  558,
    674,  993,  996,  1105, 188,  1161, 1161, 1161, 1184, 847,  170,  222,  840,  841,  951,  952,  973,  849,  565,
    1117, 107,  486,  1107, 1126, 314,  352,  564,  729,  1125, 1105, 170,  1044, 559,  1107, 257,  454,  1037, 334,
    560,  434,  1045, 1107, 1045, 1040, 1102, 1045, 1045, 587,  791,  789,  928,  1107, 84,   215,  230,  243,  317,
    405,  459,  919,  425,  560,  908,  1102, 928,  560,  167,  1212, 44,   956,  141,  426,  1002, 1003, 1003, 1105,
    449,  449,  449,  449,  449,  418,  65,   77,   173,  438,  701,  704,  705,  750,  752,  776,  776,  1003, 1003,
    776,  1003, 1003, 1003, 484,  118,  1003, 231,  470,  165,  363,  752,  776,  231,  1003, 470,  118,  1003, 1003,
    1003, 776,  1003, 1003, 1003, 1003, 1003, 18,   141,  484,  780,  1003, 1003, 1003, 686,  560,  558,  565,  700,
    706,  1101, 1107, 1109, 768,  363,  935,  1107, 853,  962,  1105, 1105, 103,  161,  261,  331,  496,  963,  1105,
    962,  1105, 1105, 1105, 1105, 1105, 962,  1105, 1105, 962,  586,  217,  225,  349,  619,  620,  621,  622,  1102,
    352,  475,  246,  558,  668,  685,  687,  688,  104,  223,  380,  460,  697,  602,  1102, 1102, 515,  943,  1107,
    909,  565,  1027, 580,  256,  559,  560,  565,  565,  484,  484,  484,  1143, 944,  957,  958,  993,  221,  853,
    853,  559,  853,  853,  32,   55,   93,   96,   104,  319,  432,  480,  508,  894,  32,   730,  1109, 895,  853,
    730,  894,  853,  895,  559,  875,  875,  1106, 1107, 853,  853,  895,  1106, 853,  853,  853,  895,  331,  853,
    853,  853,  853,  853,  853,  853,  895,  895,  331,  853,  853,  895,  853,  853,  853,  853,  895,  853,  863,
    1098, 559,  559,  853,  853,  853,  853,  853,  853,  853,  853,  853,  853,  853,  853,  895,  221,  853,  853,
    853,  853,  559,  853,  853,  853,  853,  170,  853,  170,  853,  170,  853,  853,  331,  853,  853,  544,  903,
    853,  906,  559,  565,  761,  856,  859,  559,  1197, 876,  862,  895,  947,  16,   559,  848,  883,  884,  880,
    1107, 1105, 560,  827,  535,  252,  484,  802,  675,  994,  558,  999,  1004, 999,  559,  674,  995,  1095, 1096,
    1099, 1100, 1107, 997,  341,  170,  170,  170,  832,  126,  909,  127,  348,  969,  970,  167,  256,  845,  973,
    957,  841,  18,   851,  1105, 1107, 552,  1107, 565,  227,  565,  1002, 107,  730,  731,  1002, 167,  1002, 564,
    1109, 32,   107,  732,  733,  1109, 963,  1036, 143,  528,  960,  960,  533,  943,  1040, 560,  923,  928,  907,
    230,  230,  347,  930,  230,  243,  405,  930,  920,  907,  1014, 1015, 1099, 1107, 907,  941,  925,  926,  962,
    296,  953,  107,  734,  736,  1109, 731,  92,   92,   108,  224,  760,  1101, 753,  753,  57,   165,  363,  503,
    703,  751,  702,  703,  760,  1101, 963,  962,  1101, 962,  1105, 1105, 729,  1003, 962,  232,  232,  1101, 1101,
    691,  1003, 159,  237,  328,  694,  963,  963,  1101, 107,  962,  1105, 962,  962,  372,  375,  693,  962,  1102,
    69,   70,   107,  129,  160,  382,  692,  691,  558,  772,  698,  699,  700,  701,  1107, 8,    159,  779,  383,
    702,  742,  707,  565,  558,  1198, 559,  560,  559,  560,  1107, 167,  475,  1102, 246,  669,  674,  698,  210,
    394,  671,  1077, 560,  687,  495,  616,  617,  618,  1107, 590,  597,  909,  951,  943,  941,  1167, 552,  552,
    1163, 1163, 1163, 558,  853,  336,  1009, 853,  559,  559,  559,  558,  723,  723,  558,  718,  719,  723,  223,
    223,  559,  559,  559,  559,  559,  559,  560,  887,  937,  937,  559,  559,  559,  559,  559,  559,  560,  559,
    559,  559,  559,  559,  560,  559,  559,  559,  559,  559,  891,  952,  560,  560,  560,  559,  559,  559,  559,
    560,  559,  559,  559,  560,  225,  533,  879,  559,  559,  559,  559,  559,  559,  559,  559,  559,  560,  559,
    559,  559,  853,  559,  167,  559,  559,  560,  560,  559,  560,  560,  559,  853,  559,  853,  559,  853,  559,
    559,  560,  559,  559,  853,  137,  545,  530,  1107, 559,  862,  853,  560,  559,  1072, 826,  210,  830,  1110,
    842,  1000, 1001, 1099, 1005, 560,  558,  996,  559,  559,  560,  565,  1182, 170,  1163, 1163, 1163, 943,  943,
    1105, 1105, 564,  971,  972,  1109, 510,  225,  1105, 1107, 565,  1107, 244,  1107, 12,   32,   107,  336,  853,
    1129, 62,   735,  853,  1110, 335,  352,  475,  1128, 1122, 1002, 956,  269,  1045, 587,  1185, 924,  243,  230,
    920,  930,  930,  230,  336,  336,  515,  560,  1013, 1002, 164,  210,  514,  931,  842,  853,  954,  1097, 853,
    232,  232,  753,  760,  756,  125,  425,  773,  731,  1105, 760,  778,  1105, 774,  979,  559,  560,  1107, 1102,
    31,   32,   37,   39,   40,   41,   55,   93,   96,   104,  123,  140,  160,  162,  181,  182,  223,  250,  259,
    260,  262,  290,  291,  292,  310,  311,  312,  316,  319,  332,  333,  356,  358,  380,  423,  425,  435,  476,
    477,  480,  481,  482,  483,  522,  523,  541,  708,  711,  712,  713,  714,  715,  716,  717,  1107, 1107, 1199,
    18,   1107, 595,  621,  708,  130,  1102, 559,  559,  18,   677,  687,  1105, 559,  560,  708,  558,  1198, 943,
    247,  961,  396,  1168, 1168, 1168, 107,  853,  1007, 1008, 128,  937,  331,  20,   32,   45,   501,  729,  738,
    331,  853,  559,  559,  559,  853,  853,  421,  890,  331,  853,  853,  853,  853,  40,   370,  559,  853,  937,
    853,  853,  853,  853,  853,  559,  559,  559,  331,  853,  853,  849,  884,  1077, 241,  846,  560,  1002, 1006,
    1007, 1004, 998,  996,  1095, 1107, 1163, 957,  191,  948,  974,  1109, 560,  427,  552,  379,  392,  422,  1127,
    736,  1002, 558,  558,  1126, 853,  141,  559,  910,  347,  907,  920,  230,  230,  907,  920,  913,  912,  914,
    1015, 943,  1008, 752,  932,  932,  932,  846,  560,  19,   112,  955,  760,  756,  558,  107,  107,  706,  735,
    708,  559,  699,  743,  558,  558,  723,  718,  360,  709,  718,  718,  738,  55,   522,  712,  714,  738,  738,
    55,   523,  523,  526,  718,  710,  723,  723,  738,  558,  723,  23,   62,   66,   107,  330,  336,  363,  423,
    503,  725,  726,  727,  741,  871,  526,  558,  738,  32,   558,  739,  558,  558,  723,  558,  719,  724,  565,
    559,  560,  419,  558,  833,  608,  413,  559,  670,  685,  558,  674,  603,  618,  758,  759,  1107, 18,   960,
    58,   228,  324,  451,  462,  536,  1159, 1160, 533,  1169, 1169, 1169, 559,  560,  1010, 559,  559,  739,  20,
    501,  729,  740,  739,  730,  559,  560,  559,  559,  560,  559,  1090, 559,  560,  559,  560,  559,  559,  303,
    150,  559,  559,  559,  559,  559,  559,  559,  560,  545,  851,  222,  676,  1001, 1008, 559,  1185, 44,   197,
    945,  64,   1078, 972,  303,  67,   497,  379,  1128, 475,  475,  1002, 1105, 941,  230,  336,  916,  920,  920,
    336,  918,  853,  853,  558,  951,  933,  927,  1097, 558,  558,  758,  96,   477,  480,  550,  551,  1092, 1093,
    779,  725,  283,  336,  558,  744,  746,  747,  748,  331,  331,  432,  508,  542,  720,  721,  722,  558,  720,
    720,  738,  526,  720,  558,  738,  331,  720,  734,  1105, 327,  728,  1092, 510,  107,  232,  727,  232,  330,
    331,  331,  331,  331,  720,  331,  720,  1107, 1107, 848,  848,  533,  1204, 117,  596,  609,  610,  871,  598,
    1185, 671,  674,  672,  402,  559,  560,  955,  558,  833,  475,  475,  475,  16,   1158, 188,  284,  285,  288,
    289,  1170, 1171, 1008, 232,  730,  739,  331,  853,  892,  853,  895,  853,  1073, 695,  841,  957,  949,  1097,
    946,  951,  134,  144,  342,  474,  1079, 1080, 249,  1081, 559,  559,  1129, 16,   907,  915,  515,  917,  515,
    936,  1107, 961,  558,  695,  955,  758,  758,  559,  1094, 1094, 775,  172,  351,  433,  111,  510,  745,  1107,
    748,  559,  559,  722,  762,  1090, 762,  559,  852,  327,  521,  559,  559,  559,  559,  835,  834,  49,   57,
    252,  60,   156,  187,  209,  229,  234,  242,  339,  403,  546,  638,  639,  644,  658,  1104, 1108, 1112, 117,
    638,  559,  1182, 604,  759,  331,  1204, 1159, 341,  962,  962,  962,  962,  1171, 510,  559,  559,  560,  559,
    559,  559,  471,  845,  533,  560,  950,  955,  853,  957,  44,   44,   134,  44,   1080, 452,  474,  1082, 1083,
    270,  336,  853,  558,  853,  558,  559,  560,  934,  935,  559,  559,  779,  48,   328,  400,  425,  749,  749,
    559,  560,  559,  560,  559,  852,  738,  739,  738,  739,  559,  57,   341,  57,   1107, 170,  323,  646,  206,
    648,  649,  1108, 206,  1108, 1107, 640,  530,  642,  571,  28,   263,  393,  532,  661,  567,  673,  708,  955,
    559,  1016, 1017, 1099, 853,  1102, 85,   407,  1097, 365,  964,  1090, 1090, 44,   1090, 44,   44,   1083, 141,
    922,  936,  936,  1107, 559,  742,  5,    107,  330,  746,  1107, 738,  1090, 738,  1185, 341,  341,  170,  1107,
    137,  853,  853,  641,  853,  662,  624,  638,  624,  663,  659,  1185, 605,  560,  1002, 559,  1074, 955,  1107,
    1090, 1090, 1090, 963,  853,  559,  559,  222,  209,  545,  653,  654,  530,  625,  137,  638,  566,  509,  853,
    661,  608,  1017, 1008, 1078, 965,  16,   563,  645,  650,  137,  853,  643,  105,  623,  626,  263,  566,  665,
    124,  660,  1108, 606,  1081, 558,  274,  647,  1107, 624,  546,  545,  653,  79,   149,  631,  636,  1107, 137,
    638,  566,  853,  664,  638,  210,  1084, 848,  966,  967,  968,  141,  560,  651,  655,  137,  195,  560,  708,
    74,   88,   566,  137,  624,  331,  558,  1085, 853,  559,  560,  962,  1107, 131,  544,  652,  624,  546,  167,
    1107, 627,  167,  167,  393,  137,  249,  559,  564,  1086, 1087, 1099, 425,  1088, 968,  648,  624,  656,  628,
    107,  637,  441,  633,  962,  629,  630,  532,  1109, 559,  560,  1016, 530,  544,  657,  440,  442,  632,  633,
    635,  871,  1107, 853,  521,  634,  571,  1087, 653,  624,  560,  638,  168,  1106, 635};

#if !defined(YYSIZE_T) && defined(__SIZE_TYPE__)
#define YYSIZE_T __SIZE_TYPE__
#endif
#if !defined(YYSIZE_T) && defined(size_t)
#define YYSIZE_T size_t
#endif
#if !defined(YYSIZE_T)
#if defined(__STDC__) || defined(__cplusplus)
#include <stddef.h> /* INFRINGES ON USER NAME SPACE */
#define YYSIZE_T size_t
#endif
#endif
#if !defined(YYSIZE_T)
#define YYSIZE_T unsigned int
#endif

#define yyerrok (yyerrstatus = 0)
#define yyclearin (yychar = YYEMPTY)
#define YYEMPTY (-2)
#define YYEOF 0

#define YYACCEPT goto yyacceptlab
#define YYABORT goto yyabortlab
#define YYERROR goto yyerrorlab

/* Like YYERROR except do call yyerror.  This remains here temporarily
   to ease the transition to the new meaning of YYERROR, for GCC.
   Once GCC version 2 has supplanted version 1, this can go.  */

#define YYFAIL goto yyerrlab

#define YYRECOVERING() (!!yyerrstatus)

#define YYBACKUP(Token, Value)                 \
  do                                           \
    if (yychar == YYEMPTY && yylen == 1)       \
    {                                          \
      yychar = (Token);                        \
      yylval = (Value);                        \
      yytoken = YYTRANSLATE(yychar);           \
      YYPOPSTACK;                              \
      goto yybackup;                           \
    }                                          \
    else                                       \
    {                                          \
      yyerror("syntax error: cannot back up"); \
      YYERROR;                                 \
    }                                          \
  while (0)

#define YYTERROR 1
#define YYERRCODE 256

/* YYLLOC_DEFAULT -- Compute the default location (before the actions
   are run).  */

#ifndef YYLLOC_DEFAULT
#define YYLLOC_DEFAULT(Current, Rhs, N)                                                        \
  ((Current).first_line = (Rhs)[1].first_line, (Current).first_column = (Rhs)[1].first_column, \
   (Current).last_line = (Rhs)[N].last_line, (Current).last_column = (Rhs)[N].last_column)
#endif

/* YYLEX -- calling `yylex' with the right arguments.  */

#ifdef YYLEX_PARAM
#define YYLEX yylex(&yylval, YYLEX_PARAM)
#else
#define YYLEX yylex(&yylval)
#endif

/* Enable debugging if requested.  */
#if YYDEBUG

#ifndef YYFPRINTF
#include <stdio.h> /* INFRINGES ON USER NAME SPACE */
#define YYFPRINTF fprintf
#endif

#define YYDPRINTF(Args) \
  do                    \
  {                     \
    if (yydebug)        \
      YYFPRINTF Args;   \
  } while (0)

#define YYDSYMPRINT(Args) \
  do                      \
  {                       \
    if (yydebug)          \
      yysymprint Args;    \
  } while (0)

#define YYDSYMPRINTF(Title, Token, Value, Location) \
  do                                                \
  {                                                 \
    if (yydebug)                                    \
    {                                               \
      YYFPRINTF(stderr, "%s ", Title);              \
      yysymprint(stderr, Token, Value);             \
      YYFPRINTF(stderr, "\n");                      \
    }                                               \
  } while (0)

/*------------------------------------------------------------------.
| yy_stack_print -- Print the state stack from its BOTTOM up to its |
| TOP (included).                                                   |
`------------------------------------------------------------------*/

#if defined(__STDC__) || defined(__cplusplus)
static void yy_stack_print(short *bottom, short *top)
#else
static void yy_stack_print(bottom, top) short *bottom;
short *top;
#endif
{
  YYFPRINTF(stderr, "Stack now");
  for (/* Nothing. */; bottom <= top; ++bottom) YYFPRINTF(stderr, " %d", *bottom);
  YYFPRINTF(stderr, "\n");
}

#define YY_STACK_PRINT(Bottom, Top)    \
  do                                   \
  {                                    \
    if (yydebug)                       \
      yy_stack_print((Bottom), (Top)); \
  } while (0)

/*------------------------------------------------.
| Report that the YYRULE is going to be reduced.  |
`------------------------------------------------*/

#if defined(__STDC__) || defined(__cplusplus)
static void yy_reduce_print(int yyrule)
#else
static void yy_reduce_print(yyrule) int yyrule;
#endif
{
  int yyi;
  unsigned int yylno = yyrline[yyrule];
  YYFPRINTF(stderr, "Reducing stack by rule %d (line %u), ", yyrule - 1, yylno);
  /* Print the symbols being reduced, and their result.  */
  for (yyi = yyprhs[yyrule]; 0 <= yyrhs[yyi]; yyi++) YYFPRINTF(stderr, "%s ", yytname[yyrhs[yyi]]);
  YYFPRINTF(stderr, "-> %s\n", yytname[yyr1[yyrule]]);
}

#define YY_REDUCE_PRINT(Rule) \
  do                          \
  {                           \
    if (yydebug)              \
      yy_reduce_print(Rule);  \
  } while (0)

/* Nonzero means print parse trace.  It is left uninitialized so that
   multiple parsers can coexist.  */
int yydebug;
#else /* !YYDEBUG */
#define YYDPRINTF(Args)
#define YYDSYMPRINT(Args)
#define YYDSYMPRINTF(Title, Token, Value, Location)
#define YY_STACK_PRINT(Bottom, Top)
#define YY_REDUCE_PRINT(Rule)
#endif /* !YYDEBUG */

/* YYINITDEPTH -- initial size of the parser's stacks.  */
#ifndef YYINITDEPTH
#define YYINITDEPTH 200
#endif

/* YYMAXDEPTH -- maximum size the stacks can grow to (effective only
   if the built-in stack extension method is used).

   Do not make this value too large; the results are undefined if
   SIZE_MAX < YYSTACK_BYTES (YYMAXDEPTH)
   evaluated with infinite-precision integer arithmetic.  */

#if defined(YYMAXDEPTH) && YYMAXDEPTH == 0
#undef YYMAXDEPTH
#endif

#ifndef YYMAXDEPTH
#define YYMAXDEPTH 10000
#endif

#if YYERROR_VERBOSE

#ifndef yystrlen
#if defined(__GLIBC__) && defined(_STRING_H)
#define yystrlen strlen
#else
/* Return the length of YYSTR.  */
static YYSIZE_T
#if defined(__STDC__) || defined(__cplusplus)
yystrlen(const char *yystr)
#else
    yystrlen(yystr) const char *yystr;
#endif
{
  register const char *yys = yystr;

  while (*yys++ != '\0') continue;

  return yys - yystr - 1;
}
#endif
#endif

#ifndef yystpcpy
#if defined(__GLIBC__) && defined(_STRING_H) && defined(_GNU_SOURCE)
#define yystpcpy stpcpy
#else
/* Copy YYSRC to YYDEST, returning the address of the terminating '\0' in
   YYDEST.  */
static char *
#if defined(__STDC__) || defined(__cplusplus)
yystpcpy(char *yydest, const char *yysrc)
#else
yystpcpy(yydest, yysrc)
char *yydest;
const char *yysrc;
#endif
{
  register char *yyd = yydest;
  register const char *yys = yysrc;

  while ((*yyd++ = *yys++) != '\0') continue;

  return yyd - 1;
}
#endif
#endif

#endif /* !YYERROR_VERBOSE */

#if YYDEBUG
/*--------------------------------.
| Print this symbol on YYOUTPUT.  |
`--------------------------------*/

#if defined(__STDC__) || defined(__cplusplus)
static void yysymprint(FILE *yyoutput, int yytype, YYSTYPE *yyvaluep)
#else
static void yysymprint(yyoutput, yytype, yyvaluep) FILE *yyoutput;
int yytype;
YYSTYPE *yyvaluep;
#endif
{
  /* Pacify ``unused variable'' warnings.  */
  (void)yyvaluep;

  if (yytype < YYNTOKENS)
  {
    YYFPRINTF(yyoutput, "token %s (", yytname[yytype]);
#ifdef YYPRINT
    YYPRINT(yyoutput, yytoknum[yytype], *yyvaluep);
#endif
  }
  else
    YYFPRINTF(yyoutput, "nterm %s (", yytname[yytype]);

  switch (yytype)
  {
    default:
      break;
  }
  YYFPRINTF(yyoutput, ")");
}

#endif /* ! YYDEBUG */
/*-----------------------------------------------.
| Release the memory associated to this symbol.  |
`-----------------------------------------------*/

#if defined(__STDC__) || defined(__cplusplus)
static void yydestruct(int yytype, YYSTYPE *yyvaluep)
#else
static void yydestruct(yytype, yyvaluep) int yytype;
YYSTYPE *yyvaluep;
#endif
{
  /* Pacify ``unused variable'' warnings.  */
  (void)yyvaluep;

  switch (yytype)
  {
    default:
      break;
  }
}

/* Prevent warnings from -Wmissing-prototypes.  */

#ifdef YYPARSE_PARAM
#if defined(__STDC__) || defined(__cplusplus)
int yyparse(void *YYPARSE_PARAM);
#else
int yyparse();
#endif
#else /* ! YYPARSE_PARAM */
#if defined(__STDC__) || defined(__cplusplus)
int yyparse(void);
#else
int yyparse();
#endif
#endif /* ! YYPARSE_PARAM */

/*----------.
| yyparse.  |
`----------*/

#ifdef YYPARSE_PARAM
#if defined(__STDC__) || defined(__cplusplus)
int yyparse(void *YYPARSE_PARAM)
#else
int yyparse(YYPARSE_PARAM) void *YYPARSE_PARAM;
#endif
#else /* ! YYPARSE_PARAM */
#if defined(__STDC__) || defined(__cplusplus)
int yyparse(void)
#else
int yyparse()

#endif
#endif
{
  /* The lookahead symbol.  */
  int yychar;

  /* The semantic value of the lookahead symbol.  */
  YYSTYPE yylval;

  /* Number of syntax errors so far.  */
  int yynerrs;

  register int yystate;
  register int yyn;
  int yyresult;
  /* Number of tokens to shift before error messages enabled.  */
  int yyerrstatus;
  /* Lookahead token as an internal (translated) token number.  */
  int yytoken = 0;

  /* Three stacks and their tools:
     `yyss': related to states,
     `yyvs': related to semantic values,
     `yyls': related to locations.

     Refer to the stacks thru separate pointers, to allow yyoverflow
     to reallocate them elsewhere.  */

  /* The state stack.  */
  short yyssa[YYINITDEPTH];
  short *yyss = yyssa;
  register short *yyssp;

  /* The semantic value stack.  */
  YYSTYPE yyvsa[YYINITDEPTH];
  YYSTYPE *yyvs = yyvsa;
  register YYSTYPE *yyvsp;

#define YYPOPSTACK (yyvsp--, yyssp--)

  YYSIZE_T yystacksize = YYINITDEPTH;

  /* The variables used to return semantic value and location from the
     action routines.  */
  YYSTYPE yyval;

  /* When reducing, the number of symbols on the RHS of the reduced
     rule.  */
  int yylen;

  YYDPRINTF((stderr, "Starting parse\n"));

  yystate = 0;
  yyerrstatus = 0;
  yynerrs = 0;
  yychar = YYEMPTY; /* Cause a token to be read.  */

  /* Initialize stack pointers.
     Waste one element of value and location stack
     so that they stay on the same level as the state stack.
     The wasted elements are never initialized.  */

  yyssp = yyss;
  yyvsp = yyvs;

  goto yysetstate;

  /*------------------------------------------------------------.
  | yynewstate -- Push a new state, which is found in yystate.  |
  `------------------------------------------------------------*/
yynewstate:
  /* In all cases, when you get here, the value and location stacks
     have just been pushed. so pushing a state here evens the stacks.
     */
  yyssp++;

yysetstate:
  *yyssp = yystate;

  if (yyss + yystacksize - 1 <= yyssp)
  {
    /* Get the current used size of the three stacks, in elements.  */
    YYSIZE_T yysize = yyssp - yyss + 1;

#ifdef yyoverflow
    {
      /* Give user a chance to reallocate the stack. Use copies of
         these so that the &'s don't force the real ones into
         memory.  */
      YYSTYPE *yyvs1 = yyvs;
      short *yyss1 = yyss;

      /* Each stack pointer address is followed by the size of the
         data in use in that stack, in bytes.  This used to be a
         conditional around just the two extra args, but that might
         be undefined if yyoverflow is a macro.  */
      yyoverflow("parser stack overflow", &yyss1, yysize * sizeof(*yyssp), &yyvs1, yysize * sizeof(*yyvsp),

                 &yystacksize);

      yyss = yyss1;
      yyvs = yyvs1;
    }
#else /* no yyoverflow */
#ifndef YYSTACK_RELOCATE
    goto yyoverflowlab;
#else
    /* Extend the stack our own way.  */
    if (YYMAXDEPTH <= yystacksize)
      goto yyoverflowlab;
    yystacksize *= 2;
    if (YYMAXDEPTH < yystacksize)
      yystacksize = YYMAXDEPTH;

    {
      short *yyss1 = yyss;
      union yyalloc *yyptr = (union yyalloc *)YYSTACK_ALLOC(YYSTACK_BYTES(yystacksize));
      if (!yyptr)
        goto yyoverflowlab;
      YYSTACK_RELOCATE(yyss);
      YYSTACK_RELOCATE(yyvs);

#undef YYSTACK_RELOCATE
      if (yyss1 != yyssa)
        YYSTACK_FREE(yyss1);
    }
#endif
#endif /* no yyoverflow */

    yyssp = yyss + yysize - 1;
    yyvsp = yyvs + yysize - 1;

    YYDPRINTF((stderr, "Stack size increased to %lu\n", (unsigned long int)yystacksize));

    if (yyss + yystacksize - 1 <= yyssp)
      YYABORT;
  }

  YYDPRINTF((stderr, "Entering state %d\n", yystate));

  goto yybackup;

/*-----------.
| yybackup.  |
`-----------*/
yybackup:

  /* Do appropriate processing given the current state.  */
  /* Read a lookahead token if we need one and don't already have one.  */
  /* yyresume: */

  /* First try to decide what to do without reference to lookahead token.  */

  yyn = yypact[yystate];
  if (yyn == YYPACT_NINF)
    goto yydefault;

  /* Not known => get a lookahead token if don't already have one.  */

  /* YYCHAR is either YYEMPTY or YYEOF or a valid lookahead symbol.  */
  if (yychar == YYEMPTY)
  {
    YYDPRINTF((stderr, "Reading a token: "));
    yychar = YYLEX;
  }

  if (yychar <= YYEOF)
  {
    yychar = yytoken = YYEOF;
    YYDPRINTF((stderr, "Now at end of input.\n"));
  }
  else
  {
    yytoken = YYTRANSLATE(yychar);
    YYDSYMPRINTF("Next token is", yytoken, &yylval, &yylloc);
  }

  /* If the proper action on seeing token YYTOKEN is to reduce or to
     detect an error, take that action.  */
  yyn += yytoken;
  if (yyn < 0 || YYLAST < yyn || yycheck[yyn] != yytoken)
    goto yydefault;
  yyn = yytable[yyn];
  if (yyn <= 0)
  {
    if (yyn == 0 || yyn == YYTABLE_NINF)
      goto yyerrlab;
    yyn = -yyn;
    goto yyreduce;
  }

  if (yyn == YYFINAL)
    YYACCEPT;

  /* Shift the lookahead token.  */
  YYDPRINTF((stderr, "Shifting token %s, ", yytname[yytoken]));

  /* Discard the token being shifted unless it is eof.  */
  if (yychar != YYEOF)
    yychar = YYEMPTY;

  *++yyvsp = yylval;

  /* Count tokens shifted since error; after three, turn off error
     status.  */
  if (yyerrstatus)
    yyerrstatus--;

  yystate = yyn;
  goto yynewstate;

/*-----------------------------------------------------------.
| yydefault -- do the default action for the current state.  |
`-----------------------------------------------------------*/
yydefault:
  yyn = yydefact[yystate];
  if (yyn == 0)
    goto yyerrlab;
  goto yyreduce;

/*-----------------------------.
| yyreduce -- Do a reduction.  |
`-----------------------------*/
yyreduce:
  /* yyn is the number of a rule to reduce with.  */
  yylen = yyr2[yyn];

  /* If YYLEN is nonzero, implement the default value of the action:
     `$$ = $1'.

     Otherwise, the following line sets YYVAL to garbage.
     This behavior is undocumented and Bison
     users should not rely upon it.  Assigning to YYVAL
     unconditionally makes the parser a bit smaller, and it avoids a
     GCC warning that YYVAL may be used uninitialized.  */
  yyval = yyvsp[1 - yylen];

  YY_REDUCE_PRINT(yyn);
  switch (yyn)
  {
    case 2:
#line 852 "sql_yacc.yy"
    {
      THD *thd = YYTHD;
      if (!thd->bootstrap && (!(thd->lex->select_lex.options & OPTION_FOUND_COMMENT)))
      {
        my_message(ER_EMPTY_QUERY, ER(ER_EMPTY_QUERY), MYF(0));
        YYABORT;
      }
      else
      {
        thd->lex->sql_command = SQLCOM_EMPTY_QUERY;
      }
    }
    break;

    case 3:
#line 865 "sql_yacc.yy"
    {
    }
    break;

    case 53:
#line 925 "sql_yacc.yy"
    {
      THD *thd = YYTHD;
      LEX *lex = thd->lex;
      if (lex->stmt_prepare_mode)
      {
        yyerror(ER(ER_SYNTAX_ERROR));
        YYABORT;
      }
      lex->sql_command = SQLCOM_DEALLOCATE_PREPARE;
      lex->prepared_stmt_name = yyvsp[0].lex_str;
    }
    break;

    case 56:
#line 945 "sql_yacc.yy"
    {
      THD *thd = YYTHD;
      LEX *lex = thd->lex;
      if (lex->stmt_prepare_mode)
      {
        yyerror(ER(ER_SYNTAX_ERROR));
        YYABORT;
      }
      lex->sql_command = SQLCOM_PREPARE;
      lex->prepared_stmt_name = yyvsp[-2].lex_str;
    }
    break;

    case 57:
#line 959 "sql_yacc.yy"
    {
      THD *thd = YYTHD;
      LEX *lex = thd->lex;
      lex->prepared_stmt_code = yyvsp[0].lex_str;
      lex->prepared_stmt_code_is_varref = FALSE;
    }
    break;

    case 58:
#line 966 "sql_yacc.yy"
    {
      THD *thd = YYTHD;
      LEX *lex = thd->lex;
      lex->prepared_stmt_code = yyvsp[0].lex_str;
      lex->prepared_stmt_code_is_varref = TRUE;
    }
    break;

    case 59:
#line 975 "sql_yacc.yy"
    {
      THD *thd = YYTHD;
      LEX *lex = thd->lex;
      if (lex->stmt_prepare_mode)
      {
        yyerror(ER(ER_SYNTAX_ERROR));
        YYABORT;
      }
      lex->sql_command = SQLCOM_EXECUTE;
      lex->prepared_stmt_name = yyvsp[0].lex_str;
    }
    break;

    case 60:
#line 987 "sql_yacc.yy"
    {
    }
    break;

    case 65:
#line 1001 "sql_yacc.yy"
    {
      LEX *lex = Lex;
      LEX_STRING *lexstr = (LEX_STRING *)sql_memdup(&yyvsp[0].lex_str, sizeof(LEX_STRING));
      if (!lexstr || lex->prepared_stmt_params.push_back(lexstr))
        YYABORT;
    }
    break;

    case 66:
#line 1013 "sql_yacc.yy"
    {
      if (Lex->sphead)
      {
        my_error(ER_SP_BADSTATEMENT, MYF(0), "HELP");
        YYABORT;
      }
    }
    break;

    case 67:
#line 1021 "sql_yacc.yy"
    {
      LEX *lex = Lex;
      lex->sql_command = SQLCOM_HELP;
      lex->help_arg = yyvsp[0].lex_str.str;
    }
    break;

    case 68:
#line 1031 "sql_yacc.yy"
    {
      LEX *lex = Lex;
      lex->sql_command = SQLCOM_CHANGE_MASTER;
      bzero((char *)&lex->mi, sizeof(lex->mi));
    }
    break;

    case 69:
#line 1037 "sql_yacc.yy"
    {
    }
    break;

    case 72:
#line 1046 "sql_yacc.yy"
    {
      Lex->mi.host = yyvsp[0].lex_str.str;
    }
    break;

    case 73:
#line 1051 "sql_yacc.yy"
    {
      Lex->mi.user = yyvsp[0].lex_str.str;
    }
    break;

    case 74:
#line 1056 "sql_yacc.yy"
    {
      Lex->mi.password = yyvsp[0].lex_str.str;
    }
    break;

    case 75:
#line 1061 "sql_yacc.yy"
    {
      Lex->mi.port = yyvsp[0].ulong_num;
    }
    break;

    case 76:
#line 1066 "sql_yacc.yy"
    {
      Lex->mi.connect_retry = yyvsp[0].ulong_num;
    }
    break;

    case 77:
#line 1070 "sql_yacc.yy"
    {
      Lex->mi.ssl = yyvsp[0].ulong_num ? LEX_MASTER_INFO::SSL_ENABLE : LEX_MASTER_INFO::SSL_DISABLE;
    }
    break;

    case 78:
#line 1075 "sql_yacc.yy"
    {
      Lex->mi.ssl_ca = yyvsp[0].lex_str.str;
    }
    break;

    case 79:
#line 1079 "sql_yacc.yy"
    {
      Lex->mi.ssl_capath = yyvsp[0].lex_str.str;
    }
    break;

    case 80:
#line 1083 "sql_yacc.yy"
    {
      Lex->mi.ssl_cert = yyvsp[0].lex_str.str;
    }
    break;

    case 81:
#line 1087 "sql_yacc.yy"
    {
      Lex->mi.ssl_cipher = yyvsp[0].lex_str.str;
    }
    break;

    case 82:
#line 1091 "sql_yacc.yy"
    {
      Lex->mi.ssl_key = yyvsp[0].lex_str.str;
    }
    break;

    case 84:
#line 1100 "sql_yacc.yy"
    {
      Lex->mi.log_file_name = yyvsp[0].lex_str.str;
    }
    break;

    case 85:
#line 1104 "sql_yacc.yy"
    {
      Lex->mi.pos = yyvsp[0].ulonglong_number;
      /*
         If the user specified a value < BIN_LOG_HEADER_SIZE, adjust it
         instead of causing subsequent errors.
         We need to do it in this file, because only there we know that
         MASTER_LOG_POS has been explicitely specified. On the contrary
         in change_master() (sql_repl.cc) we cannot distinguish between 0
         (MASTER_LOG_POS explicitely specified as 0) and 0 (unspecified),
         whereas we want to distinguish (specified 0 means "read the binlog
         from 0" (4 in fact), unspecified means "don't change the position
         (keep the preceding value)").
      */
      Lex->mi.pos = max(BIN_LOG_HEADER_SIZE, Lex->mi.pos);
    }
    break;

    case 86:
#line 1120 "sql_yacc.yy"
    {
      Lex->mi.relay_log_name = yyvsp[0].lex_str.str;
    }
    break;

    case 87:
#line 1124 "sql_yacc.yy"
    {
      Lex->mi.relay_log_pos = yyvsp[0].ulong_num;
      /* Adjust if < BIN_LOG_HEADER_SIZE (same comment as Lex->mi.pos) */
      Lex->mi.relay_log_pos = max(BIN_LOG_HEADER_SIZE, Lex->mi.relay_log_pos);
    }
    break;

    case 88:
#line 1135 "sql_yacc.yy"
    {
      THD *thd = YYTHD;
      LEX *lex = Lex;
      lex->sql_command = SQLCOM_CREATE_TABLE;
      if (!lex->select_lex.add_table_to_list(thd, yyvsp[0].table, NULL, TL_OPTION_UPDATING,
                                             (using_update_log ? TL_READ_NO_INSERT : TL_READ)))
        YYABORT;
      lex->create_list.empty();
      lex->key_list.empty();
      lex->col_list.empty();
      lex->change = NullS;
      bzero((char *)&lex->create_info, sizeof(lex->create_info));
      lex->create_info.options = yyvsp[-3].num | yyvsp[-1].num;
      lex->create_info.db_type = (enum db_type)lex->thd->variables.table_type;
      lex->create_info.default_table_charset = NULL;
      lex->name = 0;
    }
    break;

    case 89:
#line 1156 "sql_yacc.yy"
    {
      Lex->current_select = &Lex->select_lex;
    }
    break;

    case 90:
#line 1158 "sql_yacc.yy"
    {
      LEX *lex = Lex;
      if (lex->sphead && lex->sphead->m_type != TYPE_ENUM_PROCEDURE)
      {
        my_error(ER_COMMIT_NOT_ALLOWED_IN_SF_OR_TRG, MYF(0));
        YYABORT;
      }
      lex->sql_command = SQLCOM_CREATE_INDEX;
      if (!lex->current_select->add_table_to_list(lex->thd, yyvsp[0].table, NULL, TL_OPTION_UPDATING))
        YYABORT;
      lex->create_list.empty();
      lex->key_list.empty();
      lex->col_list.empty();
      lex->change = NullS;
    }
    break;

    case 91:
#line 1175 "sql_yacc.yy"
    {
      LEX *lex = Lex;

      lex->key_list.push_back(new Key(yyvsp[-9].key_type, yyvsp[-7].lex_str.str, yyvsp[-6].key_alg, 0, lex->col_list));
      lex->col_list.empty();
    }
    break;

    case 92:
#line 1182 "sql_yacc.yy"
    {
      Lex->create_info.default_table_charset = NULL;
      Lex->create_info.used_fields = 0;
    }
    break;

    case 93:
#line 1187 "sql_yacc.yy"
    {
      LEX *lex = Lex;
      lex->sql_command = SQLCOM_CREATE_DB;
      lex->name = yyvsp[-2].lex_str.str;
      lex->create_info.options = yyvsp[-3].num;
    }
    break;

    case 94:
#line 1194 "sql_yacc.yy"
    {
      LEX *lex = Lex;
      lex->spname = yyvsp[0].spname;
      lex->udf.type = yyvsp[-2].udf_type;
    }
    break;

    case 95:
#line 1200 "sql_yacc.yy"
    {
    }
    break;

    case 96:
#line 1202 "sql_yacc.yy"
    {
      LEX *lex = Lex;
      sp_head *sp;

      if (lex->sphead)
      {
        my_error(ER_SP_NO_RECURSIVE_CREATE, MYF(0), "PROCEDURE");
        YYABORT;
      }
      /* Order is important here: new - reset - init */
      sp = new sp_head();
      sp->reset_thd_mem_root(YYTHD);
      sp->init(lex);

      sp->m_type = TYPE_ENUM_PROCEDURE;
      lex->sphead = sp;
      /*
       * We have to turn of CLIENT_MULTI_QUERIES while parsing a
       * stored procedure, otherwise yylex will chop it into pieces
       * at each ';'.
       */
      sp->m_old_cmq = YYTHD->client_capabilities & CLIENT_MULTI_QUERIES;
      YYTHD->client_capabilities &= (~CLIENT_MULTI_QUERIES);
    }
    break;

    case 97:
#line 1227 "sql_yacc.yy"
    {
      LEX *lex = Lex;

      lex->sphead->m_param_begin = lex->tok_start + 1;
    }
    break;

    case 98:
#line 1234 "sql_yacc.yy"
    {
      LEX *lex = Lex;

      lex->sphead->m_param_end = lex->tok_start;
      bzero((char *)&lex->sp_chistics, sizeof(st_sp_chistics));
    }
    break;

    case 99:
#line 1241 "sql_yacc.yy"
    {
      LEX *lex = Lex;

      lex->sphead->m_chistics = &lex->sp_chistics;
      lex->sphead->m_body_begin = lex->tok_start;
    }
    break;

    case 100:
#line 1248 "sql_yacc.yy"
    {
      LEX *lex = Lex;
      sp_head *sp = lex->sphead;

      if (sp->check_backpatch(YYTHD))
        YYABORT;
      sp->init_strings(YYTHD, lex, yyvsp[-9].spname);
      lex->sql_command = SQLCOM_CREATE_PROCEDURE;
      /* Restore flag if it was cleared above */
      if (sp->m_old_cmq)
        YYTHD->client_capabilities |= CLIENT_MULTI_QUERIES;
      sp->restore_thd_mem_root(YYTHD);
    }
    break;

    case 101:
#line 1262 "sql_yacc.yy"
    {
      THD *thd = YYTHD;
      LEX *lex = thd->lex;
      lex->sql_command = SQLCOM_CREATE_VIEW;
      /* first table in list is target VIEW name */
      if (!lex->select_lex.add_table_to_list(thd, yyvsp[0].table, NULL, 0))
        YYABORT;
    }
    break;

    case 102:
#line 1271 "sql_yacc.yy"
    {
    }
    break;

    case 103:
#line 1274 "sql_yacc.yy"
    {
      LEX *lex = Lex;
      sp_head *sp;

      if (lex->sphead)
      {
        my_error(ER_SP_NO_RECURSIVE_CREATE, MYF(0), "TRIGGER");
        YYABORT;
      }

      if (!(sp = new sp_head()))
        YYABORT;
      sp->reset_thd_mem_root(YYTHD);
      sp->init(lex);

      sp->m_type = TYPE_ENUM_TRIGGER;
      lex->sphead = sp;
      lex->spname = yyvsp[-7].spname;
      /*
        We have to turn of CLIENT_MULTI_QUERIES while parsing a
        stored procedure, otherwise yylex will chop it into pieces
        at each ';'.
      */
      sp->m_old_cmq = YYTHD->client_capabilities & CLIENT_MULTI_QUERIES;
      YYTHD->client_capabilities &= ~CLIENT_MULTI_QUERIES;

      bzero((char *)&lex->sp_chistics, sizeof(st_sp_chistics));
      lex->sphead->m_chistics = &lex->sp_chistics;
      lex->sphead->m_body_begin = lex->ptr;
    }
    break;

    case 104:
#line 1305 "sql_yacc.yy"
    {
      LEX *lex = Lex;
      sp_head *sp = lex->sphead;

      lex->sql_command = SQLCOM_CREATE_TRIGGER;
      sp->init_strings(YYTHD, lex, yyvsp[-9].spname);
      /* Restore flag if it was cleared above */
      if (sp->m_old_cmq)
        YYTHD->client_capabilities |= CLIENT_MULTI_QUERIES;
      sp->restore_thd_mem_root(YYTHD);

      if (sp->is_not_allowed_in_function("trigger"))
        YYABORT;

      /*
        We have to do it after parsing trigger body, because some of
        sp_proc_stmt alternatives are not saving/restoring LEX, so
        lex->query_tables can be wiped out.

        QQ: What are other consequences of this?

        QQ: Could we loosen lock type in certain cases ?
      */
      if (!lex->select_lex.add_table_to_list(YYTHD, yyvsp[-5].table, (LEX_STRING *)0, TL_OPTION_UPDATING, TL_WRITE))
        YYABORT;
    }
    break;

    case 105:
#line 1335 "sql_yacc.yy"
    {
      Lex->sql_command = SQLCOM_CREATE_USER;
    }
    break;

    case 106:
#line 1342 "sql_yacc.yy"
    {
      LEX *lex = Lex;
      lex->users_list.empty();
      lex->columns.empty();
      lex->grant = lex->grant_tot_col = 0;
      lex->all_privileges = 0;
      lex->select_lex.db = 0;
      lex->ssl_type = SSL_TYPE_NOT_SPECIFIED;
      lex->ssl_cipher = lex->x509_subject = lex->x509_issuer = 0;
      bzero((char *)&(lex->mqh), sizeof(lex->mqh));
    }
    break;

    case 107:
#line 1357 "sql_yacc.yy"
    {
      yyval.spname = new sp_name(yyvsp[-2].lex_str, yyvsp[0].lex_str);
      yyval.spname->init_qname(YYTHD);
    }
    break;

    case 108:
#line 1362 "sql_yacc.yy"
    {
      yyval.spname = sp_name_current_db_new(YYTHD, yyvsp[0].lex_str);
    }
    break;

    case 109:
#line 1369 "sql_yacc.yy"
    {
      LEX *lex = Lex;
      lex->sql_command = SQLCOM_CREATE_FUNCTION;
      lex->udf.name = lex->spname->m_name;
      lex->udf.returns = (Item_result)yyvsp[-2].num;
      lex->udf.dl = yyvsp[0].lex_str.str;
    }
    break;

    case 110:
#line 1377 "sql_yacc.yy"
    {
      LEX *lex = Lex;
      sp_head *sp;

      if (lex->sphead)
      {
        my_error(ER_SP_NO_RECURSIVE_CREATE, MYF(0), "FUNCTION");
        YYABORT;
      }
      /* Order is important here: new - reset - init */
      sp = new sp_head();
      sp->reset_thd_mem_root(YYTHD);
      sp->init(lex);

      sp->m_type = TYPE_ENUM_FUNCTION;
      lex->sphead = sp;
      /*
       * We have to turn of CLIENT_MULTI_QUERIES while parsing a
       * stored procedure, otherwise yylex will chop it into pieces
       * at each ';'.
       */
      sp->m_old_cmq = YYTHD->client_capabilities & CLIENT_MULTI_QUERIES;
      YYTHD->client_capabilities &= ~CLIENT_MULTI_QUERIES;
      lex->sphead->m_param_begin = lex->tok_start + 1;
    }
    break;

    case 111:
#line 1403 "sql_yacc.yy"
    {
      LEX *lex = Lex;

      lex->sphead->m_param_end = lex->tok_start;
    }
    break;

    case 112:
#line 1409 "sql_yacc.yy"
    {
      LEX *lex = Lex;
      lex->charset = NULL;
      lex->length = lex->dec = NULL;
      lex->interval_list.empty();
      lex->type = 0;
    }
    break;

    case 113:
#line 1417 "sql_yacc.yy"
    {
      LEX *lex = Lex;
      sp_head *sp = lex->sphead;
      LEX_STRING cmt = {0, 0};
      create_field *new_field;
      uint unused1 = 0;
      int unused2 = 0;

      if (!(new_field = new_create_field(YYTHD, (char *)"", (enum enum_field_types)yyvsp[0].num, lex->length, lex->dec,
                                         lex->type, (Item *)0, (Item *)0, &cmt, 0, &lex->interval_list,
                                         (lex->charset ? lex->charset : default_charset_info), lex->uint_geom_type)))
        YYABORT;

      sp->m_returns_cs = new_field->charset;

      if (new_field->interval_list.elements)
      {
        new_field->interval = sp->create_typelib(&new_field->interval_list);
      }
      sp_prepare_create_field(YYTHD, new_field);

      if (prepare_create_field(new_field, &unused1, &unused2, &unused2, HA_CAN_GEOMETRY))
        YYABORT;

      sp->m_returns = new_field->sql_type;
      sp->m_returns_cs = new_field->charset;
      sp->m_returns_len = new_field->length;
      sp->m_returns_pack = new_field->pack_flag;
      sp->m_returns_typelib = new_field->interval;
      sp->m_geom_returns = new_field->geom_type;
      new_field->interval = NULL;

      bzero((char *)&lex->sp_chistics, sizeof(st_sp_chistics));
    }
    break;

    case 114:
#line 1459 "sql_yacc.yy"
    {
      LEX *lex = Lex;

      lex->sphead->m_chistics = &lex->sp_chistics;
      lex->sphead->m_body_begin = lex->tok_start;
    }
    break;

    case 115:
#line 1466 "sql_yacc.yy"
    {
      LEX *lex = Lex;
      sp_head *sp = lex->sphead;

      if (sp->is_not_allowed_in_function("function"))
        YYABORT;

      if (sp->check_backpatch(YYTHD))
        YYABORT;
      lex->sql_command = SQLCOM_CREATE_SPFUNCTION;
      sp->init_strings(YYTHD, lex, lex->spname);
      /* Restore flag if it was cleared above */
      if (sp->m_old_cmq)
        YYTHD->client_capabilities |= CLIENT_MULTI_QUERIES;
      sp->restore_thd_mem_root(YYTHD);
    }
    break;

    case 116:
#line 1485 "sql_yacc.yy"
    {
    }
    break;

    case 117:
#line 1486 "sql_yacc.yy"
    {
    }
    break;

    case 118:
#line 1490 "sql_yacc.yy"
    {
    }
    break;

    case 119:
#line 1491 "sql_yacc.yy"
    {
    }
    break;

    case 120:
#line 1497 "sql_yacc.yy"
    {
      Lex->sp_chistics.comment = yyvsp[0].lex_str;
    }
    break;

    case 121:
#line 1499 "sql_yacc.yy"
    { /* Just parse it, we only have one language for now. */
    }
    break;

    case 122:
#line 1501 "sql_yacc.yy"
    {
      Lex->sp_chistics.daccess = SP_NO_SQL;
    }
    break;

    case 123:
#line 1503 "sql_yacc.yy"
    {
      Lex->sp_chistics.daccess = SP_CONTAINS_SQL;
    }
    break;

    case 124:
#line 1505 "sql_yacc.yy"
    {
      Lex->sp_chistics.daccess = SP_READS_SQL_DATA;
    }
    break;

    case 125:
#line 1507 "sql_yacc.yy"
    {
      Lex->sp_chistics.daccess = SP_MODIFIES_SQL_DATA;
    }
    break;

    case 126:
#line 1509 "sql_yacc.yy"
    {
    }
    break;

    case 127:
#line 1514 "sql_yacc.yy"
    {
    }
    break;

    case 128:
#line 1515 "sql_yacc.yy"
    {
      Lex->sp_chistics.detistic = TRUE;
    }
    break;

    case 129:
#line 1516 "sql_yacc.yy"
    {
      Lex->sp_chistics.detistic = FALSE;
    }
    break;

    case 130:
#line 1521 "sql_yacc.yy"
    {
      Lex->sp_chistics.suid = SP_IS_SUID;
    }
    break;

    case 131:
#line 1525 "sql_yacc.yy"
    {
      Lex->sp_chistics.suid = SP_IS_NOT_SUID;
    }
    break;

    case 132:
#line 1532 "sql_yacc.yy"
    {
      LEX *lex = Lex;

      lex->sql_command = SQLCOM_CALL;
      lex->spname = yyvsp[0].spname;
      lex->value_list.empty();
      sp_add_used_routine(lex, YYTHD, yyvsp[0].spname, TYPE_ENUM_PROCEDURE);
    }
    break;

    case 133:
#line 1540 "sql_yacc.yy"
    {
    }
    break;

    case 136:
#line 1551 "sql_yacc.yy"
    {
      Lex->value_list.push_back(yyvsp[0].item);
    }
    break;

    case 137:
#line 1555 "sql_yacc.yy"
    {
      Lex->value_list.push_back(yyvsp[0].item);
    }
    break;

    case 142:
#line 1573 "sql_yacc.yy"
    {
      LEX *lex = Lex;
      sp_pcontext *spc = lex->spcont;

      if (spc->find_pvar(&yyvsp[-1].lex_str, TRUE))
      {
        my_error(ER_SP_DUP_PARAM, MYF(0), yyvsp[-1].lex_str.str);
        YYABORT;
      }
      spc->push_pvar(&yyvsp[-1].lex_str, (enum enum_field_types)yyvsp[0].num, sp_param_in);
    }
    break;

    case 147:
#line 1599 "sql_yacc.yy"
    {
      LEX *lex = Lex;
      sp_pcontext *spc = lex->spcont;

      if (spc->find_pvar(&yyvsp[-1].lex_str, TRUE))
      {
        my_error(ER_SP_DUP_PARAM, MYF(0), yyvsp[-1].lex_str.str);
        YYABORT;
      }
      spc->push_pvar(&yyvsp[-1].lex_str, (enum enum_field_types)yyvsp[0].num, (sp_param_mode_t)yyvsp[-2].num);
    }
    break;

    case 148:
#line 1614 "sql_yacc.yy"
    {
      yyval.num = sp_param_in;
    }
    break;

    case 149:
#line 1615 "sql_yacc.yy"
    {
      yyval.num = sp_param_in;
    }
    break;

    case 150:
#line 1616 "sql_yacc.yy"
    {
      yyval.num = sp_param_out;
    }
    break;

    case 151:
#line 1617 "sql_yacc.yy"
    {
      yyval.num = sp_param_inout;
    }
    break;

    case 152:
#line 1621 "sql_yacc.yy"
    {
    }
    break;

    case 154:
#line 1626 "sql_yacc.yy"
    {
    }
    break;

    case 156:
#line 1632 "sql_yacc.yy"
    {
      yyval.spblock.vars = yyval.spblock.conds = yyval.spblock.hndlrs = yyval.spblock.curs = 0;
    }
    break;

    case 157:
#line 1636 "sql_yacc.yy"
    {
      /* We check for declarations out of (standard) order this way
         because letting the grammar rules reflect it caused tricky
         shift/reduce conflicts with the wrong result. (And we get
         better error handling this way.) */
      if ((yyvsp[-1].spblock.vars || yyvsp[-1].spblock.conds) && (yyvsp[-2].spblock.curs || yyvsp[-2].spblock.hndlrs))
      { /* Variable or condition following cursor or handler */
        my_message(ER_SP_VARCOND_AFTER_CURSHNDLR, ER(ER_SP_VARCOND_AFTER_CURSHNDLR), MYF(0));
        YYABORT;
      }
      if (yyvsp[-1].spblock.curs && yyvsp[-2].spblock.hndlrs)
      { /* Cursor following handler */
        my_message(ER_SP_CURSOR_AFTER_HANDLER, ER(ER_SP_CURSOR_AFTER_HANDLER), MYF(0));
        YYABORT;
      }
      yyval.spblock.vars = yyvsp[-2].spblock.vars + yyvsp[-1].spblock.vars;
      yyval.spblock.conds = yyvsp[-2].spblock.conds + yyvsp[-1].spblock.conds;
      yyval.spblock.hndlrs = yyvsp[-2].spblock.hndlrs + yyvsp[-1].spblock.hndlrs;
      yyval.spblock.curs = yyvsp[-2].spblock.curs + yyvsp[-1].spblock.curs;
    }
    break;

    case 158:
#line 1662 "sql_yacc.yy"
    {
      Lex->sphead->reset_lex(YYTHD);
    }
    break;

    case 159:
#line 1664 "sql_yacc.yy"
    {
      LEX *lex = Lex;
      sp_pcontext *ctx = lex->spcont;
      uint max = ctx->context_pvars();
      enum enum_field_types type = (enum enum_field_types)yyvsp[-2].num;
      Item *it = yyvsp[0].item;
      bool has_default = (it != NULL);

      for (uint i = max - yyvsp[-3].num; i < max; i++)
      {
        sp_instr_set *in;

        ctx->set_type(i, type);
        if (!has_default)
          it = new Item_null(); /* QQ Set to the type with null_value? */
        in = new sp_instr_set(lex->sphead->instructions(), ctx, ctx->pvar_context2index(i), it, type, lex,
                              (i == max - 1));

        /*
          The last instruction is assigned to be responsible for
          freeing LEX.
        */
        lex->sphead->add_instr(in);
        ctx->set_default(i, it);
      }
      lex->sphead->restore_lex(YYTHD);
      yyval.spblock.vars = yyvsp[-3].num;
      yyval.spblock.conds = yyval.spblock.hndlrs = yyval.spblock.curs = 0;
    }
    break;

    case 160:
#line 1697 "sql_yacc.yy"
    {
      LEX *lex = Lex;
      sp_pcontext *spc = lex->spcont;

      if (spc->find_cond(&yyvsp[-3].lex_str, TRUE))
      {
        my_error(ER_SP_DUP_COND, MYF(0), yyvsp[-3].lex_str.str);
        YYABORT;
      }
      YYTHD->lex->spcont->push_cond(&yyvsp[-3].lex_str, yyvsp[0].spcondtype);
      yyval.spblock.vars = yyval.spblock.hndlrs = yyval.spblock.curs = 0;
      yyval.spblock.conds = 1;
    }
    break;

    case 161:
#line 1711 "sql_yacc.yy"
    {
      LEX *lex = Lex;
      sp_head *sp = lex->sphead;
      sp_pcontext *ctx = lex->spcont;
      sp_instr_hpush_jump *i = new sp_instr_hpush_jump(sp->instructions(), ctx, yyvsp[-2].num, ctx->current_pvars());

      sp->add_instr(i);
      sp->push_backpatch(i, ctx->push_label((char *)"", 0));
      sp->m_flags |= sp_head::IN_HANDLER;
    }
    break;

    case 162:
#line 1724 "sql_yacc.yy"
    {
      LEX *lex = Lex;
      sp_head *sp = lex->sphead;
      sp_pcontext *ctx = lex->spcont;
      sp_label_t *hlab = lex->spcont->pop_label(); /* After this hdlr */
      sp_instr_hreturn *i;

      if (yyvsp[-5].num == SP_HANDLER_CONTINUE)
      {
        i = new sp_instr_hreturn(sp->instructions(), ctx, ctx->current_pvars());
        sp->add_instr(i);
      }
      else
      { /* EXIT or UNDO handler, just jump to the end of the block */
        i = new sp_instr_hreturn(sp->instructions(), ctx, 0);

        sp->add_instr(i);
        sp->push_backpatch(i, lex->spcont->last_label()); /* Block end */
      }
      lex->sphead->backpatch(hlab);
      sp->m_flags &= ~sp_head::IN_HANDLER;
      yyval.spblock.vars = yyval.spblock.conds = yyval.spblock.curs = 0;
      yyval.spblock.hndlrs = yyvsp[-1].num;
      ctx->add_handlers(yyvsp[-1].num);
    }
    break;

    case 163:
#line 1751 "sql_yacc.yy"
    {
      LEX *lex = Lex;
      sp_head *sp = lex->sphead;
      sp_pcontext *ctx = lex->spcont;
      uint offp;
      sp_instr_cpush *i;

      if (ctx->find_cursor(&yyvsp[-3].lex_str, &offp, TRUE))
      {
        my_error(ER_SP_DUP_CURS, MYF(0), yyvsp[-3].lex_str.str);
        delete yyvsp[0].lex;
        YYABORT;
      }
      i = new sp_instr_cpush(sp->instructions(), ctx, yyvsp[0].lex);
      sp->add_instr(i);
      ctx->push_cursor(&yyvsp[-3].lex_str);
      yyval.spblock.vars = yyval.spblock.conds = yyval.spblock.hndlrs = 0;
      yyval.spblock.curs = 1;
    }
    break;

    case 164:
#line 1773 "sql_yacc.yy"
    {
      Lex->sphead->reset_lex(YYTHD);

      /* We use statement here just be able to get a better
         error message. Using 'select' works too, but will then
         result in a generic "syntax error" if a non-select
         statement is given. */
    }
    break;

    case 165:
#line 1782 "sql_yacc.yy"
    {
      LEX *lex = Lex;

      if (lex->sql_command != SQLCOM_SELECT)
      {
        my_message(ER_SP_BAD_CURSOR_QUERY, ER(ER_SP_BAD_CURSOR_QUERY), MYF(0));
        YYABORT;
      }
      if (lex->result)
      {
        my_message(ER_SP_BAD_CURSOR_SELECT, ER(ER_SP_BAD_CURSOR_SELECT), MYF(0));
        YYABORT;
      }
      lex->sp_lex_in_use = TRUE;
      yyval.lex = lex;
      lex->sphead->restore_lex(YYTHD);
    }
    break;

    case 166:
#line 1804 "sql_yacc.yy"
    {
      yyval.num = SP_HANDLER_EXIT;
    }
    break;

    case 167:
#line 1805 "sql_yacc.yy"
    {
      yyval.num = SP_HANDLER_CONTINUE;
    }
    break;

    case 168:
#line 1811 "sql_yacc.yy"
    {
      LEX *lex = Lex;
      sp_head *sp = lex->sphead;
      sp_pcontext *ctx = lex->spcont;

      if (ctx->find_handler(yyvsp[0].spcondtype))
      {
        my_message(ER_SP_DUP_HANDLER, ER(ER_SP_DUP_HANDLER), MYF(0));
        YYABORT;
      }
      else
      {
        sp_instr_hpush_jump *i = (sp_instr_hpush_jump *)sp->last_instruction();

        i->add_condition(yyvsp[0].spcondtype);
        ctx->push_handler(yyvsp[0].spcondtype);
        yyval.num = 1;
      }
    }
    break;

    case 169:
#line 1832 "sql_yacc.yy"
    {
      LEX *lex = Lex;
      sp_head *sp = lex->sphead;
      sp_pcontext *ctx = lex->spcont;

      if (ctx->find_handler(yyvsp[0].spcondtype))
      {
        my_message(ER_SP_DUP_HANDLER, ER(ER_SP_DUP_HANDLER), MYF(0));
        YYABORT;
      }
      else
      {
        sp_instr_hpush_jump *i = (sp_instr_hpush_jump *)sp->last_instruction();

        i->add_condition(yyvsp[0].spcondtype);
        ctx->push_handler(yyvsp[0].spcondtype);
        yyval.num = yyvsp[-2].num + 1;
      }
    }
    break;

    case 170:
#line 1856 "sql_yacc.yy"
    { /* mysql errno */
      yyval.spcondtype = (sp_cond_type_t *)YYTHD->alloc(sizeof(sp_cond_type_t));
      yyval.spcondtype->type = sp_cond_type_t::number;
      yyval.spcondtype->mysqlerr = yyvsp[0].ulong_num;
    }
    break;

    case 171:
#line 1862 "sql_yacc.yy"
    { /* SQLSTATE */
      if (!sp_cond_check(&yyvsp[0].lex_str))
      {
        my_error(ER_SP_BAD_SQLSTATE, MYF(0), yyvsp[0].lex_str.str);
        YYABORT;
      }
      yyval.spcondtype = (sp_cond_type_t *)YYTHD->alloc(sizeof(sp_cond_type_t));
      yyval.spcondtype->type = sp_cond_type_t::state;
      memcpy(yyval.spcondtype->sqlstate, yyvsp[0].lex_str.str, 5);
      yyval.spcondtype->sqlstate[5] = '\0';
    }
    break;

    case 172:
#line 1876 "sql_yacc.yy"
    {
    }
    break;

    case 173:
#line 1877 "sql_yacc.yy"
    {
    }
    break;

    case 174:
#line 1882 "sql_yacc.yy"
    {
      yyval.spcondtype = yyvsp[0].spcondtype;
    }
    break;

    case 175:
#line 1886 "sql_yacc.yy"
    {
      yyval.spcondtype = Lex->spcont->find_cond(&yyvsp[0].lex_str);
      if (yyval.spcondtype == NULL)
      {
        my_error(ER_SP_COND_MISMATCH, MYF(0), yyvsp[0].lex_str.str);
        YYABORT;
      }
    }
    break;

    case 176:
#line 1895 "sql_yacc.yy"
    {
      yyval.spcondtype = (sp_cond_type_t *)YYTHD->alloc(sizeof(sp_cond_type_t));
      yyval.spcondtype->type = sp_cond_type_t::warning;
    }
    break;

    case 177:
#line 1900 "sql_yacc.yy"
    {
      yyval.spcondtype = (sp_cond_type_t *)YYTHD->alloc(sizeof(sp_cond_type_t));
      yyval.spcondtype->type = sp_cond_type_t::notfound;
    }
    break;

    case 178:
#line 1905 "sql_yacc.yy"
    {
      yyval.spcondtype = (sp_cond_type_t *)YYTHD->alloc(sizeof(sp_cond_type_t));
      yyval.spcondtype->type = sp_cond_type_t::exception;
    }
    break;

    case 179:
#line 1913 "sql_yacc.yy"
    {
      LEX *lex = Lex;
      sp_pcontext *spc = lex->spcont;

      if (spc->find_pvar(&yyvsp[0].lex_str, TRUE))
      {
        my_error(ER_SP_DUP_VAR, MYF(0), yyvsp[0].lex_str.str);
        YYABORT;
      }
      spc->push_pvar(&yyvsp[0].lex_str, (enum_field_types)0, sp_param_in);
      yyval.num = 1;
    }
    break;

    case 180:
#line 1926 "sql_yacc.yy"
    {
      LEX *lex = Lex;
      sp_pcontext *spc = lex->spcont;

      if (spc->find_pvar(&yyvsp[0].lex_str, TRUE))
      {
        my_error(ER_SP_DUP_VAR, MYF(0), yyvsp[0].lex_str.str);
        YYABORT;
      }
      spc->push_pvar(&yyvsp[0].lex_str, (enum_field_types)0, sp_param_in);
      yyval.num = yyvsp[-2].num + 1;
    }
    break;

    case 181:
#line 1941 "sql_yacc.yy"
    {
      yyval.item = NULL;
    }
    break;

    case 182:
#line 1942 "sql_yacc.yy"
    {
      yyval.item = yyvsp[0].item;
    }
    break;

    case 183:
#line 1946 "sql_yacc.yy"
    {
      LEX *lex = Lex;

      lex->sphead->reset_lex(YYTHD);
      lex->sphead->m_tmp_query = lex->tok_start;
    }
    break;

    case 184:
#line 1953 "sql_yacc.yy"
    {
      LEX *lex = Lex;
      sp_head *sp = lex->sphead;

      sp->m_flags |= sp_get_flags_for_command(lex);
      if (lex->sql_command == SQLCOM_CHANGE_DB)
      { /* "USE db" doesn't work in a procedure */
        my_error(ER_SP_BADSTATEMENT, MYF(0), "USE");
        YYABORT;
      }
      /*
        Don't add an instruction for SET statements, since all
        instructions for them were already added during processing
        of "set" rule.
      */
      DBUG_ASSERT(lex->sql_command != SQLCOM_SET_OPTION || lex->var_list.is_empty());
      if (lex->sql_command != SQLCOM_SET_OPTION)
      {
        sp_instr_stmt *i = new sp_instr_stmt(sp->instructions(), lex->spcont, lex);

        /* Extract the query statement from the tokenizer:
           The end is either lex->tok_end or tok->ptr. */
        if (lex->ptr - lex->tok_end > 1)
          i->m_query.length = lex->ptr - sp->m_tmp_query;
        else
          i->m_query.length = lex->tok_end - sp->m_tmp_query;
        i->m_query.str = strmake_root(YYTHD->mem_root, (char *)sp->m_tmp_query, i->m_query.length);
        sp->add_instr(i);
      }
      sp->restore_lex(YYTHD);
    }
    break;

    case 185:
#line 1989 "sql_yacc.yy"
    {
      Lex->sphead->reset_lex(YYTHD);
    }
    break;

    case 186:
#line 1991 "sql_yacc.yy"
    {
      LEX *lex = Lex;
      sp_head *sp = lex->sphead;

      if (sp->m_type == TYPE_ENUM_PROCEDURE)
      {
        my_message(ER_SP_BADRETURN, ER(ER_SP_BADRETURN), MYF(0));
        YYABORT;
      }
      else
      {
        sp_instr_freturn *i;

        i = new sp_instr_freturn(sp->instructions(), lex->spcont, yyvsp[0].item, sp->m_returns, lex);
        sp->add_instr(i);
        sp->m_flags |= sp_head::HAS_RETURN;
      }
      sp->restore_lex(YYTHD);
    }
    break;

    case 187:
#line 2011 "sql_yacc.yy"
    {
    }
    break;

    case 188:
#line 2013 "sql_yacc.yy"
    {
      Lex->sphead->m_flags &= ~sp_head::IN_SIMPLE_CASE;
    }
    break;

    case 189:
#line 2016 "sql_yacc.yy"
    {
    }
    break;

    case 190:
#line 2018 "sql_yacc.yy"
    {
      Lex->sphead->reset_lex(YYTHD);
    }
    break;

    case 191:
#line 2020 "sql_yacc.yy"
    {
      /* We "fake" this by using an anonymous variable which we
         set to the expression. Note that all WHENs are evaluate
         at the same frame level, so we then know that it's the
         top-most variable in the frame. */
      LEX *lex = Lex;
      uint offset = lex->spcont->current_pvars();
      sp_instr_set *i = new sp_instr_set(lex->sphead->instructions(), lex->spcont, offset, yyvsp[-1].item,
                                         MYSQL_TYPE_STRING, lex, TRUE);
      LEX_STRING dummy = {(char *)"", 0};

      lex->spcont->push_pvar(&dummy, MYSQL_TYPE_STRING, sp_param_in);
      lex->sphead->add_instr(i);
      lex->sphead->m_flags |= sp_head::IN_SIMPLE_CASE;
      lex->sphead->restore_lex(YYTHD);
    }
    break;

    case 192:
#line 2038 "sql_yacc.yy"
    {
      Lex->spcont->pop_pvar();
    }
    break;

    case 193:
#line 2042 "sql_yacc.yy"
    {
    }
    break;

    case 194:
#line 2043 "sql_yacc.yy"
    { /* Unlabeled controls get a secret label. */
      LEX *lex = Lex;

      lex->spcont->push_label((char *)"", lex->sphead->instructions());
    }
    break;

    case 195:
#line 2049 "sql_yacc.yy"
    {
      LEX *lex = Lex;

      lex->sphead->backpatch(lex->spcont->pop_label());
    }
    break;

    case 196:
#line 2055 "sql_yacc.yy"
    {
      LEX *lex = Lex;
      sp_head *sp = lex->sphead;
      sp_pcontext *ctx = lex->spcont;
      sp_label_t *lab = ctx->find_label(yyvsp[0].lex_str.str);

      if (!lab)
      {
        my_error(ER_SP_LILABEL_MISMATCH, MYF(0), "LEAVE", yyvsp[0].lex_str.str);
        YYABORT;
      }
      else
      {
        uint ip = sp->instructions();
        sp_instr_jump *i;
        sp_instr_hpop *ih;
        sp_instr_cpop *ic;

        ih = new sp_instr_hpop(ip++, ctx, 0);
        sp->push_backpatch(ih, lab);
        sp->add_instr(ih);
        ic = new sp_instr_cpop(ip++, ctx, 0);
        sp->push_backpatch(ic, lab);
        sp->add_instr(ic);
        i = new sp_instr_jump(ip, ctx);
        sp->push_backpatch(i, lab); /* Jumping forward */
        sp->add_instr(i);
      }
    }
    break;

    case 197:
#line 2085 "sql_yacc.yy"
    {
      LEX *lex = Lex;
      sp_head *sp = lex->sphead;
      sp_pcontext *ctx = lex->spcont;
      sp_label_t *lab = ctx->find_label(yyvsp[0].lex_str.str);

      if (!lab || lab->type != SP_LAB_ITER)
      {
        my_error(ER_SP_LILABEL_MISMATCH, MYF(0), "ITERATE", yyvsp[0].lex_str.str);
        YYABORT;
      }
      else
      {
        sp_instr_jump *i;
        uint ip = sp->instructions();
        uint n;

        n = ctx->diff_handlers(lab->ctx);
        if (n)
          sp->add_instr(new sp_instr_hpop(ip++, ctx, n));
        n = ctx->diff_cursors(lab->ctx);
        if (n)
          sp->add_instr(new sp_instr_cpop(ip++, ctx, n));
        i = new sp_instr_jump(ip, ctx, lab->ip); /* Jump back */
        sp->add_instr(i);
      }
    }
    break;

    case 198:
#line 2113 "sql_yacc.yy"
    {
#ifdef SP_GOTO
      LEX *lex = Lex;
      sp_head *sp = lex->sphead;
      sp_pcontext *ctx = lex->spcont;
      sp_label_t *lab = ctx->find_label(yyvsp[0].lex_str.str);

      if (lab)
      {
        my_error(ER_SP_LABEL_REDEFINE, MYF(0), yyvsp[0].lex_str.str);
        YYABORT;
      }
      else
      {
        lab = ctx->push_label(yyvsp[0].lex_str.str, sp->instructions());
        lab->type = SP_LAB_GOTO;
        lab->ctx = ctx;
        sp->backpatch(lab);
      }
#else
      yyerror(ER(ER_SYNTAX_ERROR));
      YYABORT;
#endif
    }
    break;

    case 199:
#line 2138 "sql_yacc.yy"
    {
#ifdef SP_GOTO
      LEX *lex = Lex;
      sp_head *sp = lex->sphead;
      sp_pcontext *ctx = lex->spcont;
      uint ip = lex->sphead->instructions();
      sp_label_t *lab;
      sp_instr_jump *i;
      sp_instr_hpop *ih;
      sp_instr_cpop *ic;

      if (sp->m_in_handler)
      {
        my_message(ER_SP_GOTO_IN_HNDLR, ER(ER_SP_GOTO_IN_HNDLR), MYF(0));
        YYABORT;
      }
      lab = ctx->find_label(yyvsp[0].lex_str.str);
      if (!lab)
      {
        lab = (sp_label_t *)YYTHD->alloc(sizeof(sp_label_t));
        lab->name = yyvsp[0].lex_str.str;
        lab->ip = 0;
        lab->type = SP_LAB_REF;
        lab->ctx = ctx;

        ih = new sp_instr_hpop(ip++, ctx, 0);
        sp->push_backpatch(ih, lab);
        sp->add_instr(ih);
        ic = new sp_instr_cpop(ip++, ctx, 0);
        sp->add_instr(ic);
        sp->push_backpatch(ic, lab);
        i = new sp_instr_jump(ip, ctx);
        sp->push_backpatch(i, lab); /* Jumping forward */
        sp->add_instr(i);
      }
      else
      {
        uint n;

        n = ctx->diff_handlers(lab->ctx);
        if (n)
        {
          ih = new sp_instr_hpop(ip++, ctx, n);
          sp->add_instr(ih);
        }
        n = ctx->diff_cursors(lab->ctx);
        if (n)
        {
          ic = new sp_instr_cpop(ip++, ctx, n);
          sp->add_instr(ic);
        }
        i = new sp_instr_jump(ip, ctx, lab->ip); /* Jump back */
        sp->add_instr(i);
      }
#else
      yyerror(ER(ER_SYNTAX_ERROR));
      YYABORT;
#endif
    }
    break;

    case 200:
#line 2198 "sql_yacc.yy"
    {
      LEX *lex = Lex;
      sp_head *sp = lex->sphead;
      uint offset;
      sp_instr_copen *i;

      if (!lex->spcont->find_cursor(&yyvsp[0].lex_str, &offset))
      {
        my_error(ER_SP_CURSOR_MISMATCH, MYF(0), yyvsp[0].lex_str.str);
        YYABORT;
      }
      i = new sp_instr_copen(sp->instructions(), lex->spcont, offset);
      sp->add_instr(i);
    }
    break;

    case 201:
#line 2213 "sql_yacc.yy"
    {
      LEX *lex = Lex;
      sp_head *sp = lex->sphead;
      uint offset;
      sp_instr_cfetch *i;

      if (!lex->spcont->find_cursor(&yyvsp[-1].lex_str, &offset))
      {
        my_error(ER_SP_CURSOR_MISMATCH, MYF(0), yyvsp[-1].lex_str.str);
        YYABORT;
      }
      i = new sp_instr_cfetch(sp->instructions(), lex->spcont, offset);
      sp->add_instr(i);
    }
    break;

    case 202:
#line 2228 "sql_yacc.yy"
    {
    }
    break;

    case 203:
#line 2230 "sql_yacc.yy"
    {
      LEX *lex = Lex;
      sp_head *sp = lex->sphead;
      uint offset;
      sp_instr_cclose *i;

      if (!lex->spcont->find_cursor(&yyvsp[0].lex_str, &offset))
      {
        my_error(ER_SP_CURSOR_MISMATCH, MYF(0), yyvsp[0].lex_str.str);
        YYABORT;
      }
      i = new sp_instr_cclose(sp->instructions(), lex->spcont, offset);
      sp->add_instr(i);
    }
    break;

    case 207:
#line 2254 "sql_yacc.yy"
    {
      LEX *lex = Lex;
      sp_head *sp = lex->sphead;
      sp_pcontext *spc = lex->spcont;
      sp_pvar_t *spv;

      if (!spc || !(spv = spc->find_pvar(&yyvsp[0].lex_str)))
      {
        my_error(ER_SP_UNDECLARED_VAR, MYF(0), yyvsp[0].lex_str.str);
        YYABORT;
      }
      else
      {
        /* An SP local variable */
        sp_instr_cfetch *i = (sp_instr_cfetch *)sp->last_instruction();

        i->add_to_varlist(spv);
      }
    }
    break;

    case 208:
#line 2275 "sql_yacc.yy"
    {
      LEX *lex = Lex;
      sp_head *sp = lex->sphead;
      sp_pcontext *spc = lex->spcont;
      sp_pvar_t *spv;

      if (!spc || !(spv = spc->find_pvar(&yyvsp[0].lex_str)))
      {
        my_error(ER_SP_UNDECLARED_VAR, MYF(0), yyvsp[0].lex_str.str);
        YYABORT;
      }
      else
      {
        /* An SP local variable */
        sp_instr_cfetch *i = (sp_instr_cfetch *)sp->last_instruction();

        i->add_to_varlist(spv);
      }
    }
    break;

    case 209:
#line 2297 "sql_yacc.yy"
    {
      Lex->sphead->reset_lex(YYTHD);
    }
    break;

    case 210:
#line 2299 "sql_yacc.yy"
    {
      LEX *lex = Lex;
      sp_head *sp = lex->sphead;
      sp_pcontext *ctx = lex->spcont;
      uint ip = sp->instructions();
      sp_instr_jump_if_not *i = new sp_instr_jump_if_not(ip, ctx, yyvsp[-1].item, lex);

      sp->push_backpatch(i, ctx->push_label((char *)"", 0));
      sp->add_instr(i);
      sp->restore_lex(YYTHD);
    }
    break;

    case 211:
#line 2312 "sql_yacc.yy"
    {
      sp_head *sp = Lex->sphead;
      sp_pcontext *ctx = Lex->spcont;
      uint ip = sp->instructions();
      sp_instr_jump *i = new sp_instr_jump(ip, ctx);

      sp->add_instr(i);
      sp->backpatch(ctx->pop_label());
      sp->push_backpatch(i, ctx->push_label((char *)"", 0));
    }
    break;

    case 212:
#line 2323 "sql_yacc.yy"
    {
      LEX *lex = Lex;

      lex->sphead->backpatch(lex->spcont->pop_label());
    }
    break;

    case 216:
#line 2337 "sql_yacc.yy"
    {
      Lex->sphead->reset_lex(YYTHD);
    }
    break;

    case 217:
#line 2339 "sql_yacc.yy"
    {
      LEX *lex = Lex;
      sp_head *sp = lex->sphead;
      sp_pcontext *ctx = Lex->spcont;
      uint ip = sp->instructions();
      sp_instr_jump_if_not *i;

      if (!(sp->m_flags & sp_head::IN_SIMPLE_CASE))
        i = new sp_instr_jump_if_not(ip, ctx, yyvsp[-1].item, lex);
      else
      { /* Simple case: <caseval> = <whenval> */
        LEX_STRING ivar;

        ivar.str = (char *)"_tmp_";
        ivar.length = 5;
        Item *var = (Item *)new Item_splocal(ivar, ctx->current_pvars() - 1);
        Item *expr = new Item_func_eq(var, yyvsp[-1].item);

        i = new sp_instr_jump_if_not(ip, ctx, expr, lex);
        lex->variables_used = 1;
      }
      sp->push_backpatch(i, ctx->push_label((char *)"", 0));
      sp->add_instr(i);
      sp->restore_lex(YYTHD);
    }
    break;

    case 218:
#line 2366 "sql_yacc.yy"
    {
      sp_head *sp = Lex->sphead;
      sp_pcontext *ctx = Lex->spcont;
      uint ip = sp->instructions();
      sp_instr_jump *i = new sp_instr_jump(ip, ctx);

      sp->add_instr(i);
      sp->backpatch(ctx->pop_label());
      sp->push_backpatch(i, ctx->push_label((char *)"", 0));
    }
    break;

    case 219:
#line 2377 "sql_yacc.yy"
    {
      LEX *lex = Lex;

      lex->sphead->backpatch(lex->spcont->pop_label());
    }
    break;

    case 220:
#line 2386 "sql_yacc.yy"
    {
      sp_head *sp = Lex->sphead;
      uint ip = sp->instructions();
      sp_instr_error *i = new sp_instr_error(ip, Lex->spcont, ER_SP_CASE_NOT_FOUND);

      sp->add_instr(i);
    }
    break;

    case 221:
#line 2394 "sql_yacc.yy"
    {
    }
    break;

    case 222:
#line 2395 "sql_yacc.yy"
    {
    }
    break;

    case 223:
#line 2400 "sql_yacc.yy"
    {
      LEX *lex = Lex;
      sp_pcontext *ctx = lex->spcont;
      sp_label_t *lab = ctx->find_label(yyvsp[-1].lex_str.str);

      if (lab)
      {
        my_error(ER_SP_LABEL_REDEFINE, MYF(0), yyvsp[-1].lex_str.str);
        YYABORT;
      }
      else
      {
        lab = lex->spcont->push_label(yyvsp[-1].lex_str.str, lex->sphead->instructions());
        lab->type = SP_LAB_ITER;
      }
    }
    break;

    case 224:
#line 2418 "sql_yacc.yy"
    {
      LEX *lex = Lex;

      if (yyvsp[0].lex_str.str)
      {
        sp_label_t *lab = lex->spcont->find_label(yyvsp[0].lex_str.str);

        if (!lab || my_strcasecmp(system_charset_info, yyvsp[0].lex_str.str, lab->name) != 0)
        {
          my_error(ER_SP_LABEL_MISMATCH, MYF(0), yyvsp[0].lex_str.str);
          YYABORT;
        }
      }
      lex->sphead->backpatch(lex->spcont->pop_label());
    }
    break;

    case 225:
#line 2437 "sql_yacc.yy"
    {
      yyval.lex_str = null_lex_str;
    }
    break;

    case 226:
#line 2438 "sql_yacc.yy"
    {
      yyval.lex_str = yyvsp[0].lex_str;
    }
    break;

    case 227:
#line 2443 "sql_yacc.yy"
    { /* QQ This is just a dummy for grouping declarations and statements
               together. No [[NOT] ATOMIC] yet, and we need to figure out how
               make it coexist with the existing BEGIN COMMIT/ROLLBACK. */
      LEX *lex = Lex;
      sp_label_t *lab = lex->spcont->last_label();

      lab->type = SP_LAB_BEGIN;
      lex->spcont = lex->spcont->push_context();
    }
    break;

    case 228:
#line 2455 "sql_yacc.yy"
    {
      LEX *lex = Lex;
      sp_head *sp = lex->sphead;
      sp_pcontext *ctx = lex->spcont;

      sp->backpatch(ctx->last_label()); /* We always have a label */
      if (yyvsp[-2].spblock.hndlrs)
        sp->add_instr(new sp_instr_hpop(sp->instructions(), ctx, yyvsp[-2].spblock.hndlrs));
      if (yyvsp[-2].spblock.curs)
        sp->add_instr(new sp_instr_cpop(sp->instructions(), ctx, yyvsp[-2].spblock.curs));
      lex->spcont = ctx->pop_context();
    }
    break;

    case 229:
#line 2471 "sql_yacc.yy"
    {
      LEX *lex = Lex;
      uint ip = lex->sphead->instructions();
      sp_label_t *lab = lex->spcont->last_label(); /* Jumping back */
      sp_instr_jump *i = new sp_instr_jump(ip, lex->spcont, lab->ip);

      lex->sphead->add_instr(i);
    }
    break;

    case 230:
#line 2480 "sql_yacc.yy"
    {
      Lex->sphead->reset_lex(YYTHD);
    }
    break;

    case 231:
#line 2482 "sql_yacc.yy"
    {
      LEX *lex = Lex;
      sp_head *sp = lex->sphead;
      uint ip = sp->instructions();
      sp_instr_jump_if_not *i = new sp_instr_jump_if_not(ip, lex->spcont, yyvsp[-1].item, lex);

      /* Jumping forward */
      sp->push_backpatch(i, lex->spcont->last_label());
      sp->add_instr(i);
      sp->restore_lex(YYTHD);
    }
    break;

    case 232:
#line 2495 "sql_yacc.yy"
    {
      LEX *lex = Lex;
      uint ip = lex->sphead->instructions();
      sp_label_t *lab = lex->spcont->last_label(); /* Jumping back */
      sp_instr_jump *i = new sp_instr_jump(ip, lex->spcont, lab->ip);

      lex->sphead->add_instr(i);
    }
    break;

    case 233:
#line 2504 "sql_yacc.yy"
    {
      Lex->sphead->reset_lex(YYTHD);
    }
    break;

    case 234:
#line 2506 "sql_yacc.yy"
    {
      LEX *lex = Lex;
      uint ip = lex->sphead->instructions();
      sp_label_t *lab = lex->spcont->last_label(); /* Jumping back */
      sp_instr_jump_if_not *i = new sp_instr_jump_if_not(ip, lex->spcont, yyvsp[-2].item, lab->ip, lex);
      lex->sphead->add_instr(i);
      lex->sphead->restore_lex(YYTHD);
    }
    break;

    case 235:
#line 2520 "sql_yacc.yy"
    {
      Lex->trg_chistics.action_time = TRG_ACTION_BEFORE;
    }
    break;

    case 236:
#line 2522 "sql_yacc.yy"
    {
      Lex->trg_chistics.action_time = TRG_ACTION_AFTER;
    }
    break;

    case 237:
#line 2527 "sql_yacc.yy"
    {
      Lex->trg_chistics.event = TRG_EVENT_INSERT;
    }
    break;

    case 238:
#line 2529 "sql_yacc.yy"
    {
      Lex->trg_chistics.event = TRG_EVENT_UPDATE;
    }
    break;

    case 239:
#line 2531 "sql_yacc.yy"
    {
      Lex->trg_chistics.event = TRG_EVENT_DELETE;
    }
    break;

    case 240:
#line 2535 "sql_yacc.yy"
    {
    }
    break;

    case 241:
#line 2536 "sql_yacc.yy"
    {
    }
    break;

    case 242:
#line 2538 "sql_yacc.yy"
    {
      LEX *lex = Lex;
      if (!(lex->name = (char *)yyvsp[0].table))
        YYABORT;
    }
    break;

    case 243:
#line 2544 "sql_yacc.yy"
    {
      LEX *lex = Lex;
      if (!(lex->name = (char *)yyvsp[-1].table))
        YYABORT;
    }
    break;

    case 244:
#line 2552 "sql_yacc.yy"
    {
    }
    break;

    case 245:
#line 2553 "sql_yacc.yy"
    {
      Select->set_braces(1);
    }
    break;

    case 246:
#line 2553 "sql_yacc.yy"
    {
    }
    break;

    case 247:
#line 2557 "sql_yacc.yy"
    {
    }
    break;

    case 248:
#line 2559 "sql_yacc.yy"
    {
      Select->set_braces(0);
    }
    break;

    case 249:
#line 2559 "sql_yacc.yy"
    {
    }
    break;

    case 250:
#line 2561 "sql_yacc.yy"
    {
      Select->set_braces(1);
    }
    break;

    case 251:
#line 2561 "sql_yacc.yy"
    {
    }
    break;

    case 252:
#line 2566 "sql_yacc.yy"
    {
      LEX *lex = Lex;
      lex->lock_option = using_update_log ? TL_READ_NO_INSERT : TL_READ;
      if (lex->sql_command == SQLCOM_INSERT)
        lex->sql_command = SQLCOM_INSERT_SELECT;
      else if (lex->sql_command == SQLCOM_REPLACE)
        lex->sql_command = SQLCOM_REPLACE_SELECT;
      /*
        The following work only with the local list, the global list
        is created correctly in this case
      */
      lex->current_select->table_list.save_and_clear(&lex->save_list);
      mysql_init_select(lex);
      lex->current_select->parsing_place = SELECT_LIST;
    }
    break;

    case 253:
#line 2582 "sql_yacc.yy"
    {
      Select->parsing_place = NO_MATTER;
    }
    break;

    case 254:
#line 2586 "sql_yacc.yy"
    {
      /*
        The following work only with the local list, the global list
        is created correctly in this case
      */
      Lex->current_select->table_list.push_front(&Lex->save_list);
    }
    break;

    case 255:
#line 2596 "sql_yacc.yy"
    {
    }
    break;

    case 256:
#line 2597 "sql_yacc.yy"
    {
    }
    break;

    case 257:
#line 2600 "sql_yacc.yy"
    {
    }
    break;

    case 258:
#line 2601 "sql_yacc.yy"
    {
    }
    break;

    case 259:
#line 2604 "sql_yacc.yy"
    {
    }
    break;

    case 260:
#line 2605 "sql_yacc.yy"
    {
    }
    break;

    case 261:
#line 2608 "sql_yacc.yy"
    {
    }
    break;

    case 262:
#line 2609 "sql_yacc.yy"
    {
    }
    break;

    case 263:
#line 2612 "sql_yacc.yy"
    {
      yyval.num = 0;
    }
    break;

    case 264:
#line 2613 "sql_yacc.yy"
    {
      yyval.num = yyvsp[0].num;
    }
    break;

    case 265:
#line 2616 "sql_yacc.yy"
    {
      yyval.num = yyvsp[0].num;
    }
    break;

    case 266:
#line 2617 "sql_yacc.yy"
    {
      yyval.num = yyvsp[-1].num | yyvsp[0].num;
    }
    break;

    case 267:
#line 2620 "sql_yacc.yy"
    {
      yyval.num = HA_LEX_CREATE_TMP_TABLE;
    }
    break;

    case 268:
#line 2623 "sql_yacc.yy"
    {
      yyval.num = 0;
    }
    break;

    case 269:
#line 2624 "sql_yacc.yy"
    {
      yyval.num = HA_LEX_CREATE_IF_NOT_EXISTS;
    }
    break;

    case 277:
#line 2640 "sql_yacc.yy"
    {
      Lex->create_info.db_type = yyvsp[0].db_type;
      Lex->create_info.used_fields |= HA_CREATE_USED_ENGINE;
    }
    break;

    case 278:
#line 2641 "sql_yacc.yy"
    {
      Lex->create_info.db_type = yyvsp[0].db_type;
      WARN_DEPRECATED("TYPE=storage_engine", "ENGINE=storage_engine");
      Lex->create_info.used_fields |= HA_CREATE_USED_ENGINE;
    }
    break;

    case 279:
#line 2642 "sql_yacc.yy"
    {
      Lex->create_info.max_rows = yyvsp[0].ulonglong_number;
      Lex->create_info.used_fields |= HA_CREATE_USED_MAX_ROWS;
    }
    break;

    case 280:
#line 2643 "sql_yacc.yy"
    {
      Lex->create_info.min_rows = yyvsp[0].ulonglong_number;
      Lex->create_info.used_fields |= HA_CREATE_USED_MIN_ROWS;
    }
    break;

    case 281:
#line 2644 "sql_yacc.yy"
    {
      Lex->create_info.avg_row_length = yyvsp[0].ulong_num;
      Lex->create_info.used_fields |= HA_CREATE_USED_AVG_ROW_LENGTH;
    }
    break;

    case 282:
#line 2645 "sql_yacc.yy"
    {
      Lex->create_info.password = yyvsp[0].lex_str.str;
      Lex->create_info.used_fields |= HA_CREATE_USED_PASSWORD;
    }
    break;

    case 283:
#line 2646 "sql_yacc.yy"
    {
      Lex->create_info.comment = yyvsp[0].lex_str.str;
      Lex->create_info.used_fields |= HA_CREATE_USED_COMMENT;
    }
    break;

    case 284:
#line 2647 "sql_yacc.yy"
    {
      Lex->create_info.auto_increment_value = yyvsp[0].ulonglong_number;
      Lex->create_info.used_fields |= HA_CREATE_USED_AUTO;
    }
    break;

    case 285:
#line 2649 "sql_yacc.yy"
    {
      switch (yyvsp[0].ulong_num)
      {
        case 0:
          Lex->create_info.table_options |= HA_OPTION_NO_PACK_KEYS;
          break;
        case 1:
          Lex->create_info.table_options |= HA_OPTION_PACK_KEYS;
          break;
        default:
          yyerror(ER(ER_SYNTAX_ERROR));
          YYABORT;
      }
      Lex->create_info.used_fields |= HA_CREATE_USED_PACK_KEYS;
    }
    break;

    case 286:
#line 2664 "sql_yacc.yy"
    {
      Lex->create_info.table_options &= ~(HA_OPTION_PACK_KEYS | HA_OPTION_NO_PACK_KEYS);
      Lex->create_info.used_fields |= HA_CREATE_USED_PACK_KEYS;
    }
    break;

    case 287:
#line 2669 "sql_yacc.yy"
    {
      Lex->create_info.table_options |= yyvsp[0].ulong_num ? HA_OPTION_CHECKSUM : HA_OPTION_NO_CHECKSUM;
      Lex->create_info.used_fields |= HA_CREATE_USED_CHECKSUM;
    }
    break;

    case 288:
#line 2670 "sql_yacc.yy"
    {
      Lex->create_info.table_options |= yyvsp[0].ulong_num ? HA_OPTION_DELAY_KEY_WRITE : HA_OPTION_NO_DELAY_KEY_WRITE;
      Lex->create_info.used_fields |= HA_CREATE_USED_DELAY_KEY_WRITE;
    }
    break;

    case 289:
#line 2671 "sql_yacc.yy"
    {
      Lex->create_info.row_type = yyvsp[0].row_type;
      Lex->create_info.used_fields |= HA_CREATE_USED_ROW_FORMAT;
    }
    break;

    case 290:
#line 2672 "sql_yacc.yy"
    {
      Lex->create_info.raid_type = yyvsp[0].ulong_num;
      Lex->create_info.used_fields |= HA_CREATE_USED_RAID;
    }
    break;

    case 291:
#line 2673 "sql_yacc.yy"
    {
      Lex->create_info.raid_chunks = yyvsp[0].ulong_num;
      Lex->create_info.used_fields |= HA_CREATE_USED_RAID;
    }
    break;

    case 292:
#line 2674 "sql_yacc.yy"
    {
      Lex->create_info.raid_chunksize = yyvsp[0].ulong_num * RAID_BLOCK_SIZE;
      Lex->create_info.used_fields |= HA_CREATE_USED_RAID;
    }
    break;

    case 293:
#line 2676 "sql_yacc.yy"
    {
      /* Move the union list to the merge_list */
      LEX *lex = Lex;
      TABLE_LIST *table_list = lex->select_lex.get_table_list();
      lex->create_info.merge_list = lex->select_lex.table_list;
      lex->create_info.merge_list.elements--;
      lex->create_info.merge_list.first = (byte *)(table_list->next_local);
      lex->select_lex.table_list.elements = 1;
      lex->select_lex.table_list.next = (byte **)&(table_list->next_local);
      table_list->next_local = 0;
      lex->create_info.used_fields |= HA_CREATE_USED_UNION;
    }
    break;

    case 296:
#line 2692 "sql_yacc.yy"
    {
      Lex->create_info.merge_insert_method = yyvsp[0].ulong_num;
      Lex->create_info.used_fields |= HA_CREATE_USED_INSERT_METHOD;
    }
    break;

    case 297:
#line 2693 "sql_yacc.yy"
    {
      Lex->create_info.data_file_name = yyvsp[0].lex_str.str;
      Lex->create_info.used_fields |= HA_CREATE_USED_DATADIR;
    }
    break;

    case 298:
#line 2694 "sql_yacc.yy"
    {
      Lex->create_info.index_file_name = yyvsp[0].lex_str.str;
      Lex->create_info.used_fields |= HA_CREATE_USED_INDEXDIR;
    }
    break;

    case 299:
#line 2695 "sql_yacc.yy"
    {
      Lex->create_info.connect_string.str = yyvsp[0].lex_str.str;
      Lex->create_info.connect_string.length = yyvsp[0].lex_str.length;
      Lex->create_info.used_fields |= HA_CREATE_USED_CONNECTION;
    }
    break;

    case 300:
#line 2700 "sql_yacc.yy"
    {
      HA_CREATE_INFO *cinfo = &Lex->create_info;
      if ((cinfo->used_fields & HA_CREATE_USED_DEFAULT_CHARSET) && cinfo->default_table_charset && yyvsp[0].charset &&
          !my_charset_same(cinfo->default_table_charset, yyvsp[0].charset))
      {
        my_error(ER_CONFLICTING_DECLARATIONS, MYF(0), "CHARACTER SET ", cinfo->default_table_charset->csname,
                 "CHARACTER SET ", yyvsp[0].charset->csname);
        YYABORT;
      }
      Lex->create_info.default_table_charset = yyvsp[0].charset;
      Lex->create_info.used_fields |= HA_CREATE_USED_DEFAULT_CHARSET;
    }
    break;

    case 301:
#line 2717 "sql_yacc.yy"
    {
      HA_CREATE_INFO *cinfo = &Lex->create_info;
      if ((cinfo->used_fields & HA_CREATE_USED_DEFAULT_CHARSET) && cinfo->default_table_charset && yyvsp[0].charset &&
          !my_charset_same(cinfo->default_table_charset, yyvsp[0].charset))
      {
        my_error(ER_COLLATION_CHARSET_MISMATCH, MYF(0), yyvsp[0].charset->name, cinfo->default_table_charset->csname);
        YYABORT;
      }
      Lex->create_info.default_table_charset = yyvsp[0].charset;
      Lex->create_info.used_fields |= HA_CREATE_USED_DEFAULT_CHARSET;
    }
    break;

    case 302:
#line 2733 "sql_yacc.yy"
    {
      yyval.db_type = ha_resolve_by_name(yyvsp[0].lex_str.str, yyvsp[0].lex_str.length);
      if (yyval.db_type == DB_TYPE_UNKNOWN)
      {
        my_error(ER_UNKNOWN_STORAGE_ENGINE, MYF(0), yyvsp[0].lex_str.str);
        YYABORT;
      }
    }
    break;

    case 303:
#line 2742 "sql_yacc.yy"
    {
      yyval.row_type = ROW_TYPE_DEFAULT;
    }
    break;

    case 304:
#line 2743 "sql_yacc.yy"
    {
      yyval.row_type = ROW_TYPE_FIXED;
    }
    break;

    case 305:
#line 2744 "sql_yacc.yy"
    {
      yyval.row_type = ROW_TYPE_DYNAMIC;
    }
    break;

    case 306:
#line 2745 "sql_yacc.yy"
    {
      yyval.row_type = ROW_TYPE_COMPRESSED;
    }
    break;

    case 307:
#line 2746 "sql_yacc.yy"
    {
      yyval.row_type = ROW_TYPE_REDUNDANT;
    }
    break;

    case 308:
#line 2747 "sql_yacc.yy"
    {
      yyval.row_type = ROW_TYPE_COMPACT;
    }
    break;

    case 309:
#line 2750 "sql_yacc.yy"
    {
      yyval.ulong_num = RAID_TYPE_0;
    }
    break;

    case 310:
#line 2751 "sql_yacc.yy"
    {
      yyval.ulong_num = RAID_TYPE_0;
    }
    break;

    case 311:
#line 2752 "sql_yacc.yy"
    {
      yyval.ulong_num = yyvsp[0].ulong_num;
    }
    break;

    case 312:
#line 2755 "sql_yacc.yy"
    {
      yyval.ulong_num = MERGE_INSERT_DISABLED;
    }
    break;

    case 313:
#line 2756 "sql_yacc.yy"
    {
      yyval.ulong_num = MERGE_INSERT_TO_FIRST;
    }
    break;

    case 314:
#line 2757 "sql_yacc.yy"
    {
      yyval.ulong_num = MERGE_INSERT_TO_LAST;
    }
    break;

    case 315:
#line 2760 "sql_yacc.yy"
    {
    }
    break;

    case 317:
#line 2764 "sql_yacc.yy"
    {
      yyval.udf_type = UDFTYPE_FUNCTION;
    }
    break;

    case 318:
#line 2765 "sql_yacc.yy"
    {
      yyval.udf_type = UDFTYPE_AGGREGATE;
    }
    break;

    case 319:
#line 2768 "sql_yacc.yy"
    {
      yyval.num = (int)STRING_RESULT;
    }
    break;

    case 320:
#line 2769 "sql_yacc.yy"
    {
      yyval.num = (int)REAL_RESULT;
    }
    break;

    case 321:
#line 2770 "sql_yacc.yy"
    {
      yyval.num = (int)DECIMAL_RESULT;
    }
    break;

    case 322:
#line 2771 "sql_yacc.yy"
    {
      yyval.num = (int)INT_RESULT;
    }
    break;

    case 328:
#line 2786 "sql_yacc.yy"
    {
      Lex->col_list.empty(); /* Alloced by sql_alloc */
    }
    break;

    case 329:
#line 2793 "sql_yacc.yy"
    {
      LEX *lex = Lex;
      lex->key_list.push_back(
          new Key(yyvsp[-5].key_type, yyvsp[-4].simple_string, yyvsp[-3].key_alg, 0, lex->col_list));
      lex->col_list.empty(); /* Alloced by sql_alloc */
    }
    break;

    case 330:
#line 2799 "sql_yacc.yy"
    {
      LEX *lex = Lex;
      const char *key_name = yyvsp[-4].simple_string ? yyvsp[-4].simple_string : yyvsp[-6].simple_string;
      lex->key_list.push_back(new Key(yyvsp[-5].key_type, key_name, yyvsp[-3].key_alg, 0, lex->col_list));
      lex->col_list.empty(); /* Alloced by sql_alloc */
    }
    break;

    case 331:
#line 2807 "sql_yacc.yy"
    {
      LEX *lex = Lex;
      lex->key_list.push_back(
          new foreign_key(yyvsp[-4].simple_string ? yyvsp[-4].simple_string : yyvsp[-7].simple_string, lex->col_list,
                          yyvsp[0].table, lex->ref_list, lex->fk_delete_opt, lex->fk_update_opt, lex->fk_match_option));
      lex->key_list.push_back(new Key(Key::MULTIPLE,
                                      yyvsp[-4].simple_string ? yyvsp[-4].simple_string : yyvsp[-7].simple_string,
                                      HA_KEY_ALG_UNDEF, 1, lex->col_list));
      lex->col_list.empty(); /* Alloced by sql_alloc */
    }
    break;

    case 332:
#line 2821 "sql_yacc.yy"
    {
      Lex->col_list.empty(); /* Alloced by sql_alloc */
    }
    break;

    case 333:
#line 2825 "sql_yacc.yy"
    {
      Lex->col_list.empty(); /* Alloced by sql_alloc */
    }
    break;

    case 337:
#line 2840 "sql_yacc.yy"
    {
      yyval.simple_string = (char *)0;
    }
    break;

    case 338:
#line 2841 "sql_yacc.yy"
    {
      yyval.simple_string = yyvsp[0].simple_string;
    }
    break;

    case 339:
#line 2845 "sql_yacc.yy"
    {
      yyval.simple_string = yyvsp[0].simple_string;
    }
    break;

    case 340:
#line 2850 "sql_yacc.yy"
    {
      LEX *lex = Lex;
      lex->length = lex->dec = 0;
      lex->type = 0;
      lex->default_value = lex->on_update_value = 0;
      lex->comment = null_lex_str;
      lex->charset = NULL;
    }
    break;

    case 341:
#line 2858 "sql_yacc.yy"
    {
      LEX *lex = Lex;
      if (add_field_to_list(lex->thd, yyvsp[-3].lex_str.str, (enum enum_field_types)yyvsp[-1].num, lex->length,
                            lex->dec, lex->type, lex->default_value, lex->on_update_value, &lex->comment, lex->change,
                            &lex->interval_list, lex->charset, lex->uint_geom_type))
        YYABORT;
    }
    break;

    case 342:
#line 2871 "sql_yacc.yy"
    {
      yyval.num = yyvsp[-2].num;
    }
    break;

    case 343:
#line 2872 "sql_yacc.yy"
    {
      yyval.num = yyvsp[-2].num;
    }
    break;

    case 344:
#line 2873 "sql_yacc.yy"
    {
      yyval.num = FIELD_TYPE_FLOAT;
    }
    break;

    case 345:
#line 2874 "sql_yacc.yy"
    {
      Lex->length = (char *)"1";
      yyval.num = FIELD_TYPE_BIT;
    }
    break;

    case 346:
#line 2876 "sql_yacc.yy"
    {
      Lex->length = yyvsp[-1].lex_str.str;
      yyval.num = FIELD_TYPE_BIT;
    }
    break;

    case 347:
#line 2878 "sql_yacc.yy"
    {
      Lex->length = (char *)"1";
      yyval.num = FIELD_TYPE_TINY;
    }
    break;

    case 348:
#line 2880 "sql_yacc.yy"
    {
      Lex->length = (char *)"1";
      yyval.num = FIELD_TYPE_TINY;
    }
    break;

    case 349:
#line 2882 "sql_yacc.yy"
    {
      Lex->length = yyvsp[-2].lex_str.str;
      yyval.num = FIELD_TYPE_STRING;
    }
    break;

    case 350:
#line 2884 "sql_yacc.yy"
    {
      Lex->length = (char *)"1";
      yyval.num = FIELD_TYPE_STRING;
    }
    break;

    case 351:
#line 2886 "sql_yacc.yy"
    {
      Lex->length = yyvsp[-2].lex_str.str;
      yyval.num = FIELD_TYPE_STRING;
      Lex->charset = national_charset_info;
    }
    break;

    case 352:
#line 2889 "sql_yacc.yy"
    {
      Lex->length = (char *)"1";
      yyval.num = FIELD_TYPE_STRING;
      Lex->charset = national_charset_info;
    }
    break;

    case 353:
#line 2892 "sql_yacc.yy"
    {
      Lex->length = yyvsp[-1].lex_str.str;
      Lex->charset = &my_charset_bin;
      yyval.num = FIELD_TYPE_STRING;
    }
    break;

    case 354:
#line 2895 "sql_yacc.yy"
    {
      Lex->length = (char *)"1";
      Lex->charset = &my_charset_bin;
      yyval.num = FIELD_TYPE_STRING;
    }
    break;

    case 355:
#line 2898 "sql_yacc.yy"
    {
      Lex->length = yyvsp[-2].lex_str.str;
      yyval.num = MYSQL_TYPE_VARCHAR;
    }
    break;

    case 356:
#line 2900 "sql_yacc.yy"
    {
      Lex->length = yyvsp[-2].lex_str.str;
      yyval.num = MYSQL_TYPE_VARCHAR;
      Lex->charset = national_charset_info;
    }
    break;

    case 357:
#line 2903 "sql_yacc.yy"
    {
      Lex->length = yyvsp[-1].lex_str.str;
      Lex->charset = &my_charset_bin;
      yyval.num = MYSQL_TYPE_VARCHAR;
    }
    break;

    case 358:
#line 2906 "sql_yacc.yy"
    {
      yyval.num = FIELD_TYPE_YEAR;
    }
    break;

    case 359:
#line 2907 "sql_yacc.yy"
    {
      yyval.num = FIELD_TYPE_DATE;
    }
    break;

    case 360:
#line 2908 "sql_yacc.yy"
    {
      yyval.num = FIELD_TYPE_TIME;
    }
    break;

    case 361:
#line 2910 "sql_yacc.yy"
    {
      if (YYTHD->variables.sql_mode & MODE_MAXDB)
        yyval.num = FIELD_TYPE_DATETIME;
      else
      {
        /*
          Unlike other types TIMESTAMP fields are NOT NULL by default.
        */
        Lex->type |= NOT_NULL_FLAG;
        yyval.num = FIELD_TYPE_TIMESTAMP;
      }
    }
    break;

    case 362:
#line 2922 "sql_yacc.yy"
    {
      yyval.num = FIELD_TYPE_DATETIME;
    }
    break;

    case 363:
#line 2923 "sql_yacc.yy"
    {
      Lex->charset = &my_charset_bin;
      yyval.num = FIELD_TYPE_TINY_BLOB;
    }
    break;

    case 364:
#line 2925 "sql_yacc.yy"
    {
      Lex->charset = &my_charset_bin;
      yyval.num = FIELD_TYPE_BLOB;
    }
    break;

    case 365:
#line 2928 "sql_yacc.yy"
    {
#ifdef HAVE_SPATIAL
      Lex->charset = &my_charset_bin;
      Lex->uint_geom_type = (uint)yyvsp[0].num;
      yyval.num = FIELD_TYPE_GEOMETRY;
#else
      my_error(ER_FEATURE_DISABLED, MYF(0), sym_group_geom.name, sym_group_geom.needed_define);
      YYABORT;
#endif
    }
    break;

    case 366:
#line 2939 "sql_yacc.yy"
    {
      Lex->charset = &my_charset_bin;
      yyval.num = FIELD_TYPE_MEDIUM_BLOB;
    }
    break;

    case 367:
#line 2941 "sql_yacc.yy"
    {
      Lex->charset = &my_charset_bin;
      yyval.num = FIELD_TYPE_LONG_BLOB;
    }
    break;

    case 368:
#line 2943 "sql_yacc.yy"
    {
      Lex->charset = &my_charset_bin;
      yyval.num = FIELD_TYPE_MEDIUM_BLOB;
    }
    break;

    case 369:
#line 2945 "sql_yacc.yy"
    {
      yyval.num = FIELD_TYPE_MEDIUM_BLOB;
    }
    break;

    case 370:
#line 2946 "sql_yacc.yy"
    {
      yyval.num = FIELD_TYPE_TINY_BLOB;
    }
    break;

    case 371:
#line 2947 "sql_yacc.yy"
    {
      yyval.num = FIELD_TYPE_BLOB;
    }
    break;

    case 372:
#line 2948 "sql_yacc.yy"
    {
      yyval.num = FIELD_TYPE_MEDIUM_BLOB;
    }
    break;

    case 373:
#line 2949 "sql_yacc.yy"
    {
      yyval.num = FIELD_TYPE_LONG_BLOB;
    }
    break;

    case 374:
#line 2951 "sql_yacc.yy"
    {
      yyval.num = FIELD_TYPE_NEWDECIMAL;
    }
    break;

    case 375:
#line 2953 "sql_yacc.yy"
    {
      yyval.num = FIELD_TYPE_NEWDECIMAL;
    }
    break;

    case 376:
#line 2955 "sql_yacc.yy"
    {
      yyval.num = FIELD_TYPE_NEWDECIMAL;
    }
    break;

    case 377:
#line 2956 "sql_yacc.yy"
    {
      Lex->interval_list.empty();
    }
    break;

    case 378:
#line 2957 "sql_yacc.yy"
    {
      yyval.num = FIELD_TYPE_ENUM;
    }
    break;

    case 379:
#line 2958 "sql_yacc.yy"
    {
      Lex->interval_list.empty();
    }
    break;

    case 380:
#line 2959 "sql_yacc.yy"
    {
      yyval.num = FIELD_TYPE_SET;
    }
    break;

    case 381:
#line 2960 "sql_yacc.yy"
    {
      yyval.num = FIELD_TYPE_MEDIUM_BLOB;
    }
    break;

    case 382:
#line 2962 "sql_yacc.yy"
    {
      yyval.num = FIELD_TYPE_LONGLONG;
      Lex->type |= (AUTO_INCREMENT_FLAG | NOT_NULL_FLAG | UNSIGNED_FLAG | UNIQUE_FLAG);
    }
    break;

    case 383:
#line 2970 "sql_yacc.yy"
    {
      yyval.num = Field::GEOM_GEOMETRY;
    }
    break;

    case 384:
#line 2971 "sql_yacc.yy"
    {
      yyval.num = Field::GEOM_GEOMETRYCOLLECTION;
    }
    break;

    case 385:
#line 2972 "sql_yacc.yy"
    {
      yyval.num = Field::GEOM_POINT;
    }
    break;

    case 386:
#line 2973 "sql_yacc.yy"
    {
      yyval.num = Field::GEOM_MULTIPOINT;
    }
    break;

    case 387:
#line 2974 "sql_yacc.yy"
    {
      yyval.num = Field::GEOM_LINESTRING;
    }
    break;

    case 388:
#line 2975 "sql_yacc.yy"
    {
      yyval.num = Field::GEOM_MULTILINESTRING;
    }
    break;

    case 389:
#line 2976 "sql_yacc.yy"
    {
      yyval.num = Field::GEOM_POLYGON;
    }
    break;

    case 390:
#line 2977 "sql_yacc.yy"
    {
      yyval.num = Field::GEOM_MULTIPOLYGON;
    }
    break;

    case 391:
#line 2981 "sql_yacc.yy"
    {
    }
    break;

    case 392:
#line 2985 "sql_yacc.yy"
    {
    }
    break;

    case 393:
#line 2986 "sql_yacc.yy"
    {
    }
    break;

    case 394:
#line 2990 "sql_yacc.yy"
    {
    }
    break;

    case 395:
#line 2991 "sql_yacc.yy"
    {
    }
    break;

    case 396:
#line 2995 "sql_yacc.yy"
    {
    }
    break;

    case 397:
#line 2996 "sql_yacc.yy"
    {
    }
    break;

    case 398:
#line 2997 "sql_yacc.yy"
    {
    }
    break;

    case 399:
#line 2998 "sql_yacc.yy"
    {
    }
    break;

    case 400:
#line 2999 "sql_yacc.yy"
    {
    }
    break;

    case 401:
#line 3003 "sql_yacc.yy"
    {
      yyval.num = FIELD_TYPE_LONG;
    }
    break;

    case 402:
#line 3004 "sql_yacc.yy"
    {
      yyval.num = FIELD_TYPE_TINY;
    }
    break;

    case 403:
#line 3005 "sql_yacc.yy"
    {
      yyval.num = FIELD_TYPE_SHORT;
    }
    break;

    case 404:
#line 3006 "sql_yacc.yy"
    {
      yyval.num = FIELD_TYPE_INT24;
    }
    break;

    case 405:
#line 3007 "sql_yacc.yy"
    {
      yyval.num = FIELD_TYPE_LONGLONG;
    }
    break;

    case 406:
#line 3010 "sql_yacc.yy"
    {
      yyval.num = YYTHD->variables.sql_mode & MODE_REAL_AS_FLOAT ? FIELD_TYPE_FLOAT : FIELD_TYPE_DOUBLE;
    }
    break;

    case 407:
#line 3012 "sql_yacc.yy"
    {
      yyval.num = FIELD_TYPE_DOUBLE;
    }
    break;

    case 408:
#line 3013 "sql_yacc.yy"
    {
      yyval.num = FIELD_TYPE_DOUBLE;
    }
    break;

    case 409:
#line 3017 "sql_yacc.yy"
    {
      Lex->dec = Lex->length = (char *)0;
    }
    break;

    case 410:
#line 3018 "sql_yacc.yy"
    {
      Lex->length = yyvsp[-1].lex_str.str;
      Lex->dec = (char *)0;
    }
    break;

    case 411:
#line 3019 "sql_yacc.yy"
    {
    }
    break;

    case 412:
#line 3023 "sql_yacc.yy"
    {
      LEX *lex = Lex;
      lex->length = yyvsp[-3].lex_str.str;
      lex->dec = yyvsp[-1].lex_str.str;
    }
    break;

    case 413:
#line 3029 "sql_yacc.yy"
    {
    }
    break;

    case 414:
#line 3030 "sql_yacc.yy"
    {
    }
    break;

    case 415:
#line 3033 "sql_yacc.yy"
    {
    }
    break;

    case 416:
#line 3034 "sql_yacc.yy"
    {
    }
    break;

    case 417:
#line 3037 "sql_yacc.yy"
    {
    }
    break;

    case 418:
#line 3038 "sql_yacc.yy"
    {
      Lex->type |= UNSIGNED_FLAG;
    }
    break;

    case 419:
#line 3039 "sql_yacc.yy"
    {
      Lex->type |= UNSIGNED_FLAG | ZEROFILL_FLAG;
    }
    break;

    case 420:
#line 3042 "sql_yacc.yy"
    {
      Lex->length = (char *)0;
    }
    break;

    case 421:
#line 3043 "sql_yacc.yy"
    {
      Lex->length = yyvsp[-1].lex_str.str;
    }
    break;

    case 422:
#line 3046 "sql_yacc.yy"
    {
    }
    break;

    case 423:
#line 3047 "sql_yacc.yy"
    {
    }
    break;

    case 424:
#line 3050 "sql_yacc.yy"
    {
    }
    break;

    case 425:
#line 3051 "sql_yacc.yy"
    {
    }
    break;

    case 426:
#line 3054 "sql_yacc.yy"
    {
    }
    break;

    case 428:
#line 3058 "sql_yacc.yy"
    {
      Lex->type &= ~NOT_NULL_FLAG;
    }
    break;

    case 429:
#line 3059 "sql_yacc.yy"
    {
      Lex->type |= NOT_NULL_FLAG;
    }
    break;

    case 430:
#line 3060 "sql_yacc.yy"
    {
      Lex->default_value = yyvsp[0].item;
    }
    break;

    case 431:
#line 3062 "sql_yacc.yy"
    {
      Lex->on_update_value = new Item_func_now_local();
    }
    break;

    case 432:
#line 3063 "sql_yacc.yy"
    {
      Lex->type |= AUTO_INCREMENT_FLAG | NOT_NULL_FLAG;
    }
    break;

    case 433:
#line 3065 "sql_yacc.yy"
    {
      LEX *lex = Lex;
      lex->type |= AUTO_INCREMENT_FLAG | NOT_NULL_FLAG | UNIQUE_FLAG;
      lex->alter_info.flags |= ALTER_ADD_INDEX;
    }
    break;

    case 434:
#line 3071 "sql_yacc.yy"
    {
      LEX *lex = Lex;
      lex->type |= PRI_KEY_FLAG | NOT_NULL_FLAG;
      lex->alter_info.flags |= ALTER_ADD_INDEX;
    }
    break;

    case 435:
#line 3077 "sql_yacc.yy"
    {
      LEX *lex = Lex;
      lex->type |= UNIQUE_FLAG;
      lex->alter_info.flags |= ALTER_ADD_INDEX;
    }
    break;

    case 436:
#line 3083 "sql_yacc.yy"
    {
      LEX *lex = Lex;
      lex->type |= UNIQUE_KEY_FLAG;
      lex->alter_info.flags |= ALTER_ADD_INDEX;
    }
    break;

    case 437:
#line 3088 "sql_yacc.yy"
    {
      Lex->comment = yyvsp[0].lex_str;
    }
    break;

    case 438:
#line 3090 "sql_yacc.yy"
    {
      if (Lex->charset && !my_charset_same(Lex->charset, yyvsp[0].charset))
      {
        my_error(ER_COLLATION_CHARSET_MISMATCH, MYF(0), yyvsp[0].charset->name, Lex->charset->csname);
        YYABORT;
      }
      else
      {
        Lex->charset = yyvsp[0].charset;
      }
    }
    break;

    case 439:
#line 3105 "sql_yacc.yy"
    {
      yyval.item = new Item_func_now_local();
    }
    break;

    case 440:
#line 3106 "sql_yacc.yy"
    {
      yyval.item = yyvsp[0].item;
    }
    break;

    case 441:
#line 3110 "sql_yacc.yy"
    {
    }
    break;

    case 442:
#line 3111 "sql_yacc.yy"
    {
    }
    break;

    case 443:
#line 3116 "sql_yacc.yy"
    {
      if (!(yyval.charset = get_charset_by_csname(yyvsp[0].lex_str.str, MY_CS_PRIMARY, MYF(0))))
      {
        my_error(ER_UNKNOWN_CHARACTER_SET, MYF(0), yyvsp[0].lex_str.str);
        YYABORT;
      }
    }
    break;

    case 444:
#line 3123 "sql_yacc.yy"
    {
      yyval.charset = &my_charset_bin;
    }
    break;

    case 445:
#line 3127 "sql_yacc.yy"
    {
      yyval.charset = yyvsp[0].charset;
    }
    break;

    case 446:
#line 3128 "sql_yacc.yy"
    {
      yyval.charset = NULL;
    }
    break;

    case 447:
#line 3133 "sql_yacc.yy"
    {
      if (!(yyval.charset = get_charset_by_csname(yyvsp[0].lex_str.str, MY_CS_PRIMARY, MYF(0))) &&
          !(yyval.charset = get_old_charset_by_name(yyvsp[0].lex_str.str)))
      {
        my_error(ER_UNKNOWN_CHARACTER_SET, MYF(0), yyvsp[0].lex_str.str);
        YYABORT;
      }
    }
    break;

    case 448:
#line 3141 "sql_yacc.yy"
    {
      yyval.charset = &my_charset_bin;
    }
    break;

    case 449:
#line 3145 "sql_yacc.yy"
    {
      yyval.charset = yyvsp[0].charset;
    }
    break;

    case 450:
#line 3146 "sql_yacc.yy"
    {
      yyval.charset = NULL;
    }
    break;

    case 451:
#line 3150 "sql_yacc.yy"
    {
      if (!(yyval.charset = get_charset_by_name(yyvsp[0].lex_str.str, MYF(0))))
      {
        my_error(ER_UNKNOWN_COLLATION, MYF(0), yyvsp[0].lex_str.str);
        YYABORT;
      }
    }
    break;

    case 452:
#line 3159 "sql_yacc.yy"
    {
      yyval.charset = NULL;
    }
    break;

    case 453:
#line 3160 "sql_yacc.yy"
    {
      yyval.charset = yyvsp[0].charset;
    }
    break;

    case 454:
#line 3164 "sql_yacc.yy"
    {
      yyval.charset = yyvsp[0].charset;
    }
    break;

    case 455:
#line 3165 "sql_yacc.yy"
    {
      yyval.charset = NULL;
    }
    break;

    case 456:
#line 3168 "sql_yacc.yy"
    {
    }
    break;

    case 457:
#line 3169 "sql_yacc.yy"
    {
    }
    break;

    case 458:
#line 3172 "sql_yacc.yy"
    {
      Lex->charset = NULL;
    }
    break;

    case 459:
#line 3173 "sql_yacc.yy"
    {
      Lex->charset = &my_charset_latin1;
    }
    break;

    case 460:
#line 3174 "sql_yacc.yy"
    {
      Lex->charset = &my_charset_bin;
    }
    break;

    case 461:
#line 3176 "sql_yacc.yy"
    {
      if (!(Lex->charset = get_charset_by_csname("ucs2", MY_CS_PRIMARY, MYF(0))))
      {
        my_error(ER_UNKNOWN_CHARACTER_SET, MYF(0), "ucs2");
        YYABORT;
      }
    }
    break;

    case 462:
#line 3184 "sql_yacc.yy"
    {
      Lex->charset = yyvsp[-1].charset;
    }
    break;

    case 463:
#line 3185 "sql_yacc.yy"
    {
      Lex->type |= BINCMP_FLAG;
    }
    break;

    case 464:
#line 3188 "sql_yacc.yy"
    {
    }
    break;

    case 465:
#line 3189 "sql_yacc.yy"
    {
      Lex->type |= BINCMP_FLAG;
    }
    break;

    case 466:
#line 3192 "sql_yacc.yy"
    {
    }
    break;

    case 467:
#line 3193 "sql_yacc.yy"
    {
      Lex->charset = &my_charset_latin1;
    }
    break;

    case 468:
#line 3195 "sql_yacc.yy"
    {
      if (!(Lex->charset = get_charset_by_csname("ucs2", MY_CS_PRIMARY, MYF(0))))
      {
        my_error(ER_UNKNOWN_CHARACTER_SET, MYF(0), "ucs2");
        YYABORT;
      }
    }
    break;

    case 469:
#line 3203 "sql_yacc.yy"
    {
      Lex->charset = yyvsp[0].charset;
    }
    break;

    case 472:
#line 3212 "sql_yacc.yy"
    {
      LEX *lex = Lex;
      lex->fk_delete_opt = lex->fk_update_opt = lex->fk_match_option = 0;
      lex->ref_list.empty();
    }
    break;

    case 473:
#line 3218 "sql_yacc.yy"
    {
      yyval.table = yyvsp[-2].table;
    }
    break;

    case 474:
#line 3223 "sql_yacc.yy"
    {
    }
    break;

    case 475:
#line 3224 "sql_yacc.yy"
    {
    }
    break;

    case 476:
#line 3227 "sql_yacc.yy"
    {
      Lex->ref_list.push_back(new key_part_spec(yyvsp[0].lex_str.str));
    }
    break;

    case 477:
#line 3228 "sql_yacc.yy"
    {
      Lex->ref_list.push_back(new key_part_spec(yyvsp[0].lex_str.str));
    }
    break;

    case 478:
#line 3232 "sql_yacc.yy"
    {
    }
    break;

    case 479:
#line 3233 "sql_yacc.yy"
    {
    }
    break;

    case 480:
#line 3236 "sql_yacc.yy"
    {
    }
    break;

    case 481:
#line 3237 "sql_yacc.yy"
    {
    }
    break;

    case 482:
#line 3240 "sql_yacc.yy"
    {
      Lex->fk_delete_opt = yyvsp[0].num;
    }
    break;

    case 483:
#line 3241 "sql_yacc.yy"
    {
      Lex->fk_update_opt = yyvsp[0].num;
    }
    break;

    case 484:
#line 3242 "sql_yacc.yy"
    {
      Lex->fk_match_option = foreign_key::FK_MATCH_FULL;
    }
    break;

    case 485:
#line 3243 "sql_yacc.yy"
    {
      Lex->fk_match_option = foreign_key::FK_MATCH_PARTIAL;
    }
    break;

    case 486:
#line 3244 "sql_yacc.yy"
    {
      Lex->fk_match_option = foreign_key::FK_MATCH_SIMPLE;
    }
    break;

    case 487:
#line 3247 "sql_yacc.yy"
    {
      yyval.num = (int)foreign_key::FK_OPTION_RESTRICT;
    }
    break;

    case 488:
#line 3248 "sql_yacc.yy"
    {
      yyval.num = (int)foreign_key::FK_OPTION_CASCADE;
    }
    break;

    case 489:
#line 3249 "sql_yacc.yy"
    {
      yyval.num = (int)foreign_key::FK_OPTION_SET_NULL;
    }
    break;

    case 490:
#line 3250 "sql_yacc.yy"
    {
      yyval.num = (int)foreign_key::FK_OPTION_NO_ACTION;
    }
    break;

    case 491:
#line 3251 "sql_yacc.yy"
    {
      yyval.num = (int)foreign_key::FK_OPTION_DEFAULT;
    }
    break;

    case 492:
#line 3254 "sql_yacc.yy"
    {
      yyval.key_type = Key::MULTIPLE;
    }
    break;

    case 493:
#line 3255 "sql_yacc.yy"
    {
      yyval.key_type = Key::FULLTEXT;
    }
    break;

    case 494:
#line 3257 "sql_yacc.yy"
    {
#ifdef HAVE_SPATIAL
      yyval.key_type = Key::SPATIAL;
#else
      my_error(ER_FEATURE_DISABLED, MYF(0), sym_group_geom.name, sym_group_geom.needed_define);
      YYABORT;
#endif
    }
    break;

    case 495:
#line 3268 "sql_yacc.yy"
    {
      yyval.key_type = Key::PRIMARY;
    }
    break;

    case 496:
#line 3269 "sql_yacc.yy"
    {
      yyval.key_type = Key::UNIQUE;
    }
    break;

    case 497:
#line 3272 "sql_yacc.yy"
    {
    }
    break;

    case 498:
#line 3273 "sql_yacc.yy"
    {
    }
    break;

    case 499:
#line 3276 "sql_yacc.yy"
    {
    }
    break;

    case 501:
#line 3281 "sql_yacc.yy"
    {
    }
    break;

    case 502:
#line 3282 "sql_yacc.yy"
    {
    }
    break;

    case 503:
#line 3283 "sql_yacc.yy"
    {
    }
    break;

    case 504:
#line 3286 "sql_yacc.yy"
    {
      yyval.key_type = Key::MULTIPLE;
    }
    break;

    case 505:
#line 3287 "sql_yacc.yy"
    {
      yyval.key_type = Key::UNIQUE;
    }
    break;

    case 506:
#line 3288 "sql_yacc.yy"
    {
      yyval.key_type = Key::FULLTEXT;
    }
    break;

    case 507:
#line 3290 "sql_yacc.yy"
    {
#ifdef HAVE_SPATIAL
      yyval.key_type = Key::SPATIAL;
#else
      my_error(ER_FEATURE_DISABLED, MYF(0), sym_group_geom.name, sym_group_geom.needed_define);
      YYABORT;
#endif
    }
    break;

    case 508:
#line 3302 "sql_yacc.yy"
    {
      yyval.key_alg = HA_KEY_ALG_UNDEF;
    }
    break;

    case 509:
#line 3303 "sql_yacc.yy"
    {
      yyval.key_alg = yyvsp[0].key_alg;
    }
    break;

    case 510:
#line 3304 "sql_yacc.yy"
    {
      yyval.key_alg = yyvsp[0].key_alg;
    }
    break;

    case 511:
#line 3307 "sql_yacc.yy"
    {
      yyval.key_alg = HA_KEY_ALG_BTREE;
    }
    break;

    case 512:
#line 3309 "sql_yacc.yy"
    {
      yyval.key_alg = HA_KEY_ALG_RTREE;
    }
    break;

    case 513:
#line 3312 "sql_yacc.yy"
    {
      yyval.key_alg = HA_KEY_ALG_HASH;
    }
    break;

    case 514:
#line 3315 "sql_yacc.yy"
    {
      Lex->col_list.push_back(yyvsp[-1].key_part);
    }
    break;

    case 515:
#line 3316 "sql_yacc.yy"
    {
      Lex->col_list.push_back(yyvsp[-1].key_part);
    }
    break;

    case 516:
#line 3319 "sql_yacc.yy"
    {
      yyval.key_part = new key_part_spec(yyvsp[0].lex_str.str);
    }
    break;

    case 517:
#line 3321 "sql_yacc.yy"
    {
      int key_part_len = atoi(yyvsp[-1].lex_str.str);
      if (!key_part_len)
      {
        my_error(ER_KEY_PART_0, MYF(0), yyvsp[-3].lex_str.str);
      }
      yyval.key_part = new key_part_spec(yyvsp[-3].lex_str.str, (uint)key_part_len);
    }
    break;

    case 518:
#line 3331 "sql_yacc.yy"
    {
      yyval.simple_string = (char *)0;
    }
    break;

    case 519:
#line 3332 "sql_yacc.yy"
    {
      yyval.simple_string = yyvsp[0].lex_str.str;
    }
    break;

    case 520:
#line 3335 "sql_yacc.yy"
    {
      yyval.lex_str = null_lex_str;
    }
    break;

    case 521:
#line 3336 "sql_yacc.yy"
    {
      yyval.lex_str = yyvsp[0].lex_str;
    }
    break;

    case 522:
#line 3339 "sql_yacc.yy"
    {
      Lex->interval_list.push_back(yyvsp[0].string);
    }
    break;

    case 523:
#line 3340 "sql_yacc.yy"
    {
      Lex->interval_list.push_back(yyvsp[0].string);
    }
    break;

    case 524:
#line 3348 "sql_yacc.yy"
    {
      THD *thd = YYTHD;
      LEX *lex = thd->lex;
      if (lex->sphead && lex->sphead->m_type != TYPE_ENUM_PROCEDURE)
      {
        my_error(ER_COMMIT_NOT_ALLOWED_IN_SF_OR_TRG, MYF(0));
        YYABORT;
      }
      lex->sql_command = SQLCOM_ALTER_TABLE;
      lex->name = 0;
      lex->duplicates = DUP_ERROR;
      if (!lex->select_lex.add_table_to_list(thd, yyvsp[0].table, NULL, TL_OPTION_UPDATING))
        YYABORT;
      lex->create_list.empty();
      lex->key_list.empty();
      lex->col_list.empty();
      lex->select_lex.init_order();
      lex->select_lex.db = lex->name = 0;
      bzero((char *)&lex->create_info, sizeof(lex->create_info));
      lex->create_info.db_type = DB_TYPE_DEFAULT;
      lex->create_info.default_table_charset = NULL;
      lex->create_info.row_type = ROW_TYPE_NOT_USED;
      lex->alter_info.reset();
      lex->alter_info.flags = 0;
    }
    break;

    case 525:
#line 3375 "sql_yacc.yy"
    {
    }
    break;

    case 526:
#line 3377 "sql_yacc.yy"
    {
      Lex->create_info.default_table_charset = NULL;
      Lex->create_info.used_fields = 0;
    }
    break;

    case 527:
#line 3382 "sql_yacc.yy"
    {
      LEX *lex = Lex;
      lex->sql_command = SQLCOM_ALTER_DB;
      lex->name = yyvsp[-2].simple_string;
    }
    break;

    case 528:
#line 3388 "sql_yacc.yy"
    {
      LEX *lex = Lex;

      if (lex->sphead)
      {
        my_error(ER_SP_NO_DROP_SP, MYF(0), "PROCEDURE");
        YYABORT;
      }
      bzero((char *)&lex->sp_chistics, sizeof(st_sp_chistics));
    }
    break;

    case 529:
#line 3399 "sql_yacc.yy"
    {
      LEX *lex = Lex;

      lex->sql_command = SQLCOM_ALTER_PROCEDURE;
      lex->spname = yyvsp[-2].spname;
    }
    break;

    case 530:
#line 3406 "sql_yacc.yy"
    {
      LEX *lex = Lex;

      if (lex->sphead)
      {
        my_error(ER_SP_NO_DROP_SP, MYF(0), "FUNCTION");
        YYABORT;
      }
      bzero((char *)&lex->sp_chistics, sizeof(st_sp_chistics));
    }
    break;

    case 531:
#line 3417 "sql_yacc.yy"
    {
      LEX *lex = Lex;

      lex->sql_command = SQLCOM_ALTER_FUNCTION;
      lex->spname = yyvsp[-2].spname;
    }
    break;

    case 532:
#line 3424 "sql_yacc.yy"
    {
      THD *thd = YYTHD;
      LEX *lex = thd->lex;
      lex->sql_command = SQLCOM_CREATE_VIEW;
      lex->create_view_mode = VIEW_ALTER;
      /* first table in list is target VIEW name */
      lex->select_lex.add_table_to_list(thd, yyvsp[0].table, NULL, 0);
    }
    break;

    case 533:
#line 3433 "sql_yacc.yy"
    {
    }
    break;

    case 534:
#line 3437 "sql_yacc.yy"
    {
      yyval.simple_string = 0;
    }
    break;

    case 535:
#line 3438 "sql_yacc.yy"
    {
      yyval.simple_string = yyvsp[0].lex_str.str;
    }
    break;

    case 537:
#line 3441 "sql_yacc.yy"
    {
      Lex->alter_info.tablespace_op = DISCARD_TABLESPACE;
    }
    break;

    case 538:
#line 3442 "sql_yacc.yy"
    {
      Lex->alter_info.tablespace_op = IMPORT_TABLESPACE;
    }
    break;

    case 541:
#line 3448 "sql_yacc.yy"
    {
      LEX *lex = Lex;
      lex->change = 0;
      lex->alter_info.flags |= ALTER_ADD_COLUMN;
    }
    break;

    case 542:
#line 3455 "sql_yacc.yy"
    {
    }
    break;

    case 543:
#line 3457 "sql_yacc.yy"
    {
      Lex->alter_info.flags |= ALTER_ADD_INDEX;
    }
    break;

    case 544:
#line 3461 "sql_yacc.yy"
    {
      Lex->alter_info.flags |= ALTER_ADD_COLUMN | ALTER_ADD_INDEX;
    }
    break;

    case 545:
#line 3465 "sql_yacc.yy"
    {
      LEX *lex = Lex;
      lex->change = yyvsp[0].lex_str.str;
      lex->alter_info.flags |= ALTER_CHANGE_COLUMN;
    }
    break;

    case 547:
#line 3472 "sql_yacc.yy"
    {
      LEX *lex = Lex;
      lex->length = lex->dec = 0;
      lex->type = 0;
      lex->default_value = lex->on_update_value = 0;
      lex->comment = null_lex_str;
      lex->charset = NULL;
      lex->alter_info.flags |= ALTER_CHANGE_COLUMN;
    }
    break;

    case 548:
#line 3481 "sql_yacc.yy"
    {
      LEX *lex = Lex;
      if (add_field_to_list(lex->thd, yyvsp[-3].lex_str.str, (enum enum_field_types)yyvsp[-1].num, lex->length,
                            lex->dec, lex->type, lex->default_value, lex->on_update_value, &lex->comment,
                            yyvsp[-3].lex_str.str, &lex->interval_list, lex->charset, lex->uint_geom_type))
        YYABORT;
    }
    break;

    case 550:
#line 3494 "sql_yacc.yy"
    {
      LEX *lex = Lex;
      lex->alter_info.drop_list.push_back(new Alter_drop(Alter_drop::COLUMN, yyvsp[-1].lex_str.str));
      lex->alter_info.flags |= ALTER_DROP_COLUMN;
    }
    break;

    case 551:
#line 3501 "sql_yacc.yy"
    {
      Lex->alter_info.flags |= ALTER_DROP_INDEX;
    }
    break;

    case 552:
#line 3505 "sql_yacc.yy"
    {
      LEX *lex = Lex;
      lex->alter_info.drop_list.push_back(new Alter_drop(Alter_drop::KEY, primary_key_name));
      lex->alter_info.flags |= ALTER_DROP_INDEX;
    }
    break;

    case 553:
#line 3512 "sql_yacc.yy"
    {
      LEX *lex = Lex;
      lex->alter_info.drop_list.push_back(new Alter_drop(Alter_drop::KEY, yyvsp[0].lex_str.str));
      lex->alter_info.flags |= ALTER_DROP_INDEX;
    }
    break;

    case 554:
#line 3519 "sql_yacc.yy"
    {
      LEX *lex = Lex;
      lex->alter_info.keys_onoff = DISABLE;
      lex->alter_info.flags |= ALTER_KEYS_ONOFF;
    }
    break;

    case 555:
#line 3525 "sql_yacc.yy"
    {
      LEX *lex = Lex;
      lex->alter_info.keys_onoff = ENABLE;
      lex->alter_info.flags |= ALTER_KEYS_ONOFF;
    }
    break;

    case 556:
#line 3531 "sql_yacc.yy"
    {
      LEX *lex = Lex;
      lex->alter_info.alter_list.push_back(new Alter_column(yyvsp[-3].lex_str.str, yyvsp[0].item));
      lex->alter_info.flags |= ALTER_CHANGE_COLUMN_DEFAULT;
    }
    break;

    case 557:
#line 3537 "sql_yacc.yy"
    {
      LEX *lex = Lex;
      lex->alter_info.alter_list.push_back(new Alter_column(yyvsp[-2].lex_str.str, (Item *)0));
      lex->alter_info.flags |= ALTER_CHANGE_COLUMN_DEFAULT;
    }
    break;

    case 558:
#line 3544 "sql_yacc.yy"
    {
      LEX *lex = Lex;
      lex->select_lex.db = yyvsp[0].table->db.str;
      lex->name = yyvsp[0].table->table.str;
      if (check_table_name(yyvsp[0].table->table.str, yyvsp[0].table->table.length) ||
          yyvsp[0].table->db.str && check_db_name(yyvsp[0].table->db.str))
      {
        my_error(ER_WRONG_TABLE_NAME, MYF(0), yyvsp[0].table->table.str);
        YYABORT;
      }
      lex->alter_info.flags |= ALTER_RENAME;
    }
    break;

    case 559:
#line 3557 "sql_yacc.yy"
    {
      if (!yyvsp[-1].charset)
      {
        THD *thd = YYTHD;
        yyvsp[-1].charset = thd->variables.collation_database;
      }
      yyvsp[0].charset = yyvsp[0].charset ? yyvsp[0].charset : yyvsp[-1].charset;
      if (!my_charset_same(yyvsp[-1].charset, yyvsp[0].charset))
      {
        my_error(ER_COLLATION_CHARSET_MISMATCH, MYF(0), yyvsp[0].charset->name, yyvsp[-1].charset->csname);
        YYABORT;
      }
      LEX *lex = Lex;
      lex->create_info.table_charset = lex->create_info.default_table_charset = yyvsp[0].charset;
      lex->create_info.used_fields |= (HA_CREATE_USED_CHARSET | HA_CREATE_USED_DEFAULT_CHARSET);
      lex->alter_info.flags |= ALTER_CONVERT;
    }
    break;

    case 560:
#line 3578 "sql_yacc.yy"
    {
      LEX *lex = Lex;
      lex->alter_info.flags |= ALTER_OPTIONS;
    }
    break;

    case 561:
#line 3583 "sql_yacc.yy"
    {
      Lex->alter_info.flags |= ALTER_FORCE;
    }
    break;

    case 562:
#line 3587 "sql_yacc.yy"
    {
      LEX *lex = Lex;
      lex->alter_info.flags |= ALTER_ORDER;
    }
    break;

    case 563:
#line 3593 "sql_yacc.yy"
    {
    }
    break;

    case 564:
#line 3594 "sql_yacc.yy"
    {
    }
    break;

    case 565:
#line 3597 "sql_yacc.yy"
    {
      Lex->ignore = 0;
    }
    break;

    case 566:
#line 3598 "sql_yacc.yy"
    {
      Lex->ignore = 1;
    }
    break;

    case 567:
#line 3602 "sql_yacc.yy"
    {
      Lex->drop_mode = DROP_DEFAULT;
    }
    break;

    case 568:
#line 3603 "sql_yacc.yy"
    {
      Lex->drop_mode = DROP_RESTRICT;
    }
    break;

    case 569:
#line 3604 "sql_yacc.yy"
    {
      Lex->drop_mode = DROP_CASCADE;
    }
    break;

    case 570:
#line 3608 "sql_yacc.yy"
    {
    }
    break;

    case 571:
#line 3609 "sql_yacc.yy"
    {
      store_position_for_column(yyvsp[0].lex_str.str);
    }
    break;

    case 572:
#line 3610 "sql_yacc.yy"
    {
      store_position_for_column(first_keyword);
    }
    break;

    case 573:
#line 3613 "sql_yacc.yy"
    {
    }
    break;

    case 574:
#line 3614 "sql_yacc.yy"
    {
    }
    break;

    case 575:
#line 3615 "sql_yacc.yy"
    {
    }
    break;

    case 576:
#line 3616 "sql_yacc.yy"
    {
    }
    break;

    case 577:
#line 3624 "sql_yacc.yy"
    {
      LEX *lex = Lex;
      lex->sql_command = SQLCOM_SLAVE_START;
      lex->type = 0;
      /* We'll use mi structure for UNTIL options */
      bzero((char *)&lex->mi, sizeof(lex->mi));
      /* If you change this code don't forget to update SLAVE START too */
    }
    break;

    case 578:
#line 3633 "sql_yacc.yy"
    {
    }
    break;

    case 579:
#line 3635 "sql_yacc.yy"
    {
      LEX *lex = Lex;
      lex->sql_command = SQLCOM_SLAVE_STOP;
      lex->type = 0;
      /* If you change this code don't forget to update SLAVE STOP too */
    }
    break;

    case 580:
#line 3642 "sql_yacc.yy"
    {
      LEX *lex = Lex;
      lex->sql_command = SQLCOM_SLAVE_START;
      lex->type = 0;
      /* We'll use mi structure for UNTIL options */
      bzero((char *)&lex->mi, sizeof(lex->mi));
    }
    break;

    case 581:
#line 3650 "sql_yacc.yy"
    {
    }
    break;

    case 582:
#line 3652 "sql_yacc.yy"
    {
      LEX *lex = Lex;
      lex->sql_command = SQLCOM_SLAVE_STOP;
      lex->type = 0;
    }
    break;

    case 583:
#line 3662 "sql_yacc.yy"
    {
      LEX *lex = Lex;
      if (lex->sphead && lex->sphead->m_type != TYPE_ENUM_PROCEDURE)
      {
        my_error(ER_COMMIT_NOT_ALLOWED_IN_SF_OR_TRG, MYF(0));
        YYABORT;
      }
      lex->sql_command = SQLCOM_BEGIN;
      lex->start_transaction_opt = yyvsp[0].num;
    }
    break;

    case 584:
#line 3675 "sql_yacc.yy"
    {
      yyval.num = 0;
    }
    break;

    case 585:
#line 3677 "sql_yacc.yy"
    {
      yyval.num = MYSQL_START_TRANS_OPT_WITH_CONS_SNAPSHOT;
    }
    break;

    case 586:
#line 3683 "sql_yacc.yy"
    {
      Lex->slave_thd_opt = 0;
    }
    break;

    case 587:
#line 3685 "sql_yacc.yy"
    {
    }
    break;

    case 590:
#line 3694 "sql_yacc.yy"
    {
    }
    break;

    case 591:
#line 3695 "sql_yacc.yy"
    {
      Lex->slave_thd_opt |= SLAVE_SQL;
    }
    break;

    case 592:
#line 3696 "sql_yacc.yy"
    {
      Lex->slave_thd_opt |= SLAVE_IO;
    }
    break;

    case 593:
#line 3700 "sql_yacc.yy"
    {
    }
    break;

    case 594:
#line 3702 "sql_yacc.yy"
    {
      LEX *lex = Lex;
      if ((lex->mi.log_file_name || lex->mi.pos) && (lex->mi.relay_log_name || lex->mi.relay_log_pos) ||
          !((lex->mi.log_file_name && lex->mi.pos) || (lex->mi.relay_log_name && lex->mi.relay_log_pos)))
      {
        my_message(ER_BAD_SLAVE_UNTIL_COND, ER(ER_BAD_SLAVE_UNTIL_COND), MYF(0));
        YYABORT;
      }
    }
    break;

    case 597:
#line 3724 "sql_yacc.yy"
    {
      Lex->sql_command = SQLCOM_RESTORE_TABLE;
    }
    break;

    case 598:
#line 3728 "sql_yacc.yy"
    {
      Lex->backup_dir = yyvsp[0].lex_str.str;
    }
    break;

    case 599:
#line 3734 "sql_yacc.yy"
    {
      Lex->sql_command = SQLCOM_BACKUP_TABLE;
    }
    break;

    case 600:
#line 3738 "sql_yacc.yy"
    {
      Lex->backup_dir = yyvsp[0].lex_str.str;
    }
    break;

    case 601:
#line 3744 "sql_yacc.yy"
    {
      LEX *lex = Lex;
      lex->sql_command = SQLCOM_CHECKSUM;
    }
    break;

    case 602:
#line 3749 "sql_yacc.yy"
    {
    }
    break;

    case 603:
#line 3753 "sql_yacc.yy"
    {
      Lex->check_opt.flags = 0;
    }
    break;

    case 604:
#line 3754 "sql_yacc.yy"
    {
      Lex->check_opt.flags = T_QUICK;
    }
    break;

    case 605:
#line 3755 "sql_yacc.yy"
    {
      Lex->check_opt.flags = T_EXTEND;
    }
    break;

    case 606:
#line 3760 "sql_yacc.yy"
    {
      LEX *lex = Lex;
      lex->sql_command = SQLCOM_REPAIR;
      lex->no_write_to_binlog = yyvsp[-1].num;
      lex->check_opt.init();
    }
    break;

    case 607:
#line 3767 "sql_yacc.yy"
    {
    }
    break;

    case 608:
#line 3771 "sql_yacc.yy"
    {
      Lex->check_opt.flags = T_MEDIUM;
    }
    break;

    case 609:
#line 3772 "sql_yacc.yy"
    {
    }
    break;

    case 610:
#line 3775 "sql_yacc.yy"
    {
    }
    break;

    case 611:
#line 3776 "sql_yacc.yy"
    {
    }
    break;

    case 612:
#line 3779 "sql_yacc.yy"
    {
      Lex->check_opt.flags |= T_QUICK;
    }
    break;

    case 613:
#line 3780 "sql_yacc.yy"
    {
      Lex->check_opt.flags |= T_EXTEND;
    }
    break;

    case 614:
#line 3781 "sql_yacc.yy"
    {
      Lex->check_opt.sql_flags |= TT_USEFRM;
    }
    break;

    case 615:
#line 3785 "sql_yacc.yy"
    {
      LEX *lex = Lex;
      lex->sql_command = SQLCOM_ANALYZE;
      lex->no_write_to_binlog = yyvsp[-1].num;
      lex->check_opt.init();
    }
    break;

    case 616:
#line 3792 "sql_yacc.yy"
    {
    }
    break;

    case 617:
#line 3797 "sql_yacc.yy"
    {
      LEX *lex = Lex;

      if (lex->sphead)
      {
        my_error(ER_SP_BADSTATEMENT, MYF(0), "CHECK");
        YYABORT;
      }
      lex->sql_command = SQLCOM_CHECK;
      lex->check_opt.init();
    }
    break;

    case 618:
#line 3809 "sql_yacc.yy"
    {
    }
    break;

    case 619:
#line 3813 "sql_yacc.yy"
    {
      Lex->check_opt.flags = T_MEDIUM;
    }
    break;

    case 620:
#line 3814 "sql_yacc.yy"
    {
    }
    break;

    case 621:
#line 3817 "sql_yacc.yy"
    {
    }
    break;

    case 622:
#line 3818 "sql_yacc.yy"
    {
    }
    break;

    case 623:
#line 3821 "sql_yacc.yy"
    {
      Lex->check_opt.flags |= T_QUICK;
    }
    break;

    case 624:
#line 3822 "sql_yacc.yy"
    {
      Lex->check_opt.flags |= T_FAST;
    }
    break;

    case 625:
#line 3823 "sql_yacc.yy"
    {
      Lex->check_opt.flags |= T_MEDIUM;
    }
    break;

    case 626:
#line 3824 "sql_yacc.yy"
    {
      Lex->check_opt.flags |= T_EXTEND;
    }
    break;

    case 627:
#line 3825 "sql_yacc.yy"
    {
      Lex->check_opt.flags |= T_CHECK_ONLY_CHANGED;
    }
    break;

    case 628:
#line 3829 "sql_yacc.yy"
    {
      LEX *lex = Lex;
      if (lex->sphead)
      {
        my_error(ER_SP_BADSTATEMENT, MYF(0), "OPTIMIZE TABLE");
        YYABORT;
      }
      lex->sql_command = SQLCOM_OPTIMIZE;
      lex->no_write_to_binlog = yyvsp[-1].num;
      lex->check_opt.init();
    }
    break;

    case 629:
#line 3841 "sql_yacc.yy"
    {
    }
    break;

    case 630:
#line 3845 "sql_yacc.yy"
    {
      yyval.num = 0;
    }
    break;

    case 631:
#line 3846 "sql_yacc.yy"
    {
      yyval.num = 1;
    }
    break;

    case 632:
#line 3847 "sql_yacc.yy"
    {
      yyval.num = 1;
    }
    break;

    case 633:
#line 3852 "sql_yacc.yy"
    {
      LEX *lex = Lex;
      if (lex->sphead && lex->sphead->m_type != TYPE_ENUM_PROCEDURE)
      {
        my_error(ER_COMMIT_NOT_ALLOWED_IN_SF_OR_TRG, MYF(0));
        YYABORT;
      }
      lex->sql_command = SQLCOM_RENAME_TABLE;
    }
    break;

    case 634:
#line 3862 "sql_yacc.yy"
    {
    }
    break;

    case 635:
#line 3864 "sql_yacc.yy"
    {
      Lex->sql_command = SQLCOM_RENAME_USER;
    }
    break;

    case 636:
#line 3871 "sql_yacc.yy"
    {
      if (Lex->users_list.push_back(yyvsp[-2].lex_user) || Lex->users_list.push_back(yyvsp[0].lex_user))
        YYABORT;
    }
    break;

    case 637:
#line 3876 "sql_yacc.yy"
    {
      if (Lex->users_list.push_back(yyvsp[-2].lex_user) || Lex->users_list.push_back(yyvsp[0].lex_user))
        YYABORT;
    }
    break;

    case 640:
#line 3888 "sql_yacc.yy"
    {
      LEX *lex = Lex;
      SELECT_LEX *sl = lex->current_select;
      if (!sl->add_table_to_list(lex->thd, yyvsp[-2].table, NULL, TL_OPTION_UPDATING, TL_IGNORE) ||
          !sl->add_table_to_list(lex->thd, yyvsp[0].table, NULL, TL_OPTION_UPDATING, TL_IGNORE))
        YYABORT;
    }
    break;

    case 641:
#line 3900 "sql_yacc.yy"
    {
      LEX *lex = Lex;
      lex->sql_command = SQLCOM_ASSIGN_TO_KEYCACHE;
      lex->ident = yyvsp[0].lex_str;
    }
    break;

    case 644:
#line 3913 "sql_yacc.yy"
    {
      LEX *lex = Lex;
      SELECT_LEX *sel = &lex->select_lex;
      if (!sel->add_table_to_list(lex->thd, yyvsp[-1].table, NULL, 0, TL_READ, sel->get_use_index(), (List<String> *)0))
        YYABORT;
    }
    break;

    case 645:
#line 3925 "sql_yacc.yy"
    {
      yyval.lex_str = yyvsp[0].lex_str;
    }
    break;

    case 646:
#line 3926 "sql_yacc.yy"
    {
      yyval.lex_str = default_key_cache_base;
    }
    break;

    case 647:
#line 3931 "sql_yacc.yy"
    {
      LEX *lex = Lex;
      lex->sql_command = SQLCOM_PRELOAD_KEYS;
    }
    break;

    case 648:
#line 3936 "sql_yacc.yy"
    {
    }
    break;

    case 651:
#line 3945 "sql_yacc.yy"
    {
      LEX *lex = Lex;
      SELECT_LEX *sel = &lex->select_lex;
      if (!sel->add_table_to_list(lex->thd, yyvsp[-2].table, NULL, yyvsp[0].num, TL_READ, sel->get_use_index(),
                                  (List<String> *)0))
        YYABORT;
    }
    break;

    case 652:
#line 3957 "sql_yacc.yy"
    {
      Select->interval_list.empty();
    }
    break;

    case 653:
#line 3959 "sql_yacc.yy"
    {
      LEX *lex = Lex;
      SELECT_LEX *sel = &lex->select_lex;
      sel->use_index = sel->interval_list;
    }
    break;

    case 654:
#line 3967 "sql_yacc.yy"
    {
      Lex->select_lex.use_index_ptr = 0;
    }
    break;

    case 655:
#line 3969 "sql_yacc.yy"
    {
      SELECT_LEX *sel = &Lex->select_lex;
      sel->use_index_ptr = &sel->use_index;
    }
    break;

    case 656:
#line 3977 "sql_yacc.yy"
    {
      yyval.num = 0;
    }
    break;

    case 657:
#line 3978 "sql_yacc.yy"
    {
      yyval.num = TL_OPTION_IGNORE_LEAVES;
    }
    break;

    case 658:
#line 3988 "sql_yacc.yy"
    {
      LEX *lex = Lex;
      lex->sql_command = SQLCOM_SELECT;
    }
    break;

    case 661:
#line 4002 "sql_yacc.yy"
    {
      Lex->create_view_select_start = yyvsp[-1].simple_string;
    }
    break;

    case 662:
#line 4007 "sql_yacc.yy"
    {
      Lex->create_view_select_start = yyvsp[-3].simple_string;
    }
    break;

    case 663:
#line 4014 "sql_yacc.yy"
    {
      LEX *lex = Lex;
      SELECT_LEX *sel = lex->current_select;
      if (sel->set_braces(1))
      {
        yyerror(ER(ER_SYNTAX_ERROR));
        YYABORT;
      }
      if (sel->linkage == UNION_TYPE && !sel->master_unit()->first_select()->braces)
      {
        yyerror(ER(ER_SYNTAX_ERROR));
        YYABORT;
      }
      /* select in braces, can't contain global parameters */
      if (sel->master_unit()->fake_select_lex)
        sel->master_unit()->global_parameters = sel->master_unit()->fake_select_lex;
    }
    break;

    case 665:
#line 4037 "sql_yacc.yy"
    {
      LEX *lex = Lex;
      SELECT_LEX *sel = lex->current_select;
      if (lex->current_select->set_braces(0))
      {
        yyerror(ER(ER_SYNTAX_ERROR));
        YYABORT;
      }
      if (sel->linkage == UNION_TYPE && sel->master_unit()->first_select()->braces)
      {
        yyerror(ER(ER_SYNTAX_ERROR));
        YYABORT;
      }
    }
    break;

    case 667:
#line 4056 "sql_yacc.yy"
    {
      LEX *lex = Lex;
      SELECT_LEX *sel = lex->current_select;
      if (sel->linkage != UNION_TYPE)
        mysql_init_select(lex);
      lex->current_select->parsing_place = SELECT_LIST;
    }
    break;

    case 668:
#line 4064 "sql_yacc.yy"
    {
      Select->parsing_place = NO_MATTER;
    }
    break;

    case 670:
#line 4070 "sql_yacc.yy"
    {
    }
    break;

    case 678:
#line 4089 "sql_yacc.yy"
    {
      if (test_all_bits(Select->options, SELECT_ALL | SELECT_DISTINCT))
      {
        my_error(ER_WRONG_USAGE, MYF(0), "ALL", "DISTINCT");
        YYABORT;
      }
    }
    break;

    case 681:
#line 4103 "sql_yacc.yy"
    {
      Select->options |= SELECT_STRAIGHT_JOIN;
    }
    break;

    case 682:
#line 4105 "sql_yacc.yy"
    {
      if (check_simple_select())
        YYABORT;
      Lex->lock_option = TL_READ_HIGH_PRIORITY;
    }
    break;

    case 683:
#line 4110 "sql_yacc.yy"
    {
      Select->options |= SELECT_DISTINCT;
    }
    break;

    case 684:
#line 4111 "sql_yacc.yy"
    {
      Select->options |= SELECT_SMALL_RESULT;
    }
    break;

    case 685:
#line 4112 "sql_yacc.yy"
    {
      Select->options |= SELECT_BIG_RESULT;
    }
    break;

    case 686:
#line 4114 "sql_yacc.yy"
    {
      if (check_simple_select())
        YYABORT;
      Select->options |= OPTION_BUFFER_RESULT;
    }
    break;

    case 687:
#line 4120 "sql_yacc.yy"
    {
      if (check_simple_select())
        YYABORT;
      Select->options |= OPTION_FOUND_ROWS;
    }
    break;

    case 688:
#line 4125 "sql_yacc.yy"
    {
      Lex->safe_to_cache_query = 0;
    }
    break;

    case 689:
#line 4127 "sql_yacc.yy"
    {
      Lex->select_lex.options |= OPTION_TO_QUERY_CACHE;
    }
    break;

    case 690:
#line 4130 "sql_yacc.yy"
    {
      Select->options |= SELECT_ALL;
    }
    break;

    case 692:
#line 4136 "sql_yacc.yy"
    {
      LEX *lex = Lex;
      lex->current_select->set_lock_for_tables(TL_WRITE);
      lex->safe_to_cache_query = 0;
    }
    break;

    case 693:
#line 4142 "sql_yacc.yy"
    {
      LEX *lex = Lex;
      lex->current_select->set_lock_for_tables(TL_READ_WITH_SHARED_LOCKS);
      lex->safe_to_cache_query = 0;
    }
    break;

    case 696:
#line 4154 "sql_yacc.yy"
    {
      THD *thd = YYTHD;
      if (add_item_to_list(thd, new Item_field(&thd->lex->current_select->context, NULL, NULL, "*")))
        YYABORT;
      (thd->lex->current_select->with_wild)++;
    }
    break;

    case 697:
#line 4167 "sql_yacc.yy"
    {
      if (add_item_to_list(YYTHD, yyvsp[-2].item))
        YYABORT;
      if (yyvsp[0].lex_str.str)
      {
        yyvsp[-2].item->set_name(yyvsp[0].lex_str.str, yyvsp[0].lex_str.length, system_charset_info);
        yyvsp[-2].item->is_autogenerated_name = FALSE;
      }
      else if (!yyvsp[-2].item->name)
      {
        char *str = yyvsp[-3].simple_string;
        if (str[-1] == '`')
          str--;
        yyvsp[-2].item->set_name(str, (uint)(yyvsp[-1].simple_string - str), YYTHD->charset());
      }
    }
    break;

    case 698:
#line 4184 "sql_yacc.yy"
    {
      yyval.simple_string = (char *)Lex->tok_start;
    }
    break;

    case 699:
#line 4187 "sql_yacc.yy"
    {
      yyval.simple_string = (char *)Lex->tok_end;
    }
    break;

    case 700:
#line 4190 "sql_yacc.yy"
    {
      yyval.item = yyvsp[0].item;
    }
    break;

    case 701:
#line 4191 "sql_yacc.yy"
    {
      yyval.item = yyvsp[0].item;
    }
    break;

    case 702:
#line 4194 "sql_yacc.yy"
    {
      yyval.lex_str = null_lex_str;
    }
    break;

    case 703:
#line 4195 "sql_yacc.yy"
    {
      yyval.lex_str = yyvsp[0].lex_str;
    }
    break;

    case 704:
#line 4196 "sql_yacc.yy"
    {
      yyval.lex_str = yyvsp[0].lex_str;
    }
    break;

    case 705:
#line 4197 "sql_yacc.yy"
    {
      yyval.lex_str = yyvsp[0].lex_str;
    }
    break;

    case 706:
#line 4198 "sql_yacc.yy"
    {
      yyval.lex_str = yyvsp[0].lex_str;
    }
    break;

    case 707:
#line 4202 "sql_yacc.yy"
    {
    }
    break;

    case 708:
#line 4203 "sql_yacc.yy"
    {
    }
    break;

    case 709:
#line 4207 "sql_yacc.yy"
    {
      Select->expr_list.push_front(new List<Item>);
    }
    break;

    case 710:
#line 4209 "sql_yacc.yy"
    {
      List<Item> *list = Select->expr_list.pop();
      if (list->elements)
      {
        list->push_front(yyvsp[-2].item);
        yyval.item = new Item_cond_or(*list);
        /* optimize construction of logical OR to reduce
           amount of objects for complex expressions */
      }
      else
        yyval.item = yyvsp[-2].item;
      delete list;
    }
    break;

    case 712:
#line 4227 "sql_yacc.yy"
    {
      Select->expr_list.head()->push_back(yyvsp[0].item);
    }
    break;

    case 713:
#line 4231 "sql_yacc.yy"
    {
      yyval.item = new Item_cond_xor(yyvsp[-2].item, yyvsp[0].item);
    }
    break;

    case 714:
#line 4232 "sql_yacc.yy"
    {
      Select->expr_list.push_front(new List<Item>);
    }
    break;

    case 715:
#line 4234 "sql_yacc.yy"
    {
      List<Item> *list = Select->expr_list.pop();
      if (list->elements)
      {
        list->push_front(yyvsp[-2].item);
        yyval.item = new Item_cond_and(*list);
        /* optimize construction of logical AND to reduce
           amount of objects for complex expressions */
      }
      else
        yyval.item = yyvsp[-2].item;
      delete list;
    }
    break;

    case 717:
#line 4252 "sql_yacc.yy"
    {
      Select->expr_list.head()->push_back(yyvsp[0].item);
    }
    break;

    case 718:
#line 4256 "sql_yacc.yy"
    {
      yyval.item = negate_expression(YYTHD, yyvsp[0].item);
    }
    break;

    case 720:
#line 4260 "sql_yacc.yy"
    {
      yyval.item = is_truth_value(yyvsp[-2].item, 1, 0);
    }
    break;

    case 721:
#line 4261 "sql_yacc.yy"
    {
      yyval.item = is_truth_value(yyvsp[-3].item, 0, 0);
    }
    break;

    case 722:
#line 4262 "sql_yacc.yy"
    {
      yyval.item = is_truth_value(yyvsp[-2].item, 0, 1);
    }
    break;

    case 723:
#line 4263 "sql_yacc.yy"
    {
      yyval.item = is_truth_value(yyvsp[-3].item, 1, 1);
    }
    break;

    case 724:
#line 4264 "sql_yacc.yy"
    {
      yyval.item = new Item_func_isnull(yyvsp[-2].item);
    }
    break;

    case 725:
#line 4265 "sql_yacc.yy"
    {
      yyval.item = new Item_func_isnotnull(yyvsp[-3].item);
    }
    break;

    case 727:
#line 4269 "sql_yacc.yy"
    {
      yyval.item = new Item_func_isnull(yyvsp[-2].item);
    }
    break;

    case 728:
#line 4270 "sql_yacc.yy"
    {
      yyval.item = new Item_func_isnotnull(yyvsp[-3].item);
    }
    break;

    case 729:
#line 4271 "sql_yacc.yy"
    {
      yyval.item = new Item_func_equal(yyvsp[-2].item, yyvsp[0].item);
    }
    break;

    case 730:
#line 4273 "sql_yacc.yy"
    {
      yyval.item = (*yyvsp[-1].boolfunc2creator)(0)->create(yyvsp[-2].item, yyvsp[0].item);
    }
    break;

    case 731:
#line 4275 "sql_yacc.yy"
    {
      yyval.item =
          all_any_subquery_creator(yyvsp[-3].item, yyvsp[-2].boolfunc2creator, yyvsp[-1].num, yyvsp[0].select_lex);
    }
    break;

    case 733:
#line 4280 "sql_yacc.yy"
    {
      if (yyvsp[-1].item_list->elements == 1)
        yyval.item = new Item_func_eq(yyvsp[-4].item, yyvsp[-1].item_list->head());
      else
      {
        yyvsp[-1].item_list->push_front(yyvsp[-4].item);
        yyval.item = new Item_func_in(*yyvsp[-1].item_list);
      }
    }
    break;

    case 734:
#line 4290 "sql_yacc.yy"
    {
      if (yyvsp[-1].item_list->elements == 1)
        yyval.item = new Item_func_ne(yyvsp[-5].item, yyvsp[-1].item_list->head());
      else
      {
        yyvsp[-1].item_list->push_front(yyvsp[-5].item);
        Item_func_in *item = new Item_func_in(*yyvsp[-1].item_list);
        item->negate();
        yyval.item = item;
      }
    }
    break;

    case 735:
#line 4302 "sql_yacc.yy"
    {
      yyval.item = new Item_in_subselect(yyvsp[-2].item, yyvsp[0].select_lex);
    }
    break;

    case 736:
#line 4304 "sql_yacc.yy"
    {
      yyval.item = negate_expression(YYTHD, new Item_in_subselect(yyvsp[-3].item, yyvsp[0].select_lex));
    }
    break;

    case 737:
#line 4306 "sql_yacc.yy"
    {
      yyval.item = new Item_func_between(yyvsp[-4].item, yyvsp[-2].item, yyvsp[0].item);
    }
    break;

    case 738:
#line 4308 "sql_yacc.yy"
    {
      Item_func_between *item = new Item_func_between(yyvsp[-5].item, yyvsp[-2].item, yyvsp[0].item);
      item->negate();
      yyval.item = item;
    }
    break;

    case 739:
#line 4314 "sql_yacc.yy"
    {
      yyval.item = new Item_func_eq(new Item_func_soundex(yyvsp[-3].item), new Item_func_soundex(yyvsp[0].item));
    }
    break;

    case 740:
#line 4317 "sql_yacc.yy"
    {
      yyval.item = new Item_func_like(yyvsp[-3].item, yyvsp[-1].item, yyvsp[0].item);
    }
    break;

    case 741:
#line 4319 "sql_yacc.yy"
    {
      yyval.item = new Item_func_not(new Item_func_like(yyvsp[-4].item, yyvsp[-1].item, yyvsp[0].item));
    }
    break;

    case 742:
#line 4320 "sql_yacc.yy"
    {
      yyval.item = new Item_func_regex(yyvsp[-2].item, yyvsp[0].item);
    }
    break;

    case 743:
#line 4322 "sql_yacc.yy"
    {
      yyval.item = negate_expression(YYTHD, new Item_func_regex(yyvsp[-3].item, yyvsp[0].item));
    }
    break;

    case 745:
#line 4326 "sql_yacc.yy"
    {
      yyval.item = new Item_func_bit_or(yyvsp[-2].item, yyvsp[0].item);
    }
    break;

    case 747:
#line 4330 "sql_yacc.yy"
    {
      yyval.item = new Item_func_bit_and(yyvsp[-2].item, yyvsp[0].item);
    }
    break;

    case 749:
#line 4335 "sql_yacc.yy"
    {
      yyval.item = new Item_func_shift_left(yyvsp[-2].item, yyvsp[0].item);
    }
    break;

    case 750:
#line 4337 "sql_yacc.yy"
    {
      yyval.item = new Item_func_shift_right(yyvsp[-2].item, yyvsp[0].item);
    }
    break;

    case 752:
#line 4341 "sql_yacc.yy"
    {
      yyval.item = new Item_func_plus(yyvsp[-2].item, yyvsp[0].item);
    }
    break;

    case 753:
#line 4342 "sql_yacc.yy"
    {
      yyval.item = new Item_func_minus(yyvsp[-2].item, yyvsp[0].item);
    }
    break;

    case 754:
#line 4344 "sql_yacc.yy"
    {
      yyval.item = new Item_date_add_interval(yyvsp[-3].item, yyvsp[-1].item, yyvsp[0].interval, 0);
    }
    break;

    case 755:
#line 4346 "sql_yacc.yy"
    {
      yyval.item = new Item_date_add_interval(yyvsp[-3].item, yyvsp[-1].item, yyvsp[0].interval, 1);
    }
    break;

    case 757:
#line 4350 "sql_yacc.yy"
    {
      yyval.item = new Item_func_mul(yyvsp[-2].item, yyvsp[0].item);
    }
    break;

    case 758:
#line 4351 "sql_yacc.yy"
    {
      yyval.item = new Item_func_div(yyvsp[-2].item, yyvsp[0].item);
    }
    break;

    case 759:
#line 4352 "sql_yacc.yy"
    {
      yyval.item = new Item_func_mod(yyvsp[-2].item, yyvsp[0].item);
    }
    break;

    case 760:
#line 4353 "sql_yacc.yy"
    {
      yyval.item = new Item_func_int_div(yyvsp[-2].item, yyvsp[0].item);
    }
    break;

    case 761:
#line 4354 "sql_yacc.yy"
    {
      yyval.item = new Item_func_mod(yyvsp[-2].item, yyvsp[0].item);
    }
    break;

    case 763:
#line 4358 "sql_yacc.yy"
    {
      yyval.item = new Item_func_bit_xor(yyvsp[-2].item, yyvsp[0].item);
    }
    break;

    case 773:
#line 4366 "sql_yacc.yy"
    {
      yyval.boolfunc2creator = &comp_eq_creator;
    }
    break;

    case 774:
#line 4367 "sql_yacc.yy"
    {
      yyval.boolfunc2creator = &comp_ge_creator;
    }
    break;

    case 775:
#line 4368 "sql_yacc.yy"
    {
      yyval.boolfunc2creator = &comp_gt_creator;
    }
    break;

    case 776:
#line 4369 "sql_yacc.yy"
    {
      yyval.boolfunc2creator = &comp_le_creator;
    }
    break;

    case 777:
#line 4370 "sql_yacc.yy"
    {
      yyval.boolfunc2creator = &comp_lt_creator;
    }
    break;

    case 778:
#line 4371 "sql_yacc.yy"
    {
      yyval.boolfunc2creator = &comp_ne_creator;
    }
    break;

    case 779:
#line 4374 "sql_yacc.yy"
    {
      yyval.num = 1;
    }
    break;

    case 780:
#line 4375 "sql_yacc.yy"
    {
      yyval.num = 0;
    }
    break;

    case 781:
#line 4379 "sql_yacc.yy"
    {
      yyval.item = yyvsp[0].item;
    }
    break;

    case 783:
#line 4385 "sql_yacc.yy"
    {
      yyval.item = new Item_func_set_collation(
          yyvsp[-2].item, new Item_string(yyvsp[0].lex_str.str, yyvsp[0].lex_str.length, YYTHD->charset()));
    }
    break;

    case 786:
#line 4394 "sql_yacc.yy"
    {
      yyval.item = new Item_func_set_user_var(yyvsp[-2].lex_str, yyvsp[0].item);
      LEX *lex = Lex;
      lex->uncacheable(UNCACHEABLE_RAND);
      lex->variables_used = 1;
    }
    break;

    case 787:
#line 4401 "sql_yacc.yy"
    {
      yyval.item = new Item_func_get_user_var(yyvsp[0].lex_str);
      LEX *lex = Lex;
      lex->uncacheable(UNCACHEABLE_RAND);
      lex->variables_used = 1;
    }
    break;

    case 788:
#line 4408 "sql_yacc.yy"
    {
      if (yyvsp[-1].lex_str.str && yyvsp[0].lex_str.str && check_reserved_words(&yyvsp[-1].lex_str))
      {
        yyerror(ER(ER_SYNTAX_ERROR));
        YYABORT;
      }
      if (!(yyval.item = get_system_var(YYTHD, yyvsp[-2].var_type, yyvsp[-1].lex_str, yyvsp[0].lex_str)))
        YYABORT;
      Lex->variables_used = 1;
    }
    break;

    case 790:
#line 4421 "sql_yacc.yy"
    {
      yyval.item = new Item_func_concat(yyvsp[-2].item, yyvsp[0].item);
    }
    break;

    case 791:
#line 4422 "sql_yacc.yy"
    {
      yyval.item = yyvsp[0].item;
    }
    break;

    case 792:
#line 4423 "sql_yacc.yy"
    {
      yyval.item = new Item_func_neg(yyvsp[0].item);
    }
    break;

    case 793:
#line 4424 "sql_yacc.yy"
    {
      yyval.item = new Item_func_bit_neg(yyvsp[0].item);
    }
    break;

    case 794:
#line 4425 "sql_yacc.yy"
    {
      yyval.item = negate_expression(YYTHD, yyvsp[0].item);
    }
    break;

    case 795:
#line 4426 "sql_yacc.yy"
    {
      yyval.item = yyvsp[-1].item;
    }
    break;

    case 796:
#line 4428 "sql_yacc.yy"
    {
      yyvsp[-1].item_list->push_front(yyvsp[-3].item);
      yyval.item = new Item_row(*yyvsp[-1].item_list);
    }
    break;

    case 797:
#line 4433 "sql_yacc.yy"
    {
      yyvsp[-1].item_list->push_front(yyvsp[-3].item);
      yyval.item = new Item_row(*yyvsp[-1].item_list);
    }
    break;

    case 798:
#line 4437 "sql_yacc.yy"
    {
      yyval.item = yyvsp[0].item;
    }
    break;

    case 799:
#line 4438 "sql_yacc.yy"
    {
      yyval.item = yyvsp[0].item;
    }
    break;

    case 800:
#line 4439 "sql_yacc.yy"
    {
      yyval.item = yyvsp[-1].item;
    }
    break;

    case 801:
#line 4441 "sql_yacc.yy"
    {
      yyvsp[-5].item_list->push_front(yyvsp[-2].item);
      Select->add_ftfunc_to_list(
          (Item_func_match *)(yyval.item = new Item_func_match(*yyvsp[-5].item_list, yyvsp[-1].num)));
    }
    break;

    case 802:
#line 4444 "sql_yacc.yy"
    {
      yyval.item = new Item_func_ascii(yyvsp[-1].item);
    }
    break;

    case 803:
#line 4446 "sql_yacc.yy"
    {
      yyval.item = create_func_cast(yyvsp[0].item, ITEM_CAST_CHAR, -1, 0, &my_charset_bin);
    }
    break;

    case 804:
#line 4450 "sql_yacc.yy"
    {
      LEX *lex = Lex;
      yyval.item = create_func_cast(yyvsp[-3].item, yyvsp[-1].cast_type, lex->length ? atoi(lex->length) : -1,
                                    lex->dec ? atoi(lex->dec) : 0, lex->charset);
    }
    break;

    case 805:
#line 4458 "sql_yacc.yy"
    {
      yyval.item = new Item_func_case(*yyvsp[-2].item_list, yyvsp[-4].item, yyvsp[-1].item);
    }
    break;

    case 806:
#line 4460 "sql_yacc.yy"
    {
      yyval.item = create_func_cast(yyvsp[-3].item, yyvsp[-1].cast_type, Lex->length ? atoi(Lex->length) : -1,
                                    Lex->dec ? atoi(Lex->dec) : 0, Lex->charset);
    }
    break;

    case 807:
#line 4467 "sql_yacc.yy"
    {
      yyval.item = new Item_func_conv_charset(yyvsp[-3].item, yyvsp[-1].charset);
    }
    break;

    case 808:
#line 4469 "sql_yacc.yy"
    {
      if (yyvsp[-1].item->is_splocal())
      {
        LEX_STRING *name;
        Item_splocal *il = static_cast<Item_splocal *>(yyvsp[-1].item);

        name = il->my_name(NULL);
        my_error(ER_WRONG_COLUMN_NAME, MYF(0), name->str);
        YYABORT;
      }
      yyval.item = new Item_default_value(Lex->current_context(), yyvsp[-1].item);
    }
    break;

    case 809:
#line 4482 "sql_yacc.yy"
    {
      yyval.item = new Item_insert_value(Lex->current_context(), yyvsp[-1].item);
    }
    break;

    case 810:
#line 4484 "sql_yacc.yy"
    {
      if (!yyvsp[-2].symbol.symbol->create_func)
      {
        my_error(ER_FEATURE_DISABLED, MYF(0), yyvsp[-2].symbol.symbol->group->name,
                 yyvsp[-2].symbol.symbol->group->needed_define);
        YYABORT;
      }
      yyval.item = ((Item * (*)(void))(yyvsp[-2].symbol.symbol->create_func))();
    }
    break;

    case 811:
#line 4495 "sql_yacc.yy"
    {
      if (!yyvsp[-3].symbol.symbol->create_func)
      {
        my_error(ER_FEATURE_DISABLED, MYF(0), yyvsp[-3].symbol.symbol->group->name,
                 yyvsp[-3].symbol.symbol->group->needed_define);
        YYABORT;
      }
      yyval.item = ((Item * (*)(Item *))(yyvsp[-3].symbol.symbol->create_func))(yyvsp[-1].item);
    }
    break;

    case 812:
#line 4506 "sql_yacc.yy"
    {
      if (!yyvsp[-5].symbol.symbol->create_func)
      {
        my_error(ER_FEATURE_DISABLED, MYF(0), yyvsp[-5].symbol.symbol->group->name,
                 yyvsp[-5].symbol.symbol->group->needed_define);
        YYABORT;
      }
      yyval.item = ((Item * (*)(Item *, Item *))(yyvsp[-5].symbol.symbol->create_func))(yyvsp[-3].item, yyvsp[-1].item);
    }
    break;

    case 813:
#line 4517 "sql_yacc.yy"
    {
      if (!yyvsp[-7].symbol.symbol->create_func)
      {
        my_error(ER_FEATURE_DISABLED, MYF(0), yyvsp[-7].symbol.symbol->group->name,
                 yyvsp[-7].symbol.symbol->group->needed_define);
        YYABORT;
      }
      yyval.item = ((Item * (*)(Item *, Item *, Item *))(yyvsp[-7].symbol.symbol->create_func))(
          yyvsp[-5].item, yyvsp[-3].item, yyvsp[-1].item);
    }
    break;

    case 814:
#line 4528 "sql_yacc.yy"
    {
      yyval.item = new Item_date_add_interval(yyvsp[-3].item, yyvsp[-1].item, INTERVAL_DAY, 0);
    }
    break;

    case 815:
#line 4530 "sql_yacc.yy"
    {
      yyval.item = new Item_date_add_interval(yyvsp[-5].item, yyvsp[-2].item, yyvsp[-1].interval, 0);
    }
    break;

    case 816:
#line 4532 "sql_yacc.yy"
    {
      yyval.item = new Item_func_repeat(yyvsp[-3].item, yyvsp[-1].item);
    }
    break;

    case 817:
#line 4534 "sql_yacc.yy"
    {
      yyval.item = new Item_func_atan(yyvsp[-1].item);
    }
    break;

    case 818:
#line 4536 "sql_yacc.yy"
    {
      yyval.item = new Item_func_atan(yyvsp[-3].item, yyvsp[-1].item);
    }
    break;

    case 819:
#line 4538 "sql_yacc.yy"
    {
      yyval.item = new Item_func_char(*yyvsp[-1].item_list);
    }
    break;

    case 820:
#line 4540 "sql_yacc.yy"
    {
      yyval.item = new Item_func_char(*yyvsp[-3].item_list, yyvsp[-1].charset);
    }
    break;

    case 821:
#line 4542 "sql_yacc.yy"
    {
      yyval.item = new Item_func_charset(yyvsp[-1].item);
    }
    break;

    case 822:
#line 4544 "sql_yacc.yy"
    {
      yyval.item = new Item_func_coalesce(*yyvsp[-1].item_list);
    }
    break;

    case 823:
#line 4546 "sql_yacc.yy"
    {
      yyval.item = new Item_func_collation(yyvsp[-1].item);
    }
    break;

    case 824:
#line 4548 "sql_yacc.yy"
    {
      yyval.item = new Item_func_concat(*yyvsp[-1].item_list);
    }
    break;

    case 825:
#line 4550 "sql_yacc.yy"
    {
      yyvsp[-1].item_list->push_front(yyvsp[-3].item);
      yyval.item = new Item_func_concat_ws(*yyvsp[-1].item_list);
    }
    break;

    case 826:
#line 4552 "sql_yacc.yy"
    {
      if (Lex->add_time_zone_tables_to_query_tables(YYTHD))
        YYABORT;
      yyval.item = new Item_func_convert_tz(yyvsp[-5].item, yyvsp[-3].item, yyvsp[-1].item);
    }
    break;

    case 827:
#line 4558 "sql_yacc.yy"
    {
      yyval.item = new Item_func_curdate_local();
      Lex->safe_to_cache_query = 0;
    }
    break;

    case 828:
#line 4560 "sql_yacc.yy"
    {
      yyval.item = new Item_func_curtime_local();
      Lex->safe_to_cache_query = 0;
    }
    break;

    case 829:
#line 4562 "sql_yacc.yy"
    {
      yyval.item = new Item_func_curtime_local(yyvsp[-1].item);
      Lex->safe_to_cache_query = 0;
    }
    break;

    case 830:
#line 4567 "sql_yacc.yy"
    {
      yyval.item = create_func_current_user();
    }
    break;

    case 831:
#line 4569 "sql_yacc.yy"
    {
      yyval.item = new Item_date_add_interval(yyvsp[-4].item, yyvsp[-2].item, yyvsp[-1].interval, 0);
    }
    break;

    case 832:
#line 4571 "sql_yacc.yy"
    {
      yyval.item = new Item_date_add_interval(yyvsp[-4].item, yyvsp[-2].item, yyvsp[-1].interval, 1);
    }
    break;

    case 833:
#line 4573 "sql_yacc.yy"
    {
      yyval.item = new Item_func_database();
      Lex->safe_to_cache_query = 0;
    }
    break;

    case 834:
#line 4578 "sql_yacc.yy"
    {
      yyval.item = new Item_date_typecast(yyvsp[-1].item);
    }
    break;

    case 835:
#line 4580 "sql_yacc.yy"
    {
      yyval.item = new Item_func_dayofmonth(yyvsp[-1].item);
    }
    break;

    case 836:
#line 4582 "sql_yacc.yy"
    {
      yyvsp[-1].item_list->push_front(yyvsp[-3].item);
      yyval.item = new Item_func_elt(*yyvsp[-1].item_list);
    }
    break;

    case 837:
#line 4584 "sql_yacc.yy"
    {
      yyval.item = new Item_func_make_set(yyvsp[-3].item, *yyvsp[-1].item_list);
    }
    break;

    case 838:
#line 4586 "sql_yacc.yy"
    {
      yyval.item = new Item_func_encrypt(yyvsp[-1].item);
      Lex->uncacheable(UNCACHEABLE_RAND);
    }
    break;

    case 839:
#line 4590 "sql_yacc.yy"
    {
      yyval.item = new Item_func_encrypt(yyvsp[-3].item, yyvsp[-1].item);
    }
    break;

    case 840:
#line 4592 "sql_yacc.yy"
    {
      yyval.item = new Item_func_decode(yyvsp[-3].item, yyvsp[-1].lex_str.str);
    }
    break;

    case 841:
#line 4594 "sql_yacc.yy"
    {
      yyval.item = new Item_func_encode(yyvsp[-3].item, yyvsp[-1].lex_str.str);
    }
    break;

    case 842:
#line 4596 "sql_yacc.yy"
    {
      yyval.item = new Item_func_des_decrypt(yyvsp[-1].item);
    }
    break;

    case 843:
#line 4598 "sql_yacc.yy"
    {
      yyval.item = new Item_func_des_decrypt(yyvsp[-3].item, yyvsp[-1].item);
    }
    break;

    case 844:
#line 4600 "sql_yacc.yy"
    {
      yyval.item = new Item_func_des_encrypt(yyvsp[-1].item);
    }
    break;

    case 845:
#line 4602 "sql_yacc.yy"
    {
      yyval.item = new Item_func_des_encrypt(yyvsp[-3].item, yyvsp[-1].item);
    }
    break;

    case 846:
#line 4604 "sql_yacc.yy"
    {
      yyval.item = new Item_func_export_set(yyvsp[-5].item, yyvsp[-3].item, yyvsp[-1].item);
    }
    break;

    case 847:
#line 4606 "sql_yacc.yy"
    {
      yyval.item = new Item_func_export_set(yyvsp[-7].item, yyvsp[-5].item, yyvsp[-3].item, yyvsp[-1].item);
    }
    break;

    case 848:
#line 4608 "sql_yacc.yy"
    {
      yyval.item =
          new Item_func_export_set(yyvsp[-9].item, yyvsp[-7].item, yyvsp[-5].item, yyvsp[-3].item, yyvsp[-1].item);
    }
    break;

    case 849:
#line 4610 "sql_yacc.yy"
    {
      yyval.item = new Item_func_format(yyvsp[-3].item, atoi(yyvsp[-1].lex_str.str));
    }
    break;

    case 850:
#line 4612 "sql_yacc.yy"
    {
      yyval.item = new Item_func_from_unixtime(yyvsp[-1].item);
    }
    break;

    case 851:
#line 4614 "sql_yacc.yy"
    {
      yyval.item = new Item_func_date_format(new Item_func_from_unixtime(yyvsp[-3].item), yyvsp[-1].item, 0);
    }
    break;

    case 852:
#line 4618 "sql_yacc.yy"
    {
      yyvsp[-1].item_list->push_front(yyvsp[-3].item);
      yyval.item = new Item_func_field(*yyvsp[-1].item_list);
    }
    break;

    case 853:
#line 4620 "sql_yacc.yy"
    {
#ifdef HAVE_SPATIAL
      yyval.item = yyvsp[0].item;
#else
      my_error(ER_FEATURE_DISABLED, MYF(0), sym_group_geom.name, sym_group_geom.needed_define);
      YYABORT;
#endif
    }
    break;

    case 854:
#line 4630 "sql_yacc.yy"
    {
      yyval.item = new Item_func_get_format(yyvsp[-3].date_time_type, yyvsp[-1].item);
    }
    break;

    case 855:
#line 4632 "sql_yacc.yy"
    {
      yyval.item = new Item_func_hour(yyvsp[-1].item);
    }
    break;

    case 856:
#line 4634 "sql_yacc.yy"
    {
      yyval.item = new Item_func_if(yyvsp[-5].item, yyvsp[-3].item, yyvsp[-1].item);
    }
    break;

    case 857:
#line 4636 "sql_yacc.yy"
    {
      yyval.item = new Item_func_insert(yyvsp[-7].item, yyvsp[-5].item, yyvsp[-3].item, yyvsp[-1].item);
    }
    break;

    case 858:
#line 4639 "sql_yacc.yy"
    {
      yyval.item = new Item_date_add_interval(yyvsp[0].item, yyvsp[-3].item, yyvsp[-2].interval, 0);
    }
    break;

    case 859:
#line 4641 "sql_yacc.yy"
    {
      if (yyvsp[0].item->type() != Item::ROW_ITEM)
      {
        yyerror(ER(ER_SYNTAX_ERROR));
        YYABORT;
      }
      yyval.item = new Item_func_interval((Item_row *)yyvsp[0].item);
    }
    break;

    case 860:
#line 4650 "sql_yacc.yy"
    {
      yyval.item = new Item_func_last_insert_id();
      Lex->safe_to_cache_query = 0;
    }
    break;

    case 861:
#line 4655 "sql_yacc.yy"
    {
      yyval.item = new Item_func_last_insert_id(yyvsp[-1].item);
      Lex->safe_to_cache_query = 0;
    }
    break;

    case 862:
#line 4660 "sql_yacc.yy"
    {
      yyval.item = new Item_func_left(yyvsp[-3].item, yyvsp[-1].item);
    }
    break;

    case 863:
#line 4662 "sql_yacc.yy"
    {
      yyval.item = new Item_func_locate(yyvsp[-1].item, yyvsp[-3].item);
    }
    break;

    case 864:
#line 4664 "sql_yacc.yy"
    {
      yyval.item = new Item_func_locate(yyvsp[-3].item, yyvsp[-5].item, yyvsp[-1].item);
    }
    break;

    case 865:
#line 4666 "sql_yacc.yy"
    {
      yyvsp[-1].item_list->push_front(yyvsp[-3].item);
      yyval.item = new Item_func_max(*yyvsp[-1].item_list);
    }
    break;

    case 866:
#line 4668 "sql_yacc.yy"
    {
      yyvsp[-1].item_list->push_front(yyvsp[-3].item);
      yyval.item = new Item_func_min(*yyvsp[-1].item_list);
    }
    break;

    case 867:
#line 4670 "sql_yacc.yy"
    {
      yyval.item = new Item_func_log(yyvsp[-1].item);
    }
    break;

    case 868:
#line 4672 "sql_yacc.yy"
    {
      yyval.item = new Item_func_log(yyvsp[-3].item, yyvsp[-1].item);
    }
    break;

    case 869:
#line 4674 "sql_yacc.yy"
    {
      yyval.item = new Item_master_pos_wait(yyvsp[-3].item, yyvsp[-1].item);
      Lex->safe_to_cache_query = 0;
    }
    break;

    case 870:
#line 4679 "sql_yacc.yy"
    {
      yyval.item = new Item_master_pos_wait(yyvsp[-5].item, yyvsp[-3].item, yyvsp[-1].item);
      Lex->safe_to_cache_query = 0;
    }
    break;

    case 871:
#line 4684 "sql_yacc.yy"
    {
      yyval.item = new Item_func_microsecond(yyvsp[-1].item);
    }
    break;

    case 872:
#line 4686 "sql_yacc.yy"
    {
      yyval.item = new Item_func_minute(yyvsp[-1].item);
    }
    break;

    case 873:
#line 4688 "sql_yacc.yy"
    {
      yyval.item = new Item_func_mod(yyvsp[-3].item, yyvsp[-1].item);
    }
    break;

    case 874:
#line 4690 "sql_yacc.yy"
    {
      yyval.item = new Item_func_month(yyvsp[-1].item);
    }
    break;

    case 875:
#line 4692 "sql_yacc.yy"
    {
      yyval.item = new Item_func_now_local();
      Lex->safe_to_cache_query = 0;
    }
    break;

    case 876:
#line 4694 "sql_yacc.yy"
    {
      yyval.item = new Item_func_now_local(yyvsp[-1].item);
      Lex->safe_to_cache_query = 0;
    }
    break;

    case 877:
#line 4696 "sql_yacc.yy"
    {
      yyval.item = YYTHD->variables.old_passwords ? (Item *)new Item_func_old_password(yyvsp[-1].item)
                                                  : (Item *)new Item_func_password(yyvsp[-1].item);
    }
    break;

    case 878:
#line 4702 "sql_yacc.yy"
    {
      yyval.item = new Item_func_old_password(yyvsp[-1].item);
    }
    break;

    case 879:
#line 4704 "sql_yacc.yy"
    {
      yyval.item = new Item_func_locate(yyvsp[-1].item, yyvsp[-3].item);
    }
    break;

    case 880:
#line 4706 "sql_yacc.yy"
    {
      yyval.item = new Item_func_quarter(yyvsp[-1].item);
    }
    break;

    case 881:
#line 4708 "sql_yacc.yy"
    {
      yyval.item = new Item_func_rand(yyvsp[-1].item);
      Lex->uncacheable(UNCACHEABLE_RAND);
    }
    break;

    case 882:
#line 4710 "sql_yacc.yy"
    {
      yyval.item = new Item_func_rand();
      Lex->uncacheable(UNCACHEABLE_RAND);
    }
    break;

    case 883:
#line 4712 "sql_yacc.yy"
    {
      yyval.item = new Item_func_replace(yyvsp[-5].item, yyvsp[-3].item, yyvsp[-1].item);
    }
    break;

    case 884:
#line 4714 "sql_yacc.yy"
    {
      yyval.item = new Item_func_right(yyvsp[-3].item, yyvsp[-1].item);
    }
    break;

    case 885:
#line 4716 "sql_yacc.yy"
    {
      yyval.item = new Item_func_round(yyvsp[-1].item, new Item_int((char *)"0", 0, 1), 0);
    }
    break;

    case 886:
#line 4717 "sql_yacc.yy"
    {
      yyval.item = new Item_func_round(yyvsp[-3].item, yyvsp[-1].item, 0);
    }
    break;

    case 887:
#line 4719 "sql_yacc.yy"
    {
      yyval.item = new Item_func_row_count();
      Lex->safe_to_cache_query = 0;
    }
    break;

    case 888:
#line 4724 "sql_yacc.yy"
    {
      yyval.item = new Item_date_add_interval(yyvsp[-3].item, yyvsp[-1].item, INTERVAL_DAY, 1);
    }
    break;

    case 889:
#line 4726 "sql_yacc.yy"
    {
      yyval.item = new Item_date_add_interval(yyvsp[-5].item, yyvsp[-2].item, yyvsp[-1].interval, 1);
    }
    break;

    case 890:
#line 4728 "sql_yacc.yy"
    {
      yyval.item = new Item_func_second(yyvsp[-1].item);
    }
    break;

    case 891:
#line 4730 "sql_yacc.yy"
    {
      yyval.item = new Item_func_substr(yyvsp[-5].item, yyvsp[-3].item, yyvsp[-1].item);
    }
    break;

    case 892:
#line 4732 "sql_yacc.yy"
    {
      yyval.item = new Item_func_substr(yyvsp[-3].item, yyvsp[-1].item);
    }
    break;

    case 893:
#line 4734 "sql_yacc.yy"
    {
      yyval.item = new Item_func_substr(yyvsp[-5].item, yyvsp[-3].item, yyvsp[-1].item);
    }
    break;

    case 894:
#line 4736 "sql_yacc.yy"
    {
      yyval.item = new Item_func_substr(yyvsp[-3].item, yyvsp[-1].item);
    }
    break;

    case 895:
#line 4738 "sql_yacc.yy"
    {
      yyval.item = new Item_func_substr_index(yyvsp[-5].item, yyvsp[-3].item, yyvsp[-1].item);
    }
    break;

    case 896:
#line 4740 "sql_yacc.yy"
    {
      yyval.item = new Item_func_sysdate_local();
      Lex->safe_to_cache_query = 0;
    }
    break;

    case 897:
#line 4742 "sql_yacc.yy"
    {
      yyval.item = new Item_func_sysdate_local(yyvsp[-1].item);
      Lex->safe_to_cache_query = 0;
    }
    break;

    case 898:
#line 4744 "sql_yacc.yy"
    {
      yyval.item = new Item_time_typecast(yyvsp[-1].item);
    }
    break;

    case 899:
#line 4746 "sql_yacc.yy"
    {
      yyval.item = new Item_datetime_typecast(yyvsp[-1].item);
    }
    break;

    case 900:
#line 4748 "sql_yacc.yy"
    {
      yyval.item = new Item_func_add_time(yyvsp[-3].item, yyvsp[-1].item, 1, 0);
    }
    break;

    case 901:
#line 4750 "sql_yacc.yy"
    {
      yyval.item = new Item_date_add_interval(yyvsp[-1].item, yyvsp[-3].item, yyvsp[-5].interval_time_st, 0);
    }
    break;

    case 902:
#line 4752 "sql_yacc.yy"
    {
      yyval.item = new Item_func_timestamp_diff(yyvsp[-3].item, yyvsp[-1].item, yyvsp[-5].interval_time_st);
    }
    break;

    case 903:
#line 4754 "sql_yacc.yy"
    {
      yyval.item = new Item_func_trim(yyvsp[-1].item);
    }
    break;

    case 904:
#line 4756 "sql_yacc.yy"
    {
      yyval.item = new Item_func_ltrim(yyvsp[-1].item, yyvsp[-3].item);
    }
    break;

    case 905:
#line 4758 "sql_yacc.yy"
    {
      yyval.item = new Item_func_rtrim(yyvsp[-1].item, yyvsp[-3].item);
    }
    break;

    case 906:
#line 4760 "sql_yacc.yy"
    {
      yyval.item = new Item_func_trim(yyvsp[-1].item, yyvsp[-3].item);
    }
    break;

    case 907:
#line 4762 "sql_yacc.yy"
    {
      yyval.item = new Item_func_ltrim(yyvsp[-1].item);
    }
    break;

    case 908:
#line 4764 "sql_yacc.yy"
    {
      yyval.item = new Item_func_rtrim(yyvsp[-1].item);
    }
    break;

    case 909:
#line 4766 "sql_yacc.yy"
    {
      yyval.item = new Item_func_trim(yyvsp[-1].item);
    }
    break;

    case 910:
#line 4768 "sql_yacc.yy"
    {
      yyval.item = new Item_func_trim(yyvsp[-1].item, yyvsp[-3].item);
    }
    break;

    case 911:
#line 4770 "sql_yacc.yy"
    {
      yyval.item = new Item_func_round(yyvsp[-3].item, yyvsp[-1].item, 1);
    }
    break;

    case 912:
#line 4772 "sql_yacc.yy"
    {
      LEX *lex = Lex;
      sp_name *name = new sp_name(yyvsp[-5].lex_str, yyvsp[-3].lex_str);

      name->init_qname(YYTHD);
      sp_add_used_routine(lex, YYTHD, name, TYPE_ENUM_FUNCTION);
      if (yyvsp[-1].item_list)
        yyval.item = new Item_func_sp(Lex->current_context(), name, *yyvsp[-1].item_list);
      else
        yyval.item = new Item_func_sp(Lex->current_context(), name);
      lex->safe_to_cache_query = 0;
    }
    break;

    case 913:
#line 4785 "sql_yacc.yy"
    {
#ifdef HAVE_DLOPEN
      udf_func *udf = 0;
      if (using_udf_functions && (udf = find_udf(yyvsp[-1].lex_str.str, yyvsp[-1].lex_str.length)) &&
          udf->type == UDFTYPE_AGGREGATE)
      {
        LEX *lex = Lex;
        if (lex->current_select->inc_in_sum_expr())
        {
          yyerror(ER(ER_SYNTAX_ERROR));
          YYABORT;
        }
      }
      yyval.udf = udf;
#endif
    }
    break;

    case 914:
#line 4803 "sql_yacc.yy"
    {
#ifdef HAVE_DLOPEN
      udf_func *udf = yyvsp[-2].udf;
      SELECT_LEX *sel = Select;

      if (udf)
      {
        if (udf->type == UDFTYPE_AGGREGATE)
          Select->in_sum_expr--;

        switch (udf->returns)
        {
          case STRING_RESULT:
            if (udf->type == UDFTYPE_FUNCTION)
            {
              if (yyvsp[-1].item_list != NULL)
                yyval.item = new Item_func_udf_str(udf, *yyvsp[-1].item_list);
              else
                yyval.item = new Item_func_udf_str(udf);
            }
            else
            {
              if (yyvsp[-1].item_list != NULL)
                yyval.item = new Item_sum_udf_str(udf, *yyvsp[-1].item_list);
              else
                yyval.item = new Item_sum_udf_str(udf);
            }
            break;
          case REAL_RESULT:
            if (udf->type == UDFTYPE_FUNCTION)
            {
              if (yyvsp[-1].item_list != NULL)
                yyval.item = new Item_func_udf_float(udf, *yyvsp[-1].item_list);
              else
                yyval.item = new Item_func_udf_float(udf);
            }
            else
            {
              if (yyvsp[-1].item_list != NULL)
                yyval.item = new Item_sum_udf_float(udf, *yyvsp[-1].item_list);
              else
                yyval.item = new Item_sum_udf_float(udf);
            }
            break;
          case INT_RESULT:
            if (udf->type == UDFTYPE_FUNCTION)
            {
              if (yyvsp[-1].item_list != NULL)
                yyval.item = new Item_func_udf_int(udf, *yyvsp[-1].item_list);
              else
                yyval.item = new Item_func_udf_int(udf);
            }
            else
            {
              if (yyvsp[-1].item_list != NULL)
                yyval.item = new Item_sum_udf_int(udf, *yyvsp[-1].item_list);
              else
                yyval.item = new Item_sum_udf_int(udf);
            }
            break;
          case DECIMAL_RESULT:
            if (udf->type == UDFTYPE_FUNCTION)
            {
              if (yyvsp[-1].item_list != NULL)
                yyval.item = new Item_func_udf_decimal(udf, *yyvsp[-1].item_list);
              else
                yyval.item = new Item_func_udf_decimal(udf);
            }
            else
            {
              if (yyvsp[-1].item_list != NULL)
                yyval.item = new Item_sum_udf_decimal(udf, *yyvsp[-1].item_list);
              else
                yyval.item = new Item_sum_udf_decimal(udf);
            }
            break;
          default:
            YYABORT;
        }
      }
      else
#endif /* HAVE_DLOPEN */
      {
        LEX *lex = Lex;
        sp_name *name = sp_name_current_db_new(YYTHD, yyvsp[-4].lex_str);

        sp_add_used_routine(lex, YYTHD, name, TYPE_ENUM_FUNCTION);
        if (yyvsp[-1].item_list)
          yyval.item = new Item_func_sp(Lex->current_context(), name, *yyvsp[-1].item_list);
        else
          yyval.item = new Item_func_sp(Lex->current_context(), name);
        lex->safe_to_cache_query = 0;
      }
    }
    break;

    case 915:
#line 4897 "sql_yacc.yy"
    {
      yyval.item = new Item_func_unique_users(yyvsp[-7].item, atoi(yyvsp[-5].lex_str.str), atoi(yyvsp[-3].lex_str.str),
                                              *yyvsp[-1].item_list);
    }
    break;

    case 916:
#line 4901 "sql_yacc.yy"
    {
      yyval.item = new Item_func_unix_timestamp();
      Lex->safe_to_cache_query = 0;
    }
    break;

    case 917:
#line 4906 "sql_yacc.yy"
    {
      yyval.item = new Item_func_unix_timestamp(yyvsp[-1].item);
    }
    break;

    case 918:
#line 4908 "sql_yacc.yy"
    {
      yyval.item = new Item_func_user(FALSE);
      Lex->safe_to_cache_query = 0;
    }
    break;

    case 919:
#line 4910 "sql_yacc.yy"
    {
      yyval.item = new Item_func_curdate_utc();
      Lex->safe_to_cache_query = 0;
    }
    break;

    case 920:
#line 4912 "sql_yacc.yy"
    {
      yyval.item = new Item_func_curtime_utc();
      Lex->safe_to_cache_query = 0;
    }
    break;

    case 921:
#line 4914 "sql_yacc.yy"
    {
      yyval.item = new Item_func_now_utc();
      Lex->safe_to_cache_query = 0;
    }
    break;

    case 922:
#line 4916 "sql_yacc.yy"
    {
      yyval.item =
          new Item_func_week(yyvsp[-1].item, new Item_int((char *)"0", YYTHD->variables.default_week_format, 1));
    }
    break;

    case 923:
#line 4921 "sql_yacc.yy"
    {
      yyval.item = new Item_func_week(yyvsp[-3].item, yyvsp[-1].item);
    }
    break;

    case 924:
#line 4923 "sql_yacc.yy"
    {
      yyval.item = new Item_func_year(yyvsp[-1].item);
    }
    break;

    case 925:
#line 4925 "sql_yacc.yy"
    {
      yyval.item = new Item_func_yearweek(yyvsp[-1].item, new Item_int((char *)"0", 0, 1));
    }
    break;

    case 926:
#line 4927 "sql_yacc.yy"
    {
      yyval.item = new Item_func_yearweek(yyvsp[-3].item, yyvsp[-1].item);
    }
    break;

    case 927:
#line 4929 "sql_yacc.yy"
    {
      yyval.item = new Item_func_benchmark(yyvsp[-3].ulong_num, yyvsp[-1].item);
      Lex->uncacheable(UNCACHEABLE_SIDEEFFECT);
    }
    break;

    case 928:
#line 4934 "sql_yacc.yy"
    {
      yyval.item = new Item_extract(yyvsp[-3].interval, yyvsp[-1].item);
    }
    break;

    case 929:
#line 4938 "sql_yacc.yy"
    {
      yyval.item = GEOM_NEW(Item_func_spatial_rel(yyvsp[-3].item, yyvsp[-1].item, Item_func::SP_CONTAINS_FUNC));
    }
    break;

    case 930:
#line 4940 "sql_yacc.yy"
    {
      yyval.item = GEOM_NEW(Item_func_geometry_from_text(yyvsp[-1].item));
    }
    break;

    case 931:
#line 4942 "sql_yacc.yy"
    {
      yyval.item = GEOM_NEW(Item_func_geometry_from_text(yyvsp[-3].item, yyvsp[-1].item));
    }
    break;

    case 932:
#line 4944 "sql_yacc.yy"
    {
      yyval.item = GEOM_NEW(Item_func_geometry_from_wkb(yyvsp[-1].item));
    }
    break;

    case 933:
#line 4946 "sql_yacc.yy"
    {
      yyval.item = GEOM_NEW(Item_func_geometry_from_wkb(yyvsp[-3].item, yyvsp[-1].item));
    }
    break;

    case 934:
#line 4948 "sql_yacc.yy"
    {
      yyval.item = GEOM_NEW(
          Item_func_spatial_collection(*yyvsp[-1].item_list, Geometry::wkb_geometrycollection, Geometry::wkb_point));
    }
    break;

    case 935:
#line 4952 "sql_yacc.yy"
    {
      yyval.item =
          GEOM_NEW(Item_func_spatial_collection(*yyvsp[-1].item_list, Geometry::wkb_linestring, Geometry::wkb_point));
    }
    break;

    case 936:
#line 4955 "sql_yacc.yy"
    {
      yyval.item = GEOM_NEW(
          Item_func_spatial_collection(*yyvsp[-1].item_list, Geometry::wkb_multilinestring, Geometry::wkb_linestring));
    }
    break;

    case 937:
#line 4958 "sql_yacc.yy"
    {
      yyval.item = GEOM_NEW(Item_func_geometry_from_text(yyvsp[-1].item));
    }
    break;

    case 938:
#line 4960 "sql_yacc.yy"
    {
      yyval.item = GEOM_NEW(Item_func_geometry_from_text(yyvsp[-3].item, yyvsp[-1].item));
    }
    break;

    case 939:
#line 4962 "sql_yacc.yy"
    {
      yyval.item = GEOM_NEW(Item_func_geometry_from_text(yyvsp[-1].item));
    }
    break;

    case 940:
#line 4964 "sql_yacc.yy"
    {
      yyval.item = GEOM_NEW(Item_func_geometry_from_text(yyvsp[-3].item, yyvsp[-1].item));
    }
    break;

    case 941:
#line 4966 "sql_yacc.yy"
    {
      yyval.item = GEOM_NEW(Item_func_geometry_from_text(yyvsp[-1].item));
    }
    break;

    case 942:
#line 4968 "sql_yacc.yy"
    {
      yyval.item = GEOM_NEW(Item_func_geometry_from_text(yyvsp[-3].item, yyvsp[-1].item));
    }
    break;

    case 943:
#line 4970 "sql_yacc.yy"
    {
      yyval.item =
          GEOM_NEW(Item_func_spatial_collection(*yyvsp[-1].item_list, Geometry::wkb_multipoint, Geometry::wkb_point));
    }
    break;

    case 944:
#line 4973 "sql_yacc.yy"
    {
      yyval.item = GEOM_NEW(
          Item_func_spatial_collection(*yyvsp[-1].item_list, Geometry::wkb_multipolygon, Geometry::wkb_polygon));
    }
    break;

    case 945:
#line 4976 "sql_yacc.yy"
    {
      yyval.item = GEOM_NEW(Item_func_point(yyvsp[-3].item, yyvsp[-1].item));
    }
    break;

    case 946:
#line 4978 "sql_yacc.yy"
    {
      yyval.item = GEOM_NEW(Item_func_geometry_from_text(yyvsp[-1].item));
    }
    break;

    case 947:
#line 4980 "sql_yacc.yy"
    {
      yyval.item = GEOM_NEW(Item_func_geometry_from_text(yyvsp[-3].item, yyvsp[-1].item));
    }
    break;

    case 948:
#line 4982 "sql_yacc.yy"
    {
      yyval.item = GEOM_NEW(Item_func_geometry_from_text(yyvsp[-1].item));
    }
    break;

    case 949:
#line 4984 "sql_yacc.yy"
    {
      yyval.item = GEOM_NEW(Item_func_geometry_from_text(yyvsp[-3].item, yyvsp[-1].item));
    }
    break;

    case 950:
#line 4986 "sql_yacc.yy"
    {
      yyval.item =
          GEOM_NEW(Item_func_spatial_collection(*yyvsp[-1].item_list, Geometry::wkb_polygon, Geometry::wkb_linestring));
    }
    break;

    case 951:
#line 4989 "sql_yacc.yy"
    {
      yyval.item = GEOM_NEW(Item_func_geometry_from_text(yyvsp[-1].item));
    }
    break;

    case 952:
#line 4991 "sql_yacc.yy"
    {
      yyval.item = GEOM_NEW(Item_func_geometry_from_text(yyvsp[-3].item, yyvsp[-1].item));
    }
    break;

    case 953:
#line 4993 "sql_yacc.yy"
    {
      yyval.item = GEOM_NEW(Item_func_geometry_from_text(yyvsp[-1].item));
    }
    break;

    case 954:
#line 4995 "sql_yacc.yy"
    {
      yyval.item = GEOM_NEW(Item_func_geometry_from_text(yyvsp[-3].item, yyvsp[-1].item));
    }
    break;

    case 955:
#line 4999 "sql_yacc.yy"
    {
      yyval.num = FT_NL;
    }
    break;

    case 956:
#line 5000 "sql_yacc.yy"
    {
      yyval.num = FT_NL | FT_EXPAND;
    }
    break;

    case 957:
#line 5001 "sql_yacc.yy"
    {
      yyval.num = FT_BOOL;
    }
    break;

    case 958:
#line 5005 "sql_yacc.yy"
    {
      yyval.item_list = NULL;
    }
    break;

    case 959:
#line 5006 "sql_yacc.yy"
    {
      yyval.item_list = yyvsp[0].item_list;
    }
    break;

    case 960:
#line 5010 "sql_yacc.yy"
    {
      Select->expr_list.push_front(new List<Item>);
    }
    break;

    case 961:
#line 5012 "sql_yacc.yy"
    {
      yyval.item_list = Select->expr_list.pop();
    }
    break;

    case 962:
#line 5017 "sql_yacc.yy"
    {
      Select->expr_list.head()->push_back(yyvsp[0].item);
    }
    break;

    case 963:
#line 5021 "sql_yacc.yy"
    {
      Select->expr_list.head()->push_back(yyvsp[0].item);
    }
    break;

    case 964:
#line 5028 "sql_yacc.yy"
    {
      if (yyvsp[0].lex_str.str)
      {
        yyvsp[-2].item->set_name(yyvsp[0].lex_str.str, yyvsp[0].lex_str.length, system_charset_info);
        yyvsp[-2].item->is_autogenerated_name = FALSE;
      }
      else
        yyvsp[-2].item->set_name(yyvsp[-3].simple_string, (uint)(yyvsp[-1].simple_string - yyvsp[-3].simple_string),
                                 YYTHD->charset());
      yyval.item = yyvsp[-2].item;
    }
    break;

    case 965:
#line 5042 "sql_yacc.yy"
    {
      yyval.item = new Item_sum_avg(yyvsp[-1].item);
    }
    break;

    case 966:
#line 5044 "sql_yacc.yy"
    {
      yyval.item = new Item_sum_avg_distinct(yyvsp[-1].item);
    }
    break;

    case 967:
#line 5046 "sql_yacc.yy"
    {
      yyval.item = new Item_sum_and(yyvsp[-1].item);
    }
    break;

    case 968:
#line 5048 "sql_yacc.yy"
    {
      yyval.item = new Item_sum_or(yyvsp[-1].item);
    }
    break;

    case 969:
#line 5050 "sql_yacc.yy"
    {
      yyval.item = new Item_sum_xor(yyvsp[-1].item);
    }
    break;

    case 970:
#line 5052 "sql_yacc.yy"
    {
      yyval.item = new Item_sum_count(new Item_int((int32)0L, 1));
    }
    break;

    case 971:
#line 5054 "sql_yacc.yy"
    {
      yyval.item = new Item_sum_count(yyvsp[-1].item);
    }
    break;

    case 972:
#line 5056 "sql_yacc.yy"
    {
      Select->in_sum_expr++;
    }
    break;

    case 973:
#line 5058 "sql_yacc.yy"
    {
      Select->in_sum_expr--;
    }
    break;

    case 974:
#line 5060 "sql_yacc.yy"
    {
      yyval.item = new Item_sum_count_distinct(*yyvsp[-2].item_list);
    }
    break;

    case 975:
#line 5062 "sql_yacc.yy"
    {
      yyval.item = new Item_sum_unique_users(yyvsp[-7].item, atoi(yyvsp[-5].lex_str.str), atoi(yyvsp[-3].lex_str.str),
                                             yyvsp[-1].item);
    }
    break;

    case 976:
#line 5064 "sql_yacc.yy"
    {
      yyval.item = new Item_sum_min(yyvsp[-1].item);
    }
    break;

    case 977:
#line 5071 "sql_yacc.yy"
    {
      yyval.item = new Item_sum_min(yyvsp[-1].item);
    }
    break;

    case 978:
#line 5073 "sql_yacc.yy"
    {
      yyval.item = new Item_sum_max(yyvsp[-1].item);
    }
    break;

    case 979:
#line 5075 "sql_yacc.yy"
    {
      yyval.item = new Item_sum_max(yyvsp[-1].item);
    }
    break;

    case 980:
#line 5077 "sql_yacc.yy"
    {
      yyval.item = new Item_sum_std(yyvsp[-1].item, 0);
    }
    break;

    case 981:
#line 5079 "sql_yacc.yy"
    {
      yyval.item = new Item_sum_variance(yyvsp[-1].item, 0);
    }
    break;

    case 982:
#line 5081 "sql_yacc.yy"
    {
      yyval.item = new Item_sum_std(yyvsp[-1].item, 1);
    }
    break;

    case 983:
#line 5083 "sql_yacc.yy"
    {
      yyval.item = new Item_sum_variance(yyvsp[-1].item, 1);
    }
    break;

    case 984:
#line 5085 "sql_yacc.yy"
    {
      yyval.item = new Item_sum_sum(yyvsp[-1].item);
    }
    break;

    case 985:
#line 5087 "sql_yacc.yy"
    {
      yyval.item = new Item_sum_sum_distinct(yyvsp[-1].item);
    }
    break;

    case 986:
#line 5089 "sql_yacc.yy"
    {
      Select->in_sum_expr++;
    }
    break;

    case 987:
#line 5093 "sql_yacc.yy"
    {
      SELECT_LEX *sel = Select;
      sel->in_sum_expr--;
      yyval.item = new Item_func_group_concat(Lex->current_context(), yyvsp[-5].num, yyvsp[-3].item_list,
                                              sel->gorder_list, yyvsp[-1].string);
      yyvsp[-3].item_list->empty();
    }
    break;

    case 988:
#line 5102 "sql_yacc.yy"
    {
      yyval.num = 0;
    }
    break;

    case 989:
#line 5103 "sql_yacc.yy"
    {
      yyval.num = 1;
    }
    break;

    case 990:
#line 5106 "sql_yacc.yy"
    {
      yyval.string = new (YYTHD->mem_root) String(",", 1, default_charset_info);
    }
    break;

    case 991:
#line 5107 "sql_yacc.yy"
    {
      yyval.string = yyvsp[0].string;
    }
    break;

    case 992:
#line 5112 "sql_yacc.yy"
    {
      Select->gorder_list = NULL;
    }
    break;

    case 993:
#line 5116 "sql_yacc.yy"
    {
      SELECT_LEX *select = Select;
      select->gorder_list = (SQL_LIST *)sql_memdup((char *)&select->order_list, sizeof(st_sql_list));
      select->order_list.empty();
    }
    break;

    case 994:
#line 5127 "sql_yacc.yy"
    {
      LEX *lex = Lex;
      if (lex->current_select->inc_in_sum_expr())
      {
        yyerror(ER(ER_SYNTAX_ERROR));
        YYABORT;
      }
    }
    break;

    case 995:
#line 5136 "sql_yacc.yy"
    {
      Select->in_sum_expr--;
      yyval.item = yyvsp[0].item;
    }
    break;

    case 996:
#line 5142 "sql_yacc.yy"
    {
      yyval.cast_type = ITEM_CAST_CHAR;
      Lex->charset = &my_charset_bin;
      Lex->dec = 0;
    }
    break;

    case 997:
#line 5143 "sql_yacc.yy"
    {
      yyval.cast_type = ITEM_CAST_CHAR;
      Lex->dec = 0;
    }
    break;

    case 998:
#line 5144 "sql_yacc.yy"
    {
      yyval.cast_type = ITEM_CAST_CHAR;
      Lex->charset = national_charset_info;
      Lex->dec = 0;
    }
    break;

    case 999:
#line 5145 "sql_yacc.yy"
    {
      yyval.cast_type = ITEM_CAST_SIGNED_INT;
      Lex->charset = NULL;
      Lex->dec = Lex->length = (char *)0;
    }
    break;

    case 1000:
#line 5146 "sql_yacc.yy"
    {
      yyval.cast_type = ITEM_CAST_SIGNED_INT;
      Lex->charset = NULL;
      Lex->dec = Lex->length = (char *)0;
    }
    break;

    case 1001:
#line 5147 "sql_yacc.yy"
    {
      yyval.cast_type = ITEM_CAST_UNSIGNED_INT;
      Lex->charset = NULL;
      Lex->dec = Lex->length = (char *)0;
    }
    break;

    case 1002:
#line 5148 "sql_yacc.yy"
    {
      yyval.cast_type = ITEM_CAST_UNSIGNED_INT;
      Lex->charset = NULL;
      Lex->dec = Lex->length = (char *)0;
    }
    break;

    case 1003:
#line 5149 "sql_yacc.yy"
    {
      yyval.cast_type = ITEM_CAST_DATE;
      Lex->charset = NULL;
      Lex->dec = Lex->length = (char *)0;
    }
    break;

    case 1004:
#line 5150 "sql_yacc.yy"
    {
      yyval.cast_type = ITEM_CAST_TIME;
      Lex->charset = NULL;
      Lex->dec = Lex->length = (char *)0;
    }
    break;

    case 1005:
#line 5151 "sql_yacc.yy"
    {
      yyval.cast_type = ITEM_CAST_DATETIME;
      Lex->charset = NULL;
      Lex->dec = Lex->length = (char *)0;
    }
    break;

    case 1006:
#line 5152 "sql_yacc.yy"
    {
      yyval.cast_type = ITEM_CAST_DECIMAL;
      Lex->charset = NULL;
    }
    break;

    case 1007:
#line 5156 "sql_yacc.yy"
    {
      Select->expr_list.push_front(new List<Item>);
    }
    break;

    case 1008:
#line 5158 "sql_yacc.yy"
    {
      yyval.item_list = Select->expr_list.pop();
    }
    break;

    case 1009:
#line 5161 "sql_yacc.yy"
    {
      Select->expr_list.head()->push_back(yyvsp[0].item);
    }
    break;

    case 1010:
#line 5162 "sql_yacc.yy"
    {
      Select->expr_list.head()->push_back(yyvsp[0].item);
    }
    break;

    case 1011:
#line 5165 "sql_yacc.yy"
    {
      yyval.item_list = yyvsp[0].item_list;
    }
    break;

    case 1012:
#line 5166 "sql_yacc.yy"
    {
      yyval.item_list = yyvsp[-1].item_list;
    }
    break;

    case 1013:
#line 5169 "sql_yacc.yy"
    {
      Select->expr_list.push_front(new List<Item>);
    }
    break;

    case 1014:
#line 5171 "sql_yacc.yy"
    {
      yyval.item_list = Select->expr_list.pop();
    }
    break;

    case 1015:
#line 5174 "sql_yacc.yy"
    {
      Select->expr_list.head()->push_back(yyvsp[0].item);
    }
    break;

    case 1016:
#line 5175 "sql_yacc.yy"
    {
      Select->expr_list.head()->push_back(yyvsp[0].item);
    }
    break;

    case 1017:
#line 5178 "sql_yacc.yy"
    {
      yyval.item = NULL;
    }
    break;

    case 1018:
#line 5179 "sql_yacc.yy"
    {
      yyval.item = yyvsp[0].item;
    }
    break;

    case 1019:
#line 5182 "sql_yacc.yy"
    {
      yyval.item = NULL;
    }
    break;

    case 1020:
#line 5183 "sql_yacc.yy"
    {
      yyval.item = yyvsp[0].item;
    }
    break;

    case 1021:
#line 5186 "sql_yacc.yy"
    {
      Select->when_list.push_front(new List<Item>);
    }
    break;

    case 1022:
#line 5188 "sql_yacc.yy"
    {
      yyval.item_list = Select->when_list.pop();
    }
    break;

    case 1023:
#line 5192 "sql_yacc.yy"
    {
      SELECT_LEX *sel = Select;
      sel->when_list.head()->push_back(yyvsp[-2].item);
      sel->when_list.head()->push_back(yyvsp[0].item);
    }
    break;

    case 1024:
#line 5198 "sql_yacc.yy"
    {
      SELECT_LEX *sel = Select;
      sel->when_list.head()->push_back(yyvsp[-2].item);
      sel->when_list.head()->push_back(yyvsp[0].item);
    }
    break;

    case 1025:
#line 5206 "sql_yacc.yy"
    {
      yyval.table_list = yyvsp[0].table_list;
    }
    break;

    case 1026:
#line 5207 "sql_yacc.yy"
    {
      yyval.table_list = yyvsp[0].table_list;
    }
    break;

    case 1027:
#line 5208 "sql_yacc.yy"
    {
      LEX *lex = Lex;
      if (!(yyval.table_list = lex->current_select->nest_last_join(lex->thd)))
        YYABORT;
    }
    break;

    case 1028:
#line 5216 "sql_yacc.yy"
    {
      YYERROR_UNLESS(yyval.table_list = yyvsp[0].table_list);
    }
    break;

    case 1029:
#line 5221 "sql_yacc.yy"
    {
      yyval.table_list = yyvsp[0].table_list;
    }
    break;

    case 1030:
#line 5223 "sql_yacc.yy"
    {
      YYERROR_UNLESS(yyvsp[-2].table_list && (yyval.table_list = yyvsp[0].table_list));
    }
    break;

    case 1031:
#line 5235 "sql_yacc.yy"
    {
      YYERROR_UNLESS(yyvsp[-2].table_list && (yyval.table_list = yyvsp[0].table_list));
    }
    break;

    case 1032:
#line 5237 "sql_yacc.yy"
    {
      YYERROR_UNLESS(yyvsp[-2].table_list && (yyval.table_list = yyvsp[0].table_list));
      yyvsp[0].table_list->straight = 1;
    }
    break;

    case 1033:
#line 5240 "sql_yacc.yy"
    {
      YYERROR_UNLESS(yyvsp[-3].table_list && (yyval.table_list = yyvsp[-1].table_list));
      /* Change the current name resolution context to a local context. */
      Name_resolution_context *on_context;
      if (!(on_context = make_join_on_context(YYTHD, yyvsp[-3].table_list, yyvsp[-1].table_list)))
        YYABORT;
      Lex->push_context(on_context);
    }
    break;

    case 1034:
#line 5249 "sql_yacc.yy"
    {
      add_join_on(yyvsp[-3].table_list, yyvsp[0].item);
      Lex->pop_context();
    }
    break;

    case 1035:
#line 5255 "sql_yacc.yy"
    {
      YYERROR_UNLESS(yyvsp[-3].table_list && (yyval.table_list = yyvsp[-1].table_list));
      /* Change the current name resolution context to a local context. */
      Name_resolution_context *on_context;
      if (!(on_context = make_join_on_context(YYTHD, yyvsp[-3].table_list, yyvsp[-1].table_list)))
        YYABORT;
      Lex->push_context(on_context);
    }
    break;

    case 1036:
#line 5264 "sql_yacc.yy"
    {
      yyvsp[-3].table_list->straight = 1;
      add_join_on(yyvsp[-3].table_list, yyvsp[0].item);
      Lex->pop_context();
    }
    break;

    case 1037:
#line 5271 "sql_yacc.yy"
    {
      SELECT_LEX *sel = Select;
      YYERROR_UNLESS(yyvsp[-3].table_list && yyvsp[-1].table_list);
    }
    break;

    case 1038:
#line 5276 "sql_yacc.yy"
    {
      add_join_natural(yyvsp[-7].table_list, yyvsp[-5].table_list, yyvsp[-1].string_list);
      yyval.table_list = yyvsp[-5].table_list;
    }
    break;

    case 1039:
#line 5279 "sql_yacc.yy"
    {
      /* Change the current name resolution context to a local context. */
      Name_resolution_context *on_context;
      if (!(on_context = make_join_on_context(YYTHD, yyvsp[-5].table_list, yyvsp[-1].table_list)))
        YYABORT;
      Lex->push_context(on_context);
    }
    break;

    case 1040:
#line 5287 "sql_yacc.yy"
    {
      YYERROR_UNLESS(yyvsp[-7].table_list && yyvsp[-3].table_list);
      add_join_on(yyvsp[-3].table_list, yyvsp[0].item);
      Lex->pop_context();
      yyvsp[-3].table_list->outer_join |= JOIN_TYPE_LEFT;
      yyval.table_list = yyvsp[-3].table_list;
    }
    break;

    case 1041:
#line 5295 "sql_yacc.yy"
    {
      SELECT_LEX *sel = Select;
      YYERROR_UNLESS(yyvsp[-4].table_list && yyvsp[0].table_list);
    }
    break;

    case 1042:
#line 5300 "sql_yacc.yy"
    {
      add_join_natural(yyvsp[-9].table_list, yyvsp[-5].table_list, yyvsp[-1].string_list);
      yyvsp[-5].table_list->outer_join |= JOIN_TYPE_LEFT;
      yyval.table_list = yyvsp[-5].table_list;
    }
    break;

    case 1043:
#line 5302 "sql_yacc.yy"
    {
      YYERROR_UNLESS(yyvsp[-5].table_list && yyvsp[0].table_list);
      add_join_natural(yyvsp[-5].table_list, yyvsp[0].table_list, NULL);
      yyvsp[0].table_list->outer_join |= JOIN_TYPE_LEFT;
      yyval.table_list = yyvsp[0].table_list;
    }
    break;

    case 1044:
#line 5310 "sql_yacc.yy"
    {
      /* Change the current name resolution context to a local context. */
      Name_resolution_context *on_context;
      if (!(on_context = make_join_on_context(YYTHD, yyvsp[-5].table_list, yyvsp[-1].table_list)))
        YYABORT;
      Lex->push_context(on_context);
    }
    break;

    case 1045:
#line 5318 "sql_yacc.yy"
    {
      LEX *lex = Lex;
      YYERROR_UNLESS(yyvsp[-7].table_list && yyvsp[-3].table_list);
      if (!(yyval.table_list = lex->current_select->convert_right_join()))
        YYABORT;
      add_join_on(yyval.table_list, yyvsp[0].item);
      Lex->pop_context();
    }
    break;

    case 1046:
#line 5327 "sql_yacc.yy"
    {
      SELECT_LEX *sel = Select;
      YYERROR_UNLESS(yyvsp[-4].table_list && yyvsp[0].table_list);
    }
    break;

    case 1047:
#line 5332 "sql_yacc.yy"
    {
      LEX *lex = Lex;
      if (!(yyval.table_list = lex->current_select->convert_right_join()))
        YYABORT;
      add_join_natural(yyval.table_list, yyvsp[-5].table_list, yyvsp[-1].string_list);
    }
    break;

    case 1048:
#line 5339 "sql_yacc.yy"
    {
      YYERROR_UNLESS(yyvsp[-5].table_list && yyvsp[0].table_list);
      add_join_natural(yyvsp[0].table_list, yyvsp[-5].table_list, NULL);
      LEX *lex = Lex;
      if (!(yyval.table_list = lex->current_select->convert_right_join()))
        YYABORT;
    }
    break;

    case 1049:
#line 5347 "sql_yacc.yy"
    {
      YYERROR_UNLESS(yyvsp[-3].table_list && (yyval.table_list = yyvsp[0].table_list));
      add_join_natural(yyvsp[-3].table_list, yyvsp[0].table_list, NULL);
    }
    break;

    case 1050:
#line 5351 "sql_yacc.yy"
    {
    }
    break;

    case 1051:
#line 5352 "sql_yacc.yy"
    {
    }
    break;

    case 1052:
#line 5353 "sql_yacc.yy"
    {
    }
    break;

    case 1053:
#line 5358 "sql_yacc.yy"
    {
      SELECT_LEX *sel = Select;
      sel->use_index_ptr = sel->ignore_index_ptr = 0;
      sel->table_join_options = 0;
    }
    break;

    case 1054:
#line 5364 "sql_yacc.yy"
    {
      LEX *lex = Lex;
      SELECT_LEX *sel = lex->current_select;
      if (!(yyval.table_list =
                sel->add_table_to_list(lex->thd, yyvsp[-2].table, yyvsp[-1].lex_str_ptr, sel->get_table_join_options(),
                                       lex->lock_option, sel->get_use_index(), sel->get_ignore_index())))
        YYABORT;
      sel->add_joined_table(yyval.table_list);
    }
    break;

    case 1055:
#line 5377 "sql_yacc.yy"
    {
      /* Change the current name resolution context to a local context. */
      Name_resolution_context *on_context;
      if (!(on_context = make_join_on_context(YYTHD, yyvsp[-5].table_list, yyvsp[-1].table_list)))
        YYABORT;
      Lex->push_context(on_context);
    }
    break;

    case 1056:
#line 5385 "sql_yacc.yy"
    {
      YYERROR_UNLESS(yyvsp[-8].table_list && yyvsp[-4].table_list);
      add_join_on(yyvsp[-4].table_list, yyvsp[-1].item);
      Lex->pop_context();
      yyvsp[-4].table_list->outer_join |= JOIN_TYPE_LEFT;
      yyval.table_list = yyvsp[-4].table_list;
    }
    break;

    case 1057:
#line 5393 "sql_yacc.yy"
    {
      LEX *lex = Lex;
      SELECT_LEX *sel = lex->current_select;
      if (yyvsp[-2].num)
      {
        if (sel->set_braces(1))
        {
          yyerror(ER(ER_SYNTAX_ERROR));
          YYABORT;
        }
        /* select in braces, can't contain global parameters */
        if (sel->master_unit()->fake_select_lex)
          sel->master_unit()->global_parameters = sel->master_unit()->fake_select_lex;
      }
      if (yyvsp[-1].select_lex->init_nested_join(lex->thd))
        YYABORT;
      yyval.table_list = 0;
      /* incomplete derived tables return NULL, we must be
         nested in select_derived rule to be here. */
    }
    break;

    case 1058:
#line 5415 "sql_yacc.yy"
    {
      /* Use $2 instead of Lex->current_select as derived table will
         alter value of Lex->current_select. */

      if (!(yyvsp[-3].table_list || yyvsp[0].lex_str_ptr) && yyvsp[-4].select_lex->embedding &&
          !yyvsp[-4].select_lex->embedding->nested_join->join_list.elements)
      {
        /* we have a derived table ($3 == NULL) but no alias,
           Since we are nested in further parentheses so we
           can pass NULL to the outer level parentheses
           Permits parsing of "((((select ...))) as xyz)" */
        yyval.table_list = 0;
      }
      else if (!yyvsp[-3].table_list)
      {
        /* Handle case of derived table, alias may be NULL if there
           are no outer parentheses, add_table_to_list() will throw
           error in this case */
        LEX *lex = Lex;
        SELECT_LEX *sel = lex->current_select;
        SELECT_LEX_UNIT *unit = sel->master_unit();
        lex->current_select = sel = unit->outer_select();
        if (!(yyval.table_list = sel->add_table_to_list(lex->thd, new Table_ident(unit), yyvsp[0].lex_str_ptr, 0,
                                                        TL_READ, (List<String> *)0, (List<String> *)0)))

          YYABORT;
        sel->add_joined_table(yyval.table_list);
        lex->pop_context();
      }
      else if (yyvsp[-2].num || yyvsp[0].lex_str_ptr)
      {
        /* simple nested joins cannot have aliases or unions */
        yyerror(ER(ER_SYNTAX_ERROR));
        YYABORT;
      }
      else
        yyval.table_list = yyvsp[-3].table_list;
    }
    break;

    case 1059:
#line 5462 "sql_yacc.yy"
    {
      LEX *lex = Lex;
      if (yyvsp[0].select_lex->init_nested_join(lex->thd))
        YYABORT;
    }
    break;

    case 1060:
#line 5468 "sql_yacc.yy"
    {
      LEX *lex = Lex;
      /* for normal joins, $3 != NULL and end_nested_join() != NULL,
         for derived tables, both must equal NULL */

      if (!(yyval.table_list = yyvsp[-2].select_lex->end_nested_join(lex->thd)) && yyvsp[0].table_list)
        YYABORT;
      if (!yyvsp[0].table_list && yyval.table_list)
      {
        yyerror(ER(ER_SYNTAX_ERROR));
        YYABORT;
      }
    }
    break;

    case 1061:
#line 5484 "sql_yacc.yy"
    {
      LEX *lex = Lex;
      lex->derived_tables |= DERIVED_SUBQUERY;
      if (((int)lex->sql_command >= (int)SQLCOM_HA_OPEN && lex->sql_command <= (int)SQLCOM_HA_READ) ||
          lex->sql_command == (int)SQLCOM_KILL)
      {
        yyerror(ER(ER_SYNTAX_ERROR));
        YYABORT;
      }
      if (lex->current_select->linkage == GLOBAL_OPTIONS_TYPE || mysql_new_select(lex, 1))
        YYABORT;
      mysql_init_select(lex);
      lex->current_select->linkage = DERIVED_TABLE_TYPE;
      lex->current_select->parsing_place = SELECT_LIST;
    }
    break;

    case 1062:
#line 5502 "sql_yacc.yy"
    {
      Select->parsing_place = NO_MATTER;
    }
    break;

    case 1064:
#line 5509 "sql_yacc.yy"
    {
      yyval.select_lex = Select;
    }
    break;

    case 1065:
#line 5514 "sql_yacc.yy"
    {
      LEX *lex = Lex;
      SELECT_LEX *sel = lex->current_select;
      TABLE_LIST *embedding;
      if (!sel->embedding || sel->end_nested_join(lex->thd))
      {
        /* we are not in parentheses */
        yyerror(ER(ER_SYNTAX_ERROR));
        YYABORT;
      }
      embedding = Select->embedding;
      yyval.num = embedding && !embedding->nested_join->join_list.elements;
      /* return true if we are deeply nested */
    }
    break;

    case 1066:
#line 5532 "sql_yacc.yy"
    {
    }
    break;

    case 1067:
#line 5533 "sql_yacc.yy"
    {
    }
    break;

    case 1068:
#line 5536 "sql_yacc.yy"
    {
    }
    break;

    case 1069:
#line 5538 "sql_yacc.yy"
    {
      SELECT_LEX *sel = Select;
      sel->use_index = *yyvsp[0].string_list;
      sel->use_index_ptr = &sel->use_index;
    }
    break;

    case 1070:
#line 5544 "sql_yacc.yy"
    {
      SELECT_LEX *sel = Select;
      sel->use_index = *yyvsp[0].string_list;
      sel->use_index_ptr = &sel->use_index;
      sel->table_join_options |= TL_OPTION_FORCE_INDEX;
    }
    break;

    case 1071:
#line 5551 "sql_yacc.yy"
    {
      SELECT_LEX *sel = Select;
      sel->ignore_index = *yyvsp[0].string_list;
      sel->ignore_index_ptr = &sel->ignore_index;
    }
    break;

    case 1072:
#line 5558 "sql_yacc.yy"
    {
      Select->interval_list.empty();
    }
    break;

    case 1073:
#line 5560 "sql_yacc.yy"
    {
      yyval.string_list = &Select->interval_list;
    }
    break;

    case 1074:
#line 5564 "sql_yacc.yy"
    {
    }
    break;

    case 1075:
#line 5565 "sql_yacc.yy"
    {
    }
    break;

    case 1076:
#line 5570 "sql_yacc.yy"
    {
      Select->interval_list.push_back(new (YYTHD->mem_root) String((const char *)yyvsp[0].lex_str.str,
                                                                   yyvsp[0].lex_str.length, system_charset_info));
    }
    break;

    case 1077:
#line 5574 "sql_yacc.yy"
    {
      Select->interval_list.push_back(new (YYTHD->mem_root) String((const char *)yyvsp[0].lex_str.str,
                                                                   yyvsp[0].lex_str.length, system_charset_info));
    }
    break;

    case 1078:
#line 5578 "sql_yacc.yy"
    {
      Select->interval_list.push_back(new (YYTHD->mem_root) String("PRIMARY", 7, system_charset_info));
    }
    break;

    case 1079:
#line 5584 "sql_yacc.yy"
    {
      if (!(yyval.string_list = new List<String>))
        YYABORT;
      yyval.string_list->push_back(new (YYTHD->mem_root) String((const char *)yyvsp[0].lex_str.str,
                                                                yyvsp[0].lex_str.length, system_charset_info));
    }
    break;

    case 1080:
#line 5592 "sql_yacc.yy"
    {
      yyvsp[-2].string_list->push_back(new (YYTHD->mem_root) String((const char *)yyvsp[0].lex_str.str,
                                                                    yyvsp[0].lex_str.length, system_charset_info));
      yyval.string_list = yyvsp[-2].string_list;
    }
    break;

    case 1081:
#line 5600 "sql_yacc.yy"
    {
    }
    break;

    case 1082:
#line 5601 "sql_yacc.yy"
    {
      yyval.interval = INTERVAL_DAY_HOUR;
    }
    break;

    case 1083:
#line 5602 "sql_yacc.yy"
    {
      yyval.interval = INTERVAL_DAY_MICROSECOND;
    }
    break;

    case 1084:
#line 5603 "sql_yacc.yy"
    {
      yyval.interval = INTERVAL_DAY_MINUTE;
    }
    break;

    case 1085:
#line 5604 "sql_yacc.yy"
    {
      yyval.interval = INTERVAL_DAY_SECOND;
    }
    break;

    case 1086:
#line 5605 "sql_yacc.yy"
    {
      yyval.interval = INTERVAL_HOUR_MICROSECOND;
    }
    break;

    case 1087:
#line 5606 "sql_yacc.yy"
    {
      yyval.interval = INTERVAL_HOUR_MINUTE;
    }
    break;

    case 1088:
#line 5607 "sql_yacc.yy"
    {
      yyval.interval = INTERVAL_HOUR_SECOND;
    }
    break;

    case 1089:
#line 5608 "sql_yacc.yy"
    {
      yyval.interval = INTERVAL_MICROSECOND;
    }
    break;

    case 1090:
#line 5609 "sql_yacc.yy"
    {
      yyval.interval = INTERVAL_MINUTE_MICROSECOND;
    }
    break;

    case 1091:
#line 5610 "sql_yacc.yy"
    {
      yyval.interval = INTERVAL_MINUTE_SECOND;
    }
    break;

    case 1092:
#line 5611 "sql_yacc.yy"
    {
      yyval.interval = INTERVAL_SECOND_MICROSECOND;
    }
    break;

    case 1093:
#line 5612 "sql_yacc.yy"
    {
      yyval.interval = INTERVAL_YEAR_MONTH;
    }
    break;

    case 1094:
#line 5615 "sql_yacc.yy"
    {
      yyval.interval_time_st = INTERVAL_DAY;
    }
    break;

    case 1095:
#line 5616 "sql_yacc.yy"
    {
      yyval.interval_time_st = INTERVAL_WEEK;
    }
    break;

    case 1096:
#line 5617 "sql_yacc.yy"
    {
      yyval.interval_time_st = INTERVAL_HOUR;
    }
    break;

    case 1097:
#line 5618 "sql_yacc.yy"
    {
      yyval.interval_time_st = INTERVAL_MICROSECOND;
    }
    break;

    case 1098:
#line 5619 "sql_yacc.yy"
    {
      yyval.interval_time_st = INTERVAL_MINUTE;
    }
    break;

    case 1099:
#line 5620 "sql_yacc.yy"
    {
      yyval.interval_time_st = INTERVAL_MONTH;
    }
    break;

    case 1100:
#line 5621 "sql_yacc.yy"
    {
      yyval.interval_time_st = INTERVAL_QUARTER;
    }
    break;

    case 1101:
#line 5622 "sql_yacc.yy"
    {
      yyval.interval_time_st = INTERVAL_SECOND;
    }
    break;

    case 1102:
#line 5623 "sql_yacc.yy"
    {
      yyval.interval_time_st = INTERVAL_YEAR;
    }
    break;

    case 1103:
#line 5627 "sql_yacc.yy"
    {
      yyval.date_time_type = MYSQL_TIMESTAMP_DATE;
    }
    break;

    case 1104:
#line 5628 "sql_yacc.yy"
    {
      yyval.date_time_type = MYSQL_TIMESTAMP_TIME;
    }
    break;

    case 1105:
#line 5629 "sql_yacc.yy"
    {
      yyval.date_time_type = MYSQL_TIMESTAMP_DATETIME;
    }
    break;

    case 1106:
#line 5630 "sql_yacc.yy"
    {
      yyval.date_time_type = MYSQL_TIMESTAMP_DATETIME;
    }
    break;

    case 1110:
#line 5639 "sql_yacc.yy"
    {
      yyval.lex_str_ptr = 0;
    }
    break;

    case 1111:
#line 5641 "sql_yacc.yy"
    {
      yyval.lex_str_ptr = (LEX_STRING *)sql_memdup(&yyvsp[0].lex_str, sizeof(LEX_STRING));
    }
    break;

    case 1114:
#line 5649 "sql_yacc.yy"
    {
      Select->where = 0;
    }
    break;

    case 1115:
#line 5651 "sql_yacc.yy"
    {
      Select->parsing_place = IN_WHERE;
    }
    break;

    case 1116:
#line 5655 "sql_yacc.yy"
    {
      SELECT_LEX *select = Select;
      select->where = yyvsp[0].item;
      select->parsing_place = NO_MATTER;
      if (yyvsp[0].item)
        yyvsp[0].item->top_level_item();
    }
    break;

    case 1118:
#line 5667 "sql_yacc.yy"
    {
      Select->parsing_place = IN_HAVING;
    }
    break;

    case 1119:
#line 5671 "sql_yacc.yy"
    {
      SELECT_LEX *sel = Select;
      sel->having = yyvsp[0].item;
      sel->parsing_place = NO_MATTER;
      if (yyvsp[0].item)
        yyvsp[0].item->top_level_item();
    }
    break;

    case 1120:
#line 5681 "sql_yacc.yy"
    {
      yyval.item = yyvsp[0].item;
    }
    break;

    case 1121:
#line 5683 "sql_yacc.yy"
    {
      yyval.item =
          ((YYTHD->variables.sql_mode & MODE_NO_BACKSLASH_ESCAPES) ? new Item_string("", 0, &my_charset_latin1)
                                                                   : new Item_string("\\", 1, &my_charset_latin1));
    }
    break;

    case 1124:
#line 5702 "sql_yacc.yy"
    {
      if (add_group_to_list(YYTHD, yyvsp[-1].item, (bool)yyvsp[0].num))
        YYABORT;
    }
    break;

    case 1125:
#line 5704 "sql_yacc.yy"
    {
      if (add_group_to_list(YYTHD, yyvsp[-1].item, (bool)yyvsp[0].num))
        YYABORT;
    }
    break;

    case 1126:
#line 5707 "sql_yacc.yy"
    {
    }
    break;

    case 1127:
#line 5709 "sql_yacc.yy"
    {
      LEX *lex = Lex;
      if (lex->current_select->linkage == GLOBAL_OPTIONS_TYPE)
      {
        my_error(ER_WRONG_USAGE, MYF(0), "WITH CUBE", "global union parameters");
        YYABORT;
      }
      lex->current_select->olap = CUBE_TYPE;
      my_error(ER_NOT_SUPPORTED_YET, MYF(0), "CUBE");
      YYABORT; /* To be deleted in 5.1 */
    }
    break;

    case 1128:
#line 5722 "sql_yacc.yy"
    {
      LEX *lex = Lex;
      if (lex->current_select->linkage == GLOBAL_OPTIONS_TYPE)
      {
        my_error(ER_WRONG_USAGE, MYF(0), "WITH ROLLUP", "global union parameters");
        YYABORT;
      }
      lex->current_select->olap = ROLLUP_TYPE;
    }
    break;

    case 1131:
#line 5744 "sql_yacc.yy"
    {
      LEX *lex = Lex;
      if (lex->current_select->linkage != GLOBAL_OPTIONS_TYPE && lex->current_select->olap != UNSPECIFIED_OLAP_TYPE)
      {
        my_error(ER_WRONG_USAGE, MYF(0), "CUBE/ROLLUP", "ORDER BY");
        YYABORT;
      }
    }
    break;

    case 1133:
#line 5758 "sql_yacc.yy"
    {
      if (add_order_to_list(YYTHD, yyvsp[-1].item, (bool)yyvsp[0].num))
        YYABORT;
    }
    break;

    case 1134:
#line 5760 "sql_yacc.yy"
    {
      if (add_order_to_list(YYTHD, yyvsp[-1].item, (bool)yyvsp[0].num))
        YYABORT;
    }
    break;

    case 1135:
#line 5763 "sql_yacc.yy"
    {
      yyval.num = 1;
    }
    break;

    case 1136:
#line 5764 "sql_yacc.yy"
    {
      yyval.num = 1;
    }
    break;

    case 1137:
#line 5765 "sql_yacc.yy"
    {
      yyval.num = 0;
    }
    break;

    case 1138:
#line 5770 "sql_yacc.yy"
    {
      LEX *lex = Lex;
      SELECT_LEX *sel = lex->current_select;
      sel->offset_limit = 0;
      sel->select_limit = 0;
    }
    break;

    case 1139:
#line 5776 "sql_yacc.yy"
    {
    }
    break;

    case 1140:
#line 5780 "sql_yacc.yy"
    {
    }
    break;

    case 1141:
#line 5781 "sql_yacc.yy"
    {
    }
    break;

    case 1142:
#line 5785 "sql_yacc.yy"
    {
    }
    break;

    case 1143:
#line 5790 "sql_yacc.yy"
    {
      SELECT_LEX *sel = Select;
      sel->select_limit = yyvsp[0].item;
      sel->offset_limit = 0;
      sel->explicit_limit = 1;
    }
    break;

    case 1144:
#line 5797 "sql_yacc.yy"
    {
      SELECT_LEX *sel = Select;
      sel->select_limit = yyvsp[0].item;
      sel->offset_limit = yyvsp[-2].item;
      sel->explicit_limit = 1;
    }
    break;

    case 1145:
#line 5804 "sql_yacc.yy"
    {
      SELECT_LEX *sel = Select;
      sel->select_limit = yyvsp[-2].item;
      sel->offset_limit = yyvsp[0].item;
      sel->explicit_limit = 1;
    }
    break;

    case 1147:
#line 5813 "sql_yacc.yy"
    {
      yyval.item = new Item_uint(yyvsp[0].lex_str.str, yyvsp[0].lex_str.length);
    }
    break;

    case 1148:
#line 5814 "sql_yacc.yy"
    {
      yyval.item = new Item_uint(yyvsp[0].lex_str.str, yyvsp[0].lex_str.length);
    }
    break;

    case 1149:
#line 5815 "sql_yacc.yy"
    {
      yyval.item = new Item_uint(yyvsp[0].lex_str.str, yyvsp[0].lex_str.length);
    }
    break;

    case 1150:
#line 5820 "sql_yacc.yy"
    {
      LEX *lex = Lex;
      lex->current_select->select_limit = 0;
    }
    break;

    case 1151:
#line 5825 "sql_yacc.yy"
    {
      SELECT_LEX *sel = Select;
      sel->select_limit = yyvsp[0].item;
      sel->explicit_limit = 1;
    }
    break;

    case 1152:
#line 5832 "sql_yacc.yy"
    {
      int error;
      yyval.ulong_num = (ulong)my_strtoll10(yyvsp[0].lex_str.str, (char **)0, &error);
    }
    break;

    case 1153:
#line 5833 "sql_yacc.yy"
    {
      yyval.ulong_num = (ulong)strtol(yyvsp[0].lex_str.str, (char **)0, 16);
    }
    break;

    case 1154:
#line 5834 "sql_yacc.yy"
    {
      int error;
      yyval.ulong_num = (ulong)my_strtoll10(yyvsp[0].lex_str.str, (char **)0, &error);
    }
    break;

    case 1155:
#line 5835 "sql_yacc.yy"
    {
      int error;
      yyval.ulong_num = (ulong)my_strtoll10(yyvsp[0].lex_str.str, (char **)0, &error);
    }
    break;

    case 1156:
#line 5836 "sql_yacc.yy"
    {
      int error;
      yyval.ulong_num = (ulong)my_strtoll10(yyvsp[0].lex_str.str, (char **)0, &error);
    }
    break;

    case 1157:
#line 5837 "sql_yacc.yy"
    {
      int error;
      yyval.ulong_num = (ulong)my_strtoll10(yyvsp[0].lex_str.str, (char **)0, &error);
    }
    break;

    case 1158:
#line 5841 "sql_yacc.yy"
    {
      int error;
      yyval.ulonglong_number = (ulonglong)my_strtoll10(yyvsp[0].lex_str.str, (char **)0, &error);
    }
    break;

    case 1159:
#line 5842 "sql_yacc.yy"
    {
      int error;
      yyval.ulonglong_number = (ulonglong)my_strtoll10(yyvsp[0].lex_str.str, (char **)0, &error);
    }
    break;

    case 1160:
#line 5843 "sql_yacc.yy"
    {
      int error;
      yyval.ulonglong_number = (ulonglong)my_strtoll10(yyvsp[0].lex_str.str, (char **)0, &error);
    }
    break;

    case 1161:
#line 5844 "sql_yacc.yy"
    {
      int error;
      yyval.ulonglong_number = (ulonglong)my_strtoll10(yyvsp[0].lex_str.str, (char **)0, &error);
    }
    break;

    case 1162:
#line 5845 "sql_yacc.yy"
    {
      int error;
      yyval.ulonglong_number = (ulonglong)my_strtoll10(yyvsp[0].lex_str.str, (char **)0, &error);
    }
    break;

    case 1164:
#line 5851 "sql_yacc.yy"
    {
      LEX *lex = Lex;
      if (&lex->select_lex != lex->current_select)
      {
        my_error(ER_WRONG_USAGE, MYF(0), "PROCEDURE", "subquery");
        YYABORT;
      }
      lex->proc_list.elements = 0;
      lex->proc_list.first = 0;
      lex->proc_list.next = (byte **)&lex->proc_list.first;
      if (add_proc_to_list(lex->thd, new Item_field(&lex->current_select->context, NULL, NULL, yyvsp[0].lex_str.str)))
        YYABORT;
      Lex->uncacheable(UNCACHEABLE_SIDEEFFECT);
    }
    break;

    case 1166:
#line 5872 "sql_yacc.yy"
    {
    }
    break;

    case 1167:
#line 5873 "sql_yacc.yy"
    {
    }
    break;

    case 1170:
#line 5881 "sql_yacc.yy"
    {
      LEX *lex = Lex;
      if (add_proc_to_list(lex->thd, yyvsp[0].item))
        YYABORT;
      if (!yyvsp[0].item->name)
        yyvsp[0].item->set_name(yyvsp[-1].simple_string, (uint)((char *)lex->tok_end - yyvsp[-1].simple_string),
                                YYTHD->charset());
    }
    break;

    case 1171:
#line 5893 "sql_yacc.yy"
    {
      LEX *lex = Lex;
      if (!lex->describe && (!(lex->result = new select_dumpvar())))
        YYABORT;
    }
    break;

    case 1172:
#line 5899 "sql_yacc.yy"
    {
    }
    break;

    case 1174:
#line 5904 "sql_yacc.yy"
    {
    }
    break;

    case 1175:
#line 5909 "sql_yacc.yy"
    {
      LEX *lex = Lex;
      if (lex->result)
        ((select_dumpvar *)lex->result)->var_list.push_back(new my_var(yyvsp[0].lex_str, 0, 0, (enum_field_types)0));
      else
        YYABORT;
    }
    break;

    case 1176:
#line 5917 "sql_yacc.yy"
    {
      LEX *lex = Lex;
      sp_pvar_t *t;

      if (!lex->spcont || !(t = lex->spcont->find_pvar(&yyvsp[0].lex_str)))
      {
        my_error(ER_SP_UNDECLARED_VAR, MYF(0), yyvsp[0].lex_str.str);
        YYABORT;
      }
      if (!lex->result)
        YYABORT;
      else
      {
        ((select_dumpvar *)lex->result)->var_list.push_back(new my_var(yyvsp[0].lex_str, 1, t->offset, t->type));
      }
    }
    break;

    case 1177:
#line 5937 "sql_yacc.yy"
    {
      LEX *lex = Lex;
      lex->uncacheable(UNCACHEABLE_SIDEEFFECT);
      if (!(lex->exchange = new sql_exchange(yyvsp[0].lex_str.str, 0)) ||
          !(lex->result = new select_export(lex->exchange)))
        YYABORT;
    }
    break;

    case 1179:
#line 5946 "sql_yacc.yy"
    {
      LEX *lex = Lex;
      if (!lex->describe)
      {
        lex->uncacheable(UNCACHEABLE_SIDEEFFECT);
        if (!(lex->exchange = new sql_exchange(yyvsp[0].lex_str.str, 1)))
          YYABORT;
        if (!(lex->result = new select_dump(lex->exchange)))
          YYABORT;
      }
    }
    break;

    case 1180:
#line 5958 "sql_yacc.yy"
    {
      Lex->uncacheable(UNCACHEABLE_SIDEEFFECT);
    }
    break;

    case 1181:
#line 5968 "sql_yacc.yy"
    {
      LEX *lex = Lex;
      lex->sql_command = SQLCOM_DO;
      mysql_init_select(lex);
    }
    break;

    case 1182:
#line 5974 "sql_yacc.yy"
    {
      Lex->insert_list = yyvsp[0].item_list;
    }
    break;

    case 1183:
#line 5985 "sql_yacc.yy"
    {
      LEX *lex = Lex;
      lex->sql_command = SQLCOM_DROP_TABLE;
      lex->drop_temporary = yyvsp[-4].num;
      lex->drop_if_exists = yyvsp[-2].num;
      if (!lex->drop_temporary && lex->sphead && lex->sphead->m_type != TYPE_ENUM_PROCEDURE)
      {
        my_error(ER_COMMIT_NOT_ALLOWED_IN_SF_OR_TRG, MYF(0));
        YYABORT;
      }
    }
    break;

    case 1184:
#line 5997 "sql_yacc.yy"
    {
    }
    break;

    case 1185:
#line 5998 "sql_yacc.yy"
    {
      LEX *lex = Lex;
      if (lex->sphead && lex->sphead->m_type != TYPE_ENUM_PROCEDURE)
      {
        my_error(ER_COMMIT_NOT_ALLOWED_IN_SF_OR_TRG, MYF(0));
        YYABORT;
      }
      lex->sql_command = SQLCOM_DROP_INDEX;
      lex->alter_info.drop_list.empty();
      lex->alter_info.drop_list.push_back(new Alter_drop(Alter_drop::KEY, yyvsp[-3].lex_str.str));
      if (!lex->current_select->add_table_to_list(lex->thd, yyvsp[-1].table, NULL, TL_OPTION_UPDATING))
        YYABORT;
    }
    break;

    case 1186:
#line 6014 "sql_yacc.yy"
    {
      LEX *lex = Lex;
      lex->sql_command = SQLCOM_DROP_DB;
      lex->drop_if_exists = yyvsp[-1].num;
      lex->name = yyvsp[0].lex_str.str;
    }
    break;

    case 1187:
#line 6021 "sql_yacc.yy"
    {
      LEX *lex = Lex;
      if (lex->sphead)
      {
        my_error(ER_SP_NO_DROP_SP, MYF(0), "FUNCTION");
        YYABORT;
      }
      lex->sql_command = SQLCOM_DROP_FUNCTION;
      lex->drop_if_exists = yyvsp[-1].num;
      lex->spname = yyvsp[0].spname;
    }
    break;

    case 1188:
#line 6033 "sql_yacc.yy"
    {
      LEX *lex = Lex;
      if (lex->sphead)
      {
        my_error(ER_SP_NO_DROP_SP, MYF(0), "PROCEDURE");
        YYABORT;
      }
      lex->sql_command = SQLCOM_DROP_PROCEDURE;
      lex->drop_if_exists = yyvsp[-1].num;
      lex->spname = yyvsp[0].spname;
    }
    break;

    case 1189:
#line 6045 "sql_yacc.yy"
    {
      Lex->sql_command = SQLCOM_DROP_USER;
    }
    break;

    case 1190:
#line 6049 "sql_yacc.yy"
    {
      THD *thd = YYTHD;
      LEX *lex = thd->lex;
      if (lex->sphead && lex->sphead->m_type != TYPE_ENUM_PROCEDURE)
      {
        my_error(ER_COMMIT_NOT_ALLOWED_IN_SF_OR_TRG, MYF(0));
        YYABORT;
      }
      lex->sql_command = SQLCOM_DROP_VIEW;
      lex->drop_if_exists = yyvsp[-2].num;
    }
    break;

    case 1191:
#line 6061 "sql_yacc.yy"
    {
      LEX *lex = Lex;
      lex->sql_command = SQLCOM_DROP_TRIGGER;
      lex->spname = yyvsp[0].spname;
    }
    break;

    case 1194:
#line 6074 "sql_yacc.yy"
    {
      if (!Select->add_table_to_list(YYTHD, yyvsp[0].table, NULL, TL_OPTION_UPDATING))
        YYABORT;
    }
    break;

    case 1195:
#line 6081 "sql_yacc.yy"
    {
      yyval.num = 0;
    }
    break;

    case 1196:
#line 6082 "sql_yacc.yy"
    {
      yyval.num = 1;
    }
    break;

    case 1197:
#line 6086 "sql_yacc.yy"
    {
      yyval.num = 0;
    }
    break;

    case 1198:
#line 6087 "sql_yacc.yy"
    {
      yyval.num = 1;
    }
    break;

    case 1199:
#line 6095 "sql_yacc.yy"
    {
      LEX *lex = Lex;
      lex->sql_command = SQLCOM_INSERT;
      lex->duplicates = DUP_ERROR;
      mysql_init_select(lex);
      /* for subselects */
      lex->lock_option = (using_update_log) ? TL_READ_NO_INSERT : TL_READ;
    }
    break;

    case 1200:
#line 6104 "sql_yacc.yy"
    {
      Select->set_lock_for_tables(yyvsp[-2].lock_type);
      Lex->current_select = &Lex->select_lex;
    }
    break;

    case 1201:
#line 6109 "sql_yacc.yy"
    {
    }
    break;

    case 1202:
#line 6114 "sql_yacc.yy"
    {
      LEX *lex = Lex;
      lex->sql_command = SQLCOM_REPLACE;
      lex->duplicates = DUP_REPLACE;
      mysql_init_select(lex);
    }
    break;

    case 1203:
#line 6121 "sql_yacc.yy"
    {
      Select->set_lock_for_tables(yyvsp[-1].lock_type);
      Lex->current_select = &Lex->select_lex;
    }
    break;

    case 1204:
#line 6126 "sql_yacc.yy"
    {
    }
    break;

    case 1205:
#line 6130 "sql_yacc.yy"
    {
      yyval.lock_type = TL_WRITE_CONCURRENT_INSERT;
    }
    break;

    case 1206:
#line 6131 "sql_yacc.yy"
    {
      yyval.lock_type = TL_WRITE_LOW_PRIORITY;
    }
    break;

    case 1207:
#line 6132 "sql_yacc.yy"
    {
      yyval.lock_type = TL_WRITE_DELAYED;
    }
    break;

    case 1208:
#line 6133 "sql_yacc.yy"
    {
      yyval.lock_type = TL_WRITE;
    }
    break;

    case 1209:
#line 6137 "sql_yacc.yy"
    {
      yyval.lock_type = yyvsp[0].lock_type;
    }
    break;

    case 1210:
#line 6138 "sql_yacc.yy"
    {
      yyval.lock_type = TL_WRITE_DELAYED;
    }
    break;

    case 1211:
#line 6141 "sql_yacc.yy"
    {
    }
    break;

    case 1212:
#line 6142 "sql_yacc.yy"
    {
    }
    break;

    case 1213:
#line 6146 "sql_yacc.yy"
    {
      LEX *lex = Lex;
      lex->field_list.empty();
      lex->many_values.empty();
      lex->insert_list = 0;
    }
    break;

    case 1214:
#line 6154 "sql_yacc.yy"
    {
    }
    break;

    case 1215:
#line 6155 "sql_yacc.yy"
    {
    }
    break;

    case 1216:
#line 6156 "sql_yacc.yy"
    {
    }
    break;

    case 1217:
#line 6158 "sql_yacc.yy"
    {
      LEX *lex = Lex;
      if (!(lex->insert_list = new List_item) || lex->many_values.push_back(lex->insert_list))
        YYABORT;
    }
    break;

    case 1219:
#line 6167 "sql_yacc.yy"
    {
      Lex->field_list.push_back(yyvsp[0].item);
    }
    break;

    case 1220:
#line 6168 "sql_yacc.yy"
    {
      Lex->field_list.push_back(yyvsp[0].item);
    }
    break;

    case 1221:
#line 6171 "sql_yacc.yy"
    {
    }
    break;

    case 1222:
#line 6172 "sql_yacc.yy"
    {
    }
    break;

    case 1223:
#line 6173 "sql_yacc.yy"
    {
      Select->set_braces(0);
    }
    break;

    case 1224:
#line 6173 "sql_yacc.yy"
    {
    }
    break;

    case 1225:
#line 6174 "sql_yacc.yy"
    {
      Select->set_braces(1);
    }
    break;

    case 1226:
#line 6174 "sql_yacc.yy"
    {
    }
    break;

    case 1231:
#line 6188 "sql_yacc.yy"
    {
      LEX *lex = Lex;
      if (lex->field_list.push_back(yyvsp[-2].item) || lex->insert_list->push_back(yyvsp[0].item))
        YYABORT;
    }
    break;

    case 1232:
#line 6195 "sql_yacc.yy"
    {
    }
    break;

    case 1233:
#line 6196 "sql_yacc.yy"
    {
    }
    break;

    case 1234:
#line 6200 "sql_yacc.yy"
    {
    }
    break;

    case 1235:
#line 6201 "sql_yacc.yy"
    {
    }
    break;

    case 1236:
#line 6206 "sql_yacc.yy"
    {
      if (!(Lex->insert_list = new List_item))
        YYABORT;
    }
    break;

    case 1237:
#line 6211 "sql_yacc.yy"
    {
      LEX *lex = Lex;
      if (lex->many_values.push_back(lex->insert_list))
        YYABORT;
    }
    break;

    case 1238:
#line 6218 "sql_yacc.yy"
    {
    }
    break;

    case 1240:
#line 6223 "sql_yacc.yy"
    {
      if (Lex->insert_list->push_back(yyvsp[0].item))
        YYABORT;
    }
    break;

    case 1241:
#line 6228 "sql_yacc.yy"
    {
      if (Lex->insert_list->push_back(yyvsp[0].item))
        YYABORT;
    }
    break;

    case 1242:
#line 6235 "sql_yacc.yy"
    {
      yyval.item = yyvsp[0].item;
    }
    break;

    case 1243:
#line 6236 "sql_yacc.yy"
    {
      yyval.item = new Item_default_value(Lex->current_context());
    }
    break;

    case 1245:
#line 6241 "sql_yacc.yy"
    {
      Lex->duplicates = DUP_UPDATE;
    }
    break;

    case 1247:
#line 6249 "sql_yacc.yy"
    {
      LEX *lex = Lex;
      mysql_init_select(lex);
      lex->sql_command = SQLCOM_UPDATE;
      lex->lock_option = TL_UNLOCK; /* Will be set later */
      lex->duplicates = DUP_ERROR;
    }
    break;

    case 1248:
#line 6258 "sql_yacc.yy"
    {
      LEX *lex = Lex;
      if (lex->select_lex.table_list.elements > 1)
        lex->sql_command = SQLCOM_UPDATE_MULTI;
      else if (lex->select_lex.get_table_list()->derived)
      {
        /* it is single table update and it is update of derived table */
        my_error(ER_NON_UPDATABLE_TABLE, MYF(0), lex->select_lex.get_table_list()->alias, "UPDATE");
        YYABORT;
      }
      /*
        In case of multi-update setting write lock for all tables may
        be too pessimistic. We will decrease lock level if possible in
        mysql_multi_update().
      */
      Select->set_lock_for_tables(yyvsp[-4].lock_type);
    }
    break;

    case 1249:
#line 6276 "sql_yacc.yy"
    {
    }
    break;

    case 1252:
#line 6285 "sql_yacc.yy"
    {
      if (add_item_to_list(YYTHD, yyvsp[-2].item) || add_value_to_list(YYTHD, yyvsp[0].item))
        YYABORT;
    }
    break;

    case 1255:
#line 6296 "sql_yacc.yy"
    {
      LEX *lex = Lex;
      if (lex->update_list.push_back(yyvsp[-2].item) || lex->value_list.push_back(yyvsp[0].item))
        YYABORT;
    }
    break;

    case 1256:
#line 6304 "sql_yacc.yy"
    {
      yyval.lock_type = YYTHD->update_lock_default;
    }
    break;

    case 1257:
#line 6305 "sql_yacc.yy"
    {
      yyval.lock_type = TL_WRITE_LOW_PRIORITY;
    }
    break;

    case 1258:
#line 6311 "sql_yacc.yy"
    {
      LEX *lex = Lex;
      lex->sql_command = SQLCOM_DELETE;
      mysql_init_select(lex);
      lex->lock_option = lex->thd->update_lock_default;
      lex->ignore = 0;
      lex->select_lex.init_order();
    }
    break;

    case 1259:
#line 6319 "sql_yacc.yy"
    {
    }
    break;

    case 1260:
#line 6324 "sql_yacc.yy"
    {
      if (!Select->add_table_to_list(YYTHD, yyvsp[0].table, NULL, TL_OPTION_UPDATING, Lex->lock_option))
        YYABORT;
    }
    break;

    case 1261:
#line 6330 "sql_yacc.yy"
    {
    }
    break;

    case 1262:
#line 6332 "sql_yacc.yy"
    {
      mysql_init_multi_delete(Lex);
    }
    break;

    case 1263:
#line 6334 "sql_yacc.yy"
    {
      if (multi_delete_set_locks_and_link_aux_tables(Lex))
        YYABORT;
    }
    break;

    case 1264:
#line 6339 "sql_yacc.yy"
    {
      mysql_init_multi_delete(Lex);
    }
    break;

    case 1265:
#line 6341 "sql_yacc.yy"
    {
      if (multi_delete_set_locks_and_link_aux_tables(Lex))
        YYABORT;
    }
    break;

    case 1266:
#line 6348 "sql_yacc.yy"
    {
    }
    break;

    case 1267:
#line 6349 "sql_yacc.yy"
    {
    }
    break;

    case 1268:
#line 6353 "sql_yacc.yy"
    {
      if (!Select->add_table_to_list(YYTHD, new Table_ident(yyvsp[-2].lex_str), yyvsp[0].lex_str_ptr,
                                     TL_OPTION_UPDATING, Lex->lock_option))
        YYABORT;
    }
    break;

    case 1269:
#line 6359 "sql_yacc.yy"
    {
      if (!Select->add_table_to_list(YYTHD, new Table_ident(YYTHD, yyvsp[-4].lex_str, yyvsp[-2].lex_str, 0),
                                     yyvsp[0].lex_str_ptr, TL_OPTION_UPDATING, Lex->lock_option))
        YYABORT;
    }
    break;

    case 1270:
#line 6369 "sql_yacc.yy"
    {
    }
    break;

    case 1271:
#line 6370 "sql_yacc.yy"
    {
    }
    break;

    case 1272:
#line 6374 "sql_yacc.yy"
    {
    }
    break;

    case 1273:
#line 6375 "sql_yacc.yy"
    {
    }
    break;

    case 1274:
#line 6378 "sql_yacc.yy"
    {
      Select->options |= OPTION_QUICK;
    }
    break;

    case 1275:
#line 6379 "sql_yacc.yy"
    {
      Lex->lock_option = TL_WRITE_LOW_PRIORITY;
    }
    break;

    case 1276:
#line 6380 "sql_yacc.yy"
    {
      Lex->ignore = 1;
    }
    break;

    case 1277:
#line 6384 "sql_yacc.yy"
    {
      LEX *lex = Lex;
      lex->sql_command = SQLCOM_TRUNCATE;
      lex->select_lex.options = 0;
      lex->select_lex.init_order();
    }
    break;

    case 1280:
#line 6399 "sql_yacc.yy"
    {
      LEX *lex = Lex;
      lex->wild = 0;
      lex->lock_option = TL_READ;
      mysql_init_select(lex);
      lex->current_select->parsing_place = SELECT_LIST;
      bzero((char *)&lex->create_info, sizeof(lex->create_info));
    }
    break;

    case 1281:
#line 6408 "sql_yacc.yy"
    {
    }
    break;

    case 1282:
#line 6413 "sql_yacc.yy"
    {
      LEX *lex = Lex;
      lex->sql_command = SQLCOM_SELECT;
      lex->orig_sql_command = SQLCOM_SHOW_DATABASES;
      if (prepare_schema_table(YYTHD, lex, 0, SCH_SCHEMATA))
        YYABORT;
    }
    break;

    case 1283:
#line 6421 "sql_yacc.yy"
    {
      LEX *lex = Lex;
      lex->sql_command = SQLCOM_SELECT;
      lex->orig_sql_command = SQLCOM_SHOW_TABLES;
      lex->select_lex.db = yyvsp[-1].simple_string;
      if (prepare_schema_table(YYTHD, lex, 0, SCH_TABLE_NAMES))
        YYABORT;
    }
    break;

    case 1284:
#line 6430 "sql_yacc.yy"
    {
      LEX *lex = Lex;
      lex->sql_command = SQLCOM_SELECT;
      lex->orig_sql_command = SQLCOM_SHOW_TRIGGERS;
      lex->select_lex.db = yyvsp[-1].simple_string;
      if (prepare_schema_table(YYTHD, lex, 0, SCH_TRIGGERS))
        YYABORT;
    }
    break;

    case 1285:
#line 6439 "sql_yacc.yy"
    {
      LEX *lex = Lex;
      lex->sql_command = SQLCOM_SELECT;
      lex->orig_sql_command = SQLCOM_SHOW_TABLE_STATUS;
      lex->select_lex.db = yyvsp[-1].simple_string;
      if (prepare_schema_table(YYTHD, lex, 0, SCH_TABLES))
        YYABORT;
    }
    break;

    case 1286:
#line 6448 "sql_yacc.yy"
    {
      LEX *lex = Lex;
      lex->sql_command = SQLCOM_SELECT;
      lex->orig_sql_command = SQLCOM_SHOW_OPEN_TABLES;
      lex->select_lex.db = yyvsp[-1].simple_string;
      if (prepare_schema_table(YYTHD, lex, 0, SCH_OPEN_TABLES))
        YYABORT;
    }
    break;

    case 1287:
#line 6457 "sql_yacc.yy"
    {
      Lex->create_info.db_type = yyvsp[0].db_type;
    }
    break;

    case 1289:
#line 6460 "sql_yacc.yy"
    {
      LEX *lex = Lex;
      lex->sql_command = SQLCOM_SELECT;
      lex->orig_sql_command = SQLCOM_SHOW_FIELDS;
      if (yyvsp[-1].simple_string)
        yyvsp[-2].table->change_db(yyvsp[-1].simple_string);
      if (prepare_schema_table(YYTHD, lex, yyvsp[-2].table, SCH_COLUMNS))
        YYABORT;
    }
    break;

    case 1290:
#line 6473 "sql_yacc.yy"
    {
      Lex->sql_command = SQLCOM_SHOW_NEW_MASTER;
      Lex->mi.log_file_name = yyvsp[-8].lex_str.str;
      Lex->mi.pos = yyvsp[-4].ulonglong_number;
      Lex->mi.server_id = yyvsp[0].ulong_num;
    }
    break;

    case 1291:
#line 6480 "sql_yacc.yy"
    {
      Lex->sql_command = SQLCOM_SHOW_BINLOGS;
    }
    break;

    case 1292:
#line 6484 "sql_yacc.yy"
    {
      Lex->sql_command = SQLCOM_SHOW_SLAVE_HOSTS;
    }
    break;

    case 1293:
#line 6488 "sql_yacc.yy"
    {
      LEX *lex = Lex;
      lex->sql_command = SQLCOM_SHOW_BINLOG_EVENTS;
    }
    break;

    case 1295:
#line 6493 "sql_yacc.yy"
    {
      LEX *lex = Lex;
      lex->sql_command = SQLCOM_SELECT;
      lex->orig_sql_command = SQLCOM_SHOW_KEYS;
      if (yyvsp[-1].simple_string)
        yyvsp[-2].table->change_db(yyvsp[-1].simple_string);
      if (prepare_schema_table(YYTHD, lex, yyvsp[-2].table, SCH_STATISTICS))
        YYABORT;
    }
    break;

    case 1296:
#line 6503 "sql_yacc.yy"
    {
      LEX *lex = Lex;
      lex->sql_command = SQLCOM_SHOW_COLUMN_TYPES;
    }
    break;

    case 1297:
#line 6508 "sql_yacc.yy"
    {
      LEX *lex = Lex;
      lex->sql_command = SQLCOM_SHOW_STORAGE_ENGINES;
      WARN_DEPRECATED("SHOW TABLE TYPES", "SHOW [STORAGE] ENGINES");
    }
    break;

    case 1298:
#line 6514 "sql_yacc.yy"
    {
      LEX *lex = Lex;
      lex->sql_command = SQLCOM_SHOW_STORAGE_ENGINES;
    }
    break;

    case 1299:
#line 6519 "sql_yacc.yy"
    {
      LEX *lex = Lex;
      lex->sql_command = SQLCOM_SHOW_PRIVILEGES;
    }
    break;

    case 1300:
#line 6524 "sql_yacc.yy"
    {
      (void)create_select_for_variable("warning_count");
    }
    break;

    case 1301:
#line 6526 "sql_yacc.yy"
    {
      (void)create_select_for_variable("error_count");
    }
    break;

    case 1302:
#line 6528 "sql_yacc.yy"
    {
      Lex->sql_command = SQLCOM_SHOW_WARNS;
    }
    break;

    case 1303:
#line 6530 "sql_yacc.yy"
    {
      Lex->sql_command = SQLCOM_SHOW_ERRORS;
    }
    break;

    case 1304:
#line 6532 "sql_yacc.yy"
    {
      LEX *lex = Lex;
      lex->sql_command = SQLCOM_SELECT;
      lex->orig_sql_command = SQLCOM_SHOW_STATUS;
      lex->option_type = yyvsp[-2].var_type;
      if (prepare_schema_table(YYTHD, lex, 0, SCH_STATUS))
        YYABORT;
    }
    break;

    case 1305:
#line 6541 "sql_yacc.yy"
    {
      Lex->sql_command = SQLCOM_SHOW_INNODB_STATUS;
      WARN_DEPRECATED("SHOW INNODB STATUS", "SHOW ENGINE INNODB STATUS");
    }
    break;

    case 1306:
#line 6543 "sql_yacc.yy"
    {
      Lex->sql_command = SQLCOM_SHOW_MUTEX_STATUS;
    }
    break;

    case 1307:
#line 6545 "sql_yacc.yy"
    {
      Lex->sql_command = SQLCOM_SHOW_PROCESSLIST;
    }
    break;

    case 1308:
#line 6547 "sql_yacc.yy"
    {
      LEX *lex = Lex;
      lex->sql_command = SQLCOM_SELECT;
      lex->orig_sql_command = SQLCOM_SHOW_VARIABLES;
      lex->option_type = yyvsp[-2].var_type;
      if (prepare_schema_table(YYTHD, lex, 0, SCH_VARIABLES))
        YYABORT;
    }
    break;

    case 1309:
#line 6556 "sql_yacc.yy"
    {
      LEX *lex = Lex;
      lex->sql_command = SQLCOM_SELECT;
      lex->orig_sql_command = SQLCOM_SHOW_CHARSETS;
      if (prepare_schema_table(YYTHD, lex, 0, SCH_CHARSETS))
        YYABORT;
    }
    break;

    case 1310:
#line 6564 "sql_yacc.yy"
    {
      LEX *lex = Lex;
      lex->sql_command = SQLCOM_SELECT;
      lex->orig_sql_command = SQLCOM_SHOW_COLLATIONS;
      if (prepare_schema_table(YYTHD, lex, 0, SCH_COLLATIONS))
        YYABORT;
    }
    break;

    case 1311:
#line 6572 "sql_yacc.yy"
    {
      Lex->sql_command = SQLCOM_SHOW_LOGS;
      WARN_DEPRECATED("SHOW BDB LOGS", "SHOW ENGINE BDB LOGS");
    }
    break;

    case 1312:
#line 6574 "sql_yacc.yy"
    {
      Lex->sql_command = SQLCOM_SHOW_LOGS;
      WARN_DEPRECATED("SHOW LOGS", "SHOW ENGINE BDB LOGS");
    }
    break;

    case 1313:
#line 6576 "sql_yacc.yy"
    {
      LEX *lex = Lex;
      lex->sql_command = SQLCOM_SHOW_GRANTS;
      THD *thd = lex->thd;
      Security_context *sctx = thd->security_ctx;
      LEX_USER *curr_user;
      if (!(curr_user = (LEX_USER *)thd->alloc(sizeof(st_lex_user))))
        YYABORT;
      curr_user->user.str = sctx->priv_user;
      curr_user->user.length = strlen(sctx->priv_user);
      if (*sctx->priv_host != 0)
      {
        curr_user->host.str = sctx->priv_host;
        curr_user->host.length = strlen(sctx->priv_host);
      }
      else
      {
        curr_user->host.str = (char *)"%";
        curr_user->host.length = 1;
      }
      curr_user->password = null_lex_str;
      lex->grant_user = curr_user;
    }
    break;

    case 1314:
#line 6600 "sql_yacc.yy"
    {
      LEX *lex = Lex;
      lex->sql_command = SQLCOM_SHOW_GRANTS;
      lex->grant_user = yyvsp[0].lex_user;
      lex->grant_user->password = null_lex_str;
    }
    break;

    case 1315:
#line 6607 "sql_yacc.yy"
    {
      Lex->sql_command = SQLCOM_SHOW_CREATE_DB;
      Lex->create_info.options = yyvsp[-1].num;
      Lex->name = yyvsp[0].lex_str.str;
    }
    break;

    case 1316:
#line 6613 "sql_yacc.yy"
    {
      LEX *lex = Lex;
      lex->sql_command = SQLCOM_SHOW_CREATE;
      if (!lex->select_lex.add_table_to_list(YYTHD, yyvsp[0].table, NULL, 0))
        YYABORT;
      lex->only_view = 0;
    }
    break;

    case 1317:
#line 6621 "sql_yacc.yy"
    {
      LEX *lex = Lex;
      lex->sql_command = SQLCOM_SHOW_CREATE;
      if (!lex->select_lex.add_table_to_list(YYTHD, yyvsp[0].table, NULL, 0))
        YYABORT;
      lex->only_view = 1;
    }
    break;

    case 1318:
#line 6629 "sql_yacc.yy"
    {
      Lex->sql_command = SQLCOM_SHOW_MASTER_STAT;
    }
    break;

    case 1319:
#line 6633 "sql_yacc.yy"
    {
      Lex->sql_command = SQLCOM_SHOW_SLAVE_STAT;
    }
    break;

    case 1320:
#line 6637 "sql_yacc.yy"
    {
      LEX *lex = Lex;

      lex->sql_command = SQLCOM_SHOW_CREATE_PROC;
      lex->spname = yyvsp[0].spname;
    }
    break;

    case 1321:
#line 6644 "sql_yacc.yy"
    {
      LEX *lex = Lex;

      lex->sql_command = SQLCOM_SHOW_CREATE_FUNC;
      lex->spname = yyvsp[0].spname;
    }
    break;

    case 1322:
#line 6651 "sql_yacc.yy"
    {
      LEX *lex = Lex;
      lex->sql_command = SQLCOM_SELECT;
      lex->orig_sql_command = SQLCOM_SHOW_STATUS_PROC;
      if (!sp_add_to_query_tables(YYTHD, lex, "mysql", "proc", TL_READ))
        YYABORT;
      if (prepare_schema_table(YYTHD, lex, 0, SCH_PROCEDURES))
        YYABORT;
    }
    break;

    case 1323:
#line 6661 "sql_yacc.yy"
    {
      LEX *lex = Lex;
      lex->sql_command = SQLCOM_SELECT;
      lex->orig_sql_command = SQLCOM_SHOW_STATUS_FUNC;
      if (!sp_add_to_query_tables(YYTHD, lex, "mysql", "proc", TL_READ))
        YYABORT;
      if (prepare_schema_table(YYTHD, lex, 0, SCH_PROCEDURES))
        YYABORT;
    }
    break;

    case 1324:
#line 6673 "sql_yacc.yy"
    {
      switch (Lex->create_info.db_type)
      {
        case DB_TYPE_NDBCLUSTER:
          Lex->sql_command = SQLCOM_SHOW_NDBCLUSTER_STATUS;
          break;
        case DB_TYPE_INNODB:
          Lex->sql_command = SQLCOM_SHOW_INNODB_STATUS;
          break;
        default:
          my_error(ER_NOT_SUPPORTED_YET, MYF(0), "STATUS");
          YYABORT;
      }
    }
    break;

    case 1325:
#line 6687 "sql_yacc.yy"
    {
      switch (Lex->create_info.db_type)
      {
        case DB_TYPE_BERKELEY_DB:
          Lex->sql_command = SQLCOM_SHOW_LOGS;
          break;
        default:
          my_error(ER_NOT_SUPPORTED_YET, MYF(0), "LOGS");
          YYABORT;
      }
    }
    break;

    case 1330:
#line 6707 "sql_yacc.yy"
    {
      yyval.simple_string = 0;
    }
    break;

    case 1331:
#line 6708 "sql_yacc.yy"
    {
      yyval.simple_string = yyvsp[0].lex_str.str;
    }
    break;

    case 1332:
#line 6711 "sql_yacc.yy"
    {
      Lex->verbose = 0;
    }
    break;

    case 1333:
#line 6712 "sql_yacc.yy"
    {
      Lex->verbose = 1;
    }
    break;

    case 1336:
#line 6719 "sql_yacc.yy"
    {
      Lex->mi.log_file_name = 0;
    }
    break;

    case 1337:
#line 6720 "sql_yacc.yy"
    {
      Lex->mi.log_file_name = yyvsp[0].lex_str.str;
    }
    break;

    case 1338:
#line 6723 "sql_yacc.yy"
    {
      Lex->mi.pos = 4; /* skip magic number */
    }
    break;

    case 1339:
#line 6724 "sql_yacc.yy"
    {
      Lex->mi.pos = yyvsp[0].ulonglong_number;
    }
    break;

    case 1341:
#line 6729 "sql_yacc.yy"
    {
      Lex->wild = new (YYTHD->mem_root) String(yyvsp[0].lex_str.str, yyvsp[0].lex_str.length, system_charset_info);
    }
    break;

    case 1342:
#line 6732 "sql_yacc.yy"
    {
      Select->where = yyvsp[0].item;
      if (yyvsp[0].item)
        yyvsp[0].item->top_level_item();
    }
    break;

    case 1343:
#line 6743 "sql_yacc.yy"
    {
      LEX *lex = Lex;
      lex->lock_option = TL_READ;
      mysql_init_select(lex);
      lex->current_select->parsing_place = SELECT_LIST;
      lex->sql_command = SQLCOM_SELECT;
      lex->orig_sql_command = SQLCOM_SHOW_FIELDS;
      lex->select_lex.db = 0;
      lex->verbose = 0;
      if (prepare_schema_table(YYTHD, lex, yyvsp[0].table, SCH_COLUMNS))
        YYABORT;
    }
    break;

    case 1344:
#line 6755 "sql_yacc.yy"
    {
    }
    break;

    case 1345:
#line 6757 "sql_yacc.yy"
    {
      Lex->describe |= DESCRIBE_NORMAL;
    }
    break;

    case 1346:
#line 6759 "sql_yacc.yy"
    {
      LEX *lex = Lex;
      lex->select_lex.options |= SELECT_DESCRIBE;
    }
    break;

    case 1349:
#line 6770 "sql_yacc.yy"
    {
    }
    break;

    case 1350:
#line 6771 "sql_yacc.yy"
    {
      Lex->describe |= DESCRIBE_EXTENDED;
    }
    break;

    case 1351:
#line 6775 "sql_yacc.yy"
    {
    }
    break;

    case 1352:
#line 6776 "sql_yacc.yy"
    {
      Lex->wild = yyvsp[0].string;
    }
    break;

    case 1353:
#line 6778 "sql_yacc.yy"
    {
      Lex->wild = new (YYTHD->mem_root)
          String((const char *)yyvsp[0].lex_str.str, yyvsp[0].lex_str.length, system_charset_info);
    }
    break;

    case 1354:
#line 6785 "sql_yacc.yy"
    {
      LEX *lex = Lex;
      if (lex->sphead && lex->sphead->m_type != TYPE_ENUM_PROCEDURE)
      {
        /*
          Note that both FLUSH TABLES and FLUSH PRIVILEGES will break
          execution in prelocked mode. So it is better to disable
          FLUSH in stored functions and triggers completely.
        */
        my_error(ER_STMT_NOT_ALLOWED_IN_SF_OR_TRG, MYF(0), "FLUSH");
        YYABORT;
      }
      lex->sql_command = SQLCOM_FLUSH;
      lex->type = 0;
      lex->no_write_to_binlog = yyvsp[0].num;
    }
    break;

    case 1355:
#line 6801 "sql_yacc.yy"
    {
    }
    break;

    case 1358:
#line 6809 "sql_yacc.yy"
    {
      Lex->type |= REFRESH_TABLES;
    }
    break;

    case 1359:
#line 6809 "sql_yacc.yy"
    {
    }
    break;

    case 1360:
#line 6810 "sql_yacc.yy"
    {
      Lex->type |= REFRESH_TABLES | REFRESH_READ_LOCK;
    }
    break;

    case 1361:
#line 6811 "sql_yacc.yy"
    {
      Lex->type |= REFRESH_QUERY_CACHE_FREE;
    }
    break;

    case 1362:
#line 6812 "sql_yacc.yy"
    {
      Lex->type |= REFRESH_HOSTS;
    }
    break;

    case 1363:
#line 6813 "sql_yacc.yy"
    {
      Lex->type |= REFRESH_GRANT;
    }
    break;

    case 1364:
#line 6814 "sql_yacc.yy"
    {
      Lex->type |= REFRESH_LOG;
    }
    break;

    case 1365:
#line 6815 "sql_yacc.yy"
    {
      Lex->type |= REFRESH_STATUS;
    }
    break;

    case 1366:
#line 6816 "sql_yacc.yy"
    {
      Lex->type |= REFRESH_SLAVE;
    }
    break;

    case 1367:
#line 6817 "sql_yacc.yy"
    {
      Lex->type |= REFRESH_MASTER;
    }
    break;

    case 1368:
#line 6818 "sql_yacc.yy"
    {
      Lex->type |= REFRESH_DES_KEY_FILE;
    }
    break;

    case 1369:
#line 6819 "sql_yacc.yy"
    {
      Lex->type |= REFRESH_USER_RESOURCES;
    }
    break;

    case 1370:
#line 6822 "sql_yacc.yy"
    {
      ;
    }
    break;

    case 1371:
#line 6823 "sql_yacc.yy"
    {
      ;
    }
    break;

    case 1372:
#line 6827 "sql_yacc.yy"
    {
      LEX *lex = Lex;
      lex->sql_command = SQLCOM_RESET;
      lex->type = 0;
    }
    break;

    case 1373:
#line 6831 "sql_yacc.yy"
    {
    }
    break;

    case 1376:
#line 6839 "sql_yacc.yy"
    {
      Lex->type |= REFRESH_SLAVE;
    }
    break;

    case 1377:
#line 6840 "sql_yacc.yy"
    {
      Lex->type |= REFRESH_MASTER;
    }
    break;

    case 1378:
#line 6841 "sql_yacc.yy"
    {
      Lex->type |= REFRESH_QUERY_CACHE;
    }
    break;

    case 1379:
#line 6845 "sql_yacc.yy"
    {
      LEX *lex = Lex;
      lex->type = 0;
    }
    break;

    case 1380:
#line 6849 "sql_yacc.yy"
    {
    }
    break;

    case 1382:
#line 6858 "sql_yacc.yy"
    {
      Lex->sql_command = SQLCOM_PURGE;
      Lex->to_log = yyvsp[0].lex_str.str;
    }
    break;

    case 1383:
#line 6863 "sql_yacc.yy"
    {
      LEX *lex = Lex;
      lex->value_list.empty();
      lex->value_list.push_front(yyvsp[0].item);
      lex->sql_command = SQLCOM_PURGE_BEFORE;
    }
    break;

    case 1384:
#line 6875 "sql_yacc.yy"
    {
      LEX *lex = Lex;
      lex->value_list.empty();
      lex->value_list.push_front(yyvsp[0].item);
      lex->sql_command = SQLCOM_KILL;
    }
    break;

    case 1385:
#line 6883 "sql_yacc.yy"
    {
      Lex->type = 0;
    }
    break;

    case 1386:
#line 6884 "sql_yacc.yy"
    {
      Lex->type = 0;
    }
    break;

    case 1387:
#line 6885 "sql_yacc.yy"
    {
      Lex->type = ONLY_KILL_QUERY;
    }
    break;

    case 1388:
#line 6890 "sql_yacc.yy"
    {
      LEX *lex = Lex;
      lex->sql_command = SQLCOM_CHANGE_DB;
      lex->select_lex.db = yyvsp[0].lex_str.str;
    }
    break;

    case 1389:
#line 6899 "sql_yacc.yy"
    {
      LEX *lex = Lex;
      if (lex->sphead)
      {
        my_error(ER_SP_BADSTATEMENT, MYF(0), "LOAD DATA");
        YYABORT;
      }
      lex->fname_start = lex->ptr;
    }
    break;

    case 1390:
#line 6909 "sql_yacc.yy"
    {
    }
    break;

    case 1391:
#line 6912 "sql_yacc.yy"
    {
      LEX *lex = Lex;
      if (lex->sphead)
      {
        my_error(ER_SP_BADSTATEMENT, MYF(0), "LOAD TABLE");
        YYABORT;
      }
      lex->sql_command = SQLCOM_LOAD_MASTER_TABLE;
      if (!Select->add_table_to_list(YYTHD, yyvsp[-2].table, NULL, TL_OPTION_UPDATING))
        YYABORT;
    }
    break;

    case 1392:
#line 6926 "sql_yacc.yy"
    {
      LEX *lex = Lex;
      lex->sql_command = SQLCOM_LOAD;
      lex->lock_option = yyvsp[-3].lock_type;
      lex->local_file = yyvsp[-2].num;
      lex->duplicates = DUP_ERROR;
      lex->ignore = 0;
      if (!(lex->exchange = new sql_exchange(yyvsp[0].lex_str.str, 0)))
        YYABORT;
    }
    break;

    case 1393:
#line 6937 "sql_yacc.yy"
    {
      LEX *lex = Lex;
      lex->fname_end = lex->ptr;
    }
    break;

    case 1394:
#line 6942 "sql_yacc.yy"
    {
      LEX *lex = Lex;
      if (!Select->add_table_to_list(YYTHD, yyvsp[0].table, NULL, TL_OPTION_UPDATING, lex->lock_option))
        YYABORT;
      lex->field_list.empty();
      lex->update_list.empty();
      lex->value_list.empty();
    }
    break;

    case 1395:
#line 6953 "sql_yacc.yy"
    {
    }
    break;

    case 1396:
#line 6956 "sql_yacc.yy"
    {
      Lex->sql_command = SQLCOM_LOAD_MASTER_DATA;
    }
    break;

    case 1397:
#line 6961 "sql_yacc.yy"
    {
      yyval.num = 0;
    }
    break;

    case 1398:
#line 6962 "sql_yacc.yy"
    {
      yyval.num = 1;
    }
    break;

    case 1399:
#line 6965 "sql_yacc.yy"
    {
      yyval.lock_type = YYTHD->update_lock_default;
    }
    break;

    case 1400:
#line 6966 "sql_yacc.yy"
    {
      yyval.lock_type = TL_WRITE_CONCURRENT_INSERT;
    }
    break;

    case 1401:
#line 6967 "sql_yacc.yy"
    {
      yyval.lock_type = TL_WRITE_LOW_PRIORITY;
    }
    break;

    case 1402:
#line 6971 "sql_yacc.yy"
    {
      Lex->duplicates = DUP_ERROR;
    }
    break;

    case 1403:
#line 6972 "sql_yacc.yy"
    {
      Lex->duplicates = DUP_REPLACE;
    }
    break;

    case 1404:
#line 6973 "sql_yacc.yy"
    {
      Lex->ignore = 1;
    }
    break;

    case 1409:
#line 6985 "sql_yacc.yy"
    {
      DBUG_ASSERT(Lex->exchange != 0);
      Lex->exchange->field_term = yyvsp[0].string;
    }
    break;

    case 1410:
#line 6990 "sql_yacc.yy"
    {
      LEX *lex = Lex;
      DBUG_ASSERT(lex->exchange != 0);
      lex->exchange->enclosed = yyvsp[0].string;
      lex->exchange->opt_enclosed = 1;
    }
    break;

    case 1411:
#line 6997 "sql_yacc.yy"
    {
      DBUG_ASSERT(Lex->exchange != 0);
      Lex->exchange->enclosed = yyvsp[0].string;
    }
    break;

    case 1412:
#line 7002 "sql_yacc.yy"
    {
      DBUG_ASSERT(Lex->exchange != 0);
      Lex->exchange->escaped = yyvsp[0].string;
    }
    break;

    case 1417:
#line 7017 "sql_yacc.yy"
    {
      DBUG_ASSERT(Lex->exchange != 0);
      Lex->exchange->line_term = yyvsp[0].string;
    }
    break;

    case 1418:
#line 7022 "sql_yacc.yy"
    {
      DBUG_ASSERT(Lex->exchange != 0);
      Lex->exchange->line_start = yyvsp[0].string;
    }
    break;

    case 1420:
#line 7030 "sql_yacc.yy"
    {
      DBUG_ASSERT(Lex->exchange != 0);
      Lex->exchange->skip_lines = atol(yyvsp[-1].lex_str.str);
    }
    break;

    case 1421:
#line 7036 "sql_yacc.yy"
    {
    }
    break;

    case 1422:
#line 7037 "sql_yacc.yy"
    {
    }
    break;

    case 1423:
#line 7038 "sql_yacc.yy"
    {
    }
    break;

    case 1424:
#line 7042 "sql_yacc.yy"
    {
      Lex->field_list.push_back(yyvsp[0].item);
    }
    break;

    case 1425:
#line 7044 "sql_yacc.yy"
    {
      Lex->field_list.push_back(yyvsp[0].item);
    }
    break;

    case 1426:
#line 7048 "sql_yacc.yy"
    {
      yyval.item = yyvsp[0].item;
    }
    break;

    case 1427:
#line 7050 "sql_yacc.yy"
    {
      yyval.item = new Item_user_var_as_out_param(yyvsp[0].lex_str);
    }
    break;

    case 1428:
#line 7054 "sql_yacc.yy"
    {
    }
    break;

    case 1429:
#line 7055 "sql_yacc.yy"
    {
    }
    break;

    case 1430:
#line 7062 "sql_yacc.yy"
    {
      THD *thd = YYTHD;
      yyval.item = new Item_string(yyvsp[0].lex_str.str, yyvsp[0].lex_str.length, thd->variables.collation_connection);
    }
    break;

    case 1431:
#line 7067 "sql_yacc.yy"
    {
      yyval.item = new Item_string(yyvsp[0].lex_str.str, yyvsp[0].lex_str.length, national_charset_info);
    }
    break;

    case 1432:
#line 7069 "sql_yacc.yy"
    {
      yyval.item = new Item_string(yyvsp[0].lex_str.str, yyvsp[0].lex_str.length, Lex->charset);
    }
    break;

    case 1433:
#line 7071 "sql_yacc.yy"
    {
      ((Item_string *)yyvsp[-1].item)->append(yyvsp[0].lex_str.str, yyvsp[0].lex_str.length);
    }
    break;

    case 1434:
#line 7076 "sql_yacc.yy"
    {
      yyval.string = new (YYTHD->mem_root)
          String(yyvsp[0].lex_str.str, yyvsp[0].lex_str.length, YYTHD->variables.collation_connection);
    }
    break;

    case 1435:
#line 7078 "sql_yacc.yy"
    {
      Item *tmp = new Item_hex_string(yyvsp[0].lex_str.str, yyvsp[0].lex_str.length);
      /*
        it is OK only emulate fix_fields, because we need only
        value of constant
      */
      yyval.string = tmp ? tmp->quick_fix_field(), tmp->val_str((String *)0) : (String *)0;
    }
    break;

    case 1436:
#line 7089 "sql_yacc.yy"
    {
      Item *tmp = new Item_bin_string(yyvsp[0].lex_str.str, yyvsp[0].lex_str.length);
      /*
        it is OK only emulate fix_fields, because we need only
        value of constant
      */
      yyval.string = tmp ? tmp->quick_fix_field(), tmp->val_str((String *)0) : (String *)0;
    }
    break;

    case 1437:
#line 7102 "sql_yacc.yy"
    {
      THD *thd = YYTHD;
      LEX *lex = thd->lex;
      Item_param *item = new Item_param((uint)(lex->tok_start - (uchar *)thd->query));
      if (!(yyval.item = item) || lex->param_list.push_back(item))
      {
        my_message(ER_OUT_OF_RESOURCES, ER(ER_OUT_OF_RESOURCES), MYF(0));
        YYABORT;
      }
    }
    break;

    case 1438:
#line 7116 "sql_yacc.yy"
    {
      yyval.item = yyvsp[0].item;
    }
    break;

    case 1439:
#line 7117 "sql_yacc.yy"
    {
      yyval.item = yyvsp[0].item_num;
    }
    break;

    case 1440:
#line 7119 "sql_yacc.yy"
    {
      yyvsp[0].item_num->max_length++;
      yyval.item = yyvsp[0].item_num->neg();
    }
    break;

    case 1441:
#line 7127 "sql_yacc.yy"
    {
      yyval.item = yyvsp[0].item;
    }
    break;

    case 1442:
#line 7128 "sql_yacc.yy"
    {
      yyval.item = yyvsp[0].item_num;
    }
    break;

    case 1443:
#line 7129 "sql_yacc.yy"
    {
      yyval.item = new Item_null();
      Lex->next_state = MY_LEX_OPERATOR_OR_IDENT;
    }
    break;

    case 1444:
#line 7131 "sql_yacc.yy"
    {
      yyval.item = new Item_int((char *)"FALSE", 0, 1);
    }
    break;

    case 1445:
#line 7132 "sql_yacc.yy"
    {
      yyval.item = new Item_int((char *)"TRUE", 1, 1);
    }
    break;

    case 1446:
#line 7133 "sql_yacc.yy"
    {
      yyval.item = new Item_hex_string(yyvsp[0].lex_str.str, yyvsp[0].lex_str.length);
    }
    break;

    case 1447:
#line 7134 "sql_yacc.yy"
    {
      yyval.item = new Item_bin_string(yyvsp[0].lex_str.str, yyvsp[0].lex_str.length);
    }
    break;

    case 1448:
#line 7136 "sql_yacc.yy"
    {
      Item *tmp = new Item_hex_string(yyvsp[0].lex_str.str, yyvsp[0].lex_str.length);
      /*
        it is OK only emulate fix_fieds, because we need only
        value of constant
      */
      String *str = tmp ? tmp->quick_fix_field(), tmp->val_str((String *)0) : (String *)0;
      yyval.item = new Item_string(str ? str->ptr() : "", str ? str->length() : 0, Lex->charset);
    }
    break;

    case 1449:
#line 7150 "sql_yacc.yy"
    {
      Item *tmp = new Item_bin_string(yyvsp[0].lex_str.str, yyvsp[0].lex_str.length);
      /*
        it is OK only emulate fix_fieds, because we need only
        value of constant
      */
      String *str = tmp ? tmp->quick_fix_field(), tmp->val_str((String *)0) : (String *)0;
      yyval.item = new Item_string(str ? str->ptr() : "", str ? str->length() : 0, Lex->charset);
    }
    break;

    case 1450:
#line 7163 "sql_yacc.yy"
    {
      yyval.item = yyvsp[0].item;
    }
    break;

    case 1451:
#line 7164 "sql_yacc.yy"
    {
      yyval.item = yyvsp[0].item;
    }
    break;

    case 1452:
#line 7165 "sql_yacc.yy"
    {
      yyval.item = yyvsp[0].item;
    }
    break;

    case 1453:
#line 7168 "sql_yacc.yy"
    {
      int error;
      yyval.item_num = new Item_int(yyvsp[0].lex_str.str, (longlong)my_strtoll10(yyvsp[0].lex_str.str, NULL, &error),
                                    yyvsp[0].lex_str.length);
    }
    break;

    case 1454:
#line 7169 "sql_yacc.yy"
    {
      int error;
      yyval.item_num = new Item_int(yyvsp[0].lex_str.str, (longlong)my_strtoll10(yyvsp[0].lex_str.str, NULL, &error),
                                    yyvsp[0].lex_str.length);
    }
    break;

    case 1455:
#line 7170 "sql_yacc.yy"
    {
      yyval.item_num = new Item_uint(yyvsp[0].lex_str.str, yyvsp[0].lex_str.length);
    }
    break;

    case 1456:
#line 7172 "sql_yacc.yy"
    {
      yyval.item_num = new Item_decimal(yyvsp[0].lex_str.str, yyvsp[0].lex_str.length, YYTHD->charset());
      if (YYTHD->net.report_error)
      {
        YYABORT;
      }
    }
    break;

    case 1457:
#line 7180 "sql_yacc.yy"
    {
      yyval.item_num = new Item_float(yyvsp[0].lex_str.str, yyvsp[0].lex_str.length);
      if (YYTHD->net.report_error)
      {
        YYABORT;
      }
    }
    break;

    case 1458:
#line 7194 "sql_yacc.yy"
    {
      yyval.item = yyvsp[0].item;
    }
    break;

    case 1459:
#line 7195 "sql_yacc.yy"
    {
      yyval.item = yyvsp[0].item;
    }
    break;

    case 1460:
#line 7199 "sql_yacc.yy"
    {
      SELECT_LEX *sel = Select;
      yyval.item = new Item_field(Lex->current_context(), NullS, yyvsp[-2].lex_str.str, "*");
      sel->with_wild++;
    }
    break;

    case 1461:
#line 7205 "sql_yacc.yy"
    {
      SELECT_LEX *sel = Select;
      yyval.item = new Item_field(Lex->current_context(),
                                  (YYTHD->client_capabilities & CLIENT_NO_SCHEMA ? NullS : yyvsp[-4].lex_str.str),
                                  yyvsp[-2].lex_str.str, "*");
      sel->with_wild++;
    }
    break;

    case 1462:
#line 7215 "sql_yacc.yy"
    {
      yyval.item = yyvsp[0].item;
    }
    break;

    case 1463:
#line 7219 "sql_yacc.yy"
    {
      sp_pvar_t *spv;
      LEX *lex = Lex;
      sp_pcontext *spc = lex->spcont;
      if (spc && (spv = spc->find_pvar(&yyvsp[0].lex_str)))
      {
        /* We're compiling a stored procedure and found a variable */
        Item_splocal *splocal;
        splocal = new Item_splocal(yyvsp[0].lex_str, spv->offset, lex->tok_start_prev - lex->sphead->m_tmp_query);
        yyval.item = (Item *)splocal;
        lex->variables_used = 1;
        lex->safe_to_cache_query = 0;
      }
      else
      {
        SELECT_LEX *sel = Select;
        yyval.item = (sel->parsing_place != IN_HAVING || sel->get_in_sum_expr() > 0)
                         ? (Item *)new Item_field(Lex->current_context(), NullS, NullS, yyvsp[0].lex_str.str)
                         : (Item *)new Item_ref(Lex->current_context(), NullS, NullS, yyvsp[0].lex_str.str);
      }
    }
    break;

    case 1464:
#line 7242 "sql_yacc.yy"
    {
      yyval.item = yyvsp[0].item;
    }
    break;

    case 1465:
#line 7247 "sql_yacc.yy"
    {
      SELECT_LEX *sel = Select;
      yyval.item = (sel->parsing_place != IN_HAVING || sel->get_in_sum_expr() > 0)
                       ? (Item *)new Item_field(Lex->current_context(), NullS, NullS, yyvsp[0].lex_str.str)
                       : (Item *)new Item_ref(Lex->current_context(), NullS, NullS, yyvsp[0].lex_str.str);
    }
    break;

    case 1466:
#line 7254 "sql_yacc.yy"
    {
      yyval.item = yyvsp[0].item;
    }
    break;

    case 1467:
#line 7259 "sql_yacc.yy"
    {
      THD *thd = YYTHD;
      LEX *lex = thd->lex;

      /*
        FIXME This will work ok in simple_ident_nospvar case because
        we can't meet simple_ident_nospvar in trigger now. But it
        should be changed in future.
      */
      if (lex->sphead && lex->sphead->m_type == TYPE_ENUM_TRIGGER &&
          (!my_strcasecmp(system_charset_info, yyvsp[-2].lex_str.str, "NEW") ||
           !my_strcasecmp(system_charset_info, yyvsp[-2].lex_str.str, "OLD")))
      {
        Item_trigger_field *trg_fld;
        bool new_row = (yyvsp[-2].lex_str.str[0] == 'N' || yyvsp[-2].lex_str.str[0] == 'n');

        if (lex->trg_chistics.event == TRG_EVENT_INSERT && !new_row)
        {
          my_error(ER_TRG_NO_SUCH_ROW_IN_TRG, MYF(0), "OLD", "on INSERT");
          YYABORT;
        }

        if (lex->trg_chistics.event == TRG_EVENT_DELETE && new_row)
        {
          my_error(ER_TRG_NO_SUCH_ROW_IN_TRG, MYF(0), "NEW", "on DELETE");
          YYABORT;
        }

        if (!(trg_fld = new Item_trigger_field(Lex->current_context(),
                                               new_row ? Item_trigger_field::NEW_ROW : Item_trigger_field::OLD_ROW,
                                               yyvsp[0].lex_str.str)))
          YYABORT;

        /*
          Let us add this item to list of all Item_trigger_field objects
          in trigger.
        */
        lex->trg_table_fields.link_in_list((byte *)trg_fld, (byte **)&trg_fld->next_trg_field);

        yyval.item = (Item *)trg_fld;
      }
      else
      {
        SELECT_LEX *sel = lex->current_select;
        if (sel->no_table_names_allowed)
        {
          my_error(ER_TABLENAME_NOT_ALLOWED_HERE, MYF(0), yyvsp[-2].lex_str.str, thd->where);
        }
        yyval.item =
            (sel->parsing_place != IN_HAVING || sel->get_in_sum_expr() > 0)
                ? (Item *)new Item_field(Lex->current_context(), NullS, yyvsp[-2].lex_str.str, yyvsp[0].lex_str.str)
                : (Item *)new Item_ref(Lex->current_context(), NullS, yyvsp[-2].lex_str.str, yyvsp[0].lex_str.str);
      }
    }
    break;

    case 1468:
#line 7320 "sql_yacc.yy"
    {
      THD *thd = YYTHD;
      LEX *lex = thd->lex;
      SELECT_LEX *sel = lex->current_select;
      if (sel->no_table_names_allowed)
      {
        my_error(ER_TABLENAME_NOT_ALLOWED_HERE, MYF(0), yyvsp[-2].lex_str.str, thd->where);
      }
      yyval.item =
          (sel->parsing_place != IN_HAVING || sel->get_in_sum_expr() > 0)
              ? (Item *)new Item_field(Lex->current_context(), NullS, yyvsp[-2].lex_str.str, yyvsp[0].lex_str.str)
              : (Item *)new Item_ref(Lex->current_context(), NullS, yyvsp[-2].lex_str.str, yyvsp[0].lex_str.str);
    }
    break;

    case 1469:
#line 7335 "sql_yacc.yy"
    {
      THD *thd = YYTHD;
      LEX *lex = thd->lex;
      SELECT_LEX *sel = lex->current_select;
      if (sel->no_table_names_allowed)
      {
        my_error(ER_TABLENAME_NOT_ALLOWED_HERE, MYF(0), yyvsp[-2].lex_str.str, thd->where);
      }
      yyval.item =
          (sel->parsing_place != IN_HAVING || sel->get_in_sum_expr() > 0)
              ? (Item *)new Item_field(Lex->current_context(),
                                       (YYTHD->client_capabilities & CLIENT_NO_SCHEMA ? NullS : yyvsp[-4].lex_str.str),
                                       yyvsp[-2].lex_str.str, yyvsp[0].lex_str.str)
              : (Item *)new Item_ref(Lex->current_context(),
                                     (YYTHD->client_capabilities & CLIENT_NO_SCHEMA ? NullS : yyvsp[-4].lex_str.str),
                                     yyvsp[-2].lex_str.str, yyvsp[0].lex_str.str);
    }
    break;

    case 1470:
#line 7358 "sql_yacc.yy"
    {
      yyval.lex_str = yyvsp[0].lex_str;
    }
    break;

    case 1471:
#line 7360 "sql_yacc.yy"
    {
      TABLE_LIST *table = (TABLE_LIST *)Select->table_list.first;
      if (my_strcasecmp(table_alias_charset, yyvsp[-4].lex_str.str, table->db))
      {
        my_error(ER_WRONG_DB_NAME, MYF(0), yyvsp[-4].lex_str.str);
        YYABORT;
      }
      if (my_strcasecmp(table_alias_charset, yyvsp[-2].lex_str.str, table->table_name))
      {
        my_error(ER_WRONG_TABLE_NAME, MYF(0), yyvsp[-2].lex_str.str);
        YYABORT;
      }
      yyval.lex_str = yyvsp[0].lex_str;
    }
    break;

    case 1472:
#line 7376 "sql_yacc.yy"
    {
      TABLE_LIST *table = (TABLE_LIST *)Select->table_list.first;
      if (my_strcasecmp(table_alias_charset, yyvsp[-2].lex_str.str, table->alias))
      {
        my_error(ER_WRONG_TABLE_NAME, MYF(0), yyvsp[-2].lex_str.str);
        YYABORT;
      }
      yyval.lex_str = yyvsp[0].lex_str;
    }
    break;

    case 1473:
#line 7385 "sql_yacc.yy"
    {
      yyval.lex_str = yyvsp[0].lex_str;
    }
    break;

    case 1474:
#line 7388 "sql_yacc.yy"
    {
      yyval.table = new Table_ident(yyvsp[0].lex_str);
    }
    break;

    case 1475:
#line 7389 "sql_yacc.yy"
    {
      yyval.table = new Table_ident(YYTHD, yyvsp[-2].lex_str, yyvsp[0].lex_str, 0);
    }
    break;

    case 1476:
#line 7390 "sql_yacc.yy"
    {
      yyval.table = new Table_ident(yyvsp[0].lex_str);
    }
    break;

    case 1477:
#line 7394 "sql_yacc.yy"
    {
      LEX_STRING db = {(char *)any_db, 3};
      yyval.table = new Table_ident(YYTHD, db, yyvsp[0].lex_str, 0);
    }
    break;

    case 1478:
#line 7398 "sql_yacc.yy"
    {
      yyval.lex_str = yyvsp[0].lex_str;
    }
    break;

    case 1479:
#line 7400 "sql_yacc.yy"
    {
      THD *thd = YYTHD;
      if (thd->charset_is_system_charset)
      {
        CHARSET_INFO *cs = system_charset_info;
        int dummy_error;
        uint wlen = cs->cset->well_formed_len(cs, yyvsp[0].lex_str.str, yyvsp[0].lex_str.str + yyvsp[0].lex_str.length,
                                              yyvsp[0].lex_str.length, &dummy_error);
        if (wlen < yyvsp[0].lex_str.length)
        {
          my_error(ER_INVALID_CHARACTER_STRING, MYF(0), cs->csname, yyvsp[0].lex_str.str + wlen);
          YYABORT;
        }
        yyval.lex_str = yyvsp[0].lex_str;
      }
      else
        thd->convert_string(&yyval.lex_str, system_charset_info, yyvsp[0].lex_str.str, yyvsp[0].lex_str.length,
                            thd->charset());
    }
    break;

    case 1480:
#line 7425 "sql_yacc.yy"
    {
      THD *thd = YYTHD;
      if (thd->charset_is_system_charset)
        yyval.lex_str = yyvsp[0].lex_str;
      else
        thd->convert_string(&yyval.lex_str, system_charset_info, yyvsp[0].lex_str.str, yyvsp[0].lex_str.length,
                            thd->charset());
    }
    break;

    case 1481:
#line 7437 "sql_yacc.yy"
    {
      THD *thd = YYTHD;
      if (thd->charset_is_collation_connection)
        yyval.lex_str = yyvsp[0].lex_str;
      else
        thd->convert_string(&yyval.lex_str, thd->variables.collation_connection, yyvsp[0].lex_str.str,
                            yyvsp[0].lex_str.length, thd->charset());
    }
    break;

    case 1482:
#line 7449 "sql_yacc.yy"
    {
      yyval.lex_str = yyvsp[0].lex_str;
    }
    break;

    case 1483:
#line 7451 "sql_yacc.yy"
    {
      THD *thd = YYTHD;
      yyval.lex_str.str = thd->strmake(yyvsp[0].symbol.str, yyvsp[0].symbol.length);
      yyval.lex_str.length = yyvsp[0].symbol.length;
    }
    break;

    case 1484:
#line 7459 "sql_yacc.yy"
    {
      yyval.lex_str = yyvsp[0].lex_str;
    }
    break;

    case 1485:
#line 7461 "sql_yacc.yy"
    {
      THD *thd = YYTHD;
      yyval.lex_str.str = thd->strmake(yyvsp[0].symbol.str, yyvsp[0].symbol.length);
      yyval.lex_str.length = yyvsp[0].symbol.length;
    }
    break;

    case 1486:
#line 7469 "sql_yacc.yy"
    {
      yyval.lex_str = yyvsp[0].lex_str;
    }
    break;

    case 1487:
#line 7470 "sql_yacc.yy"
    {
      yyval.lex_str = yyvsp[0].lex_str;
    }
    break;

    case 1488:
#line 7471 "sql_yacc.yy"
    {
      yyval.lex_str = yyvsp[0].lex_str;
    }
    break;

    case 1489:
#line 7475 "sql_yacc.yy"
    {
      THD *thd = YYTHD;
      if (!(yyval.lex_user = (LEX_USER *)thd->alloc(sizeof(st_lex_user))))
        YYABORT;
      yyval.lex_user->user = yyvsp[0].lex_str;
      yyval.lex_user->host.str = (char *)"%";
      yyval.lex_user->host.length = 1;
    }
    break;

    case 1490:
#line 7484 "sql_yacc.yy"
    {
      THD *thd = YYTHD;
      if (!(yyval.lex_user = (LEX_USER *)thd->alloc(sizeof(st_lex_user))))
        YYABORT;
      yyval.lex_user->user = yyvsp[-2].lex_str;
      yyval.lex_user->host = yyvsp[0].lex_str;
    }
    break;

    case 1491:
#line 7491 "sql_yacc.yy"
    {
      THD *thd = YYTHD;
      Security_context *sctx = thd->security_ctx;
      if (!(yyval.lex_user = (LEX_USER *)thd->alloc(sizeof(st_lex_user))))
        YYABORT;
      yyval.lex_user->user.str = sctx->priv_user;
      yyval.lex_user->user.length = strlen(sctx->priv_user);
      if (*sctx->priv_host != 0)
      {
        yyval.lex_user->host.str = sctx->priv_host;
        yyval.lex_user->host.length = strlen(sctx->priv_host);
      }
      else
      {
        yyval.lex_user->host.str = (char *)"%";
        yyval.lex_user->host.length = 1;
      }
    }
    break;

    case 1492:
#line 7512 "sql_yacc.yy"
    {
    }
    break;

    case 1493:
#line 7513 "sql_yacc.yy"
    {
    }
    break;

    case 1494:
#line 7514 "sql_yacc.yy"
    {
    }
    break;

    case 1495:
#line 7515 "sql_yacc.yy"
    {
    }
    break;

    case 1496:
#line 7516 "sql_yacc.yy"
    {
    }
    break;

    case 1497:
#line 7517 "sql_yacc.yy"
    {
    }
    break;

    case 1498:
#line 7518 "sql_yacc.yy"
    {
    }
    break;

    case 1499:
#line 7519 "sql_yacc.yy"
    {
    }
    break;

    case 1500:
#line 7520 "sql_yacc.yy"
    {
    }
    break;

    case 1501:
#line 7521 "sql_yacc.yy"
    {
    }
    break;

    case 1502:
#line 7522 "sql_yacc.yy"
    {
    }
    break;

    case 1503:
#line 7523 "sql_yacc.yy"
    {
    }
    break;

    case 1504:
#line 7524 "sql_yacc.yy"
    {
    }
    break;

    case 1505:
#line 7525 "sql_yacc.yy"
    {
    }
    break;

    case 1506:
#line 7526 "sql_yacc.yy"
    {
    }
    break;

    case 1507:
#line 7527 "sql_yacc.yy"
    {
    }
    break;

    case 1508:
#line 7528 "sql_yacc.yy"
    {
    }
    break;

    case 1509:
#line 7529 "sql_yacc.yy"
    {
    }
    break;

    case 1510:
#line 7530 "sql_yacc.yy"
    {
    }
    break;

    case 1511:
#line 7531 "sql_yacc.yy"
    {
    }
    break;

    case 1512:
#line 7532 "sql_yacc.yy"
    {
    }
    break;

    case 1513:
#line 7533 "sql_yacc.yy"
    {
    }
    break;

    case 1514:
#line 7534 "sql_yacc.yy"
    {
    }
    break;

    case 1515:
#line 7535 "sql_yacc.yy"
    {
    }
    break;

    case 1516:
#line 7536 "sql_yacc.yy"
    {
    }
    break;

    case 1517:
#line 7537 "sql_yacc.yy"
    {
    }
    break;

    case 1518:
#line 7538 "sql_yacc.yy"
    {
    }
    break;

    case 1519:
#line 7539 "sql_yacc.yy"
    {
    }
    break;

    case 1520:
#line 7540 "sql_yacc.yy"
    {
    }
    break;

    case 1521:
#line 7541 "sql_yacc.yy"
    {
    }
    break;

    case 1522:
#line 7542 "sql_yacc.yy"
    {
    }
    break;

    case 1523:
#line 7543 "sql_yacc.yy"
    {
    }
    break;

    case 1524:
#line 7544 "sql_yacc.yy"
    {
    }
    break;

    case 1525:
#line 7545 "sql_yacc.yy"
    {
    }
    break;

    case 1526:
#line 7546 "sql_yacc.yy"
    {
    }
    break;

    case 1527:
#line 7547 "sql_yacc.yy"
    {
    }
    break;

    case 1528:
#line 7557 "sql_yacc.yy"
    {
    }
    break;

    case 1529:
#line 7558 "sql_yacc.yy"
    {
    }
    break;

    case 1530:
#line 7559 "sql_yacc.yy"
    {
    }
    break;

    case 1531:
#line 7560 "sql_yacc.yy"
    {
    }
    break;

    case 1532:
#line 7561 "sql_yacc.yy"
    {
    }
    break;

    case 1533:
#line 7562 "sql_yacc.yy"
    {
    }
    break;

    case 1534:
#line 7563 "sql_yacc.yy"
    {
    }
    break;

    case 1535:
#line 7564 "sql_yacc.yy"
    {
    }
    break;

    case 1536:
#line 7565 "sql_yacc.yy"
    {
    }
    break;

    case 1537:
#line 7566 "sql_yacc.yy"
    {
    }
    break;

    case 1538:
#line 7567 "sql_yacc.yy"
    {
    }
    break;

    case 1539:
#line 7568 "sql_yacc.yy"
    {
    }
    break;

    case 1540:
#line 7569 "sql_yacc.yy"
    {
    }
    break;

    case 1541:
#line 7570 "sql_yacc.yy"
    {
    }
    break;

    case 1542:
#line 7571 "sql_yacc.yy"
    {
    }
    break;

    case 1543:
#line 7572 "sql_yacc.yy"
    {
    }
    break;

    case 1544:
#line 7573 "sql_yacc.yy"
    {
    }
    break;

    case 1545:
#line 7574 "sql_yacc.yy"
    {
    }
    break;

    case 1546:
#line 7575 "sql_yacc.yy"
    {
    }
    break;

    case 1547:
#line 7576 "sql_yacc.yy"
    {
    }
    break;

    case 1548:
#line 7577 "sql_yacc.yy"
    {
    }
    break;

    case 1549:
#line 7578 "sql_yacc.yy"
    {
    }
    break;

    case 1550:
#line 7579 "sql_yacc.yy"
    {
    }
    break;

    case 1551:
#line 7580 "sql_yacc.yy"
    {
    }
    break;

    case 1552:
#line 7581 "sql_yacc.yy"
    {
    }
    break;

    case 1553:
#line 7582 "sql_yacc.yy"
    {
    }
    break;

    case 1554:
#line 7583 "sql_yacc.yy"
    {
    }
    break;

    case 1555:
#line 7584 "sql_yacc.yy"
    {
    }
    break;

    case 1556:
#line 7585 "sql_yacc.yy"
    {
    }
    break;

    case 1557:
#line 7586 "sql_yacc.yy"
    {
    }
    break;

    case 1558:
#line 7587 "sql_yacc.yy"
    {
    }
    break;

    case 1559:
#line 7588 "sql_yacc.yy"
    {
    }
    break;

    case 1560:
#line 7589 "sql_yacc.yy"
    {
    }
    break;

    case 1561:
#line 7590 "sql_yacc.yy"
    {
    }
    break;

    case 1562:
#line 7591 "sql_yacc.yy"
    {
    }
    break;

    case 1563:
#line 7592 "sql_yacc.yy"
    {
    }
    break;

    case 1564:
#line 7593 "sql_yacc.yy"
    {
    }
    break;

    case 1565:
#line 7594 "sql_yacc.yy"
    {
    }
    break;

    case 1566:
#line 7595 "sql_yacc.yy"
    {
    }
    break;

    case 1567:
#line 7596 "sql_yacc.yy"
    {
    }
    break;

    case 1568:
#line 7597 "sql_yacc.yy"
    {
    }
    break;

    case 1569:
#line 7598 "sql_yacc.yy"
    {
    }
    break;

    case 1570:
#line 7599 "sql_yacc.yy"
    {
    }
    break;

    case 1571:
#line 7600 "sql_yacc.yy"
    {
    }
    break;

    case 1572:
#line 7601 "sql_yacc.yy"
    {
    }
    break;

    case 1573:
#line 7602 "sql_yacc.yy"
    {
    }
    break;

    case 1574:
#line 7603 "sql_yacc.yy"
    {
    }
    break;

    case 1575:
#line 7604 "sql_yacc.yy"
    {
    }
    break;

    case 1576:
#line 7605 "sql_yacc.yy"
    {
    }
    break;

    case 1577:
#line 7606 "sql_yacc.yy"
    {
    }
    break;

    case 1578:
#line 7607 "sql_yacc.yy"
    {
    }
    break;

    case 1579:
#line 7608 "sql_yacc.yy"
    {
    }
    break;

    case 1580:
#line 7609 "sql_yacc.yy"
    {
    }
    break;

    case 1581:
#line 7610 "sql_yacc.yy"
    {
    }
    break;

    case 1582:
#line 7611 "sql_yacc.yy"
    {
    }
    break;

    case 1583:
#line 7612 "sql_yacc.yy"
    {
    }
    break;

    case 1584:
#line 7613 "sql_yacc.yy"
    {
    }
    break;

    case 1585:
#line 7614 "sql_yacc.yy"
    {
    }
    break;

    case 1586:
#line 7615 "sql_yacc.yy"
    {
    }
    break;

    case 1587:
#line 7616 "sql_yacc.yy"
    {
    }
    break;

    case 1588:
#line 7617 "sql_yacc.yy"
    {
    }
    break;

    case 1589:
#line 7618 "sql_yacc.yy"
    {
    }
    break;

    case 1590:
#line 7619 "sql_yacc.yy"
    {
    }
    break;

    case 1591:
#line 7620 "sql_yacc.yy"
    {
    }
    break;

    case 1592:
#line 7621 "sql_yacc.yy"
    {
    }
    break;

    case 1593:
#line 7622 "sql_yacc.yy"
    {
    }
    break;

    case 1594:
#line 7623 "sql_yacc.yy"
    {
    }
    break;

    case 1595:
#line 7624 "sql_yacc.yy"
    {
    }
    break;

    case 1596:
#line 7625 "sql_yacc.yy"
    {
    }
    break;

    case 1597:
#line 7626 "sql_yacc.yy"
    {
    }
    break;

    case 1598:
#line 7627 "sql_yacc.yy"
    {
    }
    break;

    case 1599:
#line 7628 "sql_yacc.yy"
    {
    }
    break;

    case 1600:
#line 7629 "sql_yacc.yy"
    {
    }
    break;

    case 1601:
#line 7630 "sql_yacc.yy"
    {
    }
    break;

    case 1602:
#line 7631 "sql_yacc.yy"
    {
    }
    break;

    case 1603:
#line 7632 "sql_yacc.yy"
    {
    }
    break;

    case 1604:
#line 7633 "sql_yacc.yy"
    {
    }
    break;

    case 1605:
#line 7634 "sql_yacc.yy"
    {
    }
    break;

    case 1606:
#line 7635 "sql_yacc.yy"
    {
    }
    break;

    case 1607:
#line 7636 "sql_yacc.yy"
    {
    }
    break;

    case 1608:
#line 7637 "sql_yacc.yy"
    {
    }
    break;

    case 1609:
#line 7638 "sql_yacc.yy"
    {
    }
    break;

    case 1610:
#line 7639 "sql_yacc.yy"
    {
    }
    break;

    case 1611:
#line 7640 "sql_yacc.yy"
    {
    }
    break;

    case 1612:
#line 7641 "sql_yacc.yy"
    {
    }
    break;

    case 1613:
#line 7642 "sql_yacc.yy"
    {
    }
    break;

    case 1614:
#line 7643 "sql_yacc.yy"
    {
    }
    break;

    case 1615:
#line 7644 "sql_yacc.yy"
    {
    }
    break;

    case 1616:
#line 7645 "sql_yacc.yy"
    {
    }
    break;

    case 1617:
#line 7646 "sql_yacc.yy"
    {
    }
    break;

    case 1618:
#line 7647 "sql_yacc.yy"
    {
    }
    break;

    case 1619:
#line 7648 "sql_yacc.yy"
    {
    }
    break;

    case 1620:
#line 7649 "sql_yacc.yy"
    {
    }
    break;

    case 1621:
#line 7650 "sql_yacc.yy"
    {
    }
    break;

    case 1622:
#line 7651 "sql_yacc.yy"
    {
    }
    break;

    case 1623:
#line 7652 "sql_yacc.yy"
    {
    }
    break;

    case 1624:
#line 7653 "sql_yacc.yy"
    {
    }
    break;

    case 1625:
#line 7654 "sql_yacc.yy"
    {
    }
    break;

    case 1626:
#line 7655 "sql_yacc.yy"
    {
    }
    break;

    case 1627:
#line 7656 "sql_yacc.yy"
    {
    }
    break;

    case 1628:
#line 7657 "sql_yacc.yy"
    {
    }
    break;

    case 1629:
#line 7658 "sql_yacc.yy"
    {
    }
    break;

    case 1630:
#line 7659 "sql_yacc.yy"
    {
    }
    break;

    case 1631:
#line 7660 "sql_yacc.yy"
    {
    }
    break;

    case 1632:
#line 7661 "sql_yacc.yy"
    {
    }
    break;

    case 1633:
#line 7662 "sql_yacc.yy"
    {
    }
    break;

    case 1634:
#line 7663 "sql_yacc.yy"
    {
    }
    break;

    case 1635:
#line 7664 "sql_yacc.yy"
    {
    }
    break;

    case 1636:
#line 7665 "sql_yacc.yy"
    {
    }
    break;

    case 1637:
#line 7666 "sql_yacc.yy"
    {
    }
    break;

    case 1638:
#line 7667 "sql_yacc.yy"
    {
    }
    break;

    case 1639:
#line 7668 "sql_yacc.yy"
    {
    }
    break;

    case 1640:
#line 7669 "sql_yacc.yy"
    {
    }
    break;

    case 1641:
#line 7670 "sql_yacc.yy"
    {
    }
    break;

    case 1642:
#line 7671 "sql_yacc.yy"
    {
    }
    break;

    case 1643:
#line 7672 "sql_yacc.yy"
    {
    }
    break;

    case 1644:
#line 7673 "sql_yacc.yy"
    {
    }
    break;

    case 1645:
#line 7674 "sql_yacc.yy"
    {
    }
    break;

    case 1646:
#line 7675 "sql_yacc.yy"
    {
    }
    break;

    case 1647:
#line 7676 "sql_yacc.yy"
    {
    }
    break;

    case 1648:
#line 7677 "sql_yacc.yy"
    {
    }
    break;

    case 1649:
#line 7678 "sql_yacc.yy"
    {
    }
    break;

    case 1650:
#line 7679 "sql_yacc.yy"
    {
    }
    break;

    case 1651:
#line 7680 "sql_yacc.yy"
    {
    }
    break;

    case 1652:
#line 7681 "sql_yacc.yy"
    {
    }
    break;

    case 1653:
#line 7682 "sql_yacc.yy"
    {
    }
    break;

    case 1654:
#line 7683 "sql_yacc.yy"
    {
    }
    break;

    case 1655:
#line 7684 "sql_yacc.yy"
    {
    }
    break;

    case 1656:
#line 7685 "sql_yacc.yy"
    {
    }
    break;

    case 1657:
#line 7686 "sql_yacc.yy"
    {
    }
    break;

    case 1658:
#line 7687 "sql_yacc.yy"
    {
    }
    break;

    case 1659:
#line 7688 "sql_yacc.yy"
    {
    }
    break;

    case 1660:
#line 7689 "sql_yacc.yy"
    {
    }
    break;

    case 1661:
#line 7690 "sql_yacc.yy"
    {
    }
    break;

    case 1662:
#line 7691 "sql_yacc.yy"
    {
    }
    break;

    case 1663:
#line 7692 "sql_yacc.yy"
    {
    }
    break;

    case 1664:
#line 7693 "sql_yacc.yy"
    {
    }
    break;

    case 1665:
#line 7694 "sql_yacc.yy"
    {
    }
    break;

    case 1666:
#line 7695 "sql_yacc.yy"
    {
    }
    break;

    case 1667:
#line 7696 "sql_yacc.yy"
    {
    }
    break;

    case 1668:
#line 7697 "sql_yacc.yy"
    {
    }
    break;

    case 1669:
#line 7698 "sql_yacc.yy"
    {
    }
    break;

    case 1670:
#line 7699 "sql_yacc.yy"
    {
    }
    break;

    case 1671:
#line 7700 "sql_yacc.yy"
    {
    }
    break;

    case 1672:
#line 7701 "sql_yacc.yy"
    {
    }
    break;

    case 1673:
#line 7702 "sql_yacc.yy"
    {
    }
    break;

    case 1674:
#line 7703 "sql_yacc.yy"
    {
    }
    break;

    case 1675:
#line 7704 "sql_yacc.yy"
    {
    }
    break;

    case 1676:
#line 7705 "sql_yacc.yy"
    {
    }
    break;

    case 1677:
#line 7706 "sql_yacc.yy"
    {
    }
    break;

    case 1678:
#line 7707 "sql_yacc.yy"
    {
    }
    break;

    case 1679:
#line 7708 "sql_yacc.yy"
    {
    }
    break;

    case 1680:
#line 7709 "sql_yacc.yy"
    {
    }
    break;

    case 1681:
#line 7710 "sql_yacc.yy"
    {
    }
    break;

    case 1682:
#line 7711 "sql_yacc.yy"
    {
    }
    break;

    case 1683:
#line 7712 "sql_yacc.yy"
    {
    }
    break;

    case 1684:
#line 7713 "sql_yacc.yy"
    {
    }
    break;

    case 1685:
#line 7714 "sql_yacc.yy"
    {
    }
    break;

    case 1686:
#line 7715 "sql_yacc.yy"
    {
    }
    break;

    case 1687:
#line 7716 "sql_yacc.yy"
    {
    }
    break;

    case 1688:
#line 7717 "sql_yacc.yy"
    {
    }
    break;

    case 1689:
#line 7718 "sql_yacc.yy"
    {
    }
    break;

    case 1690:
#line 7719 "sql_yacc.yy"
    {
    }
    break;

    case 1691:
#line 7720 "sql_yacc.yy"
    {
    }
    break;

    case 1692:
#line 7721 "sql_yacc.yy"
    {
    }
    break;

    case 1693:
#line 7722 "sql_yacc.yy"
    {
    }
    break;

    case 1694:
#line 7723 "sql_yacc.yy"
    {
    }
    break;

    case 1695:
#line 7724 "sql_yacc.yy"
    {
    }
    break;

    case 1696:
#line 7725 "sql_yacc.yy"
    {
    }
    break;

    case 1697:
#line 7726 "sql_yacc.yy"
    {
    }
    break;

    case 1698:
#line 7727 "sql_yacc.yy"
    {
    }
    break;

    case 1699:
#line 7728 "sql_yacc.yy"
    {
    }
    break;

    case 1700:
#line 7729 "sql_yacc.yy"
    {
    }
    break;

    case 1701:
#line 7730 "sql_yacc.yy"
    {
    }
    break;

    case 1702:
#line 7731 "sql_yacc.yy"
    {
    }
    break;

    case 1703:
#line 7732 "sql_yacc.yy"
    {
    }
    break;

    case 1704:
#line 7733 "sql_yacc.yy"
    {
    }
    break;

    case 1705:
#line 7734 "sql_yacc.yy"
    {
    }
    break;

    case 1706:
#line 7735 "sql_yacc.yy"
    {
    }
    break;

    case 1707:
#line 7736 "sql_yacc.yy"
    {
    }
    break;

    case 1708:
#line 7737 "sql_yacc.yy"
    {
    }
    break;

    case 1709:
#line 7738 "sql_yacc.yy"
    {
    }
    break;

    case 1710:
#line 7739 "sql_yacc.yy"
    {
    }
    break;

    case 1711:
#line 7740 "sql_yacc.yy"
    {
    }
    break;

    case 1712:
#line 7741 "sql_yacc.yy"
    {
    }
    break;

    case 1713:
#line 7742 "sql_yacc.yy"
    {
    }
    break;

    case 1714:
#line 7743 "sql_yacc.yy"
    {
    }
    break;

    case 1715:
#line 7744 "sql_yacc.yy"
    {
    }
    break;

    case 1716:
#line 7745 "sql_yacc.yy"
    {
    }
    break;

    case 1717:
#line 7746 "sql_yacc.yy"
    {
    }
    break;

    case 1718:
#line 7747 "sql_yacc.yy"
    {
    }
    break;

    case 1719:
#line 7748 "sql_yacc.yy"
    {
    }
    break;

    case 1720:
#line 7749 "sql_yacc.yy"
    {
    }
    break;

    case 1721:
#line 7750 "sql_yacc.yy"
    {
    }
    break;

    case 1722:
#line 7751 "sql_yacc.yy"
    {
    }
    break;

    case 1723:
#line 7752 "sql_yacc.yy"
    {
    }
    break;

    case 1724:
#line 7753 "sql_yacc.yy"
    {
    }
    break;

    case 1725:
#line 7754 "sql_yacc.yy"
    {
    }
    break;

    case 1726:
#line 7755 "sql_yacc.yy"
    {
    }
    break;

    case 1727:
#line 7756 "sql_yacc.yy"
    {
    }
    break;

    case 1728:
#line 7757 "sql_yacc.yy"
    {
    }
    break;

    case 1729:
#line 7758 "sql_yacc.yy"
    {
    }
    break;

    case 1730:
#line 7759 "sql_yacc.yy"
    {
    }
    break;

    case 1731:
#line 7760 "sql_yacc.yy"
    {
    }
    break;

    case 1732:
#line 7761 "sql_yacc.yy"
    {
    }
    break;

    case 1733:
#line 7762 "sql_yacc.yy"
    {
    }
    break;

    case 1734:
#line 7763 "sql_yacc.yy"
    {
    }
    break;

    case 1735:
#line 7764 "sql_yacc.yy"
    {
    }
    break;

    case 1736:
#line 7765 "sql_yacc.yy"
    {
    }
    break;

    case 1737:
#line 7766 "sql_yacc.yy"
    {
    }
    break;

    case 1738:
#line 7767 "sql_yacc.yy"
    {
    }
    break;

    case 1739:
#line 7774 "sql_yacc.yy"
    {
      LEX *lex = Lex;
      lex->sql_command = SQLCOM_SET_OPTION;
      mysql_init_select(lex);
      lex->option_type = OPT_SESSION;
      lex->var_list.empty();
      lex->one_shot_set = 0;
    }
    break;

    case 1740:
#line 7783 "sql_yacc.yy"
    {
    }
    break;

    case 1741:
#line 7787 "sql_yacc.yy"
    {
    }
    break;

    case 1742:
#line 7788 "sql_yacc.yy"
    {
    }
    break;

    case 1745:
#line 7795 "sql_yacc.yy"
    {
      if (Lex->sphead)
      {
        /*
          If we are in SP we want have own LEX for each assignment.
          This is mostly because it is hard for several sp_instr_set
          and sp_instr_set_trigger instructions share one LEX.
          (Well, it is theoretically possible but adds some extra
           overhead on preparation for execution stage and IMO less
           robust).

          QQ: May be we should simply prohibit group assignments in SP?
        */
        LEX *lex;
        Lex->sphead->reset_lex(YYTHD);
        lex = Lex;

        /* Set new LEX as if we at start of set rule. */
        lex->sql_command = SQLCOM_SET_OPTION;
        mysql_init_select(lex);
        lex->option_type = OPT_SESSION;
        lex->var_list.empty();
        lex->one_shot_set = 0;
        lex->sphead->m_tmp_query = lex->tok_start;
      }
    }
    break;

    case 1746:
#line 7822 "sql_yacc.yy"
    {
      LEX *lex = Lex;

      if (lex->sphead)
      {
        sp_head *sp = lex->sphead;

        if (!lex->var_list.is_empty())
        {
          /*
            We have assignment to user or system variable or
            option setting, so we should construct sp_instr_stmt
            for it.
          */
          LEX_STRING qbuff;
          sp_instr_stmt *i;

          if (!(i = new sp_instr_stmt(sp->instructions(), lex->spcont, lex)))
            YYABORT;

          if (lex->ptr - lex->tok_end > 1)
            qbuff.length = lex->ptr - sp->m_tmp_query;
          else
            qbuff.length = lex->tok_end - sp->m_tmp_query;

          if (!(qbuff.str = alloc_root(YYTHD->mem_root, qbuff.length + 5)))
            YYABORT;

          strmake(strmake(qbuff.str, "SET ", 4), (char *)sp->m_tmp_query, qbuff.length);
          qbuff.length += 4;
          i->m_query = qbuff;
          sp->add_instr(i);
        }
        lex->sphead->restore_lex(YYTHD);
      }
    }
    break;

    case 1747:
#line 7862 "sql_yacc.yy"
    {
    }
    break;

    case 1748:
#line 7863 "sql_yacc.yy"
    {
      yyval.var_type = OPT_GLOBAL;
    }
    break;

    case 1749:
#line 7864 "sql_yacc.yy"
    {
      yyval.var_type = OPT_SESSION;
    }
    break;

    case 1750:
#line 7865 "sql_yacc.yy"
    {
      yyval.var_type = OPT_SESSION;
    }
    break;

    case 1751:
#line 7869 "sql_yacc.yy"
    {
      yyval.num = OPT_DEFAULT;
    }
    break;

    case 1752:
#line 7870 "sql_yacc.yy"
    {
      Lex->one_shot_set = 1;
      yyval.num = OPT_SESSION;
    }
    break;

    case 1753:
#line 7874 "sql_yacc.yy"
    {
      yyval.var_type = OPT_SESSION;
    }
    break;

    case 1754:
#line 7875 "sql_yacc.yy"
    {
      yyval.var_type = OPT_GLOBAL;
    }
    break;

    case 1755:
#line 7876 "sql_yacc.yy"
    {
      yyval.var_type = OPT_SESSION;
    }
    break;

    case 1756:
#line 7877 "sql_yacc.yy"
    {
      yyval.var_type = OPT_SESSION;
    }
    break;

    case 1757:
#line 7881 "sql_yacc.yy"
    {
      yyval.var_type = OPT_DEFAULT;
    }
    break;

    case 1758:
#line 7882 "sql_yacc.yy"
    {
      yyval.var_type = OPT_GLOBAL;
    }
    break;

    case 1759:
#line 7883 "sql_yacc.yy"
    {
      yyval.var_type = OPT_SESSION;
    }
    break;

    case 1760:
#line 7884 "sql_yacc.yy"
    {
      yyval.var_type = OPT_SESSION;
    }
    break;

    case 1763:
#line 7893 "sql_yacc.yy"
    {
      LEX *lex = Lex;

      if (yyvsp[-2].variable.var == &trg_new_row_fake_var)
      {
        /* We are in trigger and assigning value to field of new row */
        Item *it;
        Item_trigger_field *trg_fld;
        sp_instr_set_trigger_field *sp_fld;
        LINT_INIT(sp_fld);
        if (yyvsp[-3].var_type)
        {
          yyerror(ER(ER_SYNTAX_ERROR));
          YYABORT;
        }
        if (yyvsp[0].item)
          it = yyvsp[0].item;
        else
        {
          /* QQ: Shouldn't this be field's default value ? */
          it = new Item_null();
        }

        if (!(trg_fld = new Item_trigger_field(Lex->current_context(), Item_trigger_field::NEW_ROW,
                                               yyvsp[-2].variable.base_name.str)) ||
            !(sp_fld = new sp_instr_set_trigger_field(lex->sphead->instructions(), lex->spcont, trg_fld, it, lex)))
          YYABORT;

        /*
          Let us add this item to list of all Item_trigger_field
          objects in trigger.
        */
        lex->trg_table_fields.link_in_list((byte *)trg_fld, (byte **)&trg_fld->next_trg_field);

        lex->sphead->add_instr(sp_fld);
      }
      else if (yyvsp[-2].variable.var)
      { /* System variable */
        if (yyvsp[-3].var_type)
          lex->option_type = yyvsp[-3].var_type;
        lex->var_list.push_back(
            new set_var(lex->option_type, yyvsp[-2].variable.var, &yyvsp[-2].variable.base_name, yyvsp[0].item));
      }
      else
      {
        /* An SP local variable */
        sp_pcontext *ctx = lex->spcont;
        sp_pvar_t *spv;
        sp_instr_set *sp_set;
        Item *it;
        if (yyvsp[-3].var_type)
        {
          yyerror(ER(ER_SYNTAX_ERROR));
          YYABORT;
        }

        spv = ctx->find_pvar(&yyvsp[-2].variable.base_name);

        if (yyvsp[0].item)
          it = yyvsp[0].item;
        else if (spv->dflt)
          it = spv->dflt;
        else
          it = new Item_null();
        sp_set = new sp_instr_set(lex->sphead->instructions(), ctx, spv->offset, it, spv->type, lex, TRUE);
        lex->sphead->add_instr(sp_set);
      }
    }
    break;

    case 1764:
#line 7969 "sql_yacc.yy"
    {
      LEX *lex = Lex;
      if (yyvsp[-4].var_type)
        lex->option_type = yyvsp[-4].var_type;
      lex->var_list.push_back(new set_var(lex->option_type, find_sys_var("tx_isolation"), &null_lex_str,
                                          new Item_int((int32)yyvsp[0].tx_isolation)));
    }
    break;

    case 1765:
#line 7982 "sql_yacc.yy"
    {
      Lex->var_list.push_back(new set_var_user(new Item_func_set_user_var(yyvsp[-2].lex_str, yyvsp[0].item)));
    }
    break;

    case 1766:
#line 7986 "sql_yacc.yy"
    {
      LEX *lex = Lex;
      lex->var_list.push_back(
          new set_var(yyvsp[-3].var_type, yyvsp[-2].variable.var, &yyvsp[-2].variable.base_name, yyvsp[0].item));
    }
    break;

    case 1767:
#line 7991 "sql_yacc.yy"
    {
      THD *thd = YYTHD;
      LEX *lex = Lex;
      yyvsp[0].charset = yyvsp[0].charset ? yyvsp[0].charset : global_system_variables.character_set_client;
      lex->var_list.push_back(
          new set_var_collation_client(yyvsp[0].charset, thd->variables.collation_database, yyvsp[0].charset));
    }
    break;

    case 1768:
#line 7998 "sql_yacc.yy"
    {
      LEX *lex = Lex;
      sp_pcontext *spc = lex->spcont;
      LEX_STRING names;

      names.str = (char *)"names";
      names.length = 5;
      if (spc && spc->find_pvar(&names))
        my_error(ER_SP_BAD_VAR_SHADOW, MYF(0), names.str);
      YYABORT;
    }
    break;

    case 1769:
#line 8010 "sql_yacc.yy"
    {
      LEX *lex = Lex;
      yyvsp[-1].charset = yyvsp[-1].charset ? yyvsp[-1].charset : global_system_variables.character_set_client;
      yyvsp[0].charset = yyvsp[0].charset ? yyvsp[0].charset : yyvsp[-1].charset;
      if (!my_charset_same(yyvsp[-1].charset, yyvsp[0].charset))
      {
        my_error(ER_COLLATION_CHARSET_MISMATCH, MYF(0), yyvsp[0].charset->name, yyvsp[-1].charset->csname);
        YYABORT;
      }
      lex->var_list.push_back(new set_var_collation_client(yyvsp[0].charset, yyvsp[0].charset, yyvsp[0].charset));
    }
    break;

    case 1770:
#line 8023 "sql_yacc.yy"
    {
      THD *thd = YYTHD;
      LEX_USER *user;
      LEX *lex = Lex;
      sp_pcontext *spc = lex->spcont;
      LEX_STRING pw;

      pw.str = (char *)"password";
      pw.length = 8;
      if (spc && spc->find_pvar(&pw))
      {
        my_error(ER_SP_BAD_VAR_SHADOW, MYF(0), pw.str);
        YYABORT;
      }
      if (!(user = (LEX_USER *)thd->alloc(sizeof(LEX_USER))))
        YYABORT;
      user->host = null_lex_str;
      user->user.str = thd->security_ctx->priv_user;
      thd->lex->var_list.push_back(new set_var_password(user, yyvsp[0].simple_string));
    }
    break;

    case 1771:
#line 8044 "sql_yacc.yy"
    {
      Lex->var_list.push_back(new set_var_password(yyvsp[-2].lex_user, yyvsp[0].simple_string));
    }
    break;

    case 1772:
#line 8051 "sql_yacc.yy"
    {
      LEX *lex = Lex;
      sp_pcontext *spc = lex->spcont;
      sp_pvar_t *spv;

      /* We have to lookup here since local vars can shadow sysvars */
      if (!spc || !(spv = spc->find_pvar(&yyvsp[0].lex_str)))
      {
        /* Not an SP local variable */
        sys_var *tmp = find_sys_var(yyvsp[0].lex_str.str, yyvsp[0].lex_str.length);
        if (!tmp)
          YYABORT;
        yyval.variable.var = tmp;
        yyval.variable.base_name = null_lex_str;
        /*
          If this is time_zone variable we should open time zone
          describing tables
        */
        if (tmp == &sys_time_zone && lex->add_time_zone_tables_to_query_tables(YYTHD))
          YYABORT;
        else if (spc && tmp == &sys_autocommit)
        {
          /*
            We don't allow setting AUTOCOMMIT from a stored function
            or trigger.
          */
          lex->sphead->m_flags |= sp_head::HAS_SET_AUTOCOMMIT_STMT;
        }
      }
      else
      {
        /* An SP local variable */
        yyval.variable.var = NULL;
        yyval.variable.base_name = yyvsp[0].lex_str;
      }
    }
    break;

    case 1773:
#line 8089 "sql_yacc.yy"
    {
      LEX *lex = Lex;
      if (check_reserved_words(&yyvsp[-2].lex_str))
      {
        yyerror(ER(ER_SYNTAX_ERROR));
        YYABORT;
      }
      if (lex->sphead && lex->sphead->m_type == TYPE_ENUM_TRIGGER &&
          (!my_strcasecmp(system_charset_info, yyvsp[-2].lex_str.str, "NEW") ||
           !my_strcasecmp(system_charset_info, yyvsp[-2].lex_str.str, "OLD")))
      {
        if (yyvsp[-2].lex_str.str[0] == 'O' || yyvsp[-2].lex_str.str[0] == 'o')
        {
          my_error(ER_TRG_CANT_CHANGE_ROW, MYF(0), "OLD", "");
          YYABORT;
        }
        if (lex->trg_chistics.event == TRG_EVENT_DELETE)
        {
          my_error(ER_TRG_NO_SUCH_ROW_IN_TRG, MYF(0), "NEW", "on DELETE");
          YYABORT;
        }
        if (lex->trg_chistics.action_time == TRG_ACTION_AFTER)
        {
          my_error(ER_TRG_CANT_CHANGE_ROW, MYF(0), "NEW", "after ");
          YYABORT;
        }
        /* This special combination will denote field of NEW row */
        yyval.variable.var = &trg_new_row_fake_var;
        yyval.variable.base_name = yyvsp[0].lex_str;
      }
      else
      {
        sys_var *tmp = find_sys_var(yyvsp[0].lex_str.str, yyvsp[0].lex_str.length);
        if (!tmp)
          YYABORT;
        if (!tmp->is_struct())
          my_error(ER_VARIABLE_IS_NOT_STRUCT, MYF(0), yyvsp[0].lex_str.str);
        yyval.variable.var = tmp;
        yyval.variable.base_name = yyvsp[-2].lex_str;
      }
    }
    break;

    case 1774:
#line 8132 "sql_yacc.yy"
    {
      sys_var *tmp = find_sys_var(yyvsp[0].lex_str.str, yyvsp[0].lex_str.length);
      if (!tmp)
        YYABORT;
      if (!tmp->is_struct())
        my_error(ER_VARIABLE_IS_NOT_STRUCT, MYF(0), yyvsp[0].lex_str.str);
      yyval.variable.var = tmp;
      yyval.variable.base_name.str = (char *)"default";
      yyval.variable.base_name.length = 7;
    }
    break;

    case 1775:
#line 8145 "sql_yacc.yy"
    {
      yyval.tx_isolation = ISO_READ_UNCOMMITTED;
    }
    break;

    case 1776:
#line 8146 "sql_yacc.yy"
    {
      yyval.tx_isolation = ISO_READ_COMMITTED;
    }
    break;

    case 1777:
#line 8147 "sql_yacc.yy"
    {
      yyval.tx_isolation = ISO_REPEATABLE_READ;
    }
    break;

    case 1778:
#line 8148 "sql_yacc.yy"
    {
      yyval.tx_isolation = ISO_SERIALIZABLE;
    }
    break;

    case 1779:
#line 8152 "sql_yacc.yy"
    {
      yyval.simple_string = yyvsp[0].lex_str.str;
    }
    break;

    case 1780:
#line 8154 "sql_yacc.yy"
    {
      yyval.simple_string = yyvsp[-1].lex_str.length ? YYTHD->variables.old_passwords
                                                           ? Item_func_old_password::alloc(YYTHD, yyvsp[-1].lex_str.str)
                                                           : Item_func_password::alloc(YYTHD, yyvsp[-1].lex_str.str)
                                                     : yyvsp[-1].lex_str.str;
    }
    break;

    case 1781:
#line 8161 "sql_yacc.yy"
    {
      yyval.simple_string = yyvsp[-1].lex_str.length ? Item_func_old_password::alloc(YYTHD, yyvsp[-1].lex_str.str)
                                                     : yyvsp[-1].lex_str.str;
    }
    break;

    case 1782:
#line 8169 "sql_yacc.yy"
    {
      yyval.item = yyvsp[0].item;
    }
    break;

    case 1783:
#line 8170 "sql_yacc.yy"
    {
      yyval.item = 0;
    }
    break;

    case 1784:
#line 8171 "sql_yacc.yy"
    {
      yyval.item = new Item_string("ON", 2, system_charset_info);
    }
    break;

    case 1785:
#line 8172 "sql_yacc.yy"
    {
      yyval.item = new Item_string("ALL", 3, system_charset_info);
    }
    break;

    case 1786:
#line 8173 "sql_yacc.yy"
    {
      yyval.item = new Item_string("binary", 6, system_charset_info);
    }
    break;

    case 1787:
#line 8181 "sql_yacc.yy"
    {
      LEX *lex = Lex;

      if (lex->sphead)
      {
        my_error(ER_SP_BADSTATEMENT, MYF(0), "LOCK");
        YYABORT;
      }
      lex->sql_command = SQLCOM_LOCK_TABLES;
    }
    break;

    case 1788:
#line 8192 "sql_yacc.yy"
    {
    }
    break;

    case 1793:
#line 8205 "sql_yacc.yy"
    {
      if (!Select->add_table_to_list(YYTHD, yyvsp[-2].table, yyvsp[-1].lex_str_ptr, 0, (thr_lock_type)yyvsp[0].num))
        YYABORT;
    }
    break;

    case 1794:
#line 8212 "sql_yacc.yy"
    {
      yyval.num = TL_READ_NO_INSERT;
    }
    break;

    case 1795:
#line 8213 "sql_yacc.yy"
    {
      yyval.num = YYTHD->update_lock_default;
    }
    break;

    case 1796:
#line 8214 "sql_yacc.yy"
    {
      yyval.num = TL_WRITE_LOW_PRIORITY;
    }
    break;

    case 1797:
#line 8215 "sql_yacc.yy"
    {
      yyval.num = TL_READ;
    }
    break;

    case 1798:
#line 8220 "sql_yacc.yy"
    {
      LEX *lex = Lex;

      if (lex->sphead)
      {
        my_error(ER_SP_BADSTATEMENT, MYF(0), "UNLOCK");
        YYABORT;
      }
      lex->sql_command = SQLCOM_UNLOCK_TABLES;
    }
    break;

    case 1799:
#line 8231 "sql_yacc.yy"
    {
    }
    break;

    case 1800:
#line 8241 "sql_yacc.yy"
    {
      LEX *lex = Lex;
      if (lex->sphead)
      {
        my_error(ER_SP_BADSTATEMENT, MYF(0), "HANDLER");
        YYABORT;
      }
      lex->sql_command = SQLCOM_HA_OPEN;
      if (!lex->current_select->add_table_to_list(lex->thd, yyvsp[-2].table, yyvsp[0].lex_str_ptr, 0))
        YYABORT;
    }
    break;

    case 1801:
#line 8253 "sql_yacc.yy"
    {
      LEX *lex = Lex;
      if (lex->sphead)
      {
        my_error(ER_SP_BADSTATEMENT, MYF(0), "HANDLER");
        YYABORT;
      }
      lex->sql_command = SQLCOM_HA_CLOSE;
      if (!lex->current_select->add_table_to_list(lex->thd, yyvsp[-1].table, 0, 0))
        YYABORT;
    }
    break;

    case 1802:
#line 8265 "sql_yacc.yy"
    {
      LEX *lex = Lex;
      if (lex->sphead)
      {
        my_error(ER_SP_BADSTATEMENT, MYF(0), "HANDLER");
        YYABORT;
      }
      lex->sql_command = SQLCOM_HA_READ;
      lex->ha_rkey_mode = HA_READ_KEY_EXACT; /* Avoid purify warnings */
      lex->current_select->select_limit = new Item_int((int32)1);
      lex->current_select->offset_limit = 0;
      if (!lex->current_select->add_table_to_list(lex->thd, yyvsp[-1].table, 0, 0))
        YYABORT;
    }
    break;

    case 1803:
#line 8279 "sql_yacc.yy"
    {
    }
    break;

    case 1804:
#line 8283 "sql_yacc.yy"
    {
      Lex->ident = null_lex_str;
    }
    break;

    case 1805:
#line 8284 "sql_yacc.yy"
    {
      Lex->ident = yyvsp[-1].lex_str;
    }
    break;

    case 1806:
#line 8288 "sql_yacc.yy"
    {
      Lex->ha_read_mode = RFIRST;
    }
    break;

    case 1807:
#line 8289 "sql_yacc.yy"
    {
      Lex->ha_read_mode = RNEXT;
    }
    break;

    case 1808:
#line 8293 "sql_yacc.yy"
    {
      Lex->ha_read_mode = RFIRST;
    }
    break;

    case 1809:
#line 8294 "sql_yacc.yy"
    {
      Lex->ha_read_mode = RNEXT;
    }
    break;

    case 1810:
#line 8295 "sql_yacc.yy"
    {
      Lex->ha_read_mode = RPREV;
    }
    break;

    case 1811:
#line 8296 "sql_yacc.yy"
    {
      Lex->ha_read_mode = RLAST;
    }
    break;

    case 1812:
#line 8298 "sql_yacc.yy"
    {
      LEX *lex = Lex;
      lex->ha_read_mode = RKEY;
      lex->ha_rkey_mode = yyvsp[0].ha_rkey_mode;
      if (!(lex->insert_list = new List_item))
        YYABORT;
    }
    break;

    case 1813:
#line 8304 "sql_yacc.yy"
    {
    }
    break;

    case 1814:
#line 8308 "sql_yacc.yy"
    {
      yyval.ha_rkey_mode = HA_READ_KEY_EXACT;
    }
    break;

    case 1815:
#line 8309 "sql_yacc.yy"
    {
      yyval.ha_rkey_mode = HA_READ_KEY_OR_NEXT;
    }
    break;

    case 1816:
#line 8310 "sql_yacc.yy"
    {
      yyval.ha_rkey_mode = HA_READ_KEY_OR_PREV;
    }
    break;

    case 1817:
#line 8311 "sql_yacc.yy"
    {
      yyval.ha_rkey_mode = HA_READ_AFTER_KEY;
    }
    break;

    case 1818:
#line 8312 "sql_yacc.yy"
    {
      yyval.ha_rkey_mode = HA_READ_BEFORE_KEY;
    }
    break;

    case 1819:
#line 8319 "sql_yacc.yy"
    {
    }
    break;

    case 1820:
#line 8324 "sql_yacc.yy"
    {
      LEX *lex = Lex;
      lex->sql_command = SQLCOM_REVOKE;
      lex->type = 0;
    }
    break;

    case 1821:
#line 8331 "sql_yacc.yy"
    {
      LEX *lex = Lex;
      if (lex->columns.elements)
      {
        yyerror(ER(ER_SYNTAX_ERROR));
        YYABORT;
      }
      lex->sql_command = SQLCOM_REVOKE;
      lex->type = TYPE_ENUM_FUNCTION;
    }
    break;

    case 1822:
#line 8344 "sql_yacc.yy"
    {
      LEX *lex = Lex;
      if (lex->columns.elements)
      {
        yyerror(ER(ER_SYNTAX_ERROR));
        YYABORT;
      }
      lex->sql_command = SQLCOM_REVOKE;
      lex->type = TYPE_ENUM_PROCEDURE;
    }
    break;

    case 1823:
#line 8356 "sql_yacc.yy"
    {
      Lex->sql_command = SQLCOM_REVOKE_ALL;
    }
    break;

    case 1824:
#line 8363 "sql_yacc.yy"
    {
    }
    break;

    case 1825:
#line 8369 "sql_yacc.yy"
    {
      LEX *lex = Lex;
      lex->sql_command = SQLCOM_GRANT;
      lex->type = 0;
    }
    break;

    case 1826:
#line 8377 "sql_yacc.yy"
    {
      LEX *lex = Lex;
      if (lex->columns.elements)
      {
        yyerror(ER(ER_SYNTAX_ERROR));
        YYABORT;
      }
      lex->sql_command = SQLCOM_GRANT;
      lex->type = TYPE_ENUM_FUNCTION;
    }
    break;

    case 1827:
#line 8390 "sql_yacc.yy"
    {
      LEX *lex = Lex;
      if (lex->columns.elements)
      {
        yyerror(ER(ER_SYNTAX_ERROR));
        YYABORT;
      }
      lex->sql_command = SQLCOM_GRANT;
      lex->type = TYPE_ENUM_PROCEDURE;
    }
    break;

    case 1830:
#line 8407 "sql_yacc.yy"
    {
    }
    break;

    case 1831:
#line 8409 "sql_yacc.yy"
    {
      Lex->all_privileges = 1;
      Lex->grant = GLOBAL_ACLS;
    }
    break;

    case 1836:
#line 8425 "sql_yacc.yy"
    {
      Lex->which_columns = SELECT_ACL;
    }
    break;

    case 1837:
#line 8425 "sql_yacc.yy"
    {
    }
    break;

    case 1838:
#line 8426 "sql_yacc.yy"
    {
      Lex->which_columns = INSERT_ACL;
    }
    break;

    case 1839:
#line 8426 "sql_yacc.yy"
    {
    }
    break;

    case 1840:
#line 8427 "sql_yacc.yy"
    {
      Lex->which_columns = UPDATE_ACL;
    }
    break;

    case 1841:
#line 8427 "sql_yacc.yy"
    {
    }
    break;

    case 1842:
#line 8428 "sql_yacc.yy"
    {
      Lex->which_columns = REFERENCES_ACL;
    }
    break;

    case 1843:
#line 8428 "sql_yacc.yy"
    {
    }
    break;

    case 1844:
#line 8429 "sql_yacc.yy"
    {
      Lex->grant |= DELETE_ACL;
    }
    break;

    case 1845:
#line 8430 "sql_yacc.yy"
    {
    }
    break;

    case 1846:
#line 8431 "sql_yacc.yy"
    {
      Lex->grant |= INDEX_ACL;
    }
    break;

    case 1847:
#line 8432 "sql_yacc.yy"
    {
      Lex->grant |= ALTER_ACL;
    }
    break;

    case 1848:
#line 8433 "sql_yacc.yy"
    {
      Lex->grant |= CREATE_ACL;
    }
    break;

    case 1849:
#line 8434 "sql_yacc.yy"
    {
      Lex->grant |= DROP_ACL;
    }
    break;

    case 1850:
#line 8435 "sql_yacc.yy"
    {
      Lex->grant |= EXECUTE_ACL;
    }
    break;

    case 1851:
#line 8436 "sql_yacc.yy"
    {
      Lex->grant |= RELOAD_ACL;
    }
    break;

    case 1852:
#line 8437 "sql_yacc.yy"
    {
      Lex->grant |= SHUTDOWN_ACL;
    }
    break;

    case 1853:
#line 8438 "sql_yacc.yy"
    {
      Lex->grant |= PROCESS_ACL;
    }
    break;

    case 1854:
#line 8439 "sql_yacc.yy"
    {
      Lex->grant |= FILE_ACL;
    }
    break;

    case 1855:
#line 8440 "sql_yacc.yy"
    {
      Lex->grant |= GRANT_ACL;
    }
    break;

    case 1856:
#line 8441 "sql_yacc.yy"
    {
      Lex->grant |= SHOW_DB_ACL;
    }
    break;

    case 1857:
#line 8442 "sql_yacc.yy"
    {
      Lex->grant |= SUPER_ACL;
    }
    break;

    case 1858:
#line 8443 "sql_yacc.yy"
    {
      Lex->grant |= CREATE_TMP_ACL;
    }
    break;

    case 1859:
#line 8444 "sql_yacc.yy"
    {
      Lex->grant |= LOCK_TABLES_ACL;
    }
    break;

    case 1860:
#line 8445 "sql_yacc.yy"
    {
      Lex->grant |= REPL_SLAVE_ACL;
    }
    break;

    case 1861:
#line 8446 "sql_yacc.yy"
    {
      Lex->grant |= REPL_CLIENT_ACL;
    }
    break;

    case 1862:
#line 8447 "sql_yacc.yy"
    {
      Lex->grant |= CREATE_VIEW_ACL;
    }
    break;

    case 1863:
#line 8448 "sql_yacc.yy"
    {
      Lex->grant |= SHOW_VIEW_ACL;
    }
    break;

    case 1864:
#line 8449 "sql_yacc.yy"
    {
      Lex->grant |= CREATE_PROC_ACL;
    }
    break;

    case 1865:
#line 8450 "sql_yacc.yy"
    {
      Lex->grant |= ALTER_PROC_ACL;
    }
    break;

    case 1866:
#line 8451 "sql_yacc.yy"
    {
      Lex->grant |= CREATE_USER_ACL;
    }
    break;

    case 1867:
#line 8456 "sql_yacc.yy"
    {
    }
    break;

    case 1868:
#line 8457 "sql_yacc.yy"
    {
    }
    break;

    case 1871:
#line 8467 "sql_yacc.yy"
    {
      LEX *lex = Lex;
      if (lex->x509_subject)
      {
        my_error(ER_DUP_ARGUMENT, MYF(0), "SUBJECT");
        YYABORT;
      }
      lex->x509_subject = yyvsp[0].lex_str.str;
    }
    break;

    case 1872:
#line 8477 "sql_yacc.yy"
    {
      LEX *lex = Lex;
      if (lex->x509_issuer)
      {
        my_error(ER_DUP_ARGUMENT, MYF(0), "ISSUER");
        YYABORT;
      }
      lex->x509_issuer = yyvsp[0].lex_str.str;
    }
    break;

    case 1873:
#line 8487 "sql_yacc.yy"
    {
      LEX *lex = Lex;
      if (lex->ssl_cipher)
      {
        my_error(ER_DUP_ARGUMENT, MYF(0), "CIPHER");
        YYABORT;
      }
      lex->ssl_cipher = yyvsp[0].lex_str.str;
    }
    break;

    case 1874:
#line 8500 "sql_yacc.yy"
    {
      LEX *lex = Lex;
      lex->current_select->db = lex->thd->db;
      if (lex->grant == GLOBAL_ACLS)
        lex->grant = DB_ACLS & ~GRANT_ACL;
      else if (lex->columns.elements)
      {
        my_message(ER_ILLEGAL_GRANT_FOR_TABLE, ER(ER_ILLEGAL_GRANT_FOR_TABLE), MYF(0));
        YYABORT;
      }
    }
    break;

    case 1875:
#line 8513 "sql_yacc.yy"
    {
      LEX *lex = Lex;
      lex->current_select->db = yyvsp[-2].lex_str.str;
      if (lex->grant == GLOBAL_ACLS)
        lex->grant = DB_ACLS & ~GRANT_ACL;
      else if (lex->columns.elements)
      {
        my_message(ER_ILLEGAL_GRANT_FOR_TABLE, ER(ER_ILLEGAL_GRANT_FOR_TABLE), MYF(0));
        YYABORT;
      }
    }
    break;

    case 1876:
#line 8526 "sql_yacc.yy"
    {
      LEX *lex = Lex;
      lex->current_select->db = NULL;
      if (lex->grant == GLOBAL_ACLS)
        lex->grant = GLOBAL_ACLS & ~GRANT_ACL;
      else if (lex->columns.elements)
      {
        my_message(ER_ILLEGAL_GRANT_FOR_TABLE, ER(ER_ILLEGAL_GRANT_FOR_TABLE), MYF(0));
        YYABORT;
      }
    }
    break;

    case 1877:
#line 8539 "sql_yacc.yy"
    {
      LEX *lex = Lex;
      if (!lex->current_select->add_table_to_list(lex->thd, yyvsp[0].table, NULL, 0))
        YYABORT;
      if (lex->grant == GLOBAL_ACLS)
        lex->grant = TABLE_ACLS & ~GRANT_ACL;
    }
    break;

    case 1878:
#line 8550 "sql_yacc.yy"
    {
      if (Lex->users_list.push_back(yyvsp[0].lex_user))
        YYABORT;
    }
    break;

    case 1879:
#line 8552 "sql_yacc.yy"
    {
      if (Lex->users_list.push_back(yyvsp[0].lex_user))
        YYABORT;
    }
    break;

    case 1880:
#line 8560 "sql_yacc.yy"
    {
      if (Lex->users_list.push_back(yyvsp[0].lex_user))
        YYABORT;
    }
    break;

    case 1881:
#line 8562 "sql_yacc.yy"
    {
      if (Lex->users_list.push_back(yyvsp[0].lex_user))
        YYABORT;
    }
    break;

    case 1882:
#line 8571 "sql_yacc.yy"
    {
      yyval.lex_user = yyvsp[-3].lex_user;
      yyvsp[-3].lex_user->password = yyvsp[0].lex_str;
      if (yyvsp[0].lex_str.length)
      {
        if (YYTHD->variables.old_passwords)
        {
          char *buff = (char *)YYTHD->alloc(SCRAMBLED_PASSWORD_CHAR_LENGTH_323 + 1);
          if (buff)
            make_scrambled_password_323(buff, yyvsp[0].lex_str.str);
          yyvsp[-3].lex_user->password.str = buff;
          yyvsp[-3].lex_user->password.length = SCRAMBLED_PASSWORD_CHAR_LENGTH_323;
        }
        else
        {
          char *buff = (char *)YYTHD->alloc(SCRAMBLED_PASSWORD_CHAR_LENGTH + 1);
          if (buff)
            make_scrambled_password(buff, yyvsp[0].lex_str.str);
          yyvsp[-3].lex_user->password.str = buff;
          yyvsp[-3].lex_user->password.length = SCRAMBLED_PASSWORD_CHAR_LENGTH;
        }
      }
    }
    break;

    case 1883:
#line 8596 "sql_yacc.yy"
    {
      yyval.lex_user = yyvsp[-4].lex_user;
      yyvsp[-4].lex_user->password = yyvsp[0].lex_str;
    }
    break;

    case 1884:
#line 8598 "sql_yacc.yy"
    {
      yyval.lex_user = yyvsp[0].lex_user;
      yyvsp[0].lex_user->password = null_lex_str;
    }
    break;

    case 1885:
#line 8604 "sql_yacc.yy"
    {
      LEX *lex = Lex;
      lex->grant |= lex->which_columns;
    }
    break;

    case 1889:
#line 8616 "sql_yacc.yy"
    {
      String *new_str = new (YYTHD->mem_root)
          String((const char *)yyvsp[0].lex_str.str, yyvsp[0].lex_str.length, system_charset_info);
      List_iterator<LEX_COLUMN> iter(Lex->columns);
      class LEX_COLUMN *point;
      LEX *lex = Lex;
      while ((point = iter++))
      {
        if (!my_strcasecmp(system_charset_info, point->column.ptr(), new_str->ptr()))
          break;
      }
      lex->grant_tot_col |= lex->which_columns;
      if (point)
        point->rights |= lex->which_columns;
      else
        lex->columns.push_back(new LEX_COLUMN(*new_str, lex->which_columns));
    }
    break;

    case 1891:
#line 8638 "sql_yacc.yy"
    {
      Lex->ssl_type = SSL_TYPE_SPECIFIED;
    }
    break;

    case 1892:
#line 8642 "sql_yacc.yy"
    {
      Lex->ssl_type = SSL_TYPE_ANY;
    }
    break;

    case 1893:
#line 8646 "sql_yacc.yy"
    {
      Lex->ssl_type = SSL_TYPE_X509;
    }
    break;

    case 1894:
#line 8650 "sql_yacc.yy"
    {
      Lex->ssl_type = SSL_TYPE_NONE;
    }
    break;

    case 1895:
#line 8656 "sql_yacc.yy"
    {
    }
    break;

    case 1897:
#line 8660 "sql_yacc.yy"
    {
    }
    break;

    case 1898:
#line 8661 "sql_yacc.yy"
    {
    }
    break;

    case 1899:
#line 8665 "sql_yacc.yy"
    {
      Lex->grant |= GRANT_ACL;
    }
    break;

    case 1900:
#line 8667 "sql_yacc.yy"
    {
      LEX *lex = Lex;
      lex->mqh.questions = yyvsp[0].ulong_num;
      lex->mqh.specified_limits |= USER_RESOURCES::QUERIES_PER_HOUR;
    }
    break;

    case 1901:
#line 8673 "sql_yacc.yy"
    {
      LEX *lex = Lex;
      lex->mqh.updates = yyvsp[0].ulong_num;
      lex->mqh.specified_limits |= USER_RESOURCES::UPDATES_PER_HOUR;
    }
    break;

    case 1902:
#line 8679 "sql_yacc.yy"
    {
      LEX *lex = Lex;
      lex->mqh.conn_per_hour = yyvsp[0].ulong_num;
      lex->mqh.specified_limits |= USER_RESOURCES::CONNECTIONS_PER_HOUR;
    }
    break;

    case 1903:
#line 8685 "sql_yacc.yy"
    {
      LEX *lex = Lex;
      lex->mqh.user_conn = yyvsp[0].ulong_num;
      lex->mqh.specified_limits |= USER_RESOURCES::USER_CONNECTIONS;
    }
    break;

    case 1904:
#line 8694 "sql_yacc.yy"
    {
      LEX *lex = Lex;
      if (lex->sphead && lex->sphead->m_type != TYPE_ENUM_PROCEDURE)
      {
        my_error(ER_COMMIT_NOT_ALLOWED_IN_SF_OR_TRG, MYF(0));
        YYABORT;
      }
      lex->sql_command = SQLCOM_BEGIN;
      lex->start_transaction_opt = 0;
    }
    break;

    case 1905:
#line 8704 "sql_yacc.yy"
    {
    }
    break;

    case 1906:
#line 8708 "sql_yacc.yy"
    {
    }
    break;

    case 1907:
#line 8709 "sql_yacc.yy"
    {
    }
    break;

    case 1908:
#line 8713 "sql_yacc.yy"
    {
      yyval.num = (YYTHD->variables.completion_type == 1);
    }
    break;

    case 1909:
#line 8714 "sql_yacc.yy"
    {
      yyval.num = 0;
    }
    break;

    case 1910:
#line 8715 "sql_yacc.yy"
    {
      yyval.num = 1;
    }
    break;

    case 1911:
#line 8719 "sql_yacc.yy"
    {
      yyval.num = (YYTHD->variables.completion_type == 2);
    }
    break;

    case 1912:
#line 8720 "sql_yacc.yy"
    {
      yyval.num = 1;
    }
    break;

    case 1913:
#line 8721 "sql_yacc.yy"
    {
      yyval.num = 0;
    }
    break;

    case 1914:
#line 8725 "sql_yacc.yy"
    {
    }
    break;

    case 1915:
#line 8726 "sql_yacc.yy"
    {
    }
    break;

    case 1916:
#line 8731 "sql_yacc.yy"
    {
      LEX *lex = Lex;
      if (lex->sphead && lex->sphead->m_type != TYPE_ENUM_PROCEDURE)
      {
        my_error(ER_COMMIT_NOT_ALLOWED_IN_SF_OR_TRG, MYF(0));
        YYABORT;
      }
      lex->sql_command = SQLCOM_COMMIT;
      lex->tx_chain = yyvsp[-1].num;
      lex->tx_release = yyvsp[0].num;
    }
    break;

    case 1917:
#line 8746 "sql_yacc.yy"
    {
      LEX *lex = Lex;
      if (lex->sphead && lex->sphead->m_type != TYPE_ENUM_PROCEDURE)
      {
        my_error(ER_COMMIT_NOT_ALLOWED_IN_SF_OR_TRG, MYF(0));
        YYABORT;
      }
      lex->sql_command = SQLCOM_ROLLBACK;
      lex->tx_chain = yyvsp[-1].num;
      lex->tx_release = yyvsp[0].num;
    }
    break;

    case 1918:
#line 8759 "sql_yacc.yy"
    {
      LEX *lex = Lex;
      lex->sql_command = SQLCOM_ROLLBACK_TO_SAVEPOINT;
      lex->ident = yyvsp[0].lex_str;
    }
    break;

    case 1919:
#line 8768 "sql_yacc.yy"
    {
      LEX *lex = Lex;
      lex->sql_command = SQLCOM_SAVEPOINT;
      lex->ident = yyvsp[0].lex_str;
    }
    break;

    case 1920:
#line 8777 "sql_yacc.yy"
    {
      LEX *lex = Lex;
      lex->sql_command = SQLCOM_RELEASE_SAVEPOINT;
      lex->ident = yyvsp[0].lex_str;
    }
    break;

    case 1921:
#line 8790 "sql_yacc.yy"
    {
    }
    break;

    case 1923:
#line 8796 "sql_yacc.yy"
    {
      LEX *lex = Lex;
      if (lex->exchange)
      {
        /* Only the last SELECT can have  INTO...... */
        my_error(ER_WRONG_USAGE, MYF(0), "UNION", "INTO");
        YYABORT;
      }
      if (lex->current_select->linkage == GLOBAL_OPTIONS_TYPE)
      {
        yyerror(ER(ER_SYNTAX_ERROR));
        YYABORT;
      }
      if (mysql_new_select(lex, 0))
        YYABORT;
      mysql_init_select(lex);
      lex->current_select->linkage = UNION_TYPE;
      if (yyvsp[0].num) /* UNION DISTINCT - remember position */
        lex->current_select->master_unit()->union_distinct = lex->current_select;
    }
    break;

    case 1924:
#line 8818 "sql_yacc.yy"
    {
      /*
        Remove from the name resolution context stack the context of the
        last select in the union.
      */
      Lex->pop_context();
    }
    break;

    case 1925:
#line 8828 "sql_yacc.yy"
    {
      yyval.num = 0;
    }
    break;

    case 1926:
#line 8829 "sql_yacc.yy"
    {
      yyval.num = 1;
    }
    break;

    case 1927:
#line 8830 "sql_yacc.yy"
    {
      yyval.num = 1;
    }
    break;

    case 1928:
#line 8834 "sql_yacc.yy"
    {
      THD *thd = YYTHD;
      LEX *lex = thd->lex;
      DBUG_ASSERT(lex->current_select->linkage != GLOBAL_OPTIONS_TYPE);
      SELECT_LEX *sel = lex->current_select;
      SELECT_LEX_UNIT *unit = sel->master_unit();
      SELECT_LEX *fake = unit->fake_select_lex;
      if (fake)
      {
        unit->global_parameters = fake;
        fake->no_table_names_allowed = 1;
        lex->current_select = fake;
      }
      thd->where = "global ORDER clause";
    }
    break;

    case 1929:
#line 8850 "sql_yacc.yy"
    {
      THD *thd = YYTHD;
      thd->lex->current_select->no_table_names_allowed = 0;
      thd->where = "";
    }
    break;

    case 1932:
#line 8863 "sql_yacc.yy"
    {
      yyval.num = 1;
    }
    break;

    case 1933:
#line 8864 "sql_yacc.yy"
    {
      yyval.num = 1;
    }
    break;

    case 1934:
#line 8865 "sql_yacc.yy"
    {
      yyval.num = 0;
    }
    break;

    case 1935:
#line 8871 "sql_yacc.yy"
    {
      yyval.item = yyvsp[-1].item;
    }
    break;

    case 1936:
#line 8877 "sql_yacc.yy"
    {
      yyval.item = new Item_singlerow_subselect(Lex->current_select->master_unit()->first_select());
    }
    break;

    case 1937:
#line 8885 "sql_yacc.yy"
    {
      yyval.item = yyvsp[-1].item;
    }
    break;

    case 1938:
#line 8891 "sql_yacc.yy"
    {
      yyval.item = new Item_exists_subselect(Lex->current_select->master_unit()->first_select());
    }
    break;

    case 1939:
#line 8899 "sql_yacc.yy"
    {
      yyval.select_lex = yyvsp[-1].select_lex;
    }
    break;

    case 1940:
#line 8905 "sql_yacc.yy"
    {
      yyval.select_lex = Lex->current_select->master_unit()->first_select();
    }
    break;

    case 1941:
#line 8911 "sql_yacc.yy"
    {
      LEX *lex = Lex;
      if (((int)lex->sql_command >= (int)SQLCOM_HA_OPEN && lex->sql_command <= (int)SQLCOM_HA_READ) ||
          lex->sql_command == (int)SQLCOM_KILL)
      {
        yyerror(ER(ER_SYNTAX_ERROR));
        YYABORT;
      }
      if (mysql_new_select(Lex, 1))
        YYABORT;
    }
    break;

    case 1942:
#line 8926 "sql_yacc.yy"
    {
      LEX *lex = Lex;
      lex->pop_context();
      lex->current_select = lex->current_select->return_after_parsing();
    }
    break;

    case 1943:
#line 8933 "sql_yacc.yy"
    {
    }
    break;

    case 1945:
#line 8939 "sql_yacc.yy"
    {
      Lex->view_list.push_back((LEX_STRING *)sql_memdup(&yyvsp[0].lex_str, sizeof(LEX_STRING)));
    }
    break;

    case 1946:
#line 8944 "sql_yacc.yy"
    {
      Lex->view_list.push_back((LEX_STRING *)sql_memdup(&yyvsp[0].lex_str, sizeof(LEX_STRING)));
    }
    break;

    case 1947:
#line 8951 "sql_yacc.yy"
    {
      Lex->create_view_mode = VIEW_CREATE_NEW;
    }
    break;

    case 1948:
#line 8952 "sql_yacc.yy"
    {
      Lex->create_view_mode = VIEW_CREATE_OR_REPLACE;
    }
    break;

    case 1949:
#line 8957 "sql_yacc.yy"
    {
      Lex->create_view_algorithm = VIEW_ALGORITHM_UNDEFINED;
    }
    break;

    case 1950:
#line 8959 "sql_yacc.yy"
    {
      Lex->create_view_algorithm = VIEW_ALGORITHM_UNDEFINED;
    }
    break;

    case 1951:
#line 8961 "sql_yacc.yy"
    {
      Lex->create_view_algorithm = VIEW_ALGORITHM_MERGE;
    }
    break;

    case 1952:
#line 8963 "sql_yacc.yy"
    {
      Lex->create_view_algorithm = VIEW_ALGORITHM_TMPTABLE;
    }
    break;

    case 1953:
#line 8968 "sql_yacc.yy"
    {
      THD *thd = YYTHD;
      if (!(thd->lex->create_view_definer = (LEX_USER *)thd->alloc(sizeof(st_lex_user))))
        YYABORT;
      if (default_view_definer(thd->security_ctx, thd->lex->create_view_definer))
        YYABORT;
    }
    break;

    case 1954:
#line 8978 "sql_yacc.yy"
    {
      THD *thd = YYTHD;
      if (!(thd->lex->create_view_definer = (LEX_USER *)thd->alloc(sizeof(st_lex_user))))
        YYABORT;
      if (default_view_definer(thd->security_ctx, thd->lex->create_view_definer))
        YYABORT;
    }
    break;

    case 1955:
#line 8988 "sql_yacc.yy"
    {
      THD *thd = YYTHD;
      st_lex_user *view_user;
      if (!(thd->lex->create_view_definer = view_user = (LEX_USER *)thd->alloc(sizeof(st_lex_user))))
        YYABORT;
      view_user->user = yyvsp[-2].lex_str;
      view_user->host = yyvsp[0].lex_str;
      if (strchr(view_user->host.str, wild_many) || strchr(view_user->host.str, wild_one))
      {
        my_error(ER_NO_VIEW_USER, MYF(0));
        YYABORT;
      }
    }
    break;

    case 1956:
#line 9006 "sql_yacc.yy"
    {
      Lex->create_view_suid = TRUE;
    }
    break;

    case 1957:
#line 9009 "sql_yacc.yy"
    {
      Lex->create_view_suid = TRUE;
    }
    break;

    case 1958:
#line 9011 "sql_yacc.yy"
    {
      Lex->create_view_suid = FALSE;
    }
    break;

    case 1959:
#line 9016 "sql_yacc.yy"
    {
      Lex->create_view_check = VIEW_CHECK_NONE;
    }
    break;

    case 1960:
#line 9018 "sql_yacc.yy"
    {
      Lex->create_view_check = VIEW_CHECK_CASCADED;
    }
    break;

    case 1961:
#line 9020 "sql_yacc.yy"
    {
      Lex->create_view_check = VIEW_CHECK_CASCADED;
    }
    break;

    case 1962:
#line 9022 "sql_yacc.yy"
    {
      Lex->create_view_check = VIEW_CHECK_LOCAL;
    }
    break;

    case 1963:
#line 9026 "sql_yacc.yy"
    {
      Lex->sql_command = SQLCOM_XA_START;
    }
    break;

    case 1964:
#line 9030 "sql_yacc.yy"
    {
      Lex->sql_command = SQLCOM_XA_END;
    }
    break;

    case 1965:
#line 9034 "sql_yacc.yy"
    {
      Lex->sql_command = SQLCOM_XA_PREPARE;
    }
    break;

    case 1966:
#line 9038 "sql_yacc.yy"
    {
      Lex->sql_command = SQLCOM_XA_COMMIT;
    }
    break;

    case 1967:
#line 9042 "sql_yacc.yy"
    {
      Lex->sql_command = SQLCOM_XA_ROLLBACK;
    }
    break;

    case 1968:
#line 9046 "sql_yacc.yy"
    {
      Lex->sql_command = SQLCOM_XA_RECOVER;
    }
    break;

    case 1969:
#line 9052 "sql_yacc.yy"
    {
      YYERROR_UNLESS(yyvsp[0].string->length() <= MAXGTRIDSIZE);
      if (!(Lex->xid = (XID *)YYTHD->alloc(sizeof(XID))))
        YYABORT;
      Lex->xid->set(1L, yyvsp[0].string->ptr(), yyvsp[0].string->length(), 0, 0);
    }
    break;

    case 1970:
#line 9059 "sql_yacc.yy"
    {
      YYERROR_UNLESS(yyvsp[-2].string->length() <= MAXGTRIDSIZE && yyvsp[0].string->length() <= MAXBQUALSIZE);
      if (!(Lex->xid = (XID *)YYTHD->alloc(sizeof(XID))))
        YYABORT;
      Lex->xid->set(1L, yyvsp[-2].string->ptr(), yyvsp[-2].string->length(), yyvsp[0].string->ptr(),
                    yyvsp[0].string->length());
    }
    break;

    case 1971:
#line 9066 "sql_yacc.yy"
    {
      YYERROR_UNLESS(yyvsp[-4].string->length() <= MAXGTRIDSIZE && yyvsp[-2].string->length() <= MAXBQUALSIZE);
      if (!(Lex->xid = (XID *)YYTHD->alloc(sizeof(XID))))
        YYABORT;
      Lex->xid->set(yyvsp[0].ulong_num, yyvsp[-4].string->ptr(), yyvsp[-4].string->length(), yyvsp[-2].string->ptr(),
                    yyvsp[-2].string->length());
    }
    break;

    case 1972:
#line 9074 "sql_yacc.yy"
    {
    }
    break;

    case 1973:
#line 9075 "sql_yacc.yy"
    {
    }
    break;

    case 1974:
#line 9079 "sql_yacc.yy"
    {
      Lex->xa_opt = XA_NONE;
    }
    break;

    case 1975:
#line 9080 "sql_yacc.yy"
    {
      Lex->xa_opt = XA_JOIN;
    }
    break;

    case 1976:
#line 9081 "sql_yacc.yy"
    {
      Lex->xa_opt = XA_RESUME;
    }
    break;

    case 1977:
#line 9085 "sql_yacc.yy"
    {
      Lex->xa_opt = XA_NONE;
    }
    break;

    case 1978:
#line 9086 "sql_yacc.yy"
    {
      Lex->xa_opt = XA_ONE_PHASE;
    }
    break;

    case 1979:
#line 9090 "sql_yacc.yy"
    {
      Lex->xa_opt = XA_NONE;
    }
    break;

    case 1980:
#line 9091 "sql_yacc.yy"
    {
      Lex->xa_opt = XA_SUSPEND;
    }
    break;

    case 1982:
#line 9096 "sql_yacc.yy"
    {
    }
    break;

    case 1983:
#line 9097 "sql_yacc.yy"
    {
      Lex->xa_opt = XA_FOR_MIGRATE;
    }
    break;
  }

/* Line 1000 of yacc.c.  */
#line 26409 "sql_yacc.cc"

  yyvsp -= yylen;
  yyssp -= yylen;

  YY_STACK_PRINT(yyss, yyssp);

  *++yyvsp = yyval;

  /* Now `shift' the result of the reduction.  Determine what state
     that goes to, based on the state we popped back to and the rule
     number reduced by.  */

  yyn = yyr1[yyn];

  yystate = yypgoto[yyn - YYNTOKENS] + *yyssp;
  if (0 <= yystate && yystate <= YYLAST && yycheck[yystate] == *yyssp)
    yystate = yytable[yystate];
  else
    yystate = yydefgoto[yyn - YYNTOKENS];

  goto yynewstate;

/*------------------------------------.
| yyerrlab -- here on detecting error |
`------------------------------------*/
yyerrlab:
  /* If not already recovering from an error, report this error.  */
  if (!yyerrstatus)
  {
    ++yynerrs;
#if YYERROR_VERBOSE
    yyn = yypact[yystate];

    if (YYPACT_NINF < yyn && yyn < YYLAST)
    {
      YYSIZE_T yysize = 0;
      int yytype = YYTRANSLATE(yychar);
      const char *yyprefix;
      char *yymsg;
      int yyx;

      /* Start YYX at -YYN if negative to avoid negative indexes in
         YYCHECK.  */
      int yyxbegin = yyn < 0 ? -yyn : 0;

      /* Stay within bounds of both yycheck and yytname.  */
      int yychecklim = YYLAST - yyn;
      int yyxend = yychecklim < YYNTOKENS ? yychecklim : YYNTOKENS;
      int yycount = 0;

      yyprefix = ", expecting ";
      for (yyx = yyxbegin; yyx < yyxend; ++yyx)
        if (yycheck[yyx + yyn] == yyx && yyx != YYTERROR)
        {
          yysize += yystrlen(yyprefix) + yystrlen(yytname[yyx]);
          yycount += 1;
          if (yycount == 5)
          {
            yysize = 0;
            break;
          }
        }
      yysize += (sizeof("syntax error, unexpected ") + yystrlen(yytname[yytype]));
      yymsg = (char *)YYSTACK_ALLOC(yysize);
      if (yymsg != 0)
      {
        char *yyp = yystpcpy(yymsg, "syntax error, unexpected ");
        yyp = yystpcpy(yyp, yytname[yytype]);

        if (yycount < 5)
        {
          yyprefix = ", expecting ";
          for (yyx = yyxbegin; yyx < yyxend; ++yyx)
            if (yycheck[yyx + yyn] == yyx && yyx != YYTERROR)
            {
              yyp = yystpcpy(yyp, yyprefix);
              yyp = yystpcpy(yyp, yytname[yyx]);
              yyprefix = " or ";
            }
        }
        yyerror(yymsg);
        YYSTACK_FREE(yymsg);
      }
      else
        yyerror("syntax error; also virtual memory exhausted");
    }
    else
#endif /* YYERROR_VERBOSE */
      yyerror("syntax error");
  }

  if (yyerrstatus == 3)
  {
    /* If just tried and failed to reuse lookahead token after an
       error, discard it.  */

    if (yychar <= YYEOF)
    {
      /* If at end of input, pop the error token,
         then the rest of the stack, then return failure.  */
      if (yychar == YYEOF)
        for (;;)
        {
          YYPOPSTACK;
          if (yyssp == yyss)
            YYABORT;
          YYDSYMPRINTF("Error: popping", yystos[*yyssp], yyvsp, yylsp);
          yydestruct(yystos[*yyssp], yyvsp);
        }
    }
    else
    {
      YYDSYMPRINTF("Error: discarding", yytoken, &yylval, &yylloc);
      yydestruct(yytoken, &yylval);
      yychar = YYEMPTY;
    }
  }

  /* Else will try to reuse lookahead token after shifting the error
     token.  */
  goto yyerrlab1;

/*---------------------------------------------------.
| yyerrorlab -- error raised explicitly by YYERROR.  |
`---------------------------------------------------*/
yyerrorlab:

#ifdef __GNUC__
  /* Pacify GCC when the user code never invokes YYERROR and the label
     yyerrorlab therefore never appears in user code.  */
  if (0)
    goto yyerrorlab;
#endif

  yyvsp -= yylen;
  yyssp -= yylen;
  yystate = *yyssp;
  goto yyerrlab1;

/*-------------------------------------------------------------.
| yyerrlab1 -- common code for both syntax error and YYERROR.  |
`-------------------------------------------------------------*/
yyerrlab1:
  yyerrstatus = 3; /* Each real token shifted decrements this.  */

  for (;;)
  {
    yyn = yypact[yystate];
    if (yyn != YYPACT_NINF)
    {
      yyn += YYTERROR;
      if (0 <= yyn && yyn <= YYLAST && yycheck[yyn] == YYTERROR)
      {
        yyn = yytable[yyn];
        if (0 < yyn)
          break;
      }
    }

    /* Pop the current state because it cannot handle the error token.  */
    if (yyssp == yyss)
      YYABORT;

    YYDSYMPRINTF("Error: popping", yystos[*yyssp], yyvsp, yylsp);
    yydestruct(yystos[yystate], yyvsp);
    YYPOPSTACK;
    yystate = *yyssp;
    YY_STACK_PRINT(yyss, yyssp);
  }

  if (yyn == YYFINAL)
    YYACCEPT;

  YYDPRINTF((stderr, "Shifting error token, "));

  *++yyvsp = yylval;

  yystate = yyn;
  goto yynewstate;

/*-------------------------------------.
| yyacceptlab -- YYACCEPT comes here.  |
`-------------------------------------*/
yyacceptlab:
  yyresult = 0;
  goto yyreturn;

/*-----------------------------------.
| yyabortlab -- YYABORT comes here.  |
`-----------------------------------*/
yyabortlab:
  yyresult = 1;
  goto yyreturn;

#ifndef yyoverflow
/*----------------------------------------------.
| yyoverflowlab -- parser overflow comes here.  |
`----------------------------------------------*/
yyoverflowlab:
  yyerror("parser stack overflow");
  yyresult = 2;
  /* Fall through.  */
#endif

yyreturn:
#ifndef yyoverflow
  if (yyss != yyssa)
    YYSTACK_FREE(yyss);
#endif
  return yyresult;
}
